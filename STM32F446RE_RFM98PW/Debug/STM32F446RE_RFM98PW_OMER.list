
STM32F446RE_RFM98PW_OMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f8  080040f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004100  08004100  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000070  08004178  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004178  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cefc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f65  00000000  00000000  0002cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021215  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caac  00000000  00000000  00051375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c87ca  00000000  00000000  0005de21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001265eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  00126640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fe0 	.word	0x08003fe0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003fe0 	.word	0x08003fe0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005a8:	b4b0      	push	{r4, r5, r7}
 80005aa:	b08f      	sub	sp, #60	; 0x3c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80005b0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80005b6:	2307      	movs	r3, #7
 80005b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80005bc:	2307      	movs	r3, #7
 80005be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80005c8:	23ff      	movs	r3, #255	; 0xff
 80005ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80005d4:	2308      	movs	r3, #8
 80005d6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	461d      	mov	r5, r3
 80005dc:	f107 040c 	add.w	r4, r7, #12
 80005e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	373c      	adds	r7, #60	; 0x3c
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bcb0      	pop	{r4, r5, r7}
 80005f8:	4770      	bx	lr

080005fa <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6898      	ldr	r0, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	899b      	ldrh	r3, [r3, #12]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f001 fa37 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 ff96 	bl	8001544 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6898      	ldr	r0, [r3, #8]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	899b      	ldrh	r3, [r3, #12]
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	f001 fa2c 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 ff8b 	bl	8001544 <HAL_Delay>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000640:	2101      	movs	r1, #1
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f99f 	bl	8000986 <LoRa_read>
 8000648:	4603      	mov	r3, r0
 800064a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d107      	bne.n	8000666 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	f023 0307 	bic.w	r3, r3, #7
 800065c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	e03e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10c      	bne.n	8000686 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800066c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	b25b      	sxtb	r3, r3
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	b25b      	sxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	e02e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d10c      	bne.n	80006a6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800068c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	b25b      	sxtb	r3, r3
 8000696:	f043 0303 	orr.w	r3, r3, #3
 800069a:	b25b      	sxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2203      	movs	r2, #3
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	e01e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d10c      	bne.n	80006c6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006b0:	f023 0307 	bic.w	r3, r3, #7
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0305 	orr.w	r3, r3, #5
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2205      	movs	r2, #5
 80006c2:	61da      	str	r2, [r3, #28]
 80006c4:	e00e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d10b      	bne.n	80006e4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006d0:	f023 0307 	bic.w	r3, r3, #7
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	f043 0306 	orr.w	r3, r3, #6
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2206      	movs	r2, #6
 80006e2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2101      	movs	r1, #1
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f965 	bl	80009ba <LoRa_write>
	//HAL_Delay(10);
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4613      	mov	r3, r2
 8000706:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f001 f9b4 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6998      	ldr	r0, [r3, #24]
 800071c:	88fa      	ldrh	r2, [r7, #6]
 800071e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	f001 ffb9 	bl	800269a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000728:	bf00      	nop
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fba2 	bl	8002e78 <HAL_SPI_GetState>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1f7      	bne.n	800072a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6998      	ldr	r0, [r3, #24]
 800073e:	8b3a      	ldrh	r2, [r7, #24]
 8000740:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	f002 f8e4 	bl	8002912 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800074a:	bf00      	nop
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fb91 	bl	8002e78 <HAL_SPI_GetState>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d1f7      	bne.n	800074c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	f001 f98a 	bl	8001a80 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4613      	mov	r3, r2
 8000782:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	889b      	ldrh	r3, [r3, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	f001 f976 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6998      	ldr	r0, [r3, #24]
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	f001 ff7b 	bl	800269a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007a4:	bf00      	nop
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fb64 	bl	8002e78 <HAL_SPI_GetState>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1f7      	bne.n	80007a6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6998      	ldr	r0, [r3, #24]
 80007ba:	8b3a      	ldrh	r2, [r7, #24]
 80007bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c0:	6839      	ldr	r1, [r7, #0]
 80007c2:	f001 ff6a 	bl	800269a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007c6:	bf00      	nop
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fb53 	bl	8002e78 <HAL_SPI_GetState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d1f7      	bne.n	80007c8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 f94c 	bl	8001a80 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	04db      	lsls	r3, r3, #19
 80007fe:	115b      	asrs	r3, r3, #5
 8000800:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	461a      	mov	r2, r3
 800080c:	2106      	movs	r1, #6
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f8d3 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fe95 	bl	8001544 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	461a      	mov	r2, r3
 8000824:	2107      	movs	r1, #7
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f8c7 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 800082c:	2005      	movs	r0, #5
 800082e:	f000 fe89 	bl	8001544 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	461a      	mov	r2, r3
 800083a:	2108      	movs	r1, #8
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f8bc 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 8000842:	2005      	movs	r0, #5
 8000844:	f000 fe7e 	bl	8001544 <HAL_Delay>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b0c      	cmp	r3, #12
 800085e:	dd01      	ble.n	8000864 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000860:	230c      	movs	r3, #12
 8000862:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b06      	cmp	r3, #6
 8000868:	dc01      	bgt.n	800086e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800086a:	2307      	movs	r3, #7
 800086c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800086e:	211e      	movs	r1, #30
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f888 	bl	8000986 <LoRa_read>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f000 fe62 	bl	8001544 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	b2da      	uxtb	r2, r3
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4413      	add	r3, r2
 8000892:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	461a      	mov	r2, r3
 8000898:	211e      	movs	r1, #30
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f88d 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fe4f 	bl	8001544 <HAL_Delay>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	461a      	mov	r2, r3
 80008be:	2109      	movs	r1, #9
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f87a 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f000 fe3c 	bl	8001544 <HAL_Delay>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
	// bits 7-6 unused
	// bit 5 OcpOn: Enables over current protection for PA (0 disabled, 1 enabled)
	// bits 4-0 OcpTrim: Trimming of OCP:
											// datasheet sayfa 95

	if (current < 45)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b2c      	cmp	r3, #44	; 0x2c
 80008e8:	d801      	bhi.n	80008ee <LoRa_setOCP+0x1a>
		current = 45;
 80008ea:	232d      	movs	r3, #45	; 0x2d
 80008ec:	70fb      	strb	r3, [r7, #3]

	if (current > 240)
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2bf0      	cmp	r3, #240	; 0xf0
 80008f2:	d901      	bls.n	80008f8 <LoRa_setOCP+0x24>
	{
		current = 240;
 80008f4:	23f0      	movs	r3, #240	; 0xf0
 80008f6:	70fb      	strb	r3, [r7, #3]
	}

	if (current <= 120)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b78      	cmp	r3, #120	; 0x78
 80008fc:	d809      	bhi.n	8000912 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45) / 5;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	3b2d      	subs	r3, #45	; 0x2d
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <LoRa_setOCP+0x78>)
 8000904:	fb82 1203 	smull	r1, r2, r2, r3
 8000908:	1052      	asrs	r2, r2, #1
 800090a:	17db      	asrs	r3, r3, #31
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00b      	b.n	800092a <LoRa_setOCP+0x56>

	else if (current <= 240)
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	2bf0      	cmp	r3, #240	; 0xf0
 8000916:	d808      	bhi.n	800092a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30) / 10;
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	331e      	adds	r3, #30
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoRa_setOCP+0x78>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1092      	asrs	r2, r2, #2
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3320      	adds	r3, #32
 800092e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	461a      	mov	r2, r3
 8000934:	210b      	movs	r1, #11
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f83f 	bl	80009ba <LoRa_write>
	//LoRa_write(_LoRa, RegOcp, 0x0B);

	HAL_Delay(10);
 800093c:	200a      	movs	r0, #10
 800093e:	f000 fe01 	bl	8001544 <HAL_Delay>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	66666667 	.word	0x66666667

08000950 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000958:	211e      	movs	r1, #30
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f813 	bl	8000986 <LoRa_read>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	f043 0307 	orr.w	r3, r3, #7
 800096a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	461a      	mov	r2, r3
 8000970:	211e      	movs	r1, #30
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f821 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fde3 	bl	8001544 <HAL_Delay>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af02      	add	r7, sp, #8
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800099c:	f107 030f 	add.w	r3, r7, #15
 80009a0:	f107 010e 	add.w	r1, r7, #14
 80009a4:	2201      	movs	r2, #1
 80009a6:	9200      	str	r2, [sp, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fea4 	bl	80006f8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af02      	add	r7, sp, #8
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70fb      	strb	r3, [r7, #3]
 80009c6:	4613      	mov	r3, r2
 80009c8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009d4:	78bb      	ldrb	r3, [r7, #2]
 80009d6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009d8:	f107 030f 	add.w	r3, r7, #15
 80009dc:	f107 010e 	add.w	r1, r7, #14
 80009e0:	2201      	movs	r2, #1
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	2201      	movs	r2, #1
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fec4 	bl	8000774 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	461a      	mov	r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	72fb      	strb	r3, [r7, #11]
 8000a04:	4613      	mov	r3, r2
 8000a06:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	889b      	ldrh	r3, [r3, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f001 f82f 	bl	8001a80 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6998      	ldr	r0, [r3, #24]
 8000a26:	f107 0117 	add.w	r1, r7, #23
 8000a2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f001 fe33 	bl	800269a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a34:	bf00      	nop
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fa1c 	bl	8002e78 <HAL_SPI_GetState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d1f7      	bne.n	8000a36 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6998      	ldr	r0, [r3, #24]
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f001 fe21 	bl	800269a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a58:	bf00      	nop
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fa0a 	bl	8002e78 <HAL_SPI_GetState>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d1f7      	bne.n	8000a5a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	f001 f803 	bl	8001a80 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]

	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	// RegOcp
	int mode = _LoRa->current_mode;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fdbd 	bl	8000636 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000abc:	210e      	movs	r1, #14
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff61 	bl	8000986 <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	461a      	mov	r2, r3
 8000acc:	210d      	movs	r1, #13
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff ff73 	bl	80009ba <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2122      	movs	r1, #34	; 0x22
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff ff6d 	bl	80009ba <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff84 	bl	80009f4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000aec:	2103      	movs	r1, #3
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fda1 	bl	8000636 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000af4:	2112      	movs	r1, #18
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ff45 	bl	8000986 <LoRa_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000b00:	7cfb      	ldrb	r3, [r7, #19]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00a      	beq.n	8000b20 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	2112      	movs	r1, #18
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff53 	bl	80009ba <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000b14:	6979      	ldr	r1, [r7, #20]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fd8d 	bl	8000636 <LoRa_gotoMode>
			return 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e00f      	b.n	8000b40 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	80bb      	strh	r3, [r7, #4]
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000b2c:	6979      	ldr	r1, [r7, #20]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff fd81 	bl	8000636 <LoRa_gotoMode>
				return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e003      	b.n	8000b40 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fd03 	bl	8001544 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000b3e:	e7d9      	b.n	8000af4 <LoRa_transmit+0x5c>
	}

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff96 	bl	8000a82 <LoRa_isvalid>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 8093 	beq.w	8000c84 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fd68 	bl	8000636 <LoRa_gotoMode>
			HAL_Delay(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f000 fcec 	bl	8001544 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff09 	bl	8000986 <LoRa_read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f000 fce3 	bl	8001544 <HAL_Delay>
			data = read | 0x80;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b84:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff14 	bl	80009ba <LoRa_write>
			HAL_Delay(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f000 fcd6 	bl	8001544 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fe26 	bl	80007f0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fe7e 	bl	80008ae <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe8a 	bl	80008d4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bc0:	2223      	movs	r2, #35	; 0x23
 8000bc2:	210c      	movs	r1, #12
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fef8 	bl	80009ba <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fec0 	bl	8000950 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fe39 	bl	8000850 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	211f      	movs	r1, #31
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fee9 	bl	80009ba <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	461a      	mov	r2, r3
 8000c08:	211d      	movs	r1, #29
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fed5 	bl	80009ba <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fecb 	bl	80009ba <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2121      	movs	r1, #33	; 0x21
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fec3 	bl	80009ba <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fea5 	bl	8000986 <LoRa_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c46:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff feb3 	bl	80009ba <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c54:	2101      	movs	r1, #1
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fced 	bl	8000636 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 fc6e 	bl	8001544 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c68:	2142      	movs	r1, #66	; 0x42
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe8b 	bl	8000986 <LoRa_read>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d101      	bne.n	8000c7e <LoRa_init+0x136>
				return LORA_OK;
 8000c7a:	23c8      	movs	r3, #200	; 0xc8
 8000c7c:	e004      	b.n	8000c88 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c82:	e001      	b.n	8000c88 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c84:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a27      	ldr	r2, [pc, #156]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_GPIO_Init+0x110>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4822      	ldr	r0, [pc, #136]	; (8000da4 <MX_GPIO_Init+0x114>)
 8000d1c:	f000 feb0 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2103      	movs	r1, #3
 8000d24:	4820      	ldr	r0, [pc, #128]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000d26:	f000 feab 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_GPIO_Init+0x11c>)
 8000d42:	f000 fd09 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_GPIO_Init+0x114>)
 8000d5e:	f000 fcfb 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8000d62:	2303      	movs	r3, #3
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000d7a:	f000 fced 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000d94:	f000 fce0 	bl	8001758 <HAL_GPIO_Init>

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800

08000db0 <loRaBaslat>:
uint8_t Data[256];

uint16_t size_print;
uint8_t Data_print[256];
void loRaBaslat()
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8000db6:	4c3d      	ldr	r4, [pc, #244]	; (8000eac <loRaBaslat+0xfc>)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fbf4 	bl	80005a8 <newLoRa>
 8000dc0:	4625      	mov	r5, r4
 8000dc2:	463c      	mov	r4, r7
 8000dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dcc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_Delay(5);
 8000dd4:	2005      	movs	r0, #5
 8000dd6:	f000 fbb5 	bl	8001544 <HAL_Delay>

	myLoRa.hSPIx = &hspi2;
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <loRaBaslat+0xfc>)
 8000ddc:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <loRaBaslat+0x100>)
 8000dde:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port = NSS_GPIO_Port;
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <loRaBaslat+0xfc>)
 8000de2:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <loRaBaslat+0x104>)
 8000de4:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <loRaBaslat+0xfc>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <loRaBaslat+0xfc>)
 8000dee:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <loRaBaslat+0x104>)
 8000df0:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <loRaBaslat+0xfc>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <loRaBaslat+0xfc>)
 8000dfa:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <loRaBaslat+0x104>)
 8000dfc:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <loRaBaslat+0xfc>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	829a      	strh	r2, [r3, #20]
	HAL_Delay(5);
 8000e04:	2005      	movs	r0, #5
 8000e06:	f000 fb9d 	bl	8001544 <HAL_Delay>

	myLoRa.frequency = 434.0;             // default = 433 MHz
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <loRaBaslat+0xfc>)
 8000e0c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8000e10:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_9;            // default = SF_7
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <loRaBaslat+0xfc>)
 8000e14:	2209      	movs	r2, #9
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <loRaBaslat+0xfc>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_7;          // default = CR_4_5
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <loRaBaslat+0xfc>)
 8000e24:	2203      	movs	r2, #3
 8000e26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <loRaBaslat+0xfc>)
 8000e2c:	22ff      	movs	r2, #255	; 0xff
 8000e2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 250; // default = 100 mA
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <loRaBaslat+0xfc>)
 8000e34:	22fa      	movs	r2, #250	; 0xfa
 8000e36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 8;              // default = 8;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <loRaBaslat+0xfc>)
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_Delay(5);
 8000e40:	2005      	movs	r0, #5
 8000e42:	f000 fb7f 	bl	8001544 <HAL_Delay>

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2102      	movs	r1, #2
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <loRaBaslat+0x104>)
 8000e4c:	f000 fe18 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <loRaBaslat+0x104>)
 8000e56:	f000 fe13 	bl	8001a80 <HAL_GPIO_WritePin>

	LoRa_reset(&myLoRa);
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <loRaBaslat+0xfc>)
 8000e5c:	f7ff fbcd 	bl	80005fa <LoRa_reset>
	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <loRaBaslat+0xfc>)
 8000e62:	f7ff fe71 	bl	8000b48 <LoRa_init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (LoRa_status == LORA_OK)
 8000e6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e6c:	2bc8      	cmp	r3, #200	; 0xc8
 8000e6e:	d104      	bne.n	8000e7a <loRaBaslat+0xca>
		printA("LoRa Kodu: LORA_OK\n", 64);
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <loRaBaslat+0x108>)
 8000e74:	f000 f846 	bl	8000f04 <printA>
 8000e78:	e011      	b.n	8000e9e <loRaBaslat+0xee>

	else if (LoRa_status == LORA_NOT_FOUND)
 8000e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e7c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000e80:	d104      	bne.n	8000e8c <loRaBaslat+0xdc>
		printA("LoRa Kodu: LORA_NOT_FOUND\n", 64);
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <loRaBaslat+0x10c>)
 8000e86:	f000 f83d 	bl	8000f04 <printA>
 8000e8a:	e008      	b.n	8000e9e <loRaBaslat+0xee>

	else if (LoRa_status == LORA_UNAVAILABLE)
 8000e8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e8e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d103      	bne.n	8000e9e <loRaBaslat+0xee>
		printA("LoRa Kodu: LORA_UNAVAILABLE\n", 64);
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <loRaBaslat+0x110>)
 8000e9a:	f000 f833 	bl	8000f04 <printA>

	HAL_Delay(15);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 fb50 	bl	8001544 <HAL_Delay>
}
 8000ea4:	bf00      	nop
 8000ea6:	3738      	adds	r7, #56	; 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000eac:	2000033c 	.word	0x2000033c
 8000eb0:	20000098 	.word	0x20000098
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	08003ff8 	.word	0x08003ff8
 8000ebc:	0800400c 	.word	0x0800400c
 8000ec0:	08004028 	.word	0x08004028

08000ec4 <loraGonder>:


void loraGonder(uint8_t* veri, uint16_t size)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
	uint8_t ret = LoRa_transmit(&myLoRa, (uint8_t*) veri, size, 300);
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <loraGonder+0x38>)
 8000edc:	f7ff fddc 	bl	8000a98 <LoRa_transmit>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]

	if (ret != 1)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d003      	beq.n	8000ef2 <loraGonder+0x2e>
		printA("LoRa Paketini Gonderirken Bir Sorun Oldu!\n", 64);
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <loraGonder+0x3c>)
 8000eee:	f000 f809 	bl	8000f04 <printA>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000033c 	.word	0x2000033c
 8000f00:	08004048 	.word	0x08004048

08000f04 <printA>:

void printA(char* str, uint16_t size)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0c2      	sub	sp, #264	; 0x108
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	6018      	str	r0, [r3, #0]
 8000f0e:	460a      	mov	r2, r1
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	801a      	strh	r2, [r3, #0]
	uint8_t Data[256];
	size = sprintf((char *) Data, str);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	f002 fc31 	bl	8003784 <siprintf>
 8000f22:	4602      	mov	r2, r0
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	f107 0108 	add.w	r1, r7, #8
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <printA+0x40>)
 8000f36:	f002 f92a 	bl	800318e <HAL_UART_Transmit>
}
 8000f3a:	bf00      	nop
 8000f3c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002f4 	.word	0x200002f4

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fa88 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f82e 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f7ff fe9c 	bl	8000c90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 f9e6 	bl	8001328 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f5c:	f000 f89c 	bl	8001098 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  loRaBaslat();
 8000f60:	f7ff ff26 	bl	8000db0 <loRaBaslat>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  size_print = sprintf((char *) Data_print," Yıldız Roket Takımı Haberleşme Testi 5 Şubat ");
 8000f64:	490d      	ldr	r1, [pc, #52]	; (8000f9c <main+0x54>)
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <main+0x58>)
 8000f68:	f002 fc0c 	bl	8003784 <siprintf>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <main+0x5c>)
 8000f72:	801a      	strh	r2, [r3, #0]
	  printA(Data_print, size_print);
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <main+0x5c>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <main+0x58>)
 8000f7c:	f7ff ffc2 	bl	8000f04 <printA>
	  loraGonder(Data_print, size_print);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x5c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <main+0x58>)
 8000f88:	f7ff ff9c 	bl	8000ec4 <loraGonder>
	  printA(Data,size);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <main+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <main+0x64>)
 8000f96:	f7ff ffb5 	bl	8000f04 <printA>
  {
 8000f9a:	e7e3      	b.n	8000f64 <main+0x1c>
 8000f9c:	08004074 	.word	0x08004074
 8000fa0:	200000f0 	.word	0x200000f0
 8000fa4:	20000338 	.word	0x20000338
 8000fa8:	200002f0 	.word	0x200002f0
 8000fac:	200001f0 	.word	0x200001f0

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fbd8 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <SystemClock_Config+0xd4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a29      	ldr	r2, [pc, #164]	; (8001084 <SystemClock_Config+0xd4>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <SystemClock_Config+0xd4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <SystemClock_Config+0xd8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <SystemClock_Config+0xd8>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <SystemClock_Config+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001024:	2310      	movs	r3, #16
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001028:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800102c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102e:	2304      	movs	r3, #4
 8001030:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f804 	bl	800204c <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800104a:	f000 f81f 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2102      	movs	r1, #2
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fd22 	bl	8001ab4 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001076:	f000 f809 	bl	800108c <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3750      	adds	r7, #80	; 0x50
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI2_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <MX_SPI2_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI2_Init+0x64>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI2_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI2_Init+0x64>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SPI2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI2_Init+0x64>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ea:	f001 fa4d 	bl	8002588 <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010f4:	f7ff ffca 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000098 	.word	0x20000098
 8001100:	40003800 	.word	0x40003800

08001104 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d15a      	bne.n	80011dc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117a:	2302      	movs	r3, #2
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800118a:	2307      	movs	r3, #7
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4815      	ldr	r0, [pc, #84]	; (80011ec <HAL_SPI_MspInit+0xe8>)
 8001196:	f000 fadf 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800119a:	2304      	movs	r3, #4
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011aa:	2305      	movs	r3, #5
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <HAL_SPI_MspInit+0xe8>)
 80011b6:	f000 facf 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011cc:	2305      	movs	r3, #5
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <HAL_SPI_MspInit+0xec>)
 80011d8:	f000 fabe 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40003800 	.word	0x40003800
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001232:	2007      	movs	r0, #7
 8001234:	f000 fa5c 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 f938 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f002 fa2a 	bl	8003720 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20020000 	.word	0x20020000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	2000008c 	.word	0x2000008c
 8001300:	20000380 	.word	0x20000380

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_USART2_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART2_UART_Init+0x4c>)
 8001360:	f001 fec8 	bl	80030f4 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f7ff fe8f 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002f4 	.word	0x200002f4
 8001378:	40004400 	.word	0x40004400

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12b      	bne.n	80013f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e6:	2307      	movs	r3, #7
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013f2:	f000 f9b1 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40004400 	.word	0x40004400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001428:	4c0b      	ldr	r4, [pc, #44]	; (8001458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001436:	f7ff ff65 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f002 f977 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff fd83 	bl	8000f48 <main>
  bx  lr    
 8001442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001450:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 8001454:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001458:	2000037c 	.word	0x2000037c

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f931 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff feae 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f93b 	bl	800173e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f911 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	20000368 	.word	0x20000368

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000368 	.word	0x20000368

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff47 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff5c 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffb0 	bl	80016ac <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e165      	b.n	8001a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8154 	bne.w	8001a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d005      	beq.n	80017aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d130      	bne.n	800180c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0201 	and.w	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b03      	cmp	r3, #3
 8001816:	d017      	beq.n	8001848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80ae 	beq.w	8001a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a5c      	ldr	r2, [pc, #368]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x308>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x30c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x216>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x310>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x212>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x314>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x20e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x318>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x20a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x31c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x206>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x320>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x202>
 8001956:	2306      	movs	r3, #6
 8001958:	e00c      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800195a:	2307      	movs	r3, #7
 800195c:	e00a      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800195e:	2305      	movs	r3, #5
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001962:	2304      	movs	r3, #4
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001972:	2300      	movs	r3, #0
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001984:	4935      	ldr	r1, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x304>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	f67f ae96 	bls.w	8001774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40021400 	.word	0x40021400
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0cc      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d90c      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d044      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e067      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4934      	ldr	r1, [pc, #208]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fcc2 	bl	800152c <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff fcbe 	bl	800152c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d20c      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f855 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc22 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023c00 	.word	0x40023c00
 8001c70:	40023800 	.word	0x40023800
 8001c74:	080040ac 	.word	0x080040ac
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	080040bc 	.word	0x080040bc

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffdc 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0b5b      	lsrs	r3, r3, #13
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	080040bc 	.word	0x080040bc

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cec:	b088      	sub	sp, #32
 8001cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d04:	4bce      	ldr	r3, [pc, #824]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	f200 818d 	bhi.w	800202c <HAL_RCC_GetSysClockFreq+0x344>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d4d 	.word	0x08001d4d
 8001d1c:	0800202d 	.word	0x0800202d
 8001d20:	0800202d 	.word	0x0800202d
 8001d24:	0800202d 	.word	0x0800202d
 8001d28:	08001d53 	.word	0x08001d53
 8001d2c:	0800202d 	.word	0x0800202d
 8001d30:	0800202d 	.word	0x0800202d
 8001d34:	0800202d 	.word	0x0800202d
 8001d38:	08001d59 	.word	0x08001d59
 8001d3c:	0800202d 	.word	0x0800202d
 8001d40:	0800202d 	.word	0x0800202d
 8001d44:	0800202d 	.word	0x0800202d
 8001d48:	08001ecd 	.word	0x08001ecd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4bbd      	ldr	r3, [pc, #756]	; (8002044 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d4e:	61bb      	str	r3, [r7, #24]
       break;
 8001d50:	e16f      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d52:	4bbd      	ldr	r3, [pc, #756]	; (8002048 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d54:	61bb      	str	r3, [r7, #24]
      break;
 8001d56:	e16c      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4bb9      	ldr	r3, [pc, #740]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d62:	4bb7      	ldr	r3, [pc, #732]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d053      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4bb4      	ldr	r3, [pc, #720]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	ea02 0400 	and.w	r4, r2, r0
 8001d86:	603c      	str	r4, [r7, #0]
 8001d88:	400b      	ands	r3, r1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	014b      	lsls	r3, r1, #5
 8001d9e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001da2:	0142      	lsls	r2, r0, #5
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	4623      	mov	r3, r4
 8001daa:	1ac0      	subs	r0, r0, r3
 8001dac:	462b      	mov	r3, r5
 8001dae:	eb61 0103 	sbc.w	r1, r1, r3
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	018b      	lsls	r3, r1, #6
 8001dbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dc0:	0182      	lsls	r2, r0, #6
 8001dc2:	1a12      	subs	r2, r2, r0
 8001dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc8:	f04f 0000 	mov.w	r0, #0
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	00d9      	lsls	r1, r3, #3
 8001dd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd6:	00d0      	lsls	r0, r2, #3
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4621      	mov	r1, r4
 8001dde:	1852      	adds	r2, r2, r1
 8001de0:	4629      	mov	r1, r5
 8001de2:	eb43 0101 	adc.w	r1, r3, r1
 8001de6:	460b      	mov	r3, r1
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0259      	lsls	r1, r3, #9
 8001df2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001df6:	0250      	lsls	r0, r2, #9
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	f7fe fa52 	bl	80002b0 <__aeabi_uldivmod>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4613      	mov	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e04c      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b8a      	ldr	r3, [pc, #552]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	ea02 0a00 	and.w	sl, r2, r0
 8001e2e:	ea03 0b01 	and.w	fp, r3, r1
 8001e32:	4650      	mov	r0, sl
 8001e34:	4659      	mov	r1, fp
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e44:	0142      	lsls	r2, r0, #5
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	ebb0 000a 	subs.w	r0, r0, sl
 8001e4e:	eb61 010b 	sbc.w	r1, r1, fp
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e60:	0182      	lsls	r2, r0, #6
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	eb63 0301 	sbc.w	r3, r3, r1
 8001e68:	f04f 0000 	mov.w	r0, #0
 8001e6c:	f04f 0100 	mov.w	r1, #0
 8001e70:	00d9      	lsls	r1, r3, #3
 8001e72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e76:	00d0      	lsls	r0, r2, #3
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	eb12 020a 	adds.w	r2, r2, sl
 8001e80:	eb43 030b 	adc.w	r3, r3, fp
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0299      	lsls	r1, r3, #10
 8001e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e92:	0290      	lsls	r0, r2, #10
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f7fe fa04 	bl	80002b0 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb0:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	61bb      	str	r3, [r7, #24]
      break;
 8001eca:	e0b2      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ed4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d04d      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	ea02 0800 	and.w	r8, r2, r0
 8001efa:	ea03 0901 	and.w	r9, r3, r1
 8001efe:	4640      	mov	r0, r8
 8001f00:	4649      	mov	r1, r9
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	014b      	lsls	r3, r1, #5
 8001f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f10:	0142      	lsls	r2, r0, #5
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	ebb0 0008 	subs.w	r0, r0, r8
 8001f1a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f2c:	0182      	lsls	r2, r0, #6
 8001f2e:	1a12      	subs	r2, r2, r0
 8001f30:	eb63 0301 	sbc.w	r3, r3, r1
 8001f34:	f04f 0000 	mov.w	r0, #0
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	00d9      	lsls	r1, r3, #3
 8001f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f42:	00d0      	lsls	r0, r2, #3
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	eb12 0208 	adds.w	r2, r2, r8
 8001f4c:	eb43 0309 	adc.w	r3, r3, r9
 8001f50:	f04f 0000 	mov.w	r0, #0
 8001f54:	f04f 0100 	mov.w	r1, #0
 8001f58:	0259      	lsls	r1, r3, #9
 8001f5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f5e:	0250      	lsls	r0, r2, #9
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f7fe f99e 	bl	80002b0 <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	e04a      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	461a      	mov	r2, r3
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	ea02 0400 	and.w	r4, r2, r0
 8001f96:	ea03 0501 	and.w	r5, r3, r1
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	014b      	lsls	r3, r1, #5
 8001fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fac:	0142      	lsls	r2, r0, #5
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	1b00      	subs	r0, r0, r4
 8001fb4:	eb61 0105 	sbc.w	r1, r1, r5
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	018b      	lsls	r3, r1, #6
 8001fc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fc6:	0182      	lsls	r2, r0, #6
 8001fc8:	1a12      	subs	r2, r2, r0
 8001fca:	eb63 0301 	sbc.w	r3, r3, r1
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	00d9      	lsls	r1, r3, #3
 8001fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fdc:	00d0      	lsls	r0, r2, #3
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	1912      	adds	r2, r2, r4
 8001fe4:	eb45 0303 	adc.w	r3, r5, r3
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	0299      	lsls	r1, r3, #10
 8001ff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ff6:	0290      	lsls	r0, r2, #10
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	461a      	mov	r2, r3
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	f7fe f952 	bl	80002b0 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_GetSysClockFreq+0x358>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0f1b      	lsrs	r3, r3, #28
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	61bb      	str	r3, [r7, #24]
      break;
 800202a:	e002      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetSysClockFreq+0x35c>)
 800202e:	61bb      	str	r3, [r7, #24]
      break;
 8002030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002032:	69bb      	ldr	r3, [r7, #24]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	00f42400 	.word	0x00f42400
 8002048:	007a1200 	.word	0x007a1200

0800204c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e28d      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8083 	beq.w	8002172 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800206c:	4b94      	ldr	r3, [pc, #592]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b04      	cmp	r3, #4
 8002076:	d019      	beq.n	80020ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002078:	4b91      	ldr	r3, [pc, #580]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002080:	2b08      	cmp	r3, #8
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002090:	d00c      	beq.n	80020ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d112      	bne.n	80020c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05b      	beq.n	8002170 <HAL_RCC_OscConfig+0x124>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d157      	bne.n	8002170 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e25a      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d106      	bne.n	80020dc <HAL_RCC_OscConfig+0x90>
 80020ce:	4b7c      	ldr	r3, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7b      	ldr	r2, [pc, #492]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xcc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0xb4>
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xcc>
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fa04 	bl	800152c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fa00 	bl	800152c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e21f      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xdc>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff f9f0 	bl	800152c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff f9ec 	bl	800152c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e20b      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x104>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06f      	beq.n	800225e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800217e:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d017      	beq.n	80021ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800218a:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x186>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1d3      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4937      	ldr	r1, [pc, #220]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_OscConfig+0x278>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f999 	bl	800152c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff f995 	bl	800152c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1b4      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4925      	ldr	r1, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x278>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f978 	bl	800152c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff f974 	bl	800152c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e193      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d036      	beq.n	80022d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff f958 	bl	800152c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff f954 	bl	800152c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e173      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x234>
 800229e:	e01b      	b.n	80022d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff f941 	bl	800152c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e00e      	b.n	80022cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f93d 	bl	800152c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d907      	bls.n	80022cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e15c      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	42470000 	.word	0x42470000
 80022c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b8a      	ldr	r3, [pc, #552]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ea      	bne.n	80022ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8097 	beq.w	8002414 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b83      	ldr	r3, [pc, #524]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a7e      	ldr	r2, [pc, #504]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b7c      	ldr	r3, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b79      	ldr	r3, [pc, #484]	; (80024fc <HAL_RCC_OscConfig+0x4b0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4b0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4b0>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff f8fd 	bl	800152c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7ff f8f9 	bl	800152c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e118      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b6c      	ldr	r3, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x4b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x31e>
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x358>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x340>
 8002372:	4b61      	ldr	r3, [pc, #388]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a60      	ldr	r2, [pc, #384]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a5d      	ldr	r2, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x358>
 800238c:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	; 0x70
 8002398:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800239e:	f023 0304 	bic.w	r3, r3, #4
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff f8be 	bl	800152c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff f8ba 	bl	800152c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0d7      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0ee      	beq.n	80023b4 <HAL_RCC_OscConfig+0x368>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff f8a8 	bl	800152c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff f8a4 	bl	800152c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0c1      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ee      	bne.n	80023e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ad 	beq.w	8002578 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d060      	beq.n	80024ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d145      	bne.n	80024be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_RCC_OscConfig+0x4b4>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff f878 	bl	800152c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff f874 	bl	800152c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e093      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	071b      	lsls	r3, r3, #28
 800248a:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x4b4>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff f849 	bl	800152c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff f845 	bl	800152c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e064      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x452>
 80024bc:	e05c      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x4b4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff f832 	bl	800152c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7ff f82e 	bl	800152c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04d      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x480>
 80024ea:	e045      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e040      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCC_OscConfig+0x538>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d030      	beq.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d129      	bne.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d122      	bne.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	4293      	cmp	r3, r2
 800253e:	d119      	bne.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d10f      	bne.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07b      	b.n	8002692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fd92 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	ea42 0103 	orr.w	r1, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0104 	and.w	r1, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0210 	and.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b088      	sub	sp, #32
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_SPI_Transmit+0x22>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e126      	b.n	800290a <HAL_SPI_Transmit+0x270>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c4:	f7fe ff32 	bl	800152c <HAL_GetTick>
 80026c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026de:	e10b      	b.n	80028f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_SPI_Transmit+0x52>
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026f0:	e102      	b.n	80028f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2203      	movs	r2, #3
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	d10f      	bne.n	800275a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002748:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002758:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d007      	beq.n	8002778 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002776:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002780:	d14b      	bne.n	800281a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_SPI_Transmit+0xf6>
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d13e      	bne.n	800280e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	1c9a      	adds	r2, r3, #2
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027b4:	e02b      	b.n	800280e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d112      	bne.n	80027ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	1c9a      	adds	r2, r3, #2
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80027e8:	e011      	b.n	800280e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ea:	f7fe fe9f 	bl	800152c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d803      	bhi.n	8002802 <HAL_SPI_Transmit+0x168>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d102      	bne.n	8002808 <HAL_SPI_Transmit+0x16e>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800280c:	e074      	b.n	80028f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ce      	bne.n	80027b6 <HAL_SPI_Transmit+0x11c>
 8002818:	e04c      	b.n	80028b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_Transmit+0x18e>
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d140      	bne.n	80028aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800284e:	e02c      	b.n	80028aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d113      	bne.n	8002886 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	86da      	strh	r2, [r3, #54]	; 0x36
 8002884:	e011      	b.n	80028aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002886:	f7fe fe51 	bl	800152c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d803      	bhi.n	800289e <HAL_SPI_Transmit+0x204>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d102      	bne.n	80028a4 <HAL_SPI_Transmit+0x20a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028a8:	e026      	b.n	80028f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1cd      	bne.n	8002850 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fbd9 	bl	8003070 <SPI_EndRxTxTransaction>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e000      	b.n	80028f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80028f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002908:	7ffb      	ldrb	r3, [r7, #31]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b088      	sub	sp, #32
 8002916:	af02      	add	r7, sp, #8
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292e:	d112      	bne.n	8002956 <HAL_SPI_Receive+0x44>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10e      	bne.n	8002956 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2204      	movs	r2, #4
 800293c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f8f1 	bl	8002b34 <HAL_SPI_TransmitReceive>
 8002952:	4603      	mov	r3, r0
 8002954:	e0ea      	b.n	8002b2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_SPI_Receive+0x52>
 8002960:	2302      	movs	r3, #2
 8002962:	e0e3      	b.n	8002b2c <HAL_SPI_Receive+0x21a>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296c:	f7fe fdde 	bl	800152c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002982:	e0ca      	b.n	8002b1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_Receive+0x7e>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002994:	e0c1      	b.n	8002b1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2204      	movs	r2, #4
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029dc:	d10f      	bne.n	80029fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d007      	beq.n	8002a1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d162      	bne.n	8002aea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a24:	e02e      	b.n	8002a84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d115      	bne.n	8002a60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f103 020c 	add.w	r2, r3, #12
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a5e:	e011      	b.n	8002a84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a60:	f7fe fd64 	bl	800152c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d803      	bhi.n	8002a78 <HAL_SPI_Receive+0x166>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d102      	bne.n	8002a7e <HAL_SPI_Receive+0x16c>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a82:	e04a      	b.n	8002b1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1cb      	bne.n	8002a26 <HAL_SPI_Receive+0x114>
 8002a8e:	e031      	b.n	8002af4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d113      	bne.n	8002ac6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	1c9a      	adds	r2, r3, #2
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ac4:	e011      	b.n	8002aea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ac6:	f7fe fd31 	bl	800152c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d803      	bhi.n	8002ade <HAL_SPI_Receive+0x1cc>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d102      	bne.n	8002ae4 <HAL_SPI_Receive+0x1d2>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ae8:	e017      	b.n	8002b1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1cd      	bne.n	8002a90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa53 	bl	8002fa4 <SPI_EndRxTransaction>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
 8002b16:	e000      	b.n	8002b1a <HAL_SPI_Receive+0x208>
  }

error :
 8002b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b42:	2301      	movs	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x26>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e18a      	b.n	8002e70 <HAL_SPI_TransmitReceive+0x33c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b62:	f7fe fce3 	bl	800152c <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d00f      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x70>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d107      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x68>
 8002b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d003      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ba2:	e15b      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x82>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x82>
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bbc:	e14e      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d003      	beq.n	8002bd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2205      	movs	r2, #5
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d007      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2e:	d178      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x10a>
 8002c38:	8b7b      	ldrh	r3, [r7, #26]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d166      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	1c9a      	adds	r2, r3, #2
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c62:	e053      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d11b      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x176>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d016      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x176>
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d113      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d119      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x1b8>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d014      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cec:	f7fe fc1e 	bl	800152c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d807      	bhi.n	8002d0c <HAL_SPI_TransmitReceive+0x1d8>
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d003      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d0a:	e0a7      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1a6      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x130>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1a1      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x130>
 8002d20:	e07c      	b.n	8002e1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_TransmitReceive+0x1fc>
 8002d2a:	8b7b      	ldrh	r3, [r7, #26]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d16b      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d56:	e057      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d11c      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x26c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d017      	beq.n	8002da0 <HAL_SPI_TransmitReceive+0x26c>
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d114      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d119      	bne.n	8002de2 <HAL_SPI_TransmitReceive+0x2ae>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d014      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dde:	2301      	movs	r3, #1
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002de2:	f7fe fba3 	bl	800152c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <HAL_SPI_TransmitReceive+0x2c6>
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x2cc>
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e06:	e029      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1a2      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x224>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d19d      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f925 	bl	8003070 <SPI_EndRxTxTransaction>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e38:	e010      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	e000      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e86:	b2db      	uxtb	r3, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea4:	f7fe fb42 	bl	800152c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb4:	f7fe fb3a 	bl	800152c <HAL_GetTick>
 8002eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	0d1b      	lsrs	r3, r3, #20
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eca:	e054      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d050      	beq.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed4:	f7fe fb2a 	bl	800152c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d902      	bls.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13d      	bne.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f02:	d111      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	d004      	beq.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d107      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d10f      	bne.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e017      	b.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d19b      	bne.n	8002ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb8:	d111      	bne.n	8002fde <SPI_EndRxTransaction+0x3a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc2:	d004      	beq.n	8002fce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d107      	bne.n	8002fde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe6:	d12a      	bne.n	800303e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d012      	beq.n	8003018 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff ff49 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02d      	beq.n	8003064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e026      	b.n	8003066 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	2101      	movs	r1, #1
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff ff36 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01a      	beq.n	8003064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e013      	b.n	8003066 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	2101      	movs	r1, #1
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff ff23 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e000      	b.n	8003066 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <SPI_EndRxTxTransaction+0x7c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <SPI_EndRxTxTransaction+0x80>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0d5b      	lsrs	r3, r3, #21
 8003088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309a:	d112      	bne.n	80030c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fef4 	bl	8002e94 <SPI_WaitFlagStateUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e00f      	b.n	80030e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d0f2      	beq.n	80030c2 <SPI_EndRxTxTransaction+0x52>
 80030dc:	e000      	b.n	80030e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80030de:	bf00      	nop
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000
 80030f0:	165e9f81 	.word	0x165e9f81

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e03f      	b.n	8003186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe f92e 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f929 	bl	8003390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af02      	add	r7, sp, #8
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d17c      	bne.n	80032a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_Transmit+0x2c>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e075      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit+0x3e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e06e      	b.n	80032aa <HAL_UART_Transmit+0x11c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	; 0x21
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e2:	f7fe f9a3 	bl	800152c <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d108      	bne.n	8003210 <HAL_UART_Transmit+0x82>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e003      	b.n	8003218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003220:	e02a      	b.n	8003278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f840 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e036      	b.n	80032aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3302      	adds	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e007      	b.n	800326a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cf      	bne.n	8003222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f810 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e006      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b090      	sub	sp, #64	; 0x40
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e050      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d04c      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	f7fe f92b 	bl	800152c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d241      	bcs.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003302:	637a      	str	r2, [r7, #52]	; 0x34
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e5      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d09f      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	b09f      	sub	sp, #124	; 0x7c
 8003396:	af00      	add	r7, sp, #0
 8003398:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	ea40 0301 	orr.w	r3, r0, r1
 80033b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d4:	f021 010c 	bic.w	r1, r1, #12
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	6999      	ldr	r1, [r3, #24]
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	ea40 0301 	orr.w	r3, r0, r1
 80033f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4bc5      	ldr	r3, [pc, #788]	; (8003714 <UART_SetConfig+0x384>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d004      	beq.n	800340e <UART_SetConfig+0x7e>
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4bc3      	ldr	r3, [pc, #780]	; (8003718 <UART_SetConfig+0x388>)
 800340a:	429a      	cmp	r2, r3
 800340c:	d103      	bne.n	8003416 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800340e:	f7fe fc57 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8003412:	6778      	str	r0, [r7, #116]	; 0x74
 8003414:	e002      	b.n	800341c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fc3f 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 800341a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	f040 80b6 	bne.w	8003594 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	461c      	mov	r4, r3
 800342c:	f04f 0500 	mov.w	r5, #0
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	1891      	adds	r1, r2, r2
 8003436:	6439      	str	r1, [r7, #64]	; 0x40
 8003438:	415b      	adcs	r3, r3
 800343a:	647b      	str	r3, [r7, #68]	; 0x44
 800343c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003440:	1912      	adds	r2, r2, r4
 8003442:	eb45 0303 	adc.w	r3, r5, r3
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	00d9      	lsls	r1, r3, #3
 8003450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003454:	00d0      	lsls	r0, r2, #3
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	1911      	adds	r1, r2, r4
 800345c:	6639      	str	r1, [r7, #96]	; 0x60
 800345e:	416b      	adcs	r3, r5
 8003460:	667b      	str	r3, [r7, #100]	; 0x64
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	461a      	mov	r2, r3
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	1891      	adds	r1, r2, r2
 800346e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003470:	415b      	adcs	r3, r3
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003478:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800347c:	f7fc ff18 	bl	80002b0 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4ba5      	ldr	r3, [pc, #660]	; (800371c <UART_SetConfig+0x38c>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011e      	lsls	r6, r3, #4
 800348e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003490:	461c      	mov	r4, r3
 8003492:	f04f 0500 	mov.w	r5, #0
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	1891      	adds	r1, r2, r2
 800349c:	6339      	str	r1, [r7, #48]	; 0x30
 800349e:	415b      	adcs	r3, r3
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034a6:	1912      	adds	r2, r2, r4
 80034a8:	eb45 0303 	adc.w	r3, r5, r3
 80034ac:	f04f 0000 	mov.w	r0, #0
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	00d9      	lsls	r1, r3, #3
 80034b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ba:	00d0      	lsls	r0, r2, #3
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	1911      	adds	r1, r2, r4
 80034c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80034c4:	416b      	adcs	r3, r5
 80034c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80034d6:	415b      	adcs	r3, r3
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034e2:	f7fc fee5 	bl	80002b0 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b8c      	ldr	r3, [pc, #560]	; (800371c <UART_SetConfig+0x38c>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a87      	ldr	r2, [pc, #540]	; (800371c <UART_SetConfig+0x38c>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441e      	add	r6, r3
 800350e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003510:	4618      	mov	r0, r3
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	1894      	adds	r4, r2, r2
 800351c:	623c      	str	r4, [r7, #32]
 800351e:	415b      	adcs	r3, r3
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003526:	1812      	adds	r2, r2, r0
 8003528:	eb41 0303 	adc.w	r3, r1, r3
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	f04f 0500 	mov.w	r5, #0
 8003534:	00dd      	lsls	r5, r3, #3
 8003536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800353a:	00d4      	lsls	r4, r2, #3
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	1814      	adds	r4, r2, r0
 8003542:	653c      	str	r4, [r7, #80]	; 0x50
 8003544:	414b      	adcs	r3, r1
 8003546:	657b      	str	r3, [r7, #84]	; 0x54
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	1891      	adds	r1, r2, r2
 8003554:	61b9      	str	r1, [r7, #24]
 8003556:	415b      	adcs	r3, r3
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003562:	f7fc fea5 	bl	80002b0 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4b6c      	ldr	r3, [pc, #432]	; (800371c <UART_SetConfig+0x38c>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a67      	ldr	r2, [pc, #412]	; (800371c <UART_SetConfig+0x38c>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0207 	and.w	r2, r3, #7
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4432      	add	r2, r6
 8003590:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003592:	e0b9      	b.n	8003708 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003596:	461c      	mov	r4, r3
 8003598:	f04f 0500 	mov.w	r5, #0
 800359c:	4622      	mov	r2, r4
 800359e:	462b      	mov	r3, r5
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	6139      	str	r1, [r7, #16]
 80035a4:	415b      	adcs	r3, r3
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ac:	1912      	adds	r2, r2, r4
 80035ae:	eb45 0303 	adc.w	r3, r5, r3
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	00d9      	lsls	r1, r3, #3
 80035bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c0:	00d0      	lsls	r0, r2, #3
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	eb12 0804 	adds.w	r8, r2, r4
 80035ca:	eb43 0905 	adc.w	r9, r3, r5
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	008b      	lsls	r3, r1, #2
 80035e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035e6:	0082      	lsls	r2, r0, #2
 80035e8:	4640      	mov	r0, r8
 80035ea:	4649      	mov	r1, r9
 80035ec:	f7fc fe60 	bl	80002b0 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <UART_SetConfig+0x38c>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011e      	lsls	r6, r3, #4
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	4618      	mov	r0, r3
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	1894      	adds	r4, r2, r2
 800360c:	60bc      	str	r4, [r7, #8]
 800360e:	415b      	adcs	r3, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003616:	1812      	adds	r2, r2, r0
 8003618:	eb41 0303 	adc.w	r3, r1, r3
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	f04f 0500 	mov.w	r5, #0
 8003624:	00dd      	lsls	r5, r3, #3
 8003626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800362a:	00d4      	lsls	r4, r2, #3
 800362c:	4622      	mov	r2, r4
 800362e:	462b      	mov	r3, r5
 8003630:	1814      	adds	r4, r2, r0
 8003632:	64bc      	str	r4, [r7, #72]	; 0x48
 8003634:	414b      	adcs	r3, r1
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003650:	0082      	lsls	r2, r0, #2
 8003652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003656:	f7fc fe2b 	bl	80002b0 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <UART_SetConfig+0x38c>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	; 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <UART_SetConfig+0x38c>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367e:	441e      	add	r6, r3
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	4618      	mov	r0, r3
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	1894      	adds	r4, r2, r2
 800368e:	603c      	str	r4, [r7, #0]
 8003690:	415b      	adcs	r3, r3
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003698:	1812      	adds	r2, r2, r0
 800369a:	eb41 0303 	adc.w	r3, r1, r3
 800369e:	f04f 0400 	mov.w	r4, #0
 80036a2:	f04f 0500 	mov.w	r5, #0
 80036a6:	00dd      	lsls	r5, r3, #3
 80036a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036ac:	00d4      	lsls	r4, r2, #3
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	eb12 0a00 	adds.w	sl, r2, r0
 80036b6:	eb43 0b01 	adc.w	fp, r3, r1
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	008b      	lsls	r3, r1, #2
 80036ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036d2:	0082      	lsls	r2, r0, #2
 80036d4:	4650      	mov	r0, sl
 80036d6:	4659      	mov	r1, fp
 80036d8:	f7fc fdea 	bl	80002b0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <UART_SetConfig+0x38c>)
 80036e2:	fba3 1302 	umull	r1, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2164      	movs	r1, #100	; 0x64
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <UART_SetConfig+0x38c>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	f003 020f 	and.w	r2, r3, #15
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4432      	add	r2, r6
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	377c      	adds	r7, #124	; 0x7c
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	40011000 	.word	0x40011000
 8003718:	40011400 	.word	0x40011400
 800371c:	51eb851f 	.word	0x51eb851f

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2000000c 	.word	0x2000000c

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2600      	movs	r6, #0
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4d0b      	ldr	r5, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f000 fc4e 	bl	8003fe0 <_init>
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2600      	movs	r6, #0
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	08004100 	.word	0x08004100
 8003768:	08004100 	.word	0x08004100
 800376c:	08004100 	.word	0x08004100
 8003770:	08004104 	.word	0x08004104

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	b500      	push	{lr}
 8003788:	b09c      	sub	sp, #112	; 0x70
 800378a:	ab1d      	add	r3, sp, #116	; 0x74
 800378c:	9002      	str	r0, [sp, #8]
 800378e:	9006      	str	r0, [sp, #24]
 8003790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <siprintf+0x38>)
 8003796:	9107      	str	r1, [sp, #28]
 8003798:	9104      	str	r1, [sp, #16]
 800379a:	4909      	ldr	r1, [pc, #36]	; (80037c0 <siprintf+0x3c>)
 800379c:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	a902      	add	r1, sp, #8
 80037a8:	f000 f868 	bl	800387c <_svfiprintf_r>
 80037ac:	9b02      	ldr	r3, [sp, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	b01c      	add	sp, #112	; 0x70
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b003      	add	sp, #12
 80037ba:	4770      	bx	lr
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <__ssputs_r>:
 80037c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	688e      	ldr	r6, [r1, #8]
 80037ca:	429e      	cmp	r6, r3
 80037cc:	4682      	mov	sl, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	4690      	mov	r8, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	d838      	bhi.n	8003848 <__ssputs_r+0x84>
 80037d6:	898a      	ldrh	r2, [r1, #12]
 80037d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037dc:	d032      	beq.n	8003844 <__ssputs_r+0x80>
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	6909      	ldr	r1, [r1, #16]
 80037e2:	eba5 0901 	sub.w	r9, r5, r1
 80037e6:	6965      	ldr	r5, [r4, #20]
 80037e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037f0:	3301      	adds	r3, #1
 80037f2:	444b      	add	r3, r9
 80037f4:	106d      	asrs	r5, r5, #1
 80037f6:	429d      	cmp	r5, r3
 80037f8:	bf38      	it	cc
 80037fa:	461d      	movcc	r5, r3
 80037fc:	0553      	lsls	r3, r2, #21
 80037fe:	d531      	bpl.n	8003864 <__ssputs_r+0xa0>
 8003800:	4629      	mov	r1, r5
 8003802:	f000 fb47 	bl	8003e94 <_malloc_r>
 8003806:	4606      	mov	r6, r0
 8003808:	b950      	cbnz	r0, 8003820 <__ssputs_r+0x5c>
 800380a:	230c      	movs	r3, #12
 800380c:	f8ca 3000 	str.w	r3, [sl]
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003820:	6921      	ldr	r1, [r4, #16]
 8003822:	464a      	mov	r2, r9
 8003824:	f000 fabe 	bl	8003da4 <memcpy>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003832:	81a3      	strh	r3, [r4, #12]
 8003834:	6126      	str	r6, [r4, #16]
 8003836:	6165      	str	r5, [r4, #20]
 8003838:	444e      	add	r6, r9
 800383a:	eba5 0509 	sub.w	r5, r5, r9
 800383e:	6026      	str	r6, [r4, #0]
 8003840:	60a5      	str	r5, [r4, #8]
 8003842:	463e      	mov	r6, r7
 8003844:	42be      	cmp	r6, r7
 8003846:	d900      	bls.n	800384a <__ssputs_r+0x86>
 8003848:	463e      	mov	r6, r7
 800384a:	4632      	mov	r2, r6
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	4641      	mov	r1, r8
 8003850:	f000 fab6 	bl	8003dc0 <memmove>
 8003854:	68a3      	ldr	r3, [r4, #8]
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	1b9b      	subs	r3, r3, r6
 800385a:	4432      	add	r2, r6
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	6022      	str	r2, [r4, #0]
 8003860:	2000      	movs	r0, #0
 8003862:	e7db      	b.n	800381c <__ssputs_r+0x58>
 8003864:	462a      	mov	r2, r5
 8003866:	f000 fb6f 	bl	8003f48 <_realloc_r>
 800386a:	4606      	mov	r6, r0
 800386c:	2800      	cmp	r0, #0
 800386e:	d1e1      	bne.n	8003834 <__ssputs_r+0x70>
 8003870:	6921      	ldr	r1, [r4, #16]
 8003872:	4650      	mov	r0, sl
 8003874:	f000 fabe 	bl	8003df4 <_free_r>
 8003878:	e7c7      	b.n	800380a <__ssputs_r+0x46>
	...

0800387c <_svfiprintf_r>:
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	4698      	mov	r8, r3
 8003882:	898b      	ldrh	r3, [r1, #12]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	b09d      	sub	sp, #116	; 0x74
 8003888:	4607      	mov	r7, r0
 800388a:	460d      	mov	r5, r1
 800388c:	4614      	mov	r4, r2
 800388e:	d50e      	bpl.n	80038ae <_svfiprintf_r+0x32>
 8003890:	690b      	ldr	r3, [r1, #16]
 8003892:	b963      	cbnz	r3, 80038ae <_svfiprintf_r+0x32>
 8003894:	2140      	movs	r1, #64	; 0x40
 8003896:	f000 fafd 	bl	8003e94 <_malloc_r>
 800389a:	6028      	str	r0, [r5, #0]
 800389c:	6128      	str	r0, [r5, #16]
 800389e:	b920      	cbnz	r0, 80038aa <_svfiprintf_r+0x2e>
 80038a0:	230c      	movs	r3, #12
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	e0d1      	b.n	8003a4e <_svfiprintf_r+0x1d2>
 80038aa:	2340      	movs	r3, #64	; 0x40
 80038ac:	616b      	str	r3, [r5, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	2320      	movs	r3, #32
 80038b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038bc:	2330      	movs	r3, #48	; 0x30
 80038be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a68 <_svfiprintf_r+0x1ec>
 80038c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038c6:	f04f 0901 	mov.w	r9, #1
 80038ca:	4623      	mov	r3, r4
 80038cc:	469a      	mov	sl, r3
 80038ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d2:	b10a      	cbz	r2, 80038d8 <_svfiprintf_r+0x5c>
 80038d4:	2a25      	cmp	r2, #37	; 0x25
 80038d6:	d1f9      	bne.n	80038cc <_svfiprintf_r+0x50>
 80038d8:	ebba 0b04 	subs.w	fp, sl, r4
 80038dc:	d00b      	beq.n	80038f6 <_svfiprintf_r+0x7a>
 80038de:	465b      	mov	r3, fp
 80038e0:	4622      	mov	r2, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	4638      	mov	r0, r7
 80038e6:	f7ff ff6d 	bl	80037c4 <__ssputs_r>
 80038ea:	3001      	adds	r0, #1
 80038ec:	f000 80aa 	beq.w	8003a44 <_svfiprintf_r+0x1c8>
 80038f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f2:	445a      	add	r2, fp
 80038f4:	9209      	str	r2, [sp, #36]	; 0x24
 80038f6:	f89a 3000 	ldrb.w	r3, [sl]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80a2 	beq.w	8003a44 <_svfiprintf_r+0x1c8>
 8003900:	2300      	movs	r3, #0
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800390a:	f10a 0a01 	add.w	sl, sl, #1
 800390e:	9304      	str	r3, [sp, #16]
 8003910:	9307      	str	r3, [sp, #28]
 8003912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003916:	931a      	str	r3, [sp, #104]	; 0x68
 8003918:	4654      	mov	r4, sl
 800391a:	2205      	movs	r2, #5
 800391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003920:	4851      	ldr	r0, [pc, #324]	; (8003a68 <_svfiprintf_r+0x1ec>)
 8003922:	f7fc fc75 	bl	8000210 <memchr>
 8003926:	9a04      	ldr	r2, [sp, #16]
 8003928:	b9d8      	cbnz	r0, 8003962 <_svfiprintf_r+0xe6>
 800392a:	06d0      	lsls	r0, r2, #27
 800392c:	bf44      	itt	mi
 800392e:	2320      	movmi	r3, #32
 8003930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003934:	0711      	lsls	r1, r2, #28
 8003936:	bf44      	itt	mi
 8003938:	232b      	movmi	r3, #43	; 0x2b
 800393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393e:	f89a 3000 	ldrb.w	r3, [sl]
 8003942:	2b2a      	cmp	r3, #42	; 0x2a
 8003944:	d015      	beq.n	8003972 <_svfiprintf_r+0xf6>
 8003946:	9a07      	ldr	r2, [sp, #28]
 8003948:	4654      	mov	r4, sl
 800394a:	2000      	movs	r0, #0
 800394c:	f04f 0c0a 	mov.w	ip, #10
 8003950:	4621      	mov	r1, r4
 8003952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003956:	3b30      	subs	r3, #48	; 0x30
 8003958:	2b09      	cmp	r3, #9
 800395a:	d94e      	bls.n	80039fa <_svfiprintf_r+0x17e>
 800395c:	b1b0      	cbz	r0, 800398c <_svfiprintf_r+0x110>
 800395e:	9207      	str	r2, [sp, #28]
 8003960:	e014      	b.n	800398c <_svfiprintf_r+0x110>
 8003962:	eba0 0308 	sub.w	r3, r0, r8
 8003966:	fa09 f303 	lsl.w	r3, r9, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	9304      	str	r3, [sp, #16]
 800396e:	46a2      	mov	sl, r4
 8003970:	e7d2      	b.n	8003918 <_svfiprintf_r+0x9c>
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	9103      	str	r1, [sp, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfbb      	ittet	lt
 800397e:	425b      	neglt	r3, r3
 8003980:	f042 0202 	orrlt.w	r2, r2, #2
 8003984:	9307      	strge	r3, [sp, #28]
 8003986:	9307      	strlt	r3, [sp, #28]
 8003988:	bfb8      	it	lt
 800398a:	9204      	strlt	r2, [sp, #16]
 800398c:	7823      	ldrb	r3, [r4, #0]
 800398e:	2b2e      	cmp	r3, #46	; 0x2e
 8003990:	d10c      	bne.n	80039ac <_svfiprintf_r+0x130>
 8003992:	7863      	ldrb	r3, [r4, #1]
 8003994:	2b2a      	cmp	r3, #42	; 0x2a
 8003996:	d135      	bne.n	8003a04 <_svfiprintf_r+0x188>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bfb8      	it	lt
 80039a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039a8:	3402      	adds	r4, #2
 80039aa:	9305      	str	r3, [sp, #20]
 80039ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a78 <_svfiprintf_r+0x1fc>
 80039b0:	7821      	ldrb	r1, [r4, #0]
 80039b2:	2203      	movs	r2, #3
 80039b4:	4650      	mov	r0, sl
 80039b6:	f7fc fc2b 	bl	8000210 <memchr>
 80039ba:	b140      	cbz	r0, 80039ce <_svfiprintf_r+0x152>
 80039bc:	2340      	movs	r3, #64	; 0x40
 80039be:	eba0 000a 	sub.w	r0, r0, sl
 80039c2:	fa03 f000 	lsl.w	r0, r3, r0
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	4303      	orrs	r3, r0
 80039ca:	3401      	adds	r4, #1
 80039cc:	9304      	str	r3, [sp, #16]
 80039ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d2:	4826      	ldr	r0, [pc, #152]	; (8003a6c <_svfiprintf_r+0x1f0>)
 80039d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039d8:	2206      	movs	r2, #6
 80039da:	f7fc fc19 	bl	8000210 <memchr>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d038      	beq.n	8003a54 <_svfiprintf_r+0x1d8>
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <_svfiprintf_r+0x1f4>)
 80039e4:	bb1b      	cbnz	r3, 8003a2e <_svfiprintf_r+0x1b2>
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	3307      	adds	r3, #7
 80039ea:	f023 0307 	bic.w	r3, r3, #7
 80039ee:	3308      	adds	r3, #8
 80039f0:	9303      	str	r3, [sp, #12]
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	4433      	add	r3, r6
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	e767      	b.n	80038ca <_svfiprintf_r+0x4e>
 80039fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80039fe:	460c      	mov	r4, r1
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7a5      	b.n	8003950 <_svfiprintf_r+0xd4>
 8003a04:	2300      	movs	r3, #0
 8003a06:	3401      	adds	r4, #1
 8003a08:	9305      	str	r3, [sp, #20]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 0c0a 	mov.w	ip, #10
 8003a10:	4620      	mov	r0, r4
 8003a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a16:	3a30      	subs	r2, #48	; 0x30
 8003a18:	2a09      	cmp	r2, #9
 8003a1a:	d903      	bls.n	8003a24 <_svfiprintf_r+0x1a8>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0c5      	beq.n	80039ac <_svfiprintf_r+0x130>
 8003a20:	9105      	str	r1, [sp, #20]
 8003a22:	e7c3      	b.n	80039ac <_svfiprintf_r+0x130>
 8003a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a28:	4604      	mov	r4, r0
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e7f0      	b.n	8003a10 <_svfiprintf_r+0x194>
 8003a2e:	ab03      	add	r3, sp, #12
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	462a      	mov	r2, r5
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <_svfiprintf_r+0x1f8>)
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f3af 8000 	nop.w
 8003a3e:	1c42      	adds	r2, r0, #1
 8003a40:	4606      	mov	r6, r0
 8003a42:	d1d6      	bne.n	80039f2 <_svfiprintf_r+0x176>
 8003a44:	89ab      	ldrh	r3, [r5, #12]
 8003a46:	065b      	lsls	r3, r3, #25
 8003a48:	f53f af2c 	bmi.w	80038a4 <_svfiprintf_r+0x28>
 8003a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a4e:	b01d      	add	sp, #116	; 0x74
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	ab03      	add	r3, sp, #12
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	462a      	mov	r2, r5
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <_svfiprintf_r+0x1f8>)
 8003a5c:	a904      	add	r1, sp, #16
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f000 f87a 	bl	8003b58 <_printf_i>
 8003a64:	e7eb      	b.n	8003a3e <_svfiprintf_r+0x1c2>
 8003a66:	bf00      	nop
 8003a68:	080040c4 	.word	0x080040c4
 8003a6c:	080040ce 	.word	0x080040ce
 8003a70:	00000000 	.word	0x00000000
 8003a74:	080037c5 	.word	0x080037c5
 8003a78:	080040ca 	.word	0x080040ca

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4616      	mov	r6, r2
 8003a82:	4699      	mov	r9, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bfb8      	it	lt
 8003a90:	4613      	movlt	r3, r2
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b10a      	cbz	r2, 8003aa2 <_printf_common+0x26>
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	6833      	ldrmi	r3, [r6, #0]
 8003aaa:	3302      	addmi	r3, #2
 8003aac:	6033      	strmi	r3, [r6, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d106      	bne.n	8003ac4 <_printf_common+0x48>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dc26      	bgt.n	8003b12 <_printf_common+0x96>
 8003ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ac8:	1e13      	subs	r3, r2, #0
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	0692      	lsls	r2, r2, #26
 8003ad2:	d42b      	bmi.n	8003b2c <_printf_common+0xb0>
 8003ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d01e      	beq.n	8003b20 <_printf_common+0xa4>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	68e5      	ldr	r5, [r4, #12]
 8003ae6:	6832      	ldr	r2, [r6, #0]
 8003ae8:	f003 0306 	and.w	r3, r3, #6
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	bf08      	it	eq
 8003af0:	1aad      	subeq	r5, r5, r2
 8003af2:	68a3      	ldr	r3, [r4, #8]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	bf0c      	ite	eq
 8003af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003afc:	2500      	movne	r5, #0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bfc4      	itt	gt
 8003b02:	1a9b      	subgt	r3, r3, r2
 8003b04:	18ed      	addgt	r5, r5, r3
 8003b06:	2600      	movs	r6, #0
 8003b08:	341a      	adds	r4, #26
 8003b0a:	42b5      	cmp	r5, r6
 8003b0c:	d11a      	bne.n	8003b44 <_printf_common+0xc8>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e008      	b.n	8003b24 <_printf_common+0xa8>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4652      	mov	r2, sl
 8003b16:	4649      	mov	r1, r9
 8003b18:	4638      	mov	r0, r7
 8003b1a:	47c0      	blx	r8
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d103      	bne.n	8003b28 <_printf_common+0xac>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	3501      	adds	r5, #1
 8003b2a:	e7c6      	b.n	8003aba <_printf_common+0x3e>
 8003b2c:	18e1      	adds	r1, r4, r3
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	2030      	movs	r0, #48	; 0x30
 8003b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b36:	4422      	add	r2, r4
 8003b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b40:	3302      	adds	r3, #2
 8003b42:	e7c7      	b.n	8003ad4 <_printf_common+0x58>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4622      	mov	r2, r4
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d0e6      	beq.n	8003b20 <_printf_common+0xa4>
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7d9      	b.n	8003b0a <_printf_common+0x8e>
	...

08003b58 <_printf_i>:
 8003b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	4691      	mov	r9, r2
 8003b60:	7e27      	ldrb	r7, [r4, #24]
 8003b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b64:	2f78      	cmp	r7, #120	; 0x78
 8003b66:	4680      	mov	r8, r0
 8003b68:	469a      	mov	sl, r3
 8003b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b6e:	d807      	bhi.n	8003b80 <_printf_i+0x28>
 8003b70:	2f62      	cmp	r7, #98	; 0x62
 8003b72:	d80a      	bhi.n	8003b8a <_printf_i+0x32>
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	f000 80d8 	beq.w	8003d2a <_printf_i+0x1d2>
 8003b7a:	2f58      	cmp	r7, #88	; 0x58
 8003b7c:	f000 80a3 	beq.w	8003cc6 <_printf_i+0x16e>
 8003b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b88:	e03a      	b.n	8003c00 <_printf_i+0xa8>
 8003b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b8e:	2b15      	cmp	r3, #21
 8003b90:	d8f6      	bhi.n	8003b80 <_printf_i+0x28>
 8003b92:	a001      	add	r0, pc, #4	; (adr r0, 8003b98 <_printf_i+0x40>)
 8003b94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003b81 	.word	0x08003b81
 8003ba4:	08003b81 	.word	0x08003b81
 8003ba8:	08003b81 	.word	0x08003b81
 8003bac:	08003b81 	.word	0x08003b81
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b81 	.word	0x08003b81
 8003bb8:	08003b81 	.word	0x08003b81
 8003bbc:	08003b81 	.word	0x08003b81
 8003bc0:	08003b81 	.word	0x08003b81
 8003bc4:	08003d11 	.word	0x08003d11
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003cf3 	.word	0x08003cf3
 8003bd0:	08003b81 	.word	0x08003b81
 8003bd4:	08003b81 	.word	0x08003b81
 8003bd8:	08003d33 	.word	0x08003d33
 8003bdc:	08003b81 	.word	0x08003b81
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003b81 	.word	0x08003b81
 8003be8:	08003b81 	.word	0x08003b81
 8003bec:	08003cfb 	.word	0x08003cfb
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	600a      	str	r2, [r1, #0]
 8003bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0a3      	b.n	8003d4c <_printf_i+0x1f4>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	6808      	ldr	r0, [r1, #0]
 8003c08:	062e      	lsls	r6, r5, #24
 8003c0a:	f100 0304 	add.w	r3, r0, #4
 8003c0e:	d50a      	bpl.n	8003c26 <_printf_i+0xce>
 8003c10:	6805      	ldr	r5, [r0, #0]
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	da03      	bge.n	8003c20 <_printf_i+0xc8>
 8003c18:	232d      	movs	r3, #45	; 0x2d
 8003c1a:	426d      	negs	r5, r5
 8003c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c20:	485e      	ldr	r0, [pc, #376]	; (8003d9c <_printf_i+0x244>)
 8003c22:	230a      	movs	r3, #10
 8003c24:	e019      	b.n	8003c5a <_printf_i+0x102>
 8003c26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c2a:	6805      	ldr	r5, [r0, #0]
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	bf18      	it	ne
 8003c30:	b22d      	sxthne	r5, r5
 8003c32:	e7ef      	b.n	8003c14 <_printf_i+0xbc>
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	6825      	ldr	r5, [r4, #0]
 8003c38:	1d18      	adds	r0, r3, #4
 8003c3a:	6008      	str	r0, [r1, #0]
 8003c3c:	0628      	lsls	r0, r5, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0xec>
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0xf2>
 8003c44:	0669      	lsls	r1, r5, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0xe8>
 8003c48:	881d      	ldrh	r5, [r3, #0]
 8003c4a:	4854      	ldr	r0, [pc, #336]	; (8003d9c <_printf_i+0x244>)
 8003c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c4e:	bf0c      	ite	eq
 8003c50:	2308      	moveq	r3, #8
 8003c52:	230a      	movne	r3, #10
 8003c54:	2100      	movs	r1, #0
 8003c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5a:	6866      	ldr	r6, [r4, #4]
 8003c5c:	60a6      	str	r6, [r4, #8]
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	bfa2      	ittt	ge
 8003c62:	6821      	ldrge	r1, [r4, #0]
 8003c64:	f021 0104 	bicge.w	r1, r1, #4
 8003c68:	6021      	strge	r1, [r4, #0]
 8003c6a:	b90d      	cbnz	r5, 8003c70 <_printf_i+0x118>
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	d04d      	beq.n	8003d0c <_printf_i+0x1b4>
 8003c70:	4616      	mov	r6, r2
 8003c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c76:	fb03 5711 	mls	r7, r3, r1, r5
 8003c7a:	5dc7      	ldrb	r7, [r0, r7]
 8003c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c80:	462f      	mov	r7, r5
 8003c82:	42bb      	cmp	r3, r7
 8003c84:	460d      	mov	r5, r1
 8003c86:	d9f4      	bls.n	8003c72 <_printf_i+0x11a>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10b      	bne.n	8003ca4 <_printf_i+0x14c>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	07df      	lsls	r7, r3, #31
 8003c90:	d508      	bpl.n	8003ca4 <_printf_i+0x14c>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	6861      	ldr	r1, [r4, #4]
 8003c96:	4299      	cmp	r1, r3
 8003c98:	bfde      	ittt	le
 8003c9a:	2330      	movle	r3, #48	; 0x30
 8003c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ca4:	1b92      	subs	r2, r2, r6
 8003ca6:	6122      	str	r2, [r4, #16]
 8003ca8:	f8cd a000 	str.w	sl, [sp]
 8003cac:	464b      	mov	r3, r9
 8003cae:	aa03      	add	r2, sp, #12
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f7ff fee2 	bl	8003a7c <_printf_common>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d14c      	bne.n	8003d56 <_printf_i+0x1fe>
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	b004      	add	sp, #16
 8003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc6:	4835      	ldr	r0, [pc, #212]	; (8003d9c <_printf_i+0x244>)
 8003cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	680e      	ldr	r6, [r1, #0]
 8003cd0:	061f      	lsls	r7, r3, #24
 8003cd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cd6:	600e      	str	r6, [r1, #0]
 8003cd8:	d514      	bpl.n	8003d04 <_printf_i+0x1ac>
 8003cda:	07d9      	lsls	r1, r3, #31
 8003cdc:	bf44      	itt	mi
 8003cde:	f043 0320 	orrmi.w	r3, r3, #32
 8003ce2:	6023      	strmi	r3, [r4, #0]
 8003ce4:	b91d      	cbnz	r5, 8003cee <_printf_i+0x196>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	2310      	movs	r3, #16
 8003cf0:	e7b0      	b.n	8003c54 <_printf_i+0xfc>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	2378      	movs	r3, #120	; 0x78
 8003cfc:	4828      	ldr	r0, [pc, #160]	; (8003da0 <_printf_i+0x248>)
 8003cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d02:	e7e3      	b.n	8003ccc <_printf_i+0x174>
 8003d04:	065e      	lsls	r6, r3, #25
 8003d06:	bf48      	it	mi
 8003d08:	b2ad      	uxthmi	r5, r5
 8003d0a:	e7e6      	b.n	8003cda <_printf_i+0x182>
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	e7bb      	b.n	8003c88 <_printf_i+0x130>
 8003d10:	680b      	ldr	r3, [r1, #0]
 8003d12:	6826      	ldr	r6, [r4, #0]
 8003d14:	6960      	ldr	r0, [r4, #20]
 8003d16:	1d1d      	adds	r5, r3, #4
 8003d18:	600d      	str	r5, [r1, #0]
 8003d1a:	0635      	lsls	r5, r6, #24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	d501      	bpl.n	8003d24 <_printf_i+0x1cc>
 8003d20:	6018      	str	r0, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <_printf_i+0x1d2>
 8003d24:	0671      	lsls	r1, r6, #25
 8003d26:	d5fb      	bpl.n	8003d20 <_printf_i+0x1c8>
 8003d28:	8018      	strh	r0, [r3, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	4616      	mov	r6, r2
 8003d30:	e7ba      	b.n	8003ca8 <_printf_i+0x150>
 8003d32:	680b      	ldr	r3, [r1, #0]
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	600a      	str	r2, [r1, #0]
 8003d38:	681e      	ldr	r6, [r3, #0]
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7fc fa66 	bl	8000210 <memchr>
 8003d44:	b108      	cbz	r0, 8003d4a <_printf_i+0x1f2>
 8003d46:	1b80      	subs	r0, r0, r6
 8003d48:	6060      	str	r0, [r4, #4]
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d54:	e7a8      	b.n	8003ca8 <_printf_i+0x150>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	47d0      	blx	sl
 8003d60:	3001      	adds	r0, #1
 8003d62:	d0ab      	beq.n	8003cbc <_printf_i+0x164>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	079b      	lsls	r3, r3, #30
 8003d68:	d413      	bmi.n	8003d92 <_printf_i+0x23a>
 8003d6a:	68e0      	ldr	r0, [r4, #12]
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	bfb8      	it	lt
 8003d72:	4618      	movlt	r0, r3
 8003d74:	e7a4      	b.n	8003cc0 <_printf_i+0x168>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	47d0      	blx	sl
 8003d80:	3001      	adds	r0, #1
 8003d82:	d09b      	beq.n	8003cbc <_printf_i+0x164>
 8003d84:	3501      	adds	r5, #1
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	9903      	ldr	r1, [sp, #12]
 8003d8a:	1a5b      	subs	r3, r3, r1
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	dcf2      	bgt.n	8003d76 <_printf_i+0x21e>
 8003d90:	e7eb      	b.n	8003d6a <_printf_i+0x212>
 8003d92:	2500      	movs	r5, #0
 8003d94:	f104 0619 	add.w	r6, r4, #25
 8003d98:	e7f5      	b.n	8003d86 <_printf_i+0x22e>
 8003d9a:	bf00      	nop
 8003d9c:	080040d5 	.word	0x080040d5
 8003da0:	080040e6 	.word	0x080040e6

08003da4 <memcpy>:
 8003da4:	440a      	add	r2, r1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dac:	d100      	bne.n	8003db0 <memcpy+0xc>
 8003dae:	4770      	bx	lr
 8003db0:	b510      	push	{r4, lr}
 8003db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dba:	4291      	cmp	r1, r2
 8003dbc:	d1f9      	bne.n	8003db2 <memcpy+0xe>
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <memmove>:
 8003dc0:	4288      	cmp	r0, r1
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	eb01 0402 	add.w	r4, r1, r2
 8003dc8:	d902      	bls.n	8003dd0 <memmove+0x10>
 8003dca:	4284      	cmp	r4, r0
 8003dcc:	4623      	mov	r3, r4
 8003dce:	d807      	bhi.n	8003de0 <memmove+0x20>
 8003dd0:	1e43      	subs	r3, r0, #1
 8003dd2:	42a1      	cmp	r1, r4
 8003dd4:	d008      	beq.n	8003de8 <memmove+0x28>
 8003dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dde:	e7f8      	b.n	8003dd2 <memmove+0x12>
 8003de0:	4402      	add	r2, r0
 8003de2:	4601      	mov	r1, r0
 8003de4:	428a      	cmp	r2, r1
 8003de6:	d100      	bne.n	8003dea <memmove+0x2a>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df2:	e7f7      	b.n	8003de4 <memmove+0x24>

08003df4 <_free_r>:
 8003df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003df6:	2900      	cmp	r1, #0
 8003df8:	d048      	beq.n	8003e8c <_free_r+0x98>
 8003dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfe:	9001      	str	r0, [sp, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f1a1 0404 	sub.w	r4, r1, #4
 8003e06:	bfb8      	it	lt
 8003e08:	18e4      	addlt	r4, r4, r3
 8003e0a:	f000 f8d3 	bl	8003fb4 <__malloc_lock>
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <_free_r+0x9c>)
 8003e10:	9801      	ldr	r0, [sp, #4]
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	4615      	mov	r5, r2
 8003e16:	b933      	cbnz	r3, 8003e26 <_free_r+0x32>
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6014      	str	r4, [r2, #0]
 8003e1c:	b003      	add	sp, #12
 8003e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e22:	f000 b8cd 	b.w	8003fc0 <__malloc_unlock>
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	d90b      	bls.n	8003e42 <_free_r+0x4e>
 8003e2a:	6821      	ldr	r1, [r4, #0]
 8003e2c:	1862      	adds	r2, r4, r1
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bf04      	itt	eq
 8003e32:	681a      	ldreq	r2, [r3, #0]
 8003e34:	685b      	ldreq	r3, [r3, #4]
 8003e36:	6063      	str	r3, [r4, #4]
 8003e38:	bf04      	itt	eq
 8003e3a:	1852      	addeq	r2, r2, r1
 8003e3c:	6022      	streq	r2, [r4, #0]
 8003e3e:	602c      	str	r4, [r5, #0]
 8003e40:	e7ec      	b.n	8003e1c <_free_r+0x28>
 8003e42:	461a      	mov	r2, r3
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	b10b      	cbz	r3, 8003e4c <_free_r+0x58>
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d9fa      	bls.n	8003e42 <_free_r+0x4e>
 8003e4c:	6811      	ldr	r1, [r2, #0]
 8003e4e:	1855      	adds	r5, r2, r1
 8003e50:	42a5      	cmp	r5, r4
 8003e52:	d10b      	bne.n	8003e6c <_free_r+0x78>
 8003e54:	6824      	ldr	r4, [r4, #0]
 8003e56:	4421      	add	r1, r4
 8003e58:	1854      	adds	r4, r2, r1
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	d1dd      	bne.n	8003e1c <_free_r+0x28>
 8003e60:	681c      	ldr	r4, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	6053      	str	r3, [r2, #4]
 8003e66:	4421      	add	r1, r4
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	e7d7      	b.n	8003e1c <_free_r+0x28>
 8003e6c:	d902      	bls.n	8003e74 <_free_r+0x80>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	6003      	str	r3, [r0, #0]
 8003e72:	e7d3      	b.n	8003e1c <_free_r+0x28>
 8003e74:	6825      	ldr	r5, [r4, #0]
 8003e76:	1961      	adds	r1, r4, r5
 8003e78:	428b      	cmp	r3, r1
 8003e7a:	bf04      	itt	eq
 8003e7c:	6819      	ldreq	r1, [r3, #0]
 8003e7e:	685b      	ldreq	r3, [r3, #4]
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	bf04      	itt	eq
 8003e84:	1949      	addeq	r1, r1, r5
 8003e86:	6021      	streq	r1, [r4, #0]
 8003e88:	6054      	str	r4, [r2, #4]
 8003e8a:	e7c7      	b.n	8003e1c <_free_r+0x28>
 8003e8c:	b003      	add	sp, #12
 8003e8e:	bd30      	pop	{r4, r5, pc}
 8003e90:	20000090 	.word	0x20000090

08003e94 <_malloc_r>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	1ccd      	adds	r5, r1, #3
 8003e98:	f025 0503 	bic.w	r5, r5, #3
 8003e9c:	3508      	adds	r5, #8
 8003e9e:	2d0c      	cmp	r5, #12
 8003ea0:	bf38      	it	cc
 8003ea2:	250c      	movcc	r5, #12
 8003ea4:	2d00      	cmp	r5, #0
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	db01      	blt.n	8003eae <_malloc_r+0x1a>
 8003eaa:	42a9      	cmp	r1, r5
 8003eac:	d903      	bls.n	8003eb6 <_malloc_r+0x22>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	6033      	str	r3, [r6, #0]
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb6:	f000 f87d 	bl	8003fb4 <__malloc_lock>
 8003eba:	4921      	ldr	r1, [pc, #132]	; (8003f40 <_malloc_r+0xac>)
 8003ebc:	680a      	ldr	r2, [r1, #0]
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	b99c      	cbnz	r4, 8003eea <_malloc_r+0x56>
 8003ec2:	4f20      	ldr	r7, [pc, #128]	; (8003f44 <_malloc_r+0xb0>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b923      	cbnz	r3, 8003ed2 <_malloc_r+0x3e>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 f862 	bl	8003f94 <_sbrk_r>
 8003ed0:	6038      	str	r0, [r7, #0]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 f85d 	bl	8003f94 <_sbrk_r>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d123      	bne.n	8003f26 <_malloc_r+0x92>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f000 f86c 	bl	8003fc0 <__malloc_unlock>
 8003ee8:	e7e3      	b.n	8003eb2 <_malloc_r+0x1e>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	1b5b      	subs	r3, r3, r5
 8003eee:	d417      	bmi.n	8003f20 <_malloc_r+0x8c>
 8003ef0:	2b0b      	cmp	r3, #11
 8003ef2:	d903      	bls.n	8003efc <_malloc_r+0x68>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	441c      	add	r4, r3
 8003ef8:	6025      	str	r5, [r4, #0]
 8003efa:	e004      	b.n	8003f06 <_malloc_r+0x72>
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	42a2      	cmp	r2, r4
 8003f00:	bf0c      	ite	eq
 8003f02:	600b      	streq	r3, [r1, #0]
 8003f04:	6053      	strne	r3, [r2, #4]
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f85a 	bl	8003fc0 <__malloc_unlock>
 8003f0c:	f104 000b 	add.w	r0, r4, #11
 8003f10:	1d23      	adds	r3, r4, #4
 8003f12:	f020 0007 	bic.w	r0, r0, #7
 8003f16:	1ac2      	subs	r2, r0, r3
 8003f18:	d0cc      	beq.n	8003eb4 <_malloc_r+0x20>
 8003f1a:	1a1b      	subs	r3, r3, r0
 8003f1c:	50a3      	str	r3, [r4, r2]
 8003f1e:	e7c9      	b.n	8003eb4 <_malloc_r+0x20>
 8003f20:	4622      	mov	r2, r4
 8003f22:	6864      	ldr	r4, [r4, #4]
 8003f24:	e7cc      	b.n	8003ec0 <_malloc_r+0x2c>
 8003f26:	1cc4      	adds	r4, r0, #3
 8003f28:	f024 0403 	bic.w	r4, r4, #3
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d0e3      	beq.n	8003ef8 <_malloc_r+0x64>
 8003f30:	1a21      	subs	r1, r4, r0
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 f82e 	bl	8003f94 <_sbrk_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d1dd      	bne.n	8003ef8 <_malloc_r+0x64>
 8003f3c:	e7cf      	b.n	8003ede <_malloc_r+0x4a>
 8003f3e:	bf00      	nop
 8003f40:	20000090 	.word	0x20000090
 8003f44:	20000094 	.word	0x20000094

08003f48 <_realloc_r>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	4607      	mov	r7, r0
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	460e      	mov	r6, r1
 8003f50:	b921      	cbnz	r1, 8003f5c <_realloc_r+0x14>
 8003f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f56:	4611      	mov	r1, r2
 8003f58:	f7ff bf9c 	b.w	8003e94 <_malloc_r>
 8003f5c:	b922      	cbnz	r2, 8003f68 <_realloc_r+0x20>
 8003f5e:	f7ff ff49 	bl	8003df4 <_free_r>
 8003f62:	4625      	mov	r5, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f68:	f000 f830 	bl	8003fcc <_malloc_usable_size_r>
 8003f6c:	42a0      	cmp	r0, r4
 8003f6e:	d20f      	bcs.n	8003f90 <_realloc_r+0x48>
 8003f70:	4621      	mov	r1, r4
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff ff8e 	bl	8003e94 <_malloc_r>
 8003f78:	4605      	mov	r5, r0
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d0f2      	beq.n	8003f64 <_realloc_r+0x1c>
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4622      	mov	r2, r4
 8003f82:	f7ff ff0f 	bl	8003da4 <memcpy>
 8003f86:	4631      	mov	r1, r6
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f7ff ff33 	bl	8003df4 <_free_r>
 8003f8e:	e7e9      	b.n	8003f64 <_realloc_r+0x1c>
 8003f90:	4635      	mov	r5, r6
 8003f92:	e7e7      	b.n	8003f64 <_realloc_r+0x1c>

08003f94 <_sbrk_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d06      	ldr	r5, [pc, #24]	; (8003fb0 <_sbrk_r+0x1c>)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	f7fd f97a 	bl	8001298 <_sbrk>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <_sbrk_r+0x1a>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b103      	cbz	r3, 8003fae <_sbrk_r+0x1a>
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	2000036c 	.word	0x2000036c

08003fb4 <__malloc_lock>:
 8003fb4:	4801      	ldr	r0, [pc, #4]	; (8003fbc <__malloc_lock+0x8>)
 8003fb6:	f000 b811 	b.w	8003fdc <__retarget_lock_acquire_recursive>
 8003fba:	bf00      	nop
 8003fbc:	20000374 	.word	0x20000374

08003fc0 <__malloc_unlock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <__malloc_unlock+0x8>)
 8003fc2:	f000 b80c 	b.w	8003fde <__retarget_lock_release_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	20000374 	.word	0x20000374

08003fcc <_malloc_usable_size_r>:
 8003fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd0:	1f18      	subs	r0, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bfbc      	itt	lt
 8003fd6:	580b      	ldrlt	r3, [r1, r0]
 8003fd8:	18c0      	addlt	r0, r0, r3
 8003fda:	4770      	bx	lr

08003fdc <__retarget_lock_acquire_recursive>:
 8003fdc:	4770      	bx	lr

08003fde <__retarget_lock_release_recursive>:
 8003fde:	4770      	bx	lr

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
