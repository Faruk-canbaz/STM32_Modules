
haberlesme_kart_deneme_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036dc  080036dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e4  080036e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  0800375c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800375c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f86  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8c  00000000  00000000  00029026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020af2  00000000  00000000  0002b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097ae  00000000  00000000  0004c382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6152  00000000  00000000  00055b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011bc82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe0  00000000  00000000  0011bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003670 	.word	0x08003670

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003670 	.word	0x08003670

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005a8:	b4b0      	push	{r4, r5, r7}
 80005aa:	b08f      	sub	sp, #60	; 0x3c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80005b0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80005b6:	2307      	movs	r3, #7
 80005b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80005bc:	2307      	movs	r3, #7
 80005be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80005c8:	23ff      	movs	r3, #255	; 0xff
 80005ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80005d4:	2308      	movs	r3, #8
 80005d6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	461d      	mov	r5, r3
 80005dc:	f107 040c 	add.w	r4, r7, #12
 80005e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	373c      	adds	r7, #60	; 0x3c
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bcb0      	pop	{r4, r5, r7}
 80005f8:	4770      	bx	lr

080005fa <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6898      	ldr	r0, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	899b      	ldrh	r3, [r3, #12]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f001 f91f 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fe7e 	bl	8001314 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6898      	ldr	r0, [r3, #8]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	899b      	ldrh	r3, [r3, #12]
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	f001 f914 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fe73 	bl	8001314 <HAL_Delay>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000640:	2101      	movs	r1, #1
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f99f 	bl	8000986 <LoRa_read>
 8000648:	4603      	mov	r3, r0
 800064a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d107      	bne.n	8000666 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	f023 0307 	bic.w	r3, r3, #7
 800065c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	e03e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10c      	bne.n	8000686 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800066c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	b25b      	sxtb	r3, r3
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	b25b      	sxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	e02e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d10c      	bne.n	80006a6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800068c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	b25b      	sxtb	r3, r3
 8000696:	f043 0303 	orr.w	r3, r3, #3
 800069a:	b25b      	sxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2203      	movs	r2, #3
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	e01e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d10c      	bne.n	80006c6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006b0:	f023 0307 	bic.w	r3, r3, #7
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0305 	orr.w	r3, r3, #5
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2205      	movs	r2, #5
 80006c2:	61da      	str	r2, [r3, #28]
 80006c4:	e00e      	b.n	80006e4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d10b      	bne.n	80006e4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006d0:	f023 0307 	bic.w	r3, r3, #7
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	f043 0306 	orr.w	r3, r3, #6
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2206      	movs	r2, #6
 80006e2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2101      	movs	r1, #1
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f965 	bl	80009ba <LoRa_write>
	//HAL_Delay(10);
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4613      	mov	r3, r2
 8000706:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f001 f89c 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6998      	ldr	r0, [r3, #24]
 800071c:	88fa      	ldrh	r2, [r7, #6]
 800071e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	f001 fe17 	bl	8002356 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000728:	bf00      	nop
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fa00 	bl	8002b34 <HAL_SPI_GetState>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1f7      	bne.n	800072a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6998      	ldr	r0, [r3, #24]
 800073e:	8b3a      	ldrh	r2, [r7, #24]
 8000740:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	f001 ff42 	bl	80025ce <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800074a:	bf00      	nop
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f9ef 	bl	8002b34 <HAL_SPI_GetState>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d1f7      	bne.n	800074c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	f001 f872 	bl	8001850 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4613      	mov	r3, r2
 8000782:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	889b      	ldrh	r3, [r3, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	f001 f85e 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6998      	ldr	r0, [r3, #24]
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	f001 fdd9 	bl	8002356 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007a4:	bf00      	nop
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 f9c2 	bl	8002b34 <HAL_SPI_GetState>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1f7      	bne.n	80007a6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6998      	ldr	r0, [r3, #24]
 80007ba:	8b3a      	ldrh	r2, [r7, #24]
 80007bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c0:	6839      	ldr	r1, [r7, #0]
 80007c2:	f001 fdc8 	bl	8002356 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007c6:	bf00      	nop
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f9b1 	bl	8002b34 <HAL_SPI_GetState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d1f7      	bne.n	80007c8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 f834 	bl	8001850 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	04db      	lsls	r3, r3, #19
 80007fe:	115b      	asrs	r3, r3, #5
 8000800:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	461a      	mov	r2, r3
 800080c:	2106      	movs	r1, #6
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f8d3 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fd7d 	bl	8001314 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	461a      	mov	r2, r3
 8000824:	2107      	movs	r1, #7
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f8c7 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 800082c:	2005      	movs	r0, #5
 800082e:	f000 fd71 	bl	8001314 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	461a      	mov	r2, r3
 800083a:	2108      	movs	r1, #8
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f8bc 	bl	80009ba <LoRa_write>
	HAL_Delay(5);
 8000842:	2005      	movs	r0, #5
 8000844:	f000 fd66 	bl	8001314 <HAL_Delay>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b0c      	cmp	r3, #12
 800085e:	dd01      	ble.n	8000864 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000860:	230c      	movs	r3, #12
 8000862:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b06      	cmp	r3, #6
 8000868:	dc01      	bgt.n	800086e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800086a:	2307      	movs	r3, #7
 800086c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800086e:	211e      	movs	r1, #30
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f888 	bl	8000986 <LoRa_read>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f000 fd4a 	bl	8001314 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	b2da      	uxtb	r2, r3
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4413      	add	r3, r2
 8000892:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	461a      	mov	r2, r3
 8000898:	211e      	movs	r1, #30
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f88d 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fd37 	bl	8001314 <HAL_Delay>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	461a      	mov	r2, r3
 80008be:	2109      	movs	r1, #9
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f87a 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f000 fd24 	bl	8001314 <HAL_Delay>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b2c      	cmp	r3, #44	; 0x2c
 80008e8:	d801      	bhi.n	80008ee <LoRa_setOCP+0x1a>
		current = 45;
 80008ea:	232d      	movs	r3, #45	; 0x2d
 80008ec:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2bf0      	cmp	r3, #240	; 0xf0
 80008f2:	d901      	bls.n	80008f8 <LoRa_setOCP+0x24>
		current = 240;
 80008f4:	23f0      	movs	r3, #240	; 0xf0
 80008f6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b78      	cmp	r3, #120	; 0x78
 80008fc:	d809      	bhi.n	8000912 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	3b2d      	subs	r3, #45	; 0x2d
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <LoRa_setOCP+0x78>)
 8000904:	fb82 1203 	smull	r1, r2, r2, r3
 8000908:	1052      	asrs	r2, r2, #1
 800090a:	17db      	asrs	r3, r3, #31
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00b      	b.n	800092a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	2bf0      	cmp	r3, #240	; 0xf0
 8000916:	d808      	bhi.n	800092a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	331e      	adds	r3, #30
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoRa_setOCP+0x78>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1092      	asrs	r2, r2, #2
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3320      	adds	r3, #32
 800092e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	461a      	mov	r2, r3
 8000934:	210b      	movs	r1, #11
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f83f 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 800093c:	200a      	movs	r0, #10
 800093e:	f000 fce9 	bl	8001314 <HAL_Delay>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	66666667 	.word	0x66666667

08000950 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000958:	211e      	movs	r1, #30
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f813 	bl	8000986 <LoRa_read>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	f043 0307 	orr.w	r3, r3, #7
 800096a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	461a      	mov	r2, r3
 8000970:	211e      	movs	r1, #30
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f821 	bl	80009ba <LoRa_write>
	HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fccb 	bl	8001314 <HAL_Delay>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af02      	add	r7, sp, #8
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800099c:	f107 030f 	add.w	r3, r7, #15
 80009a0:	f107 010e 	add.w	r1, r7, #14
 80009a4:	2201      	movs	r2, #1
 80009a6:	9200      	str	r2, [sp, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fea4 	bl	80006f8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af02      	add	r7, sp, #8
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70fb      	strb	r3, [r7, #3]
 80009c6:	4613      	mov	r3, r2
 80009c8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009d4:	78bb      	ldrb	r3, [r7, #2]
 80009d6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009d8:	f107 030f 	add.w	r3, r7, #15
 80009dc:	f107 010e 	add.w	r1, r7, #14
 80009e0:	2201      	movs	r2, #1
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	2201      	movs	r2, #1
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fec4 	bl	8000774 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	461a      	mov	r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	72fb      	strb	r3, [r7, #11]
 8000a04:	4613      	mov	r3, r2
 8000a06:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	889b      	ldrh	r3, [r3, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f000 ff17 	bl	8001850 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6998      	ldr	r0, [r3, #24]
 8000a26:	f107 0117 	add.w	r1, r7, #23
 8000a2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f001 fc91 	bl	8002356 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a34:	bf00      	nop
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 f87a 	bl	8002b34 <HAL_SPI_GetState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d1f7      	bne.n	8000a36 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6998      	ldr	r0, [r3, #24]
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f001 fc7f 	bl	8002356 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a58:	bf00      	nop
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 f868 	bl	8002b34 <HAL_SPI_GetState>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d1f7      	bne.n	8000a5a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	f000 feeb 	bl	8001850 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]

	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fdbd 	bl	8000636 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000abc:	210e      	movs	r1, #14
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff61 	bl	8000986 <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	461a      	mov	r2, r3
 8000acc:	210d      	movs	r1, #13
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff ff73 	bl	80009ba <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2122      	movs	r1, #34	; 0x22
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff ff6d 	bl	80009ba <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff84 	bl	80009f4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000aec:	2103      	movs	r1, #3
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fda1 	bl	8000636 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000af4:	2112      	movs	r1, #18
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ff45 	bl	8000986 <LoRa_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000b00:	7cfb      	ldrb	r3, [r7, #19]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00a      	beq.n	8000b20 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	2112      	movs	r1, #18
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff53 	bl	80009ba <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000b14:	6979      	ldr	r1, [r7, #20]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fd8d 	bl	8000636 <LoRa_gotoMode>
			return 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e00f      	b.n	8000b40 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	80bb      	strh	r3, [r7, #4]
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000b2c:	6979      	ldr	r1, [r7, #20]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff fd81 	bl	8000636 <LoRa_gotoMode>
				return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e003      	b.n	8000b40 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fbeb 	bl	8001314 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000b3e:	e7d9      	b.n	8000af4 <LoRa_transmit+0x5c>
	}

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff96 	bl	8000a82 <LoRa_isvalid>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 8093 	beq.w	8000c84 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fd68 	bl	8000636 <LoRa_gotoMode>
			HAL_Delay(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f000 fbd4 	bl	8001314 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff09 	bl	8000986 <LoRa_read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f000 fbcb 	bl	8001314 <HAL_Delay>
			data = read | 0x80;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b84:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff14 	bl	80009ba <LoRa_write>
			HAL_Delay(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f000 fbbe 	bl	8001314 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fe26 	bl	80007f0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fe7e 	bl	80008ae <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe8a 	bl	80008d4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bc0:	2223      	movs	r2, #35	; 0x23
 8000bc2:	210c      	movs	r1, #12
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fef8 	bl	80009ba <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fec0 	bl	8000950 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fe39 	bl	8000850 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	211f      	movs	r1, #31
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fee9 	bl	80009ba <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	461a      	mov	r2, r3
 8000c08:	211d      	movs	r1, #29
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fed5 	bl	80009ba <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fecb 	bl	80009ba <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2121      	movs	r1, #33	; 0x21
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fec3 	bl	80009ba <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fea5 	bl	8000986 <LoRa_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c46:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff feb3 	bl	80009ba <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c54:	2101      	movs	r1, #1
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fced 	bl	8000636 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 fb56 	bl	8001314 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c68:	2142      	movs	r1, #66	; 0x42
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe8b 	bl	8000986 <LoRa_read>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d101      	bne.n	8000c7e <LoRa_init+0x136>
				return LORA_OK;
 8000c7a:	23c8      	movs	r3, #200	; 0xc8
 8000c7c:	e004      	b.n	8000c88 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c82:	e001      	b.n	8000c88 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c84:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2e      	ldr	r2, [pc, #184]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_GPIO_Init+0xf4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2110      	movs	r1, #16
 8000d1a:	481b      	ldr	r0, [pc, #108]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000d1c:	f000 fd98 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2101      	movs	r1, #1
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d26:	f000 fd93 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000d42:	f000 fbf1 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000d46:	2310      	movs	r3, #16
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000d5c:	f000 fbe4 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d78:	f000 fbd6 	bl	8001528 <HAL_GPIO_Init>

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800

08000d94 <loRaBaslat>:

uint16_t size_print;
uint8_t Data_print[256];

void loRaBaslat()
{
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8000d9a:	4c30      	ldr	r4, [pc, #192]	; (8000e5c <loRaBaslat+0xc8>)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc02 	bl	80005a8 <newLoRa>
 8000da4:	4625      	mov	r5, r4
 8000da6:	463c      	mov	r4, r7
 8000da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000db4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_Delay(5);
 8000db8:	2005      	movs	r0, #5
 8000dba:	f000 faab 	bl	8001314 <HAL_Delay>

	  myLoRa.CS_port         = SPI1_NSS_GPIO_Port;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <loRaBaslat+0xc8>)
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <loRaBaslat+0xcc>)
 8000dc2:	601a      	str	r2, [r3, #0]
	  myLoRa.CS_pin          = SPI1_NSS_Pin;
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <loRaBaslat+0xc8>)
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	809a      	strh	r2, [r3, #4]
	  myLoRa.reset_port      = SPI1_RST_GPIO_Port;
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <loRaBaslat+0xc8>)
 8000dcc:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <loRaBaslat+0xd0>)
 8000dce:	609a      	str	r2, [r3, #8]
	  myLoRa.reset_pin       = SPI1_RST_Pin;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <loRaBaslat+0xc8>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	819a      	strh	r2, [r3, #12]
	  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <loRaBaslat+0xc8>)
 8000dd8:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <loRaBaslat+0xd4>)
 8000dda:	611a      	str	r2, [r3, #16]
	  myLoRa.DIO0_pin        = DIO0_Pin;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <loRaBaslat+0xc8>)
 8000dde:	2210      	movs	r2, #16
 8000de0:	829a      	strh	r2, [r3, #20]
	  myLoRa.hSPIx           = &hspi1;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <loRaBaslat+0xc8>)
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <loRaBaslat+0xd8>)
 8000de6:	619a      	str	r2, [r3, #24]
	HAL_Delay(5);
 8000de8:	2005      	movs	r0, #5
 8000dea:	f000 fa93 	bl	8001314 <HAL_Delay>

	myLoRa.frequency = 434.0;             // default = 433 MHz
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <loRaBaslat+0xc8>)
 8000df0:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8000df4:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_9;            // default = SF_7
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <loRaBaslat+0xc8>)
 8000df8:	2209      	movs	r2, #9
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <loRaBaslat+0xc8>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_7;          // default = CR_4_5
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <loRaBaslat+0xc8>)
 8000e08:	2203      	movs	r2, #3
 8000e0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <loRaBaslat+0xc8>)
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 250; // default = 100 mA
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <loRaBaslat+0xc8>)
 8000e18:	22fa      	movs	r2, #250	; 0xfa
 8000e1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 8;              // default = 8;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <loRaBaslat+0xc8>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_Delay(5);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f000 fa75 	bl	8001314 <HAL_Delay>

	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <loRaBaslat+0xd0>)
 8000e30:	f000 fd0e 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2110      	movs	r1, #16
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <loRaBaslat+0xcc>)
 8000e3a:	f000 fd09 	bl	8001850 <HAL_GPIO_WritePin>

	LoRa_reset(&myLoRa);
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <loRaBaslat+0xc8>)
 8000e40:	f7ff fbdb 	bl	80005fa <LoRa_reset>
	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <loRaBaslat+0xc8>)
 8000e46:	f7ff fe7f 	bl	8000b48 <LoRa_init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	86fb      	strh	r3, [r7, #54]	; 0x36

	else if (LoRa_status == LORA_UNAVAILABLE){

	}

	HAL_Delay(15);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 fa60 	bl	8001314 <HAL_Delay>
}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5c:	2000019c 	.word	0x2000019c
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	200001c8 	.word	0x200001c8

08000e70 <loraGonder>:


void loraGonder(uint8_t* veri, uint16_t size)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
	uint8_t ret = LoRa_transmit(&myLoRa, (uint8_t*) veri, size, 100);
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <loraGonder+0x28>)
 8000e86:	f7ff fe07 	bl	8000a98 <LoRa_transmit>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]

	if (ret != 1);
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000019c 	.word	0x2000019c

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 f9c6 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f81c 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f7ff fef2 	bl	8000c90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eac:	f000 f87e 	bl	8000fac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  loRaBaslat();
 8000eb0:	f7ff ff70 	bl	8000d94 <loRaBaslat>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  size_print = sprintf((char *) Data_print,"lutfenGonder");
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <main+0x38>)
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <main+0x3c>)
 8000eb8:	f001 ffac 	bl	8002e14 <siprintf>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <main+0x40>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	  loraGonder(Data_print, size_print);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <main+0x40>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <main+0x3c>)
 8000ecc:	f7ff ffd0 	bl	8000e70 <loraGonder>
  {
 8000ed0:	e7f0      	b.n	8000eb4 <main+0x18>
 8000ed2:	bf00      	nop
 8000ed4:	08003688 	.word	0x08003688
 8000ed8:	20000098 	.word	0x20000098
 8000edc:	20000198 	.word	0x20000198

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2234      	movs	r2, #52	; 0x34
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 ff88 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fed7 	bl	8001d08 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f60:	f000 f81e 	bl	8000fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fc80 	bl	8001884 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f8a:	f000 f809 	bl	8000fa0 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	; 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f001 f921 	bl	8002244 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f7ff ffca 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001c8 	.word	0x200001c8
 8001014:	40013000 	.word	0x40013000

08001018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_SPI_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 8001044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_SPI_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001072:	23e0      	movs	r3, #224	; 0xe0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001082:	2305      	movs	r3, #5
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_SPI_MspInit+0x8c>)
 800108e:	f000 fa4b 	bl	8001528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40013000 	.word	0x40013000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f8c6 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f001 fe18 	bl	8002db0 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20020000 	.word	0x20020000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	20000238 	.word	0x20000238

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001206:	f7ff ffd7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f001 fdd7 	bl	8002dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fe45 	bl	8000e9c <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001220:	080036ec 	.word	0x080036ec
  ldr r2, =_sbss
 8001224:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001228:	20000234 	.word	0x20000234

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f931 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff ff20 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f93b 	bl	800150e <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f911 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000220 	.word	0x20000220

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000220 	.word	0x20000220

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff47 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff5c 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffb0 	bl	800147c <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e165      	b.n	8001810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8154 	bne.w	800180a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80ae 	beq.w	800180a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_GPIO_Init+0x300>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a5c      	ldr	r2, [pc, #368]	; (8001828 <HAL_GPIO_Init+0x300>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_GPIO_Init+0x300>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_GPIO_Init+0x304>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4f      	ldr	r2, [pc, #316]	; (8001830 <HAL_GPIO_Init+0x308>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x21a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_GPIO_Init+0x30c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x216>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4d      	ldr	r2, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x310>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x212>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x20e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4b      	ldr	r2, [pc, #300]	; (8001840 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x20a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4a      	ldr	r2, [pc, #296]	; (8001844 <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x206>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a49      	ldr	r2, [pc, #292]	; (8001848 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x202>
 8001726:	2306      	movs	r3, #6
 8001728:	e00c      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800172a:	2307      	movs	r3, #7
 800172c:	e00a      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800172e:	2305      	movs	r3, #5
 8001730:	e008      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001732:	2304      	movs	r3, #4
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001736:	2303      	movs	r3, #3
 8001738:	e004      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800173a:	2302      	movs	r3, #2
 800173c:	e002      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001742:	2300      	movs	r3, #0
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f002 0203 	and.w	r2, r2, #3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4093      	lsls	r3, r2
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001754:	4935      	ldr	r1, [pc, #212]	; (800182c <HAL_GPIO_Init+0x304>)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_GPIO_Init+0x324>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_GPIO_Init+0x324>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_GPIO_Init+0x324>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_GPIO_Init+0x324>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_GPIO_Init+0x324>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_GPIO_Init+0x324>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_GPIO_Init+0x324>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_GPIO_Init+0x324>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	f67f ae96 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40013800 	.word	0x40013800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40020800 	.word	0x40020800
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40021000 	.word	0x40021000
 8001844:	40021400 	.word	0x40021400
 8001848:	40021800 	.word	0x40021800
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0cc      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d90c      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0b8      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d8:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	494d      	ldr	r1, [pc, #308]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d044      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d119      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e07f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d003      	beq.n	8001942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193e:	2b03      	cmp	r3, #3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e067      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff fcc2 	bl	80012fc <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff fcbe 	bl	80012fc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04f      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d20c      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e032      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4916      	ldr	r1, [pc, #88]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	490e      	ldr	r1, [pc, #56]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0a:	f000 f821 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	490a      	ldr	r1, [pc, #40]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fc22 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08003698 	.word	0x08003698
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a58:	2600      	movs	r6, #0
 8001a5a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001a60:	2600      	movs	r6, #0
 8001a62:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001a64:	2600      	movs	r6, #0
 8001a66:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a68:	2600      	movs	r6, #0
 8001a6a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4ea3      	ldr	r6, [pc, #652]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a6e:	68b6      	ldr	r6, [r6, #8]
 8001a70:	f006 060c 	and.w	r6, r6, #12
 8001a74:	2e0c      	cmp	r6, #12
 8001a76:	f200 8137 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x298>
 8001a7a:	f20f 0c08 	addw	ip, pc, #8
 8001a7e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001ab9 	.word	0x08001ab9
 8001a88:	08001ce9 	.word	0x08001ce9
 8001a8c:	08001ce9 	.word	0x08001ce9
 8001a90:	08001ce9 	.word	0x08001ce9
 8001a94:	08001abf 	.word	0x08001abf
 8001a98:	08001ce9 	.word	0x08001ce9
 8001a9c:	08001ce9 	.word	0x08001ce9
 8001aa0:	08001ce9 	.word	0x08001ce9
 8001aa4:	08001ac5 	.word	0x08001ac5
 8001aa8:	08001ce9 	.word	0x08001ce9
 8001aac:	08001ce9 	.word	0x08001ce9
 8001ab0:	08001ce9 	.word	0x08001ce9
 8001ab4:	08001bdb 	.word	0x08001bdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001aba:	613b      	str	r3, [r7, #16]
       break;
 8001abc:	e117      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001ac0:	613b      	str	r3, [r7, #16]
      break;
 8001ac2:	e114      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001acc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ace:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001aea:	f04f 0500 	mov.w	r5, #0
 8001aee:	ea02 0004 	and.w	r0, r2, r4
 8001af2:	ea03 0105 	and.w	r1, r3, r5
 8001af6:	4b83      	ldr	r3, [pc, #524]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001af8:	fb03 f201 	mul.w	r2, r3, r1
 8001afc:	2300      	movs	r3, #0
 8001afe:	fb03 f300 	mul.w	r3, r3, r0
 8001b02:	4413      	add	r3, r2
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b06:	fba0 0102 	umull	r0, r1, r0, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	461a      	mov	r2, r3
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f7fe fbcb 	bl	80002b0 <__aeabi_uldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e04c      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	ea02 0800 	and.w	r8, r2, r0
 8001b3c:	ea03 0901 	and.w	r9, r3, r1
 8001b40:	4640      	mov	r0, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	014b      	lsls	r3, r1, #5
 8001b4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b52:	0142      	lsls	r2, r0, #5
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	ebb0 0008 	subs.w	r0, r0, r8
 8001b5c:	eb61 0109 	sbc.w	r1, r1, r9
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	018b      	lsls	r3, r1, #6
 8001b6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b6e:	0182      	lsls	r2, r0, #6
 8001b70:	1a12      	subs	r2, r2, r0
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	00d9      	lsls	r1, r3, #3
 8001b80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b84:	00d0      	lsls	r0, r2, #3
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	eb12 0208 	adds.w	r2, r2, r8
 8001b8e:	eb43 0309 	adc.w	r3, r3, r9
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0299      	lsls	r1, r3, #10
 8001b9c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ba0:	0290      	lsls	r0, r2, #10
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	f7fe fb7d 	bl	80002b0 <__aeabi_uldivmod>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	613b      	str	r3, [r7, #16]
      break;
 8001bd8:	e089      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bda:	4948      	ldr	r1, [pc, #288]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bdc:	6849      	ldr	r1, [r1, #4]
 8001bde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001be2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be4:	4945      	ldr	r1, [pc, #276]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001be6:	6849      	ldr	r1, [r1, #4]
 8001be8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001bec:	2900      	cmp	r1, #0
 8001bee:	d024      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf0:	4942      	ldr	r1, [pc, #264]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bf2:	6849      	ldr	r1, [r1, #4]
 8001bf4:	0989      	lsrs	r1, r1, #6
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c00:	f04f 0500 	mov.w	r5, #0
 8001c04:	ea00 0204 	and.w	r2, r0, r4
 8001c08:	ea01 0305 	and.w	r3, r1, r5
 8001c0c:	493d      	ldr	r1, [pc, #244]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c0e:	fb01 f003 	mul.w	r0, r1, r3
 8001c12:	2100      	movs	r1, #0
 8001c14:	fb01 f102 	mul.w	r1, r1, r2
 8001c18:	1844      	adds	r4, r0, r1
 8001c1a:	493a      	ldr	r1, [pc, #232]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c1c:	fba2 0101 	umull	r0, r1, r2, r1
 8001c20:	1863      	adds	r3, r4, r1
 8001c22:	4619      	mov	r1, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f7fe fb40 	bl	80002b0 <__aeabi_uldivmod>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4613      	mov	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e04a      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	461a      	mov	r2, r3
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	ea02 0400 	and.w	r4, r2, r0
 8001c52:	ea03 0501 	and.w	r5, r3, r1
 8001c56:	4620      	mov	r0, r4
 8001c58:	4629      	mov	r1, r5
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	014b      	lsls	r3, r1, #5
 8001c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c68:	0142      	lsls	r2, r0, #5
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	1b00      	subs	r0, r0, r4
 8001c70:	eb61 0105 	sbc.w	r1, r1, r5
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	018b      	lsls	r3, r1, #6
 8001c7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c82:	0182      	lsls	r2, r0, #6
 8001c84:	1a12      	subs	r2, r2, r0
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	00d9      	lsls	r1, r3, #3
 8001c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c98:	00d0      	lsls	r0, r2, #3
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	1912      	adds	r2, r2, r4
 8001ca0:	eb45 0303 	adc.w	r3, r5, r3
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0299      	lsls	r1, r3, #10
 8001cae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cb2:	0290      	lsls	r0, r2, #10
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	f7fe faf4 	bl	80002b0 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0f1b      	lsrs	r3, r3, #28
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	613b      	str	r3, [r7, #16]
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001cea:	613b      	str	r3, [r7, #16]
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	693b      	ldr	r3, [r7, #16]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	017d7840 	.word	0x017d7840

08001d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e28d      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8083 	beq.w	8001e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d28:	4b94      	ldr	r3, [pc, #592]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d019      	beq.n	8001d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d34:	4b91      	ldr	r3, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d40:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4c:	d00c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d112      	bne.n	8001d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b84      	ldr	r3, [pc, #528]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x124>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e25a      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x90>
 8001d8a:	4b7c      	ldr	r3, [pc, #496]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7b      	ldr	r2, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xcc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0xb4>
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a72      	ldr	r2, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xcc>
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6b      	ldr	r2, [pc, #428]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa8e 	bl	80012fc <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fa8a 	bl	80012fc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e21f      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xdc>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fa7a 	bl	80012fc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fa76 	bl	80012fc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e20b      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x104>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d06f      	beq.n	8001f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e46:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x186>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1d3      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4937      	ldr	r1, [pc, #220]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x278>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fa23 	bl	80012fc <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fa1f 	bl	80012fc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1b4      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4925      	ldr	r1, [pc, #148]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_OscConfig+0x278>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fa02 	bl	80012fc <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff f9fe 	bl	80012fc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e193      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d036      	beq.n	8001f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff f9e2 	bl	80012fc <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f9de 	bl	80012fc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e173      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x234>
 8001f5a:	e01b      	b.n	8001f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f9cb 	bl	80012fc <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e00e      	b.n	8001f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f9c7 	bl	80012fc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d907      	bls.n	8001f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e15c      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
 8001f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ea      	bne.n	8001f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8097 	beq.w	80020d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <HAL_RCC_OscConfig+0x4b0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x4b0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x4b0>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f987 	bl	80012fc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff f983 	bl	80012fc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e118      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x4b0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x31e>
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x358>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x340>
 800202e:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a5d      	ldr	r2, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0x358>
 8002048:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	4a59      	ldr	r2, [pc, #356]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	; 0x70
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a56      	ldr	r2, [pc, #344]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 0304 	bic.w	r3, r3, #4
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d015      	beq.n	8002094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f948 	bl	80012fc <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f944 	bl	80012fc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0d7      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ee      	beq.n	8002070 <HAL_RCC_OscConfig+0x368>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f932 	bl	80012fc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f92e 	bl	80012fc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0c1      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ee      	bne.n	800209c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a3a      	ldr	r2, [pc, #232]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80ad 	beq.w	8002234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d060      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d145      	bne.n	800217a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <HAL_RCC_OscConfig+0x4b4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f902 	bl	80012fc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f8fe 	bl	80012fc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e093      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	071b      	lsls	r3, r3, #28
 8002146:	491b      	ldr	r1, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x4b4>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff f8d3 	bl	80012fc <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff f8cf 	bl	80012fc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e064      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x452>
 8002178:	e05c      	b.n	8002234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0x4b4>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff f8bc 	bl	80012fc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f8b8 	bl	80012fc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04d      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_OscConfig+0x4ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x480>
 80021a6:	e045      	b.n	8002234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e040      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40007000 	.word	0x40007000
 80021bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCC_OscConfig+0x538>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d030      	beq.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d129      	bne.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d122      	bne.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d119      	bne.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	3b01      	subs	r3, #1
 800220a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d10f      	bne.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07b      	b.n	800234e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002266:	d009      	beq.n	800227c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
 800226e:	e005      	b.n	800227c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe febe 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0104 	and.w	r1, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f003 0210 	and.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b088      	sub	sp, #32
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_SPI_Transmit+0x22>
 8002374:	2302      	movs	r3, #2
 8002376:	e126      	b.n	80025c6 <HAL_SPI_Transmit+0x270>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002380:	f7fe ffbc 	bl	80012fc <HAL_GetTick>
 8002384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d002      	beq.n	800239c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800239a:	e10b      	b.n	80025b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x52>
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023ac:	e102      	b.n	80025b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f4:	d10f      	bne.n	8002416 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d007      	beq.n	8002434 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243c:	d14b      	bne.n	80024d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_Transmit+0xf6>
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d13e      	bne.n	80024ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002470:	e02b      	b.n	80024ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d112      	bne.n	80024a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80024a4:	e011      	b.n	80024ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a6:	f7fe ff29 	bl	80012fc <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d803      	bhi.n	80024be <HAL_SPI_Transmit+0x168>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Transmit+0x16e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024c8:	e074      	b.n	80025b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ce      	bne.n	8002472 <HAL_SPI_Transmit+0x11c>
 80024d4:	e04c      	b.n	8002570 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x18e>
 80024de:	8afb      	ldrh	r3, [r7, #22]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d140      	bne.n	8002566 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800250a:	e02c      	b.n	8002566 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d113      	bne.n	8002542 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002540:	e011      	b.n	8002566 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002542:	f7fe fedb 	bl	80012fc <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d803      	bhi.n	800255a <HAL_SPI_Transmit+0x204>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d102      	bne.n	8002560 <HAL_SPI_Transmit+0x20a>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002564:	e026      	b.n	80025b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1cd      	bne.n	800250c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fbd9 	bl	8002d2c <SPI_EndRxTxTransaction>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	e000      	b.n	80025b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80025b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b088      	sub	sp, #32
 80025d2:	af02      	add	r7, sp, #8
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ea:	d112      	bne.n	8002612 <HAL_SPI_Receive+0x44>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10e      	bne.n	8002612 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2204      	movs	r2, #4
 80025f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f8f1 	bl	80027f0 <HAL_SPI_TransmitReceive>
 800260e:	4603      	mov	r3, r0
 8002610:	e0ea      	b.n	80027e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_SPI_Receive+0x52>
 800261c:	2302      	movs	r3, #2
 800261e:	e0e3      	b.n	80027e8 <HAL_SPI_Receive+0x21a>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002628:	f7fe fe68 	bl	80012fc <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800263e:	e0ca      	b.n	80027d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_SPI_Receive+0x7e>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002650:	e0c1      	b.n	80027d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2204      	movs	r2, #4
 8002656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002698:	d10f      	bne.n	80026ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d007      	beq.n	80026d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d162      	bne.n	80027a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026e0:	e02e      	b.n	8002740 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d115      	bne.n	800271c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f103 020c 	add.w	r2, r3, #12
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800271a:	e011      	b.n	8002740 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271c:	f7fe fdee 	bl	80012fc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d803      	bhi.n	8002734 <HAL_SPI_Receive+0x166>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d102      	bne.n	800273a <HAL_SPI_Receive+0x16c>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800273e:	e04a      	b.n	80027d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1cb      	bne.n	80026e2 <HAL_SPI_Receive+0x114>
 800274a:	e031      	b.n	80027b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d113      	bne.n	8002782 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	b292      	uxth	r2, r2
 8002766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	1c9a      	adds	r2, r3, #2
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002780:	e011      	b.n	80027a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002782:	f7fe fdbb 	bl	80012fc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d803      	bhi.n	800279a <HAL_SPI_Receive+0x1cc>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d102      	bne.n	80027a0 <HAL_SPI_Receive+0x1d2>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027a4:	e017      	b.n	80027d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1cd      	bne.n	800274c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fa53 	bl	8002c60 <SPI_EndRxTransaction>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
 80027d2:	e000      	b.n	80027d6 <HAL_SPI_Receive+0x208>
  }

error :
 80027d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027fe:	2301      	movs	r3, #1
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x26>
 8002812:	2302      	movs	r3, #2
 8002814:	e18a      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x33c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281e:	f7fe fd6d 	bl	80012fc <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800283c:	2b01      	cmp	r3, #1
 800283e:	d00f      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x70>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002846:	d107      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x68>
 8002850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002854:	2b04      	cmp	r3, #4
 8002856:	d003      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002858:	2302      	movs	r3, #2
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800285e:	e15b      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x82>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x82>
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002878:	e14e      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b04      	cmp	r3, #4
 8002884:	d003      	beq.n	800288e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2205      	movs	r2, #5
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	887a      	ldrh	r2, [r7, #2]
 800289e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d007      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ea:	d178      	bne.n	80029de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x10a>
 80028f4:	8b7b      	ldrh	r3, [r7, #26]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d166      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800291e:	e053      	b.n	80029c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11b      	bne.n	8002966 <HAL_SPI_TransmitReceive+0x176>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d016      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x176>
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d113      	bne.n	8002966 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	1c9a      	adds	r2, r3, #2
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d119      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1b8>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d014      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	b292      	uxth	r2, r2
 800298a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a4:	2301      	movs	r3, #1
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029a8:	f7fe fca8 	bl	80012fc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d807      	bhi.n	80029c8 <HAL_SPI_TransmitReceive+0x1d8>
 80029b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d003      	beq.n	80029c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029c6:	e0a7      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1a6      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x130>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1a1      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x130>
 80029dc:	e07c      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x1fc>
 80029e6:	8b7b      	ldrh	r3, [r7, #26]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d16b      	bne.n	8002ac4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a12:	e057      	b.n	8002ac4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d11c      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x26c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x26c>
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d114      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d119      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x2ae>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a9e:	f7fe fc2d 	bl	80012fc <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d803      	bhi.n	8002ab6 <HAL_SPI_TransmitReceive+0x2c6>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d102      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x2cc>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ac2:	e029      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1a2      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x224>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d19d      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f925 	bl	8002d2c <SPI_EndRxTxTransaction>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002af4:	e010      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e000      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3730      	adds	r7, #48	; 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b42:	b2db      	uxtb	r3, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b60:	f7fe fbcc 	bl	80012fc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b70:	f7fe fbc4 	bl	80012fc <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	0d1b      	lsrs	r3, r3, #20
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b86:	e054      	b.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d050      	beq.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b90:	f7fe fbb4 	bl	80012fc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d902      	bls.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d13d      	bne.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbe:	d111      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	d004      	beq.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d107      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d10f      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e017      	b.n	8002c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d19b      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c74:	d111      	bne.n	8002c9a <SPI_EndRxTransaction+0x3a>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7e:	d004      	beq.n	8002c8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c88:	d107      	bne.n	8002c9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca2:	d12a      	bne.n	8002cfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cac:	d012      	beq.n	8002cd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff ff49 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d02d      	beq.n	8002d20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e026      	b.n	8002d22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2101      	movs	r1, #1
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7ff ff36 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01a      	beq.n	8002d20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e013      	b.n	8002d22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2101      	movs	r1, #1
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff ff23 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <SPI_EndRxTxTransaction+0x7c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <SPI_EndRxTxTransaction+0x80>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0d5b      	lsrs	r3, r3, #21
 8002d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d112      	bne.n	8002d7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff fef4 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d0f2      	beq.n	8002d7e <SPI_EndRxTxTransaction+0x52>
 8002d98:	e000      	b.n	8002d9c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d9a:	bf00      	nop
  }

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000
 8002dac:	165e9f81 	.word	0x165e9f81

08002db0 <__errno>:
 8002db0:	4b01      	ldr	r3, [pc, #4]	; (8002db8 <__errno+0x8>)
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <__libc_init_array>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4d0d      	ldr	r5, [pc, #52]	; (8002df4 <__libc_init_array+0x38>)
 8002dc0:	4c0d      	ldr	r4, [pc, #52]	; (8002df8 <__libc_init_array+0x3c>)
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	10a4      	asrs	r4, r4, #2
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	42a6      	cmp	r6, r4
 8002dca:	d109      	bne.n	8002de0 <__libc_init_array+0x24>
 8002dcc:	4d0b      	ldr	r5, [pc, #44]	; (8002dfc <__libc_init_array+0x40>)
 8002dce:	4c0c      	ldr	r4, [pc, #48]	; (8002e00 <__libc_init_array+0x44>)
 8002dd0:	f000 fc4e 	bl	8003670 <_init>
 8002dd4:	1b64      	subs	r4, r4, r5
 8002dd6:	10a4      	asrs	r4, r4, #2
 8002dd8:	2600      	movs	r6, #0
 8002dda:	42a6      	cmp	r6, r4
 8002ddc:	d105      	bne.n	8002dea <__libc_init_array+0x2e>
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
 8002de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de4:	4798      	blx	r3
 8002de6:	3601      	adds	r6, #1
 8002de8:	e7ee      	b.n	8002dc8 <__libc_init_array+0xc>
 8002dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dee:	4798      	blx	r3
 8002df0:	3601      	adds	r6, #1
 8002df2:	e7f2      	b.n	8002dda <__libc_init_array+0x1e>
 8002df4:	080036e4 	.word	0x080036e4
 8002df8:	080036e4 	.word	0x080036e4
 8002dfc:	080036e4 	.word	0x080036e4
 8002e00:	080036e8 	.word	0x080036e8

08002e04 <memset>:
 8002e04:	4402      	add	r2, r0
 8002e06:	4603      	mov	r3, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <siprintf>:
 8002e14:	b40e      	push	{r1, r2, r3}
 8002e16:	b500      	push	{lr}
 8002e18:	b09c      	sub	sp, #112	; 0x70
 8002e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e1c:	9002      	str	r0, [sp, #8]
 8002e1e:	9006      	str	r0, [sp, #24]
 8002e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <siprintf+0x38>)
 8002e26:	9107      	str	r1, [sp, #28]
 8002e28:	9104      	str	r1, [sp, #16]
 8002e2a:	4909      	ldr	r1, [pc, #36]	; (8002e50 <siprintf+0x3c>)
 8002e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e30:	9105      	str	r1, [sp, #20]
 8002e32:	6800      	ldr	r0, [r0, #0]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	a902      	add	r1, sp, #8
 8002e38:	f000 f868 	bl	8002f0c <_svfiprintf_r>
 8002e3c:	9b02      	ldr	r3, [sp, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	b01c      	add	sp, #112	; 0x70
 8002e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e48:	b003      	add	sp, #12
 8002e4a:	4770      	bx	lr
 8002e4c:	2000000c 	.word	0x2000000c
 8002e50:	ffff0208 	.word	0xffff0208

08002e54 <__ssputs_r>:
 8002e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e58:	688e      	ldr	r6, [r1, #8]
 8002e5a:	429e      	cmp	r6, r3
 8002e5c:	4682      	mov	sl, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	4690      	mov	r8, r2
 8002e62:	461f      	mov	r7, r3
 8002e64:	d838      	bhi.n	8002ed8 <__ssputs_r+0x84>
 8002e66:	898a      	ldrh	r2, [r1, #12]
 8002e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e6c:	d032      	beq.n	8002ed4 <__ssputs_r+0x80>
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	6909      	ldr	r1, [r1, #16]
 8002e72:	eba5 0901 	sub.w	r9, r5, r1
 8002e76:	6965      	ldr	r5, [r4, #20]
 8002e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e80:	3301      	adds	r3, #1
 8002e82:	444b      	add	r3, r9
 8002e84:	106d      	asrs	r5, r5, #1
 8002e86:	429d      	cmp	r5, r3
 8002e88:	bf38      	it	cc
 8002e8a:	461d      	movcc	r5, r3
 8002e8c:	0553      	lsls	r3, r2, #21
 8002e8e:	d531      	bpl.n	8002ef4 <__ssputs_r+0xa0>
 8002e90:	4629      	mov	r1, r5
 8002e92:	f000 fb47 	bl	8003524 <_malloc_r>
 8002e96:	4606      	mov	r6, r0
 8002e98:	b950      	cbnz	r0, 8002eb0 <__ssputs_r+0x5c>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	f8ca 3000 	str.w	r3, [sl]
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea6:	81a3      	strh	r3, [r4, #12]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	6921      	ldr	r1, [r4, #16]
 8002eb2:	464a      	mov	r2, r9
 8002eb4:	f000 fabe 	bl	8003434 <memcpy>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	81a3      	strh	r3, [r4, #12]
 8002ec4:	6126      	str	r6, [r4, #16]
 8002ec6:	6165      	str	r5, [r4, #20]
 8002ec8:	444e      	add	r6, r9
 8002eca:	eba5 0509 	sub.w	r5, r5, r9
 8002ece:	6026      	str	r6, [r4, #0]
 8002ed0:	60a5      	str	r5, [r4, #8]
 8002ed2:	463e      	mov	r6, r7
 8002ed4:	42be      	cmp	r6, r7
 8002ed6:	d900      	bls.n	8002eda <__ssputs_r+0x86>
 8002ed8:	463e      	mov	r6, r7
 8002eda:	4632      	mov	r2, r6
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	4641      	mov	r1, r8
 8002ee0:	f000 fab6 	bl	8003450 <memmove>
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	6822      	ldr	r2, [r4, #0]
 8002ee8:	1b9b      	subs	r3, r3, r6
 8002eea:	4432      	add	r2, r6
 8002eec:	60a3      	str	r3, [r4, #8]
 8002eee:	6022      	str	r2, [r4, #0]
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e7db      	b.n	8002eac <__ssputs_r+0x58>
 8002ef4:	462a      	mov	r2, r5
 8002ef6:	f000 fb6f 	bl	80035d8 <_realloc_r>
 8002efa:	4606      	mov	r6, r0
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d1e1      	bne.n	8002ec4 <__ssputs_r+0x70>
 8002f00:	6921      	ldr	r1, [r4, #16]
 8002f02:	4650      	mov	r0, sl
 8002f04:	f000 fabe 	bl	8003484 <_free_r>
 8002f08:	e7c7      	b.n	8002e9a <__ssputs_r+0x46>
	...

08002f0c <_svfiprintf_r>:
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	4698      	mov	r8, r3
 8002f12:	898b      	ldrh	r3, [r1, #12]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	b09d      	sub	sp, #116	; 0x74
 8002f18:	4607      	mov	r7, r0
 8002f1a:	460d      	mov	r5, r1
 8002f1c:	4614      	mov	r4, r2
 8002f1e:	d50e      	bpl.n	8002f3e <_svfiprintf_r+0x32>
 8002f20:	690b      	ldr	r3, [r1, #16]
 8002f22:	b963      	cbnz	r3, 8002f3e <_svfiprintf_r+0x32>
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	f000 fafd 	bl	8003524 <_malloc_r>
 8002f2a:	6028      	str	r0, [r5, #0]
 8002f2c:	6128      	str	r0, [r5, #16]
 8002f2e:	b920      	cbnz	r0, 8002f3a <_svfiprintf_r+0x2e>
 8002f30:	230c      	movs	r3, #12
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	e0d1      	b.n	80030de <_svfiprintf_r+0x1d2>
 8002f3a:	2340      	movs	r3, #64	; 0x40
 8002f3c:	616b      	str	r3, [r5, #20]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9309      	str	r3, [sp, #36]	; 0x24
 8002f42:	2320      	movs	r3, #32
 8002f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f4c:	2330      	movs	r3, #48	; 0x30
 8002f4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030f8 <_svfiprintf_r+0x1ec>
 8002f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f56:	f04f 0901 	mov.w	r9, #1
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	469a      	mov	sl, r3
 8002f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f62:	b10a      	cbz	r2, 8002f68 <_svfiprintf_r+0x5c>
 8002f64:	2a25      	cmp	r2, #37	; 0x25
 8002f66:	d1f9      	bne.n	8002f5c <_svfiprintf_r+0x50>
 8002f68:	ebba 0b04 	subs.w	fp, sl, r4
 8002f6c:	d00b      	beq.n	8002f86 <_svfiprintf_r+0x7a>
 8002f6e:	465b      	mov	r3, fp
 8002f70:	4622      	mov	r2, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	4638      	mov	r0, r7
 8002f76:	f7ff ff6d 	bl	8002e54 <__ssputs_r>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	f000 80aa 	beq.w	80030d4 <_svfiprintf_r+0x1c8>
 8002f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f82:	445a      	add	r2, fp
 8002f84:	9209      	str	r2, [sp, #36]	; 0x24
 8002f86:	f89a 3000 	ldrb.w	r3, [sl]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a2 	beq.w	80030d4 <_svfiprintf_r+0x1c8>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295
 8002f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f9a:	f10a 0a01 	add.w	sl, sl, #1
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	9307      	str	r3, [sp, #28]
 8002fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fa8:	4654      	mov	r4, sl
 8002faa:	2205      	movs	r2, #5
 8002fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb0:	4851      	ldr	r0, [pc, #324]	; (80030f8 <_svfiprintf_r+0x1ec>)
 8002fb2:	f7fd f92d 	bl	8000210 <memchr>
 8002fb6:	9a04      	ldr	r2, [sp, #16]
 8002fb8:	b9d8      	cbnz	r0, 8002ff2 <_svfiprintf_r+0xe6>
 8002fba:	06d0      	lsls	r0, r2, #27
 8002fbc:	bf44      	itt	mi
 8002fbe:	2320      	movmi	r3, #32
 8002fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fc4:	0711      	lsls	r1, r2, #28
 8002fc6:	bf44      	itt	mi
 8002fc8:	232b      	movmi	r3, #43	; 0x2b
 8002fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fce:	f89a 3000 	ldrb.w	r3, [sl]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d015      	beq.n	8003002 <_svfiprintf_r+0xf6>
 8002fd6:	9a07      	ldr	r2, [sp, #28]
 8002fd8:	4654      	mov	r4, sl
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f04f 0c0a 	mov.w	ip, #10
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fe6:	3b30      	subs	r3, #48	; 0x30
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d94e      	bls.n	800308a <_svfiprintf_r+0x17e>
 8002fec:	b1b0      	cbz	r0, 800301c <_svfiprintf_r+0x110>
 8002fee:	9207      	str	r2, [sp, #28]
 8002ff0:	e014      	b.n	800301c <_svfiprintf_r+0x110>
 8002ff2:	eba0 0308 	sub.w	r3, r0, r8
 8002ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	9304      	str	r3, [sp, #16]
 8002ffe:	46a2      	mov	sl, r4
 8003000:	e7d2      	b.n	8002fa8 <_svfiprintf_r+0x9c>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	1d19      	adds	r1, r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	9103      	str	r1, [sp, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfbb      	ittet	lt
 800300e:	425b      	neglt	r3, r3
 8003010:	f042 0202 	orrlt.w	r2, r2, #2
 8003014:	9307      	strge	r3, [sp, #28]
 8003016:	9307      	strlt	r3, [sp, #28]
 8003018:	bfb8      	it	lt
 800301a:	9204      	strlt	r2, [sp, #16]
 800301c:	7823      	ldrb	r3, [r4, #0]
 800301e:	2b2e      	cmp	r3, #46	; 0x2e
 8003020:	d10c      	bne.n	800303c <_svfiprintf_r+0x130>
 8003022:	7863      	ldrb	r3, [r4, #1]
 8003024:	2b2a      	cmp	r3, #42	; 0x2a
 8003026:	d135      	bne.n	8003094 <_svfiprintf_r+0x188>
 8003028:	9b03      	ldr	r3, [sp, #12]
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	9203      	str	r2, [sp, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	bfb8      	it	lt
 8003034:	f04f 33ff 	movlt.w	r3, #4294967295
 8003038:	3402      	adds	r4, #2
 800303a:	9305      	str	r3, [sp, #20]
 800303c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003108 <_svfiprintf_r+0x1fc>
 8003040:	7821      	ldrb	r1, [r4, #0]
 8003042:	2203      	movs	r2, #3
 8003044:	4650      	mov	r0, sl
 8003046:	f7fd f8e3 	bl	8000210 <memchr>
 800304a:	b140      	cbz	r0, 800305e <_svfiprintf_r+0x152>
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	eba0 000a 	sub.w	r0, r0, sl
 8003052:	fa03 f000 	lsl.w	r0, r3, r0
 8003056:	9b04      	ldr	r3, [sp, #16]
 8003058:	4303      	orrs	r3, r0
 800305a:	3401      	adds	r4, #1
 800305c:	9304      	str	r3, [sp, #16]
 800305e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003062:	4826      	ldr	r0, [pc, #152]	; (80030fc <_svfiprintf_r+0x1f0>)
 8003064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003068:	2206      	movs	r2, #6
 800306a:	f7fd f8d1 	bl	8000210 <memchr>
 800306e:	2800      	cmp	r0, #0
 8003070:	d038      	beq.n	80030e4 <_svfiprintf_r+0x1d8>
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <_svfiprintf_r+0x1f4>)
 8003074:	bb1b      	cbnz	r3, 80030be <_svfiprintf_r+0x1b2>
 8003076:	9b03      	ldr	r3, [sp, #12]
 8003078:	3307      	adds	r3, #7
 800307a:	f023 0307 	bic.w	r3, r3, #7
 800307e:	3308      	adds	r3, #8
 8003080:	9303      	str	r3, [sp, #12]
 8003082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003084:	4433      	add	r3, r6
 8003086:	9309      	str	r3, [sp, #36]	; 0x24
 8003088:	e767      	b.n	8002f5a <_svfiprintf_r+0x4e>
 800308a:	fb0c 3202 	mla	r2, ip, r2, r3
 800308e:	460c      	mov	r4, r1
 8003090:	2001      	movs	r0, #1
 8003092:	e7a5      	b.n	8002fe0 <_svfiprintf_r+0xd4>
 8003094:	2300      	movs	r3, #0
 8003096:	3401      	adds	r4, #1
 8003098:	9305      	str	r3, [sp, #20]
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 0c0a 	mov.w	ip, #10
 80030a0:	4620      	mov	r0, r4
 80030a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a6:	3a30      	subs	r2, #48	; 0x30
 80030a8:	2a09      	cmp	r2, #9
 80030aa:	d903      	bls.n	80030b4 <_svfiprintf_r+0x1a8>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0c5      	beq.n	800303c <_svfiprintf_r+0x130>
 80030b0:	9105      	str	r1, [sp, #20]
 80030b2:	e7c3      	b.n	800303c <_svfiprintf_r+0x130>
 80030b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80030b8:	4604      	mov	r4, r0
 80030ba:	2301      	movs	r3, #1
 80030bc:	e7f0      	b.n	80030a0 <_svfiprintf_r+0x194>
 80030be:	ab03      	add	r3, sp, #12
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	462a      	mov	r2, r5
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <_svfiprintf_r+0x1f8>)
 80030c6:	a904      	add	r1, sp, #16
 80030c8:	4638      	mov	r0, r7
 80030ca:	f3af 8000 	nop.w
 80030ce:	1c42      	adds	r2, r0, #1
 80030d0:	4606      	mov	r6, r0
 80030d2:	d1d6      	bne.n	8003082 <_svfiprintf_r+0x176>
 80030d4:	89ab      	ldrh	r3, [r5, #12]
 80030d6:	065b      	lsls	r3, r3, #25
 80030d8:	f53f af2c 	bmi.w	8002f34 <_svfiprintf_r+0x28>
 80030dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030de:	b01d      	add	sp, #116	; 0x74
 80030e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e4:	ab03      	add	r3, sp, #12
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	462a      	mov	r2, r5
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <_svfiprintf_r+0x1f8>)
 80030ec:	a904      	add	r1, sp, #16
 80030ee:	4638      	mov	r0, r7
 80030f0:	f000 f87a 	bl	80031e8 <_printf_i>
 80030f4:	e7eb      	b.n	80030ce <_svfiprintf_r+0x1c2>
 80030f6:	bf00      	nop
 80030f8:	080036a8 	.word	0x080036a8
 80030fc:	080036b2 	.word	0x080036b2
 8003100:	00000000 	.word	0x00000000
 8003104:	08002e55 	.word	0x08002e55
 8003108:	080036ae 	.word	0x080036ae

0800310c <_printf_common>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	4616      	mov	r6, r2
 8003112:	4699      	mov	r9, r3
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	690b      	ldr	r3, [r1, #16]
 8003118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800311c:	4293      	cmp	r3, r2
 800311e:	bfb8      	it	lt
 8003120:	4613      	movlt	r3, r2
 8003122:	6033      	str	r3, [r6, #0]
 8003124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003128:	4607      	mov	r7, r0
 800312a:	460c      	mov	r4, r1
 800312c:	b10a      	cbz	r2, 8003132 <_printf_common+0x26>
 800312e:	3301      	adds	r3, #1
 8003130:	6033      	str	r3, [r6, #0]
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	0699      	lsls	r1, r3, #26
 8003136:	bf42      	ittt	mi
 8003138:	6833      	ldrmi	r3, [r6, #0]
 800313a:	3302      	addmi	r3, #2
 800313c:	6033      	strmi	r3, [r6, #0]
 800313e:	6825      	ldr	r5, [r4, #0]
 8003140:	f015 0506 	ands.w	r5, r5, #6
 8003144:	d106      	bne.n	8003154 <_printf_common+0x48>
 8003146:	f104 0a19 	add.w	sl, r4, #25
 800314a:	68e3      	ldr	r3, [r4, #12]
 800314c:	6832      	ldr	r2, [r6, #0]
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	42ab      	cmp	r3, r5
 8003152:	dc26      	bgt.n	80031a2 <_printf_common+0x96>
 8003154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003158:	1e13      	subs	r3, r2, #0
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	bf18      	it	ne
 800315e:	2301      	movne	r3, #1
 8003160:	0692      	lsls	r2, r2, #26
 8003162:	d42b      	bmi.n	80031bc <_printf_common+0xb0>
 8003164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003168:	4649      	mov	r1, r9
 800316a:	4638      	mov	r0, r7
 800316c:	47c0      	blx	r8
 800316e:	3001      	adds	r0, #1
 8003170:	d01e      	beq.n	80031b0 <_printf_common+0xa4>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	68e5      	ldr	r5, [r4, #12]
 8003176:	6832      	ldr	r2, [r6, #0]
 8003178:	f003 0306 	and.w	r3, r3, #6
 800317c:	2b04      	cmp	r3, #4
 800317e:	bf08      	it	eq
 8003180:	1aad      	subeq	r5, r5, r2
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	6922      	ldr	r2, [r4, #16]
 8003186:	bf0c      	ite	eq
 8003188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800318c:	2500      	movne	r5, #0
 800318e:	4293      	cmp	r3, r2
 8003190:	bfc4      	itt	gt
 8003192:	1a9b      	subgt	r3, r3, r2
 8003194:	18ed      	addgt	r5, r5, r3
 8003196:	2600      	movs	r6, #0
 8003198:	341a      	adds	r4, #26
 800319a:	42b5      	cmp	r5, r6
 800319c:	d11a      	bne.n	80031d4 <_printf_common+0xc8>
 800319e:	2000      	movs	r0, #0
 80031a0:	e008      	b.n	80031b4 <_printf_common+0xa8>
 80031a2:	2301      	movs	r3, #1
 80031a4:	4652      	mov	r2, sl
 80031a6:	4649      	mov	r1, r9
 80031a8:	4638      	mov	r0, r7
 80031aa:	47c0      	blx	r8
 80031ac:	3001      	adds	r0, #1
 80031ae:	d103      	bne.n	80031b8 <_printf_common+0xac>
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	3501      	adds	r5, #1
 80031ba:	e7c6      	b.n	800314a <_printf_common+0x3e>
 80031bc:	18e1      	adds	r1, r4, r3
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	2030      	movs	r0, #48	; 0x30
 80031c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031c6:	4422      	add	r2, r4
 80031c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d0:	3302      	adds	r3, #2
 80031d2:	e7c7      	b.n	8003164 <_printf_common+0x58>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4622      	mov	r2, r4
 80031d8:	4649      	mov	r1, r9
 80031da:	4638      	mov	r0, r7
 80031dc:	47c0      	blx	r8
 80031de:	3001      	adds	r0, #1
 80031e0:	d0e6      	beq.n	80031b0 <_printf_common+0xa4>
 80031e2:	3601      	adds	r6, #1
 80031e4:	e7d9      	b.n	800319a <_printf_common+0x8e>
	...

080031e8 <_printf_i>:
 80031e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031ec:	460c      	mov	r4, r1
 80031ee:	4691      	mov	r9, r2
 80031f0:	7e27      	ldrb	r7, [r4, #24]
 80031f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031f4:	2f78      	cmp	r7, #120	; 0x78
 80031f6:	4680      	mov	r8, r0
 80031f8:	469a      	mov	sl, r3
 80031fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031fe:	d807      	bhi.n	8003210 <_printf_i+0x28>
 8003200:	2f62      	cmp	r7, #98	; 0x62
 8003202:	d80a      	bhi.n	800321a <_printf_i+0x32>
 8003204:	2f00      	cmp	r7, #0
 8003206:	f000 80d8 	beq.w	80033ba <_printf_i+0x1d2>
 800320a:	2f58      	cmp	r7, #88	; 0x58
 800320c:	f000 80a3 	beq.w	8003356 <_printf_i+0x16e>
 8003210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003218:	e03a      	b.n	8003290 <_printf_i+0xa8>
 800321a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800321e:	2b15      	cmp	r3, #21
 8003220:	d8f6      	bhi.n	8003210 <_printf_i+0x28>
 8003222:	a001      	add	r0, pc, #4	; (adr r0, 8003228 <_printf_i+0x40>)
 8003224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003228:	08003281 	.word	0x08003281
 800322c:	08003295 	.word	0x08003295
 8003230:	08003211 	.word	0x08003211
 8003234:	08003211 	.word	0x08003211
 8003238:	08003211 	.word	0x08003211
 800323c:	08003211 	.word	0x08003211
 8003240:	08003295 	.word	0x08003295
 8003244:	08003211 	.word	0x08003211
 8003248:	08003211 	.word	0x08003211
 800324c:	08003211 	.word	0x08003211
 8003250:	08003211 	.word	0x08003211
 8003254:	080033a1 	.word	0x080033a1
 8003258:	080032c5 	.word	0x080032c5
 800325c:	08003383 	.word	0x08003383
 8003260:	08003211 	.word	0x08003211
 8003264:	08003211 	.word	0x08003211
 8003268:	080033c3 	.word	0x080033c3
 800326c:	08003211 	.word	0x08003211
 8003270:	080032c5 	.word	0x080032c5
 8003274:	08003211 	.word	0x08003211
 8003278:	08003211 	.word	0x08003211
 800327c:	0800338b 	.word	0x0800338b
 8003280:	680b      	ldr	r3, [r1, #0]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	600a      	str	r2, [r1, #0]
 8003288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800328c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003290:	2301      	movs	r3, #1
 8003292:	e0a3      	b.n	80033dc <_printf_i+0x1f4>
 8003294:	6825      	ldr	r5, [r4, #0]
 8003296:	6808      	ldr	r0, [r1, #0]
 8003298:	062e      	lsls	r6, r5, #24
 800329a:	f100 0304 	add.w	r3, r0, #4
 800329e:	d50a      	bpl.n	80032b6 <_printf_i+0xce>
 80032a0:	6805      	ldr	r5, [r0, #0]
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	da03      	bge.n	80032b0 <_printf_i+0xc8>
 80032a8:	232d      	movs	r3, #45	; 0x2d
 80032aa:	426d      	negs	r5, r5
 80032ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b0:	485e      	ldr	r0, [pc, #376]	; (800342c <_printf_i+0x244>)
 80032b2:	230a      	movs	r3, #10
 80032b4:	e019      	b.n	80032ea <_printf_i+0x102>
 80032b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032ba:	6805      	ldr	r5, [r0, #0]
 80032bc:	600b      	str	r3, [r1, #0]
 80032be:	bf18      	it	ne
 80032c0:	b22d      	sxthne	r5, r5
 80032c2:	e7ef      	b.n	80032a4 <_printf_i+0xbc>
 80032c4:	680b      	ldr	r3, [r1, #0]
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	1d18      	adds	r0, r3, #4
 80032ca:	6008      	str	r0, [r1, #0]
 80032cc:	0628      	lsls	r0, r5, #24
 80032ce:	d501      	bpl.n	80032d4 <_printf_i+0xec>
 80032d0:	681d      	ldr	r5, [r3, #0]
 80032d2:	e002      	b.n	80032da <_printf_i+0xf2>
 80032d4:	0669      	lsls	r1, r5, #25
 80032d6:	d5fb      	bpl.n	80032d0 <_printf_i+0xe8>
 80032d8:	881d      	ldrh	r5, [r3, #0]
 80032da:	4854      	ldr	r0, [pc, #336]	; (800342c <_printf_i+0x244>)
 80032dc:	2f6f      	cmp	r7, #111	; 0x6f
 80032de:	bf0c      	ite	eq
 80032e0:	2308      	moveq	r3, #8
 80032e2:	230a      	movne	r3, #10
 80032e4:	2100      	movs	r1, #0
 80032e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ea:	6866      	ldr	r6, [r4, #4]
 80032ec:	60a6      	str	r6, [r4, #8]
 80032ee:	2e00      	cmp	r6, #0
 80032f0:	bfa2      	ittt	ge
 80032f2:	6821      	ldrge	r1, [r4, #0]
 80032f4:	f021 0104 	bicge.w	r1, r1, #4
 80032f8:	6021      	strge	r1, [r4, #0]
 80032fa:	b90d      	cbnz	r5, 8003300 <_printf_i+0x118>
 80032fc:	2e00      	cmp	r6, #0
 80032fe:	d04d      	beq.n	800339c <_printf_i+0x1b4>
 8003300:	4616      	mov	r6, r2
 8003302:	fbb5 f1f3 	udiv	r1, r5, r3
 8003306:	fb03 5711 	mls	r7, r3, r1, r5
 800330a:	5dc7      	ldrb	r7, [r0, r7]
 800330c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003310:	462f      	mov	r7, r5
 8003312:	42bb      	cmp	r3, r7
 8003314:	460d      	mov	r5, r1
 8003316:	d9f4      	bls.n	8003302 <_printf_i+0x11a>
 8003318:	2b08      	cmp	r3, #8
 800331a:	d10b      	bne.n	8003334 <_printf_i+0x14c>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	07df      	lsls	r7, r3, #31
 8003320:	d508      	bpl.n	8003334 <_printf_i+0x14c>
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	6861      	ldr	r1, [r4, #4]
 8003326:	4299      	cmp	r1, r3
 8003328:	bfde      	ittt	le
 800332a:	2330      	movle	r3, #48	; 0x30
 800332c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003334:	1b92      	subs	r2, r2, r6
 8003336:	6122      	str	r2, [r4, #16]
 8003338:	f8cd a000 	str.w	sl, [sp]
 800333c:	464b      	mov	r3, r9
 800333e:	aa03      	add	r2, sp, #12
 8003340:	4621      	mov	r1, r4
 8003342:	4640      	mov	r0, r8
 8003344:	f7ff fee2 	bl	800310c <_printf_common>
 8003348:	3001      	adds	r0, #1
 800334a:	d14c      	bne.n	80033e6 <_printf_i+0x1fe>
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	b004      	add	sp, #16
 8003352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003356:	4835      	ldr	r0, [pc, #212]	; (800342c <_printf_i+0x244>)
 8003358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	680e      	ldr	r6, [r1, #0]
 8003360:	061f      	lsls	r7, r3, #24
 8003362:	f856 5b04 	ldr.w	r5, [r6], #4
 8003366:	600e      	str	r6, [r1, #0]
 8003368:	d514      	bpl.n	8003394 <_printf_i+0x1ac>
 800336a:	07d9      	lsls	r1, r3, #31
 800336c:	bf44      	itt	mi
 800336e:	f043 0320 	orrmi.w	r3, r3, #32
 8003372:	6023      	strmi	r3, [r4, #0]
 8003374:	b91d      	cbnz	r5, 800337e <_printf_i+0x196>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	f023 0320 	bic.w	r3, r3, #32
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	2310      	movs	r3, #16
 8003380:	e7b0      	b.n	80032e4 <_printf_i+0xfc>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	f043 0320 	orr.w	r3, r3, #32
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	2378      	movs	r3, #120	; 0x78
 800338c:	4828      	ldr	r0, [pc, #160]	; (8003430 <_printf_i+0x248>)
 800338e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003392:	e7e3      	b.n	800335c <_printf_i+0x174>
 8003394:	065e      	lsls	r6, r3, #25
 8003396:	bf48      	it	mi
 8003398:	b2ad      	uxthmi	r5, r5
 800339a:	e7e6      	b.n	800336a <_printf_i+0x182>
 800339c:	4616      	mov	r6, r2
 800339e:	e7bb      	b.n	8003318 <_printf_i+0x130>
 80033a0:	680b      	ldr	r3, [r1, #0]
 80033a2:	6826      	ldr	r6, [r4, #0]
 80033a4:	6960      	ldr	r0, [r4, #20]
 80033a6:	1d1d      	adds	r5, r3, #4
 80033a8:	600d      	str	r5, [r1, #0]
 80033aa:	0635      	lsls	r5, r6, #24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	d501      	bpl.n	80033b4 <_printf_i+0x1cc>
 80033b0:	6018      	str	r0, [r3, #0]
 80033b2:	e002      	b.n	80033ba <_printf_i+0x1d2>
 80033b4:	0671      	lsls	r1, r6, #25
 80033b6:	d5fb      	bpl.n	80033b0 <_printf_i+0x1c8>
 80033b8:	8018      	strh	r0, [r3, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	6123      	str	r3, [r4, #16]
 80033be:	4616      	mov	r6, r2
 80033c0:	e7ba      	b.n	8003338 <_printf_i+0x150>
 80033c2:	680b      	ldr	r3, [r1, #0]
 80033c4:	1d1a      	adds	r2, r3, #4
 80033c6:	600a      	str	r2, [r1, #0]
 80033c8:	681e      	ldr	r6, [r3, #0]
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	2100      	movs	r1, #0
 80033ce:	4630      	mov	r0, r6
 80033d0:	f7fc ff1e 	bl	8000210 <memchr>
 80033d4:	b108      	cbz	r0, 80033da <_printf_i+0x1f2>
 80033d6:	1b80      	subs	r0, r0, r6
 80033d8:	6060      	str	r0, [r4, #4]
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	6123      	str	r3, [r4, #16]
 80033de:	2300      	movs	r3, #0
 80033e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e4:	e7a8      	b.n	8003338 <_printf_i+0x150>
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	4632      	mov	r2, r6
 80033ea:	4649      	mov	r1, r9
 80033ec:	4640      	mov	r0, r8
 80033ee:	47d0      	blx	sl
 80033f0:	3001      	adds	r0, #1
 80033f2:	d0ab      	beq.n	800334c <_printf_i+0x164>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	079b      	lsls	r3, r3, #30
 80033f8:	d413      	bmi.n	8003422 <_printf_i+0x23a>
 80033fa:	68e0      	ldr	r0, [r4, #12]
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	4298      	cmp	r0, r3
 8003400:	bfb8      	it	lt
 8003402:	4618      	movlt	r0, r3
 8003404:	e7a4      	b.n	8003350 <_printf_i+0x168>
 8003406:	2301      	movs	r3, #1
 8003408:	4632      	mov	r2, r6
 800340a:	4649      	mov	r1, r9
 800340c:	4640      	mov	r0, r8
 800340e:	47d0      	blx	sl
 8003410:	3001      	adds	r0, #1
 8003412:	d09b      	beq.n	800334c <_printf_i+0x164>
 8003414:	3501      	adds	r5, #1
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	9903      	ldr	r1, [sp, #12]
 800341a:	1a5b      	subs	r3, r3, r1
 800341c:	42ab      	cmp	r3, r5
 800341e:	dcf2      	bgt.n	8003406 <_printf_i+0x21e>
 8003420:	e7eb      	b.n	80033fa <_printf_i+0x212>
 8003422:	2500      	movs	r5, #0
 8003424:	f104 0619 	add.w	r6, r4, #25
 8003428:	e7f5      	b.n	8003416 <_printf_i+0x22e>
 800342a:	bf00      	nop
 800342c:	080036b9 	.word	0x080036b9
 8003430:	080036ca 	.word	0x080036ca

08003434 <memcpy>:
 8003434:	440a      	add	r2, r1
 8003436:	4291      	cmp	r1, r2
 8003438:	f100 33ff 	add.w	r3, r0, #4294967295
 800343c:	d100      	bne.n	8003440 <memcpy+0xc>
 800343e:	4770      	bx	lr
 8003440:	b510      	push	{r4, lr}
 8003442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800344a:	4291      	cmp	r1, r2
 800344c:	d1f9      	bne.n	8003442 <memcpy+0xe>
 800344e:	bd10      	pop	{r4, pc}

08003450 <memmove>:
 8003450:	4288      	cmp	r0, r1
 8003452:	b510      	push	{r4, lr}
 8003454:	eb01 0402 	add.w	r4, r1, r2
 8003458:	d902      	bls.n	8003460 <memmove+0x10>
 800345a:	4284      	cmp	r4, r0
 800345c:	4623      	mov	r3, r4
 800345e:	d807      	bhi.n	8003470 <memmove+0x20>
 8003460:	1e43      	subs	r3, r0, #1
 8003462:	42a1      	cmp	r1, r4
 8003464:	d008      	beq.n	8003478 <memmove+0x28>
 8003466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800346a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800346e:	e7f8      	b.n	8003462 <memmove+0x12>
 8003470:	4402      	add	r2, r0
 8003472:	4601      	mov	r1, r0
 8003474:	428a      	cmp	r2, r1
 8003476:	d100      	bne.n	800347a <memmove+0x2a>
 8003478:	bd10      	pop	{r4, pc}
 800347a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800347e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003482:	e7f7      	b.n	8003474 <memmove+0x24>

08003484 <_free_r>:
 8003484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003486:	2900      	cmp	r1, #0
 8003488:	d048      	beq.n	800351c <_free_r+0x98>
 800348a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800348e:	9001      	str	r0, [sp, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f1a1 0404 	sub.w	r4, r1, #4
 8003496:	bfb8      	it	lt
 8003498:	18e4      	addlt	r4, r4, r3
 800349a:	f000 f8d3 	bl	8003644 <__malloc_lock>
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <_free_r+0x9c>)
 80034a0:	9801      	ldr	r0, [sp, #4]
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	4615      	mov	r5, r2
 80034a6:	b933      	cbnz	r3, 80034b6 <_free_r+0x32>
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	6014      	str	r4, [r2, #0]
 80034ac:	b003      	add	sp, #12
 80034ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034b2:	f000 b8cd 	b.w	8003650 <__malloc_unlock>
 80034b6:	42a3      	cmp	r3, r4
 80034b8:	d90b      	bls.n	80034d2 <_free_r+0x4e>
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	1862      	adds	r2, r4, r1
 80034be:	4293      	cmp	r3, r2
 80034c0:	bf04      	itt	eq
 80034c2:	681a      	ldreq	r2, [r3, #0]
 80034c4:	685b      	ldreq	r3, [r3, #4]
 80034c6:	6063      	str	r3, [r4, #4]
 80034c8:	bf04      	itt	eq
 80034ca:	1852      	addeq	r2, r2, r1
 80034cc:	6022      	streq	r2, [r4, #0]
 80034ce:	602c      	str	r4, [r5, #0]
 80034d0:	e7ec      	b.n	80034ac <_free_r+0x28>
 80034d2:	461a      	mov	r2, r3
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b10b      	cbz	r3, 80034dc <_free_r+0x58>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d9fa      	bls.n	80034d2 <_free_r+0x4e>
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	1855      	adds	r5, r2, r1
 80034e0:	42a5      	cmp	r5, r4
 80034e2:	d10b      	bne.n	80034fc <_free_r+0x78>
 80034e4:	6824      	ldr	r4, [r4, #0]
 80034e6:	4421      	add	r1, r4
 80034e8:	1854      	adds	r4, r2, r1
 80034ea:	42a3      	cmp	r3, r4
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	d1dd      	bne.n	80034ac <_free_r+0x28>
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6053      	str	r3, [r2, #4]
 80034f6:	4421      	add	r1, r4
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	e7d7      	b.n	80034ac <_free_r+0x28>
 80034fc:	d902      	bls.n	8003504 <_free_r+0x80>
 80034fe:	230c      	movs	r3, #12
 8003500:	6003      	str	r3, [r0, #0]
 8003502:	e7d3      	b.n	80034ac <_free_r+0x28>
 8003504:	6825      	ldr	r5, [r4, #0]
 8003506:	1961      	adds	r1, r4, r5
 8003508:	428b      	cmp	r3, r1
 800350a:	bf04      	itt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	bf04      	itt	eq
 8003514:	1949      	addeq	r1, r1, r5
 8003516:	6021      	streq	r1, [r4, #0]
 8003518:	6054      	str	r4, [r2, #4]
 800351a:	e7c7      	b.n	80034ac <_free_r+0x28>
 800351c:	b003      	add	sp, #12
 800351e:	bd30      	pop	{r4, r5, pc}
 8003520:	20000090 	.word	0x20000090

08003524 <_malloc_r>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	1ccd      	adds	r5, r1, #3
 8003528:	f025 0503 	bic.w	r5, r5, #3
 800352c:	3508      	adds	r5, #8
 800352e:	2d0c      	cmp	r5, #12
 8003530:	bf38      	it	cc
 8003532:	250c      	movcc	r5, #12
 8003534:	2d00      	cmp	r5, #0
 8003536:	4606      	mov	r6, r0
 8003538:	db01      	blt.n	800353e <_malloc_r+0x1a>
 800353a:	42a9      	cmp	r1, r5
 800353c:	d903      	bls.n	8003546 <_malloc_r+0x22>
 800353e:	230c      	movs	r3, #12
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	2000      	movs	r0, #0
 8003544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003546:	f000 f87d 	bl	8003644 <__malloc_lock>
 800354a:	4921      	ldr	r1, [pc, #132]	; (80035d0 <_malloc_r+0xac>)
 800354c:	680a      	ldr	r2, [r1, #0]
 800354e:	4614      	mov	r4, r2
 8003550:	b99c      	cbnz	r4, 800357a <_malloc_r+0x56>
 8003552:	4f20      	ldr	r7, [pc, #128]	; (80035d4 <_malloc_r+0xb0>)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b923      	cbnz	r3, 8003562 <_malloc_r+0x3e>
 8003558:	4621      	mov	r1, r4
 800355a:	4630      	mov	r0, r6
 800355c:	f000 f862 	bl	8003624 <_sbrk_r>
 8003560:	6038      	str	r0, [r7, #0]
 8003562:	4629      	mov	r1, r5
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f85d 	bl	8003624 <_sbrk_r>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d123      	bne.n	80035b6 <_malloc_r+0x92>
 800356e:	230c      	movs	r3, #12
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	4630      	mov	r0, r6
 8003574:	f000 f86c 	bl	8003650 <__malloc_unlock>
 8003578:	e7e3      	b.n	8003542 <_malloc_r+0x1e>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	1b5b      	subs	r3, r3, r5
 800357e:	d417      	bmi.n	80035b0 <_malloc_r+0x8c>
 8003580:	2b0b      	cmp	r3, #11
 8003582:	d903      	bls.n	800358c <_malloc_r+0x68>
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	441c      	add	r4, r3
 8003588:	6025      	str	r5, [r4, #0]
 800358a:	e004      	b.n	8003596 <_malloc_r+0x72>
 800358c:	6863      	ldr	r3, [r4, #4]
 800358e:	42a2      	cmp	r2, r4
 8003590:	bf0c      	ite	eq
 8003592:	600b      	streq	r3, [r1, #0]
 8003594:	6053      	strne	r3, [r2, #4]
 8003596:	4630      	mov	r0, r6
 8003598:	f000 f85a 	bl	8003650 <__malloc_unlock>
 800359c:	f104 000b 	add.w	r0, r4, #11
 80035a0:	1d23      	adds	r3, r4, #4
 80035a2:	f020 0007 	bic.w	r0, r0, #7
 80035a6:	1ac2      	subs	r2, r0, r3
 80035a8:	d0cc      	beq.n	8003544 <_malloc_r+0x20>
 80035aa:	1a1b      	subs	r3, r3, r0
 80035ac:	50a3      	str	r3, [r4, r2]
 80035ae:	e7c9      	b.n	8003544 <_malloc_r+0x20>
 80035b0:	4622      	mov	r2, r4
 80035b2:	6864      	ldr	r4, [r4, #4]
 80035b4:	e7cc      	b.n	8003550 <_malloc_r+0x2c>
 80035b6:	1cc4      	adds	r4, r0, #3
 80035b8:	f024 0403 	bic.w	r4, r4, #3
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d0e3      	beq.n	8003588 <_malloc_r+0x64>
 80035c0:	1a21      	subs	r1, r4, r0
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 f82e 	bl	8003624 <_sbrk_r>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d1dd      	bne.n	8003588 <_malloc_r+0x64>
 80035cc:	e7cf      	b.n	800356e <_malloc_r+0x4a>
 80035ce:	bf00      	nop
 80035d0:	20000090 	.word	0x20000090
 80035d4:	20000094 	.word	0x20000094

080035d8 <_realloc_r>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	4607      	mov	r7, r0
 80035dc:	4614      	mov	r4, r2
 80035de:	460e      	mov	r6, r1
 80035e0:	b921      	cbnz	r1, 80035ec <_realloc_r+0x14>
 80035e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035e6:	4611      	mov	r1, r2
 80035e8:	f7ff bf9c 	b.w	8003524 <_malloc_r>
 80035ec:	b922      	cbnz	r2, 80035f8 <_realloc_r+0x20>
 80035ee:	f7ff ff49 	bl	8003484 <_free_r>
 80035f2:	4625      	mov	r5, r4
 80035f4:	4628      	mov	r0, r5
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f8:	f000 f830 	bl	800365c <_malloc_usable_size_r>
 80035fc:	42a0      	cmp	r0, r4
 80035fe:	d20f      	bcs.n	8003620 <_realloc_r+0x48>
 8003600:	4621      	mov	r1, r4
 8003602:	4638      	mov	r0, r7
 8003604:	f7ff ff8e 	bl	8003524 <_malloc_r>
 8003608:	4605      	mov	r5, r0
 800360a:	2800      	cmp	r0, #0
 800360c:	d0f2      	beq.n	80035f4 <_realloc_r+0x1c>
 800360e:	4631      	mov	r1, r6
 8003610:	4622      	mov	r2, r4
 8003612:	f7ff ff0f 	bl	8003434 <memcpy>
 8003616:	4631      	mov	r1, r6
 8003618:	4638      	mov	r0, r7
 800361a:	f7ff ff33 	bl	8003484 <_free_r>
 800361e:	e7e9      	b.n	80035f4 <_realloc_r+0x1c>
 8003620:	4635      	mov	r5, r6
 8003622:	e7e7      	b.n	80035f4 <_realloc_r+0x1c>

08003624 <_sbrk_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d06      	ldr	r5, [pc, #24]	; (8003640 <_sbrk_r+0x1c>)
 8003628:	2300      	movs	r3, #0
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	602b      	str	r3, [r5, #0]
 8003630:	f7fd fd8c 	bl	800114c <_sbrk>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_sbrk_r+0x1a>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	b103      	cbz	r3, 800363e <_sbrk_r+0x1a>
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	20000224 	.word	0x20000224

08003644 <__malloc_lock>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__malloc_lock+0x8>)
 8003646:	f000 b811 	b.w	800366c <__retarget_lock_acquire_recursive>
 800364a:	bf00      	nop
 800364c:	2000022c 	.word	0x2000022c

08003650 <__malloc_unlock>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__malloc_unlock+0x8>)
 8003652:	f000 b80c 	b.w	800366e <__retarget_lock_release_recursive>
 8003656:	bf00      	nop
 8003658:	2000022c 	.word	0x2000022c

0800365c <_malloc_usable_size_r>:
 800365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003660:	1f18      	subs	r0, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bfbc      	itt	lt
 8003666:	580b      	ldrlt	r3, [r1, r0]
 8003668:	18c0      	addlt	r0, r0, r3
 800366a:	4770      	bx	lr

0800366c <__retarget_lock_acquire_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_release_recursive>:
 800366e:	4770      	bx	lr

08003670 <_init>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr

0800367c <_fini>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr
