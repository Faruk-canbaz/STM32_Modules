
BMP280_446RE_DENEME1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a164  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800a338  0800a338  0001a338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e8  0800a8e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f0  0800a8f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f0  0800a8f0  0001a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001e4  0800aadc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800aadc  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0fa  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222b  00000000  00000000  0002f30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00031540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  00032030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002275b  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2c8  00000000  00000000  000551bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc9f3  00000000  00000000  00064483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130e76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a8  00000000  00000000  00130ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a31c 	.word	0x0800a31c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800a31c 	.word	0x0800a31c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	715a      	strb	r2, [r3, #5]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af04      	add	r7, sp, #16
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	460b      	mov	r3, r1
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	b29a      	uxth	r2, r3
 8001122:	8af9      	ldrh	r1, [r7, #22]
 8001124:	f241 3388 	movw	r3, #5000	; 0x1388
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2302      	movs	r3, #2
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f001 feef 	bl	8002f18 <HAL_I2C_Mem_Read>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10b      	bne.n	8001158 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001140:	7d7b      	ldrb	r3, [r7, #21]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	801a      	strh	r2, [r3, #0]
		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_register16+0x56>
	} else
		return false;
 8001158:	2300      	movs	r3, #0

}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b08b      	sub	sp, #44	; 0x2c
 8001166:	af04      	add	r7, sp, #16
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	461a      	mov	r2, r3
 800116e:	460b      	mov	r3, r1
 8001170:	72fb      	strb	r3, [r7, #11]
 8001172:	4613      	mov	r3, r2
 8001174:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	b29a      	uxth	r2, r3
 8001186:	7abb      	ldrb	r3, [r7, #10]
 8001188:	b29b      	uxth	r3, r3
 800118a:	8af9      	ldrh	r1, [r7, #22]
 800118c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001190:	9402      	str	r4, [sp, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	f001 febd 	bl	8002f18 <HAL_I2C_Mem_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <read_data+0x46>
		return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <read_data+0x48>
	else
		return 1;
 80011a8:	2301      	movs	r3, #1

}
 80011aa:	4618      	mov	r0, r3
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	461a      	mov	r2, r3
 80011be:	2188      	movs	r1, #136	; 0x88
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff9f 	bl	8001104 <read_register16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d06f      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3302      	adds	r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	218a      	movs	r1, #138	; 0x8a
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff95 	bl	8001104 <read_register16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d065      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3304      	adds	r3, #4
 80011e4:	461a      	mov	r2, r3
 80011e6:	218c      	movs	r1, #140	; 0x8c
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff8b 	bl	8001104 <read_register16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05b      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3306      	adds	r3, #6
 80011f8:	461a      	mov	r2, r3
 80011fa:	218e      	movs	r1, #142	; 0x8e
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff81 	bl	8001104 <read_register16>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d051      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3308      	adds	r3, #8
 800120c:	461a      	mov	r2, r3
 800120e:	2190      	movs	r1, #144	; 0x90
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff77 	bl	8001104 <read_register16>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d047      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	330a      	adds	r3, #10
 8001220:	461a      	mov	r2, r3
 8001222:	2192      	movs	r1, #146	; 0x92
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff6d 	bl	8001104 <read_register16>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03d      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	330c      	adds	r3, #12
 8001234:	461a      	mov	r2, r3
 8001236:	2194      	movs	r1, #148	; 0x94
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff63 	bl	8001104 <read_register16>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d033      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	330e      	adds	r3, #14
 8001248:	461a      	mov	r2, r3
 800124a:	2196      	movs	r1, #150	; 0x96
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff59 	bl	8001104 <read_register16>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d029      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3310      	adds	r3, #16
 800125c:	461a      	mov	r2, r3
 800125e:	2198      	movs	r1, #152	; 0x98
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff4f 	bl	8001104 <read_register16>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01f      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3312      	adds	r3, #18
 8001270:	461a      	mov	r2, r3
 8001272:	219a      	movs	r1, #154	; 0x9a
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff45 	bl	8001104 <read_register16>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d015      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3314      	adds	r3, #20
 8001284:	461a      	mov	r2, r3
 8001286:	219c      	movs	r1, #156	; 0x9c
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff3b 	bl	8001104 <read_register16>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001298:	461a      	mov	r2, r3
 800129a:	219e      	movs	r1, #158	; 0x9e
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff31 	bl	8001104 <read_register16>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <read_calibration_data+0xfa>

		return true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <read_calibration_data+0xfc>
	}

	return false;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f103 0218 	add.w	r2, r3, #24
 80012c4:	2301      	movs	r3, #1
 80012c6:	21a1      	movs	r1, #161	; 0xa1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff4a 	bl	8001162 <read_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d14b      	bne.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	331a      	adds	r3, #26
 80012d8:	461a      	mov	r2, r3
 80012da:	21e1      	movs	r1, #225	; 0xe1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff11 	bl	8001104 <read_register16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d041      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 021c 	add.w	r2, r3, #28
 80012ee:	2301      	movs	r3, #1
 80012f0:	21e3      	movs	r1, #227	; 0xe3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff35 	bl	8001162 <read_data>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d136      	bne.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012fe:	f107 030e 	add.w	r3, r7, #14
 8001302:	461a      	mov	r2, r3
 8001304:	21e4      	movs	r1, #228	; 0xe4
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fefc 	bl	8001104 <read_register16>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02c      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	461a      	mov	r2, r3
 8001318:	21e5      	movs	r1, #229	; 0xe5
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fef2 	bl	8001104 <read_register16>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d022      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800132c:	2301      	movs	r3, #1
 800132e:	21e7      	movs	r1, #231	; 0xe7
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff16 	bl	8001162 <read_data>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d117      	bne.n	800136c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	b21b      	sxth	r3, r3
 8001342:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001346:	b21a      	sxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	121b      	asrs	r3, r3, #8
 800134c:	b21b      	sxth	r3, r3
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	b29b      	uxth	r3, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	841a      	strh	r2, [r3, #32]

		return true;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <read_hum_calibration_data+0xb8>
	}

	return false;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b088      	sub	sp, #32
 800137a:	af04      	add	r7, sp, #16
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	b29a      	uxth	r2, r3
 8001396:	89f9      	ldrh	r1, [r7, #14]
 8001398:	f242 7310 	movw	r3, #10000	; 0x2710
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f001 fcbc 	bl	8002d24 <HAL_I2C_Mem_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <write_register8+0x40>
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <write_register8+0x42>
	else
		return true;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013ce:	2b76      	cmp	r3, #118	; 0x76
 80013d0:	d005      	beq.n	80013de <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013d6:	2b77      	cmp	r3, #119	; 0x77
 80013d8:	d001      	beq.n	80013de <bmp280_init+0x1e>

		return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e099      	b.n	8001512 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013e4:	2301      	movs	r3, #1
 80013e6:	21d0      	movs	r1, #208	; 0xd0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff feba 	bl	8001162 <read_data>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <bmp280_init+0x38>
		return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e08c      	b.n	8001512 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013fe:	2b58      	cmp	r3, #88	; 0x58
 8001400:	d006      	beq.n	8001410 <bmp280_init+0x50>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001408:	2b60      	cmp	r3, #96	; 0x60
 800140a:	d001      	beq.n	8001410 <bmp280_init+0x50>

		return false;
 800140c:	2300      	movs	r3, #0
 800140e:	e080      	b.n	8001512 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001410:	22b6      	movs	r2, #182	; 0xb6
 8001412:	21e0      	movs	r1, #224	; 0xe0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffae 	bl	8001376 <write_register8>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <bmp280_init+0x64>
		return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e076      	b.n	8001512 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	2301      	movs	r3, #1
 800142a:	21f3      	movs	r1, #243	; 0xf3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe98 	bl	8001162 <read_data>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f5      	bne.n	8001424 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001438:	7b3b      	ldrb	r3, [r7, #12]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff feb5 	bl	80011b2 <read_calibration_data>
 8001448:	4603      	mov	r3, r0
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <bmp280_init+0x96>
 8001454:	e001      	b.n	800145a <bmp280_init+0x9a>
		return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e05b      	b.n	8001512 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d10a      	bne.n	800147a <bmp280_init+0xba>
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff26 	bl	80012b6 <read_hum_calibration_data>
 800146a:	4603      	mov	r3, r0
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <bmp280_init+0xba>
		return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e04b      	b.n	8001512 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	795b      	ldrb	r3, [r3, #5]
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	b25a      	sxtb	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	461a      	mov	r2, r3
 8001494:	21f5      	movs	r1, #245	; 0xf5
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff6d 	bl	8001376 <write_register8>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <bmp280_init+0xe6>
		return false;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e035      	b.n	8001512 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	78db      	ldrb	r3, [r3, #3]
 80014b8:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014d2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014da:	2b60      	cmp	r3, #96	; 0x60
 80014dc:	d10d      	bne.n	80014fa <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	461a      	mov	r2, r3
 80014e8:	21f2      	movs	r1, #242	; 0xf2
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff43 	bl	8001376 <write_register8>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <bmp280_init+0x13a>
			return false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e00b      	b.n	8001512 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	461a      	mov	r2, r3
 80014fe:	21f4      	movs	r1, #244	; 0xf4
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff38 	bl	8001376 <write_register8>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <bmp280_init+0x150>
		return false;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <bmp280_init+0x152>
	}

	return true;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	10da      	asrs	r2, r3, #3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800153c:	12db      	asrs	r3, r3, #11
 800153e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	111b      	asrs	r3, r3, #4
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	1112      	asrs	r2, r2, #4
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	8809      	ldrh	r1, [r1, #0]
 8001552:	1a52      	subs	r2, r2, r1
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001564:	139b      	asrs	r3, r3, #14
 8001566:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3380      	adds	r3, #128	; 0x80
 800157e:	121b      	asrs	r3, r3, #8
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b09c      	sub	sp, #112	; 0x70
 8001592:	af00      	add	r7, sp, #0
 8001594:	6578      	str	r0, [r7, #84]	; 0x54
 8001596:	6539      	str	r1, [r7, #80]	; 0x50
 8001598:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800159a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159c:	461a      	mov	r2, r3
 800159e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015a2:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015a6:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015aa:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ba:	fb03 f302 	mul.w	r3, r3, r2
 80015be:	18ca      	adds	r2, r1, r3
 80015c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c2:	fba3 4503 	umull	r4, r5, r3, r3
 80015c6:	1953      	adds	r3, r2, r5
 80015c8:	461d      	mov	r5, r3
 80015ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015d6:	fb02 f005 	mul.w	r0, r2, r5
 80015da:	fb04 f103 	mul.w	r1, r4, r3
 80015de:	4401      	add	r1, r0
 80015e0:	fba4 2302 	umull	r2, r3, r4, r2
 80015e4:	4419      	add	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80015ec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80015f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80015fe:	fb03 f001 	mul.w	r0, r3, r1
 8001602:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001604:	fb02 f101 	mul.w	r1, r2, r1
 8001608:	4408      	add	r0, r1
 800160a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800160c:	fba1 2302 	umull	r2, r3, r1, r2
 8001610:	18c1      	adds	r1, r0, r3
 8001612:	460b      	mov	r3, r1
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	0459      	lsls	r1, r3, #17
 800161e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001622:	0450      	lsls	r0, r2, #17
 8001624:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001628:	eb12 0800 	adds.w	r8, r2, r0
 800162c:	eb43 0901 	adc.w	r9, r3, r1
 8001630:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001636:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800163a:	b21a      	sxth	r2, r3
 800163c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	00d1      	lsls	r1, r2, #3
 800164a:	2000      	movs	r0, #0
 800164c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001650:	1814      	adds	r4, r2, r0
 8001652:	61bc      	str	r4, [r7, #24]
 8001654:	414b      	adcs	r3, r1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800165c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001664:	fb03 f102 	mul.w	r1, r3, r2
 8001668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800166a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166c:	fb03 f302 	mul.w	r3, r3, r2
 8001670:	18ca      	adds	r2, r1, r3
 8001672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001674:	fba3 4503 	umull	r4, r5, r3, r3
 8001678:	1953      	adds	r3, r2, r5
 800167a:	461d      	mov	r5, r3
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001682:	b21a      	sxth	r2, r3
 8001684:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001688:	fb02 f005 	mul.w	r0, r2, r5
 800168c:	fb04 f103 	mul.w	r1, r4, r3
 8001690:	4401      	add	r1, r0
 8001692:	fba4 2302 	umull	r2, r3, r4, r2
 8001696:	4419      	add	r1, r3
 8001698:	460b      	mov	r3, r1
 800169a:	f04f 0800 	mov.w	r8, #0
 800169e:	f04f 0900 	mov.w	r9, #0
 80016a2:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016a6:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016aa:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016bc:	fb03 f001 	mul.w	r0, r3, r1
 80016c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016c2:	fb02 f101 	mul.w	r1, r2, r1
 80016c6:	1844      	adds	r4, r0, r1
 80016c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016ca:	fba1 0102 	umull	r0, r1, r1, r2
 80016ce:	1863      	adds	r3, r4, r1
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	030b      	lsls	r3, r1, #12
 80016dc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016e0:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016e2:	eb18 0102 	adds.w	r1, r8, r2
 80016e6:	6139      	str	r1, [r7, #16]
 80016e8:	eb49 0303 	adc.w	r3, r9, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80016fa:	1c11      	adds	r1, r2, #0
 80016fc:	6439      	str	r1, [r7, #64]	; 0x40
 80016fe:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
 8001704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001706:	88db      	ldrh	r3, [r3, #6]
 8001708:	b29a      	uxth	r2, r3
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001712:	4629      	mov	r1, r5
 8001714:	fb02 f001 	mul.w	r0, r2, r1
 8001718:	4621      	mov	r1, r4
 800171a:	fb01 f103 	mul.w	r1, r1, r3
 800171e:	4401      	add	r1, r0
 8001720:	4620      	mov	r0, r4
 8001722:	fba0 2302 	umull	r2, r3, r0, r2
 8001726:	4419      	add	r1, r3
 8001728:	460b      	mov	r3, r1
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	1058      	asrs	r0, r3, #1
 8001734:	17d9      	asrs	r1, r3, #31
 8001736:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 800173a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800173e:	4313      	orrs	r3, r2
 8001740:	d101      	bne.n	8001746 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001742:	2300      	movs	r3, #0
 8001744:	e0e1      	b.n	800190a <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800174c:	461a      	mov	r2, r3
 800174e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001752:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001758:	105b      	asrs	r3, r3, #1
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175e:	07db      	lsls	r3, r3, #31
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
 8001762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001766:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800176a:	4621      	mov	r1, r4
 800176c:	ebb1 0a02 	subs.w	sl, r1, r2
 8001770:	4629      	mov	r1, r5
 8001772:	eb61 0b03 	sbc.w	fp, r1, r3
 8001776:	4652      	mov	r2, sl
 8001778:	465b      	mov	r3, fp
 800177a:	1891      	adds	r1, r2, r2
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	415b      	adcs	r3, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001786:	eb12 020a 	adds.w	r2, r2, sl
 800178a:	eb43 030b 	adc.w	r3, r3, fp
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0199      	lsls	r1, r3, #6
 8001798:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800179c:	0190      	lsls	r0, r2, #6
 800179e:	1812      	adds	r2, r2, r0
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	0099      	lsls	r1, r3, #2
 80017ae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017b2:	0090      	lsls	r0, r2, #2
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	eb12 020a 	adds.w	r2, r2, sl
 80017bc:	eb43 030b 	adc.w	r3, r3, fp
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0099      	lsls	r1, r3, #2
 80017ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017ce:	0090      	lsls	r0, r2, #2
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	eb12 010a 	adds.w	r1, r2, sl
 80017d8:	6339      	str	r1, [r7, #48]	; 0x30
 80017da:	eb43 030b 	adc.w	r3, r3, fp
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
 80017e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017e8:	f7ff fa6e 	bl	8000cc8 <__aeabi_ldivmod>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017fa:	b218      	sxth	r0, r3
 80017fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001800:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	0b62      	lsrs	r2, r4, #13
 800180e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001812:	136b      	asrs	r3, r5, #13
 8001814:	fb02 f501 	mul.w	r5, r2, r1
 8001818:	fb00 f403 	mul.w	r4, r0, r3
 800181c:	442c      	add	r4, r5
 800181e:	fba0 0102 	umull	r0, r1, r0, r2
 8001822:	1863      	adds	r3, r4, r1
 8001824:	4619      	mov	r1, r3
 8001826:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	0b62      	lsrs	r2, r4, #13
 8001834:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001838:	136b      	asrs	r3, r5, #13
 800183a:	fb02 f501 	mul.w	r5, r2, r1
 800183e:	fb00 f403 	mul.w	r4, r0, r3
 8001842:	442c      	add	r4, r5
 8001844:	fba0 0102 	umull	r0, r1, r0, r2
 8001848:	1863      	adds	r3, r4, r1
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	0e42      	lsrs	r2, r0, #25
 8001856:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800185a:	164b      	asrs	r3, r1, #25
 800185c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001866:	b21a      	sxth	r2, r3
 8001868:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800186c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800186e:	fb03 f001 	mul.w	r0, r3, r1
 8001872:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001874:	fb02 f101 	mul.w	r1, r2, r1
 8001878:	1844      	adds	r4, r0, r1
 800187a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800187c:	fba1 0102 	umull	r0, r1, r1, r2
 8001880:	1863      	adds	r3, r4, r1
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	0cc2      	lsrs	r2, r0, #19
 800188e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001892:	14cb      	asrs	r3, r1, #19
 8001894:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001898:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800189c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018a0:	1884      	adds	r4, r0, r2
 80018a2:	62bc      	str	r4, [r7, #40]	; 0x28
 80018a4:	eb41 0303 	adc.w	r3, r1, r3
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018b2:	4621      	mov	r1, r4
 80018b4:	1889      	adds	r1, r1, r2
 80018b6:	6239      	str	r1, [r7, #32]
 80018b8:	4629      	mov	r1, r5
 80018ba:	eb43 0101 	adc.w	r1, r3, r1
 80018be:	6279      	str	r1, [r7, #36]	; 0x24
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018cc:	4623      	mov	r3, r4
 80018ce:	0a18      	lsrs	r0, r3, #8
 80018d0:	462b      	mov	r3, r5
 80018d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018d6:	462b      	mov	r3, r5
 80018d8:	1219      	asrs	r1, r3, #8
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e0:	b21c      	sxth	r4, r3
 80018e2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	012b      	lsls	r3, r5, #4
 80018f0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018f4:	0122      	lsls	r2, r4, #4
 80018f6:	1884      	adds	r4, r0, r2
 80018f8:	603c      	str	r4, [r7, #0]
 80018fa:	eb41 0303 	adc.w	r3, r1, r3
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001904:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800190a:	4618      	mov	r0, r3
 800190c:	3770      	adds	r7, #112	; 0x70
 800190e:	46bd      	mov	sp, r7
 8001910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001914 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001926:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	039a      	lsls	r2, r3, #14
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800193c:	4619      	mov	r1, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fb03 f301 	mul.w	r3, r3, r1
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800194a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001952:	4611      	mov	r1, r2
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	fb02 f201 	mul.w	r2, r2, r1
 800195a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	7f09      	ldrb	r1, [r1, #28]
 8001960:	4608      	mov	r0, r1
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	fb01 f100 	mul.w	r1, r1, r0
 8001968:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800196a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800196e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001972:	1292      	asrs	r2, r2, #10
 8001974:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800197e:	fb01 f202 	mul.w	r2, r1, r2
 8001982:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001986:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	13db      	asrs	r3, r3, #15
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	13d2      	asrs	r2, r2, #15
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	7e12      	ldrb	r2, [r2, #24]
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80019b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80019ba:	bfa8      	it	ge
 80019bc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80019c0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	131b      	asrs	r3, r3, #12
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b08c      	sub	sp, #48	; 0x30
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019e6:	2b60      	cmp	r3, #96	; 0x60
 80019e8:	d007      	beq.n	80019fa <bmp280_read_fixed+0x28>
		if (humidity)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <bmp280_read_fixed+0x32>
 8001a00:	2308      	movs	r3, #8
 8001a02:	e000      	b.n	8001a06 <bmp280_read_fixed+0x34>
 8001a04:	2306      	movs	r3, #6
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f107 0218 	add.w	r2, r7, #24
 8001a10:	21f7      	movs	r1, #247	; 0xf7
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff fba5 	bl	8001162 <read_data>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <bmp280_read_fixed+0x50>
		return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e038      	b.n	8001a94 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a22:	7e3b      	ldrb	r3, [r7, #24]
 8001a24:	031a      	lsls	r2, r3, #12
 8001a26:	7e7b      	ldrb	r3, [r7, #25]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	7eba      	ldrb	r2, [r7, #26]
 8001a2e:	0912      	lsrs	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4313      	orrs	r3, r2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a36:	7efb      	ldrb	r3, [r7, #27]
 8001a38:	031a      	lsls	r2, r3, #12
 8001a3a:	7f3b      	ldrb	r3, [r7, #28]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	7f7a      	ldrb	r2, [r7, #29]
 8001a42:	0912      	lsrs	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	4313      	orrs	r3, r2
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd61 	bl	800151a <compensate_temperature>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fd91 	bl	800158c <compensate_pressure>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	7ffa      	ldrb	r2, [r7, #31]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a39      	ldr	r1, [r7, #32]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff ff44 	bl	8001914 <compensate_humidity>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <bmp280_read_float+0x1a>
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	e000      	b.n	8001ab8 <bmp280_read_float+0x1c>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f107 0218 	add.w	r2, r7, #24
 8001abc:	f107 011c 	add.w	r1, r7, #28
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff ff86 	bl	80019d2 <bmp280_read_fixed>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d028      	beq.n	8001b1e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b28 <bmp280_read_float+0x8c>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aee:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b2c <bmp280_read_float+0x90>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b30 <bmp280_read_float+0x94>
 8001b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <bmp280_read_float+0x84>
	}

	return false;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	42c80000 	.word	0x42c80000
 8001b2c:	43800000 	.word	0x43800000
 8001b30:	44800000 	.word	0x44800000

08001b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_GPIO_Init+0xd0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4812      	ldr	r0, [pc, #72]	; (8001c08 <MX_GPIO_Init+0xd4>)
 8001bc0:	f000 ff52 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_GPIO_Init+0xd8>)
 8001bdc:	f000 fdb0 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001be0:	2320      	movs	r3, #32
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_GPIO_Init+0xd4>)
 8001bf8:	f000 fda2 	bl	8002740 <HAL_GPIO_Init>

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020800 	.word	0x40020800

08001c10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <MX_I2C1_Init+0x54>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <MX_I2C1_Init+0x58>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c4e:	f000 ff25 	bl	8002a9c <HAL_I2C_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 fa2a 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000020c 	.word	0x2000020c
 8001c64:	40005400 	.word	0x40005400
 8001c68:	000186a0 	.word	0x000186a0

08001c6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_I2C_MspInit+0x8c>)
 8001cc8:	f000 fd3a 	bl	8002740 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <startBmp>:

uint16_t size_print;
uint8_t Data_print[256];

void startBmp(I2C_HandleTypeDef* i2c_port)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280_sensor.params);
 8001d04:	4825      	ldr	r0, [pc, #148]	; (8001d9c <startBmp+0xa0>)
 8001d06:	f7ff f9e1 	bl	80010cc <bmp280_init_default_params>
	bmp280_sensor.addr = BMP280_I2C_ADDRESS_0;
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <startBmp+0xa4>)
 8001d0c:	2276      	movs	r2, #118	; 0x76
 8001d0e:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280_sensor.i2c = i2c_port;
 8001d10:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <startBmp+0xa4>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6293      	str	r3, [r2, #40]	; 0x28

	while (!bmp280_init(&bmp280_sensor, &bmp280_sensor.params))
 8001d16:	e013      	b.n	8001d40 <startBmp+0x44>
	{
		size_print = sprintf((char *) Data_print, "BMP280 initialization failed\n");
 8001d18:	4922      	ldr	r1, [pc, #136]	; (8001da4 <startBmp+0xa8>)
 8001d1a:	4823      	ldr	r0, [pc, #140]	; (8001da8 <startBmp+0xac>)
 8001d1c:	f003 fdb0 	bl	8005880 <siprintf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <startBmp+0xb0>)
 8001d26:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data_print, size_print, 1000);
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <startBmp+0xb0>)
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d30:	491d      	ldr	r1, [pc, #116]	; (8001da8 <startBmp+0xac>)
 8001d32:	481f      	ldr	r0, [pc, #124]	; (8001db0 <startBmp+0xb4>)
 8001d34:	f002 fc29 	bl	800458a <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d3c:	f000 fbf6 	bl	800252c <HAL_Delay>
	while (!bmp280_init(&bmp280_sensor, &bmp280_sensor.params))
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <startBmp+0xa0>)
 8001d42:	4817      	ldr	r0, [pc, #92]	; (8001da0 <startBmp+0xa4>)
 8001d44:	f7ff fb3c 	bl	80013c0 <bmp280_init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e1      	bne.n	8001d18 <startBmp+0x1c>
	}

	bool bme280p = bmp280_sensor.id == BME280_CHIP_ID;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <startBmp+0xa4>)
 8001d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d5a:	2b60      	cmp	r3, #96	; 0x60
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

	size_print = sprintf((char *) Data_print, "BMP280: found %s\n",
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <startBmp+0x72>
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <startBmp+0xb8>)
 8001d6c:	e000      	b.n	8001d70 <startBmp+0x74>
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <startBmp+0xbc>)
 8001d70:	461a      	mov	r2, r3
 8001d72:	4912      	ldr	r1, [pc, #72]	; (8001dbc <startBmp+0xc0>)
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <startBmp+0xac>)
 8001d76:	f003 fd83 	bl	8005880 <siprintf>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <startBmp+0xb0>)
 8001d80:	801a      	strh	r2, [r3, #0]
			bme280p ? "BME280" : "BMP280");
	HAL_UART_Transmit(&huart2, Data_print, size_print, 1000);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <startBmp+0xb0>)
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	4907      	ldr	r1, [pc, #28]	; (8001da8 <startBmp+0xac>)
 8001d8c:	4808      	ldr	r0, [pc, #32]	; (8001db0 <startBmp+0xb4>)
 8001d8e:	f002 fbfc 	bl	800458a <HAL_UART_Transmit>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000394 	.word	0x20000394
 8001da0:	20000368 	.word	0x20000368
 8001da4:	0800a338 	.word	0x0800a338
 8001da8:	20000264 	.word	0x20000264
 8001dac:	200004e0 	.word	0x200004e0
 8001db0:	200004e4 	.word	0x200004e4
 8001db4:	0800a358 	.word	0x0800a358
 8001db8:	0800a360 	.word	0x0800a360
 8001dbc:	0800a368 	.word	0x0800a368

08001dc0 <readBmp>:


void readBmp(float ret[2])
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	float temperature, pressure, humidity;

	while (!bmp280_read_float(&bmp280_sensor, &temperature, &pressure, &humidity))
 8001dc8:	e007      	b.n	8001dda <readBmp+0x1a>
	{
		printA("Sicaklik/Basinc okurken bir hata olustu!\n", 64);
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	4810      	ldr	r0, [pc, #64]	; (8001e10 <readBmp+0x50>)
 8001dce:	f000 f87b 	bl	8001ec8 <printA>
		HAL_Delay(2000);
 8001dd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dd6:	f000 fba9 	bl	800252c <HAL_Delay>
	while (!bmp280_read_float(&bmp280_sensor, &temperature, &pressure, &humidity))
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	f107 0210 	add.w	r2, r7, #16
 8001de2:	f107 0114 	add.w	r1, r7, #20
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <readBmp+0x54>)
 8001de8:	f7ff fe58 	bl	8001a9c <bmp280_read_float>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e8      	bne.n	8001dca <readBmp+0xa>
	}

	ret[0] = temperature;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
	ret[1] = pressure;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]

}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800a37c 	.word	0x0800a37c
 8001e14:	20000368 	.word	0x20000368

08001e18 <calculateAltitude>:

float calculateAltitude(float p, float pi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e22:	edc7 0a00 	vstr	s1, [r7]
	p = p / 100;
 8001e26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e2a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ec0 <calculateAltitude+0xa8>
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	edc7 7a01 	vstr	s15, [r7, #4]
	pi = pi / 100;
 8001e36:	ed97 7a00 	vldr	s14, [r7]
 8001e3a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001ec0 <calculateAltitude+0xa8>
 8001e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e42:	edc7 7a00 	vstr	s15, [r7]
	float alt = (44330 * (1.0 - pow(p / pi, 0.1903)));
 8001e46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e4a:	edd7 7a00 	vldr	s15, [r7]
 8001e4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e52:	ee16 0a90 	vmov	r0, s13
 8001e56:	f7fe fb97 	bl	8000588 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001eb0 <calculateAltitude+0x98>
 8001e62:	ec43 2b10 	vmov	d0, r2, r3
 8001e66:	f007 faaf 	bl	80093c8 <pow>
 8001e6a:	ec53 2b10 	vmov	r2, r3, d0
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	4914      	ldr	r1, [pc, #80]	; (8001ec4 <calculateAltitude+0xac>)
 8001e74:	f7fe fa28 	bl	80002c8 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	a30d      	add	r3, pc, #52	; (adr r3, 8001eb8 <calculateAltitude+0xa0>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fbd7 	bl	8000638 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fec9 	bl	8000c28 <__aeabi_d2f>
 8001e96:	4603      	mov	r3, r0
 8001e98:	60fb      	str	r3, [r7, #12]

	return alt;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	ee07 3a90 	vmov	s15, r3
}
 8001ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	f3af 8000 	nop.w
 8001eb0:	1a36e2eb 	.word	0x1a36e2eb
 8001eb4:	3fc85bc0 	.word	0x3fc85bc0
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40e5a540 	.word	0x40e5a540
 8001ec0:	42c80000 	.word	0x42c80000
 8001ec4:	3ff00000 	.word	0x3ff00000

08001ec8 <printA>:

void printA(char* str, uint16_t size)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0c2      	sub	sp, #264	; 0x108
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	6018      	str	r0, [r3, #0]
 8001ed2:	460a      	mov	r2, r1
 8001ed4:	1cbb      	adds	r3, r7, #2
 8001ed6:	801a      	strh	r2, [r3, #0]
	uint8_t Data[256];
	size = sprintf((char *) Data, str);
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	f107 0208 	add.w	r2, r7, #8
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f003 fccd 	bl	8005880 <siprintf>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	1cbb      	adds	r3, r7, #2
 8001eea:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001eec:	1cbb      	adds	r3, r7, #2
 8001eee:	881a      	ldrh	r2, [r3, #0]
 8001ef0:	f107 0108 	add.w	r1, r7, #8
 8001ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <printA+0x40>)
 8001efa:	f002 fb46 	bl	800458a <HAL_UART_Transmit>
}
 8001efe:	bf00      	nop
 8001f00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200004e4 	.word	0x200004e4

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	float BaseInfo[2] = { -1, -1 };
 8001f12:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <main+0xb0>)
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f1c:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f20:	f000 fa92 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f24:	f000 f856 	bl	8001fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f28:	f7ff fe04 	bl	8001b34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f2c:	f000 f9f0 	bl	8002310 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f30:	f7ff fe6e 	bl	8001c10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	startBmp(&hi2c1);
 8001f34:	4822      	ldr	r0, [pc, #136]	; (8001fc0 <main+0xb4>)
 8001f36:	f7ff fee1 	bl	8001cfc <startBmp>
	HAL_Delay(25);
 8001f3a:	2019      	movs	r0, #25
 8001f3c:	f000 faf6 	bl	800252c <HAL_Delay>
	readBmp(BaseInfo);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff3b 	bl	8001dc0 <readBmp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		float bmp_data[2] = { -1, -1 };
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <main+0xb0>)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f52:	e883 0003 	stmia.w	r3, {r0, r1}
		float Altitude = -1;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <main+0xb8>)
 8001f58:	617b      	str	r3, [r7, #20]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		readBmp(bmp_data);
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff2f 	bl	8001dc0 <readBmp>
		Altitude = calculateAltitude(bmp_data[1], BaseInfo[1]);
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f6a:	eef0 0a47 	vmov.f32	s1, s14
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	f7ff ff51 	bl	8001e18 <calculateAltitude>
 8001f76:	ed87 0a05 	vstr	s0, [r7, #20]
	  	  HAL_Delay(150);
 8001f7a:	2096      	movs	r0, #150	; 0x96
 8001f7c:	f000 fad6 	bl	800252c <HAL_Delay>

			size_print = sprintf((char *) Data_print,
					" Temperature: %.2f, Altitude: %.1f \n",
					bmp_data[0], Altitude
 8001f80:	687b      	ldr	r3, [r7, #4]
			size_print = sprintf((char *) Data_print,
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fb00 	bl	8000588 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7fe fafb 	bl	8000588 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <main+0xbc>)
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <main+0xc0>)
 8001fa2:	f003 fc6d 	bl	8005880 <siprintf>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <main+0xc4>)
 8001fac:	801a      	strh	r2, [r3, #0]
					);
			printA(Data_print, size_print);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <main+0xc4>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <main+0xc0>)
 8001fb6:	f7ff ff87 	bl	8001ec8 <printA>
  {
 8001fba:	e7c6      	b.n	8001f4a <main+0x3e>
 8001fbc:	0800a3d0 	.word	0x0800a3d0
 8001fc0:	2000020c 	.word	0x2000020c
 8001fc4:	bf800000 	.word	0xbf800000
 8001fc8:	0800a3a8 	.word	0x0800a3a8
 8001fcc:	20000264 	.word	0x20000264
 8001fd0:	200004e0 	.word	0x200004e0

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b094      	sub	sp, #80	; 0x50
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	2234      	movs	r2, #52	; 0x34
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fdc4 	bl	8004b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <SystemClock_Config+0xd4>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <SystemClock_Config+0xd4>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <SystemClock_Config+0xd4>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <SystemClock_Config+0xd8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <SystemClock_Config+0xd8>)
 8002022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <SystemClock_Config+0xd8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002034:	2302      	movs	r3, #2
 8002036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002038:	2301      	movs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800203c:	2310      	movs	r3, #16
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002040:	2302      	movs	r3, #2
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002044:	2300      	movs	r3, #0
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002048:	2310      	movs	r3, #16
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800204c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002050:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002052:	2304      	movs	r3, #4
 8002054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002056:	2302      	movs	r3, #2
 8002058:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800205a:	2302      	movs	r3, #2
 800205c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4618      	mov	r0, r3
 8002064:	f001 ffa6 	bl	8003fb4 <HAL_RCC_OscConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800206e:	f000 f81f 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002072:	230f      	movs	r3, #15
 8002074:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002076:	2302      	movs	r3, #2
 8002078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	2102      	movs	r1, #2
 800208e:	4618      	mov	r0, r3
 8002090:	f001 fcc4 	bl	8003a1c <HAL_RCC_ClockConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800209a:	f000 f809 	bl	80020b0 <Error_Handler>
  }
}
 800209e:	bf00      	nop
 80020a0:	3750      	adds	r7, #80	; 0x50
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x8>
	...

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f000 faec 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f9c8 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
	return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_kill>:

int _kill(int pid, int sig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800217a:	f002 fccf 	bl	8004b1c <__errno>
 800217e:	4603      	mov	r3, r0
 8002180:	2216      	movs	r2, #22
 8002182:	601a      	str	r2, [r3, #0]
	return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_exit>:

void _exit (int status)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe7 	bl	8002170 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021a2:	e7fe      	b.n	80021a2 <_exit+0x12>

080021a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e00a      	b.n	80021cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021b6:	f3af 8000 	nop.w
 80021ba:	4601      	mov	r1, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	60ba      	str	r2, [r7, #8]
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf0      	blt.n	80021b6 <_read+0x12>
	}

return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e009      	b.n	8002204 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf1      	blt.n	80021f0 <_write+0x12>
	}
	return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_close>:

int _close(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223e:	605a      	str	r2, [r3, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_isatty>:

int _isatty(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f002 fc34 	bl	8004b1c <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20020000 	.word	0x20020000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	20000200 	.word	0x20000200
 80022e8:	20000540 	.word	0x20000540

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <MX_USART2_UART_Init+0x50>)
 8002318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <MX_USART2_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_USART2_UART_Init+0x4c>)
 8002348:	f002 f8d2 	bl	80044f0 <HAL_UART_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002352:	f7ff fead 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200004e4 	.word	0x200004e4
 8002360:	40004400 	.word	0x40004400

08002364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x84>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12b      	bne.n	80023de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_UART_MspInit+0x88>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_UART_MspInit+0x88>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_UART_MspInit+0x88>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_UART_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023be:	230c      	movs	r3, #12
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ce:	2307      	movs	r3, #7
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_UART_MspInit+0x8c>)
 80023da:	f000 f9b1 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40004400 	.word	0x40004400
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800241e:	f7ff ff65 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f002 fb81 	bl	8004b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff fd71 	bl	8001f0c <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002438:	0800a8f8 	.word	0x0800a8f8
  ldr r2, =_sbss
 800243c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002440:	2000053c 	.word	0x2000053c

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f931 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fe1e 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f93b 	bl	8002726 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 f911 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000008 	.word	0x20000008
 8002510:	20000528 	.word	0x20000528

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000528 	.word	0x20000528

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff47 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff5c 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff8e 	bl	800262c <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5d 	bl	80025d8 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffb0 	bl	8002694 <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e165      	b.n	8002a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8154 	bne.w	8002a22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80ae 	beq.w	8002a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a5c      	ldr	r2, [pc, #368]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e2:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_GPIO_Init+0x304>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <HAL_GPIO_Init+0x308>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x21a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4e      	ldr	r2, [pc, #312]	; (8002a4c <HAL_GPIO_Init+0x30c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x216>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4d      	ldr	r2, [pc, #308]	; (8002a50 <HAL_GPIO_Init+0x310>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x212>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_GPIO_Init+0x314>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4b      	ldr	r2, [pc, #300]	; (8002a58 <HAL_GPIO_Init+0x318>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x20a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4a      	ldr	r2, [pc, #296]	; (8002a5c <HAL_GPIO_Init+0x31c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x206>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a49      	ldr	r2, [pc, #292]	; (8002a60 <HAL_GPIO_Init+0x320>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x202>
 800293e:	2306      	movs	r3, #6
 8002940:	e00c      	b.n	800295c <HAL_GPIO_Init+0x21c>
 8002942:	2307      	movs	r3, #7
 8002944:	e00a      	b.n	800295c <HAL_GPIO_Init+0x21c>
 8002946:	2305      	movs	r3, #5
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x21c>
 800294a:	2304      	movs	r3, #4
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x21c>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x21c>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x21c>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x21c>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296c:	4935      	ldr	r1, [pc, #212]	; (8002a44 <HAL_GPIO_Init+0x304>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_GPIO_Init+0x324>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_GPIO_Init+0x324>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f ae96 	bls.w	800275c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40021800 	.word	0x40021800
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e12b      	b.n	8002d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff f8d2 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b00:	f001 f87e 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a81      	ldr	r2, [pc, #516]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d807      	bhi.n	8002b20 <HAL_I2C_Init+0x84>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_I2C_Init+0x278>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e006      	b.n	8002b2e <HAL_I2C_Init+0x92>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <HAL_I2C_Init+0x27c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf94      	ite	ls
 8002b28:	2301      	movls	r3, #1
 8002b2a:	2300      	movhi	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e7      	b.n	8002d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <HAL_I2C_Init+0x280>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d802      	bhi.n	8002b70 <HAL_I2C_Init+0xd4>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	e009      	b.n	8002b84 <HAL_I2C_Init+0xe8>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_I2C_Init+0x284>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	495c      	ldr	r1, [pc, #368]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002ba0:	428b      	cmp	r3, r1
 8002ba2:	d819      	bhi.n	8002bd8 <HAL_I2C_Init+0x13c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e59      	subs	r1, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb8:	400b      	ands	r3, r1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_I2C_Init+0x138>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e59      	subs	r1, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	e051      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e04f      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <HAL_I2C_Init+0x168>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e012      	b.n	8002c2a <HAL_I2C_Init+0x18e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x196>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e022      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10e      	bne.n	8002c58 <HAL_I2C_Init+0x1bc>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e58      	subs	r0, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	e00f      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6809      	ldr	r1, [r1, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6911      	ldr	r1, [r2, #16]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	000186a0 	.word	0x000186a0
 8002d14:	001e847f 	.word	0x001e847f
 8002d18:	003d08ff 	.word	0x003d08ff
 8002d1c:	431bde83 	.word	0x431bde83
 8002d20:	10624dd3 	.word	0x10624dd3

08002d24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	460b      	mov	r3, r1
 8002d38:	813b      	strh	r3, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d3e:	f7ff fbe9 	bl	8002514 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	f040 80d9 	bne.w	8002f04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2319      	movs	r3, #25
 8002d58:	2201      	movs	r2, #1
 8002d5a:	496d      	ldr	r1, [pc, #436]	; (8002f10 <HAL_I2C_Mem_Write+0x1ec>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fc7f 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0cc      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Mem_Write+0x56>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0c5      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d007      	beq.n	8002da0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	; 0x21
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a4d      	ldr	r2, [pc, #308]	; (8002f14 <HAL_I2C_Mem_Write+0x1f0>)
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de2:	88f8      	ldrh	r0, [r7, #6]
 8002de4:	893a      	ldrh	r2, [r7, #8]
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4603      	mov	r3, r0
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fab6 	bl	8003364 <I2C_RequestMemoryWrite>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d052      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e081      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fd00 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e06b      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_I2C_Mem_Write+0x180>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1aa      	bne.n	8002e02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fcec 	bl	800388e <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e016      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	00100002 	.word	0x00100002
 8002f14:	ffff0000 	.word	0xffff0000

08002f18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f32:	f7ff faef 	bl	8002514 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	f040 8208 	bne.w	8003356 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2319      	movs	r3, #25
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	497b      	ldr	r1, [pc, #492]	; (800313c <HAL_I2C_Mem_Read+0x224>)
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fb85 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e1fb      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Mem_Read+0x56>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e1f4      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d007      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2222      	movs	r2, #34	; 0x22
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	; 0x40
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_I2C_Mem_Read+0x228>)
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fd6:	88f8      	ldrh	r0, [r7, #6]
 8002fd8:	893a      	ldrh	r2, [r7, #8]
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa52 	bl	8003490 <I2C_RequestMemoryRead>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1b0      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e184      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d11b      	bne.n	8003066 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e164      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	2b02      	cmp	r3, #2
 800306c:	d11b      	bne.n	80030a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	e144      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030bc:	e138      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	f200 80f1 	bhi.w	80032aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d123      	bne.n	8003118 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fc1b 	bl	8003910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e139      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003116:	e10b      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b02      	cmp	r3, #2
 800311e:	d14e      	bne.n	80031be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2200      	movs	r2, #0
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_I2C_Mem_Read+0x22c>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa98 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e10e      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
 800313a:	bf00      	nop
 800313c:	00100002 	.word	0x00100002
 8003140:	ffff0000 	.word	0xffff0000
 8003144:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031bc:	e0b8      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2200      	movs	r2, #0
 80031c6:	4966      	ldr	r1, [pc, #408]	; (8003360 <HAL_I2C_Mem_Read+0x448>)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa49 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0bf      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2200      	movs	r2, #0
 8003222:	494f      	ldr	r1, [pc, #316]	; (8003360 <HAL_I2C_Mem_Read+0x448>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa1b 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e091      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a8:	e042      	b.n	8003330 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fb2e 	bl	8003910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e04c      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d118      	bne.n	8003330 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f aec2 	bne.w	80030be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	00010004 	.word	0x00010004

08003364 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2200      	movs	r2, #0
 8003396:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f960 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b4:	d103      	bne.n	80033be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e05f      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	492d      	ldr	r1, [pc, #180]	; (800348c <I2C_RequestMemoryWrite+0x128>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f998 	bl	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e04c      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fa02 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e02b      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e021      	b.n	8003480 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f9dc 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b04      	cmp	r3, #4
 8003460:	d107      	bne.n	8003472 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e005      	b.n	8003482 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	460b      	mov	r3, r1
 80034a4:	813b      	strh	r3, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8c2 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f0:	d103      	bne.n	80034fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0aa      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800350c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	4952      	ldr	r1, [pc, #328]	; (800365c <I2C_RequestMemoryRead+0x1cc>)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8fa 	bl	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e097      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f964 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b04      	cmp	r3, #4
 8003550:	d107      	bne.n	8003562 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e076      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	e021      	b.n	80035bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	b29b      	uxth	r3, r3
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f93e 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b04      	cmp	r3, #4
 800359c:	d107      	bne.n	80035ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e050      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b2:	893b      	ldrh	r3, [r7, #8]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	6a39      	ldr	r1, [r7, #32]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f923 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d107      	bne.n	80035e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e035      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2200      	movs	r2, #0
 8003600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f82b 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d103      	bne.n	8003628 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e013      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	6a3a      	ldr	r2, [r7, #32]
 8003640:	4906      	ldr	r1, [pc, #24]	; (800365c <I2C_RequestMemoryRead+0x1cc>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f863 	bl	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	00010002 	.word	0x00010002

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e025      	b.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d021      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe ff4b 	bl	8002514 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e023      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	e00c      	b.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d0b6      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371c:	e051      	b.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d123      	bne.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e046      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d021      	beq.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe fec9 	bl	8002514 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e020      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10c      	bne.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e00b      	b.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d18d      	bne.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003818:	e02d      	b.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f8ce 	bl	80039bc <I2C_IsAcknowledgeFailed>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e02d      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d021      	beq.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe fe6f 	bl	8002514 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e007      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d1ca      	bne.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800389a:	e02d      	b.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f88d 	bl	80039bc <I2C_IsAcknowledgeFailed>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e02d      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d021      	beq.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b4:	f7fe fe2e 	bl	8002514 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d302      	bcc.n	80038ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d1ca      	bne.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800391c:	e042      	b.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d119      	bne.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e029      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003960:	f7fe fdd8 	bl	8002514 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d1b5      	bne.n	800391e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d11b      	bne.n	8003a0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fd02 	bl	8002514 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fcfe 	bl	8002514 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f855 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fc62 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0800a3d8 	.word	0x0800a3d8
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c04:	f7ff fff0 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	0800a3e8 	.word	0x0800a3e8

08003c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c2c:	f7ff ffdc 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0b5b      	lsrs	r3, r3, #13
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	0800a3e8 	.word	0x0800a3e8

08003c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	b088      	sub	sp, #32
 8003c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c6c:	4bce      	ldr	r3, [pc, #824]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	f200 818d 	bhi.w	8003f94 <HAL_RCC_GetSysClockFreq+0x344>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <HAL_RCC_GetSysClockFreq+0x30>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003f95 	.word	0x08003f95
 8003c88:	08003f95 	.word	0x08003f95
 8003c8c:	08003f95 	.word	0x08003f95
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003f95 	.word	0x08003f95
 8003c98:	08003f95 	.word	0x08003f95
 8003c9c:	08003f95 	.word	0x08003f95
 8003ca0:	08003cc1 	.word	0x08003cc1
 8003ca4:	08003f95 	.word	0x08003f95
 8003ca8:	08003f95 	.word	0x08003f95
 8003cac:	08003f95 	.word	0x08003f95
 8003cb0:	08003e35 	.word	0x08003e35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4bbd      	ldr	r3, [pc, #756]	; (8003fac <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cb6:	61bb      	str	r3, [r7, #24]
       break;
 8003cb8:	e16f      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4bbd      	ldr	r3, [pc, #756]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x360>)
 8003cbc:	61bb      	str	r3, [r7, #24]
      break;
 8003cbe:	e16c      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4bb9      	ldr	r3, [pc, #740]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cca:	4bb7      	ldr	r3, [pc, #732]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d053      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	4bb4      	ldr	r3, [pc, #720]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	ea02 0400 	and.w	r4, r2, r0
 8003cee:	603c      	str	r4, [r7, #0]
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	014b      	lsls	r3, r1, #5
 8003d06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d0a:	0142      	lsls	r2, r0, #5
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4623      	mov	r3, r4
 8003d12:	1ac0      	subs	r0, r0, r3
 8003d14:	462b      	mov	r3, r5
 8003d16:	eb61 0103 	sbc.w	r1, r1, r3
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	018b      	lsls	r3, r1, #6
 8003d24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d28:	0182      	lsls	r2, r0, #6
 8003d2a:	1a12      	subs	r2, r2, r0
 8003d2c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d30:	f04f 0000 	mov.w	r0, #0
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	00d9      	lsls	r1, r3, #3
 8003d3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d3e:	00d0      	lsls	r0, r2, #3
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4621      	mov	r1, r4
 8003d46:	1852      	adds	r2, r2, r1
 8003d48:	4629      	mov	r1, r5
 8003d4a:	eb43 0101 	adc.w	r1, r3, r1
 8003d4e:	460b      	mov	r3, r1
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0259      	lsls	r1, r3, #9
 8003d5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d5e:	0250      	lsls	r0, r2, #9
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	f7fc fffa 	bl	8000d68 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e04c      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b8a      	ldr	r3, [pc, #552]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	ea02 0a00 	and.w	sl, r2, r0
 8003d96:	ea03 0b01 	and.w	fp, r3, r1
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	014b      	lsls	r3, r1, #5
 8003da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dac:	0142      	lsls	r2, r0, #5
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	ebb0 000a 	subs.w	r0, r0, sl
 8003db6:	eb61 010b 	sbc.w	r1, r1, fp
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc8:	0182      	lsls	r2, r0, #6
 8003dca:	1a12      	subs	r2, r2, r0
 8003dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	00d9      	lsls	r1, r3, #3
 8003dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dde:	00d0      	lsls	r0, r2, #3
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	eb12 020a 	adds.w	r2, r2, sl
 8003de8:	eb43 030b 	adc.w	r3, r3, fp
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0299      	lsls	r1, r3, #10
 8003df6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dfa:	0290      	lsls	r0, r2, #10
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc ffac 	bl	8000d68 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e18:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	61bb      	str	r3, [r7, #24]
      break;
 8003e32:	e0b2      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e34:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04d      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b57      	ldr	r3, [pc, #348]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	461a      	mov	r2, r3
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	ea02 0800 	and.w	r8, r2, r0
 8003e62:	ea03 0901 	and.w	r9, r3, r1
 8003e66:	4640      	mov	r0, r8
 8003e68:	4649      	mov	r1, r9
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	014b      	lsls	r3, r1, #5
 8003e74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e78:	0142      	lsls	r2, r0, #5
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	ebb0 0008 	subs.w	r0, r0, r8
 8003e82:	eb61 0109 	sbc.w	r1, r1, r9
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	018b      	lsls	r3, r1, #6
 8003e90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e94:	0182      	lsls	r2, r0, #6
 8003e96:	1a12      	subs	r2, r2, r0
 8003e98:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9c:	f04f 0000 	mov.w	r0, #0
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	00d9      	lsls	r1, r3, #3
 8003ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eaa:	00d0      	lsls	r0, r2, #3
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	eb12 0208 	adds.w	r2, r2, r8
 8003eb4:	eb43 0309 	adc.w	r3, r3, r9
 8003eb8:	f04f 0000 	mov.w	r0, #0
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	0259      	lsls	r1, r3, #9
 8003ec2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ec6:	0250      	lsls	r0, r2, #9
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f7fc ff46 	bl	8000d68 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e04a      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	ea02 0400 	and.w	r4, r2, r0
 8003efe:	ea03 0501 	and.w	r5, r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	014b      	lsls	r3, r1, #5
 8003f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f14:	0142      	lsls	r2, r0, #5
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	1b00      	subs	r0, r0, r4
 8003f1c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	018b      	lsls	r3, r1, #6
 8003f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f2e:	0182      	lsls	r2, r0, #6
 8003f30:	1a12      	subs	r2, r2, r0
 8003f32:	eb63 0301 	sbc.w	r3, r3, r1
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	00d9      	lsls	r1, r3, #3
 8003f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f44:	00d0      	lsls	r0, r2, #3
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	1912      	adds	r2, r2, r4
 8003f4c:	eb45 0303 	adc.w	r3, r5, r3
 8003f50:	f04f 0000 	mov.w	r0, #0
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	0299      	lsls	r1, r3, #10
 8003f5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f5e:	0290      	lsls	r0, r2, #10
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f7fc fefa 	bl	8000d68 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0f1b      	lsrs	r3, r3, #28
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	61bb      	str	r3, [r7, #24]
      break;
 8003f92:	e002      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f96:	61bb      	str	r3, [r7, #24]
      break;
 8003f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	007a1200 	.word	0x007a1200

08003fb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e28d      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8083 	beq.w	80040da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fd4:	4b94      	ldr	r3, [pc, #592]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d019      	beq.n	8004014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fe0:	4b91      	ldr	r3, [pc, #580]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fec:	4b8e      	ldr	r3, [pc, #568]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff8:	d00c      	beq.n	8004014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b8b      	ldr	r3, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	4b84      	ldr	r3, [pc, #528]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05b      	beq.n	80040d8 <HAL_RCC_OscConfig+0x124>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d157      	bne.n	80040d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e25a      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x90>
 8004036:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7b      	ldr	r2, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xcc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0xb4>
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a75      	ldr	r2, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b73      	ldr	r3, [pc, #460]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a72      	ldr	r2, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xcc>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6e      	ldr	r2, [pc, #440]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6b      	ldr	r2, [pc, #428]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe fa44 	bl	8002514 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe fa40 	bl	8002514 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e21f      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xdc>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fa30 	bl	8002514 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fa2c 	bl	8002514 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e20b      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b57      	ldr	r3, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x104>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d06f      	beq.n	80041c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040e6:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d017      	beq.n	8004122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040f2:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d11c      	bne.n	8004150 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b44      	ldr	r3, [pc, #272]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d116      	bne.n	8004150 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_RCC_OscConfig+0x186>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e1d3      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	e03a      	b.n	80041c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d020      	beq.n	800419a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCC_OscConfig+0x278>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fe f9d9 	bl	8002514 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004166:	f7fe f9d5 	bl	8002514 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e1b4      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4925      	ldr	r1, [pc, #148]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]
 8004198:	e015      	b.n	80041c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x278>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe f9b8 	bl	8002514 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a8:	f7fe f9b4 	bl	8002514 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e193      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d036      	beq.n	8004240 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fe f998 	bl	8002514 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fe f994 	bl	8002514 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e173      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x234>
 8004206:	e01b      	b.n	8004240 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7fe f981 	bl	8002514 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	e00e      	b.n	8004234 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004216:	f7fe f97d 	bl	8002514 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d907      	bls.n	8004234 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e15c      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
 8004228:	40023800 	.word	0x40023800
 800422c:	42470000 	.word	0x42470000
 8004230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004234:	4b8a      	ldr	r3, [pc, #552]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ea      	bne.n	8004216 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8097 	beq.w	800437c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004252:	4b83      	ldr	r3, [pc, #524]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	4b7f      	ldr	r3, [pc, #508]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	4a7e      	ldr	r2, [pc, #504]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426c:	6413      	str	r3, [r2, #64]	; 0x40
 800426e:	4b7c      	ldr	r3, [pc, #496]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	4b79      	ldr	r3, [pc, #484]	; (8004464 <HAL_RCC_OscConfig+0x4b0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d118      	bne.n	80042bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428a:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x4b0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a75      	ldr	r2, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x4b0>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004296:	f7fe f93d 	bl	8002514 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429e:	f7fe f939 	bl	8002514 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e118      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	4b6c      	ldr	r3, [pc, #432]	; (8004464 <HAL_RCC_OscConfig+0x4b0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d106      	bne.n	80042d2 <HAL_RCC_OscConfig+0x31e>
 80042c4:	4b66      	ldr	r3, [pc, #408]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a65      	ldr	r2, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	e01c      	b.n	800430c <HAL_RCC_OscConfig+0x358>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x340>
 80042da:	4b61      	ldr	r3, [pc, #388]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	4a60      	ldr	r2, [pc, #384]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	f043 0304 	orr.w	r3, r3, #4
 80042e4:	6713      	str	r3, [r2, #112]	; 0x70
 80042e6:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a5d      	ldr	r2, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0x358>
 80042f4:	4b5a      	ldr	r3, [pc, #360]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a59      	ldr	r2, [pc, #356]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004300:	4b57      	ldr	r3, [pc, #348]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	4a56      	ldr	r2, [pc, #344]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004306:	f023 0304 	bic.w	r3, r3, #4
 800430a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fe f8fe 	bl	8002514 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fe f8fa 	bl	8002514 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0d7      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0ee      	beq.n	800431c <HAL_RCC_OscConfig+0x368>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe f8e8 	bl	8002514 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fe f8e4 	bl	8002514 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0c1      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435e:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1ee      	bne.n	8004348 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80ad 	beq.w	80044e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	d060      	beq.n	8004454 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d145      	bne.n	8004426 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b33      	ldr	r3, [pc, #204]	; (8004468 <HAL_RCC_OscConfig+0x4b4>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe f8b8 	bl	8002514 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe f8b4 	bl	8002514 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e093      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	071b      	lsls	r3, r3, #28
 80043f2:	491b      	ldr	r1, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x4b4>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe f889 	bl	8002514 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004406:	f7fe f885 	bl	8002514 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e064      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x452>
 8004424:	e05c      	b.n	80044e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_RCC_OscConfig+0x4b4>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe f872 	bl	8002514 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004434:	f7fe f86e 	bl	8002514 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e04d      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_OscConfig+0x4ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x480>
 8004452:	e045      	b.n	80044e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e040      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
 8004460:	40023800 	.word	0x40023800
 8004464:	40007000 	.word	0x40007000
 8004468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800446c:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <HAL_RCC_OscConfig+0x538>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d030      	beq.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d129      	bne.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d122      	bne.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d119      	bne.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	3b01      	subs	r3, #1
 80044b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d10f      	bne.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03f      	b.n	8004582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd ff24 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2224      	movs	r2, #36	; 0x24
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f929 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08a      	sub	sp, #40	; 0x28
 800458e:	af02      	add	r7, sp, #8
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d17c      	bne.n	80046a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_UART_Transmit+0x2c>
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e075      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x3e>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2221      	movs	r2, #33	; 0x21
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045de:	f7fd ff99 	bl	8002514 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d108      	bne.n	800460c <HAL_UART_Transmit+0x82>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e003      	b.n	8004614 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800461c:	e02a      	b.n	8004674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f840 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e036      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3302      	adds	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e007      	b.n	8004666 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1cf      	bne.n	800461e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2140      	movs	r1, #64	; 0x40
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f810 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b090      	sub	sp, #64	; 0x40
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	e050      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d04c      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x30>
 80046ce:	f7fd ff21 	bl	8002514 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046da:	429a      	cmp	r2, r3
 80046dc:	d241      	bcs.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046fe:	637a      	str	r2, [r7, #52]	; 0x34
 8004700:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	613b      	str	r3, [r7, #16]
   return(result);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004732:	623a      	str	r2, [r7, #32]
 8004734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	69f9      	ldr	r1, [r7, #28]
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e00f      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d09f      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3740      	adds	r7, #64	; 0x40
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	b09f      	sub	sp, #124	; 0x7c
 8004792:	af00      	add	r7, sp, #0
 8004794:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	68d9      	ldr	r1, [r3, #12]
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	ea40 0301 	orr.w	r3, r0, r1
 80047ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	431a      	orrs	r2, r3
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80047c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047d0:	f021 010c 	bic.w	r1, r1, #12
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047da:	430b      	orrs	r3, r1
 80047dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	6999      	ldr	r1, [r3, #24]
 80047ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	ea40 0301 	orr.w	r3, r0, r1
 80047f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4bc5      	ldr	r3, [pc, #788]	; (8004b10 <UART_SetConfig+0x384>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d004      	beq.n	800480a <UART_SetConfig+0x7e>
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4bc3      	ldr	r3, [pc, #780]	; (8004b14 <UART_SetConfig+0x388>)
 8004806:	429a      	cmp	r2, r3
 8004808:	d103      	bne.n	8004812 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800480a:	f7ff fa0d 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 800480e:	6778      	str	r0, [r7, #116]	; 0x74
 8004810:	e002      	b.n	8004818 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7ff f9f5 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8004816:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	f040 80b6 	bne.w	8004990 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004826:	461c      	mov	r4, r3
 8004828:	f04f 0500 	mov.w	r5, #0
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	1891      	adds	r1, r2, r2
 8004832:	6439      	str	r1, [r7, #64]	; 0x40
 8004834:	415b      	adcs	r3, r3
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
 8004838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800483c:	1912      	adds	r2, r2, r4
 800483e:	eb45 0303 	adc.w	r3, r5, r3
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	00d9      	lsls	r1, r3, #3
 800484c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004850:	00d0      	lsls	r0, r2, #3
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	1911      	adds	r1, r2, r4
 8004858:	6639      	str	r1, [r7, #96]	; 0x60
 800485a:	416b      	adcs	r3, r5
 800485c:	667b      	str	r3, [r7, #100]	; 0x64
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	1891      	adds	r1, r2, r2
 800486a:	63b9      	str	r1, [r7, #56]	; 0x38
 800486c:	415b      	adcs	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004874:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004878:	f7fc fa76 	bl	8000d68 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4ba5      	ldr	r3, [pc, #660]	; (8004b18 <UART_SetConfig+0x38c>)
 8004882:	fba3 2302 	umull	r2, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	011e      	lsls	r6, r3, #4
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	461c      	mov	r4, r3
 800488e:	f04f 0500 	mov.w	r5, #0
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	1891      	adds	r1, r2, r2
 8004898:	6339      	str	r1, [r7, #48]	; 0x30
 800489a:	415b      	adcs	r3, r3
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048a2:	1912      	adds	r2, r2, r4
 80048a4:	eb45 0303 	adc.w	r3, r5, r3
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	00d9      	lsls	r1, r3, #3
 80048b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048b6:	00d0      	lsls	r0, r2, #3
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	1911      	adds	r1, r2, r4
 80048be:	65b9      	str	r1, [r7, #88]	; 0x58
 80048c0:	416b      	adcs	r3, r5
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	1891      	adds	r1, r2, r2
 80048d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80048d2:	415b      	adcs	r3, r3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048de:	f7fc fa43 	bl	8000d68 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4b8c      	ldr	r3, [pc, #560]	; (8004b18 <UART_SetConfig+0x38c>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a87      	ldr	r2, [pc, #540]	; (8004b18 <UART_SetConfig+0x38c>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004908:	441e      	add	r6, r3
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	4618      	mov	r0, r3
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1894      	adds	r4, r2, r2
 8004918:	623c      	str	r4, [r7, #32]
 800491a:	415b      	adcs	r3, r3
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004922:	1812      	adds	r2, r2, r0
 8004924:	eb41 0303 	adc.w	r3, r1, r3
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	f04f 0500 	mov.w	r5, #0
 8004930:	00dd      	lsls	r5, r3, #3
 8004932:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004936:	00d4      	lsls	r4, r2, #3
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	1814      	adds	r4, r2, r0
 800493e:	653c      	str	r4, [r7, #80]	; 0x50
 8004940:	414b      	adcs	r3, r1
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	1891      	adds	r1, r2, r2
 8004950:	61b9      	str	r1, [r7, #24]
 8004952:	415b      	adcs	r3, r3
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800495e:	f7fc fa03 	bl	8000d68 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <UART_SetConfig+0x38c>)
 8004968:	fba3 1302 	umull	r1, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2164      	movs	r1, #100	; 0x64
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3332      	adds	r3, #50	; 0x32
 800497a:	4a67      	ldr	r2, [pc, #412]	; (8004b18 <UART_SetConfig+0x38c>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	f003 0207 	and.w	r2, r3, #7
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4432      	add	r2, r6
 800498c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800498e:	e0b9      	b.n	8004b04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004992:	461c      	mov	r4, r3
 8004994:	f04f 0500 	mov.w	r5, #0
 8004998:	4622      	mov	r2, r4
 800499a:	462b      	mov	r3, r5
 800499c:	1891      	adds	r1, r2, r2
 800499e:	6139      	str	r1, [r7, #16]
 80049a0:	415b      	adcs	r3, r3
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049a8:	1912      	adds	r2, r2, r4
 80049aa:	eb45 0303 	adc.w	r3, r5, r3
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	00d9      	lsls	r1, r3, #3
 80049b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049bc:	00d0      	lsls	r0, r2, #3
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	eb12 0804 	adds.w	r8, r2, r4
 80049c6:	eb43 0905 	adc.w	r9, r3, r5
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049e2:	0082      	lsls	r2, r0, #2
 80049e4:	4640      	mov	r0, r8
 80049e6:	4649      	mov	r1, r9
 80049e8:	f7fc f9be 	bl	8000d68 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <UART_SetConfig+0x38c>)
 80049f2:	fba3 2302 	umull	r2, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	011e      	lsls	r6, r3, #4
 80049fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fc:	4618      	mov	r0, r3
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	1894      	adds	r4, r2, r2
 8004a08:	60bc      	str	r4, [r7, #8]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a12:	1812      	adds	r2, r2, r0
 8004a14:	eb41 0303 	adc.w	r3, r1, r3
 8004a18:	f04f 0400 	mov.w	r4, #0
 8004a1c:	f04f 0500 	mov.w	r5, #0
 8004a20:	00dd      	lsls	r5, r3, #3
 8004a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a26:	00d4      	lsls	r4, r2, #3
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	1814      	adds	r4, r2, r0
 8004a2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a30:	414b      	adcs	r3, r1
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	008b      	lsls	r3, r1, #2
 8004a48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a4c:	0082      	lsls	r2, r0, #2
 8004a4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a52:	f7fc f989 	bl	8000d68 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <UART_SetConfig+0x38c>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	; 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	3332      	adds	r3, #50	; 0x32
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <UART_SetConfig+0x38c>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7a:	441e      	add	r6, r3
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	1894      	adds	r4, r2, r2
 8004a8a:	603c      	str	r4, [r7, #0]
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a94:	1812      	adds	r2, r2, r0
 8004a96:	eb41 0303 	adc.w	r3, r1, r3
 8004a9a:	f04f 0400 	mov.w	r4, #0
 8004a9e:	f04f 0500 	mov.w	r5, #0
 8004aa2:	00dd      	lsls	r5, r3, #3
 8004aa4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aa8:	00d4      	lsls	r4, r2, #3
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	eb12 0a00 	adds.w	sl, r2, r0
 8004ab2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	008b      	lsls	r3, r1, #2
 8004aca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ace:	0082      	lsls	r2, r0, #2
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	f7fc f948 	bl	8000d68 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <UART_SetConfig+0x38c>)
 8004ade:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2164      	movs	r1, #100	; 0x64
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	3332      	adds	r3, #50	; 0x32
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <UART_SetConfig+0x38c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4432      	add	r2, r6
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	377c      	adds	r7, #124	; 0x7c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40011400 	.word	0x40011400
 8004b18:	51eb851f 	.word	0x51eb851f

08004b1c <__errno>:
 8004b1c:	4b01      	ldr	r3, [pc, #4]	; (8004b24 <__errno+0x8>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	2000000c 	.word	0x2000000c

08004b28 <__libc_init_array>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	4d0d      	ldr	r5, [pc, #52]	; (8004b60 <__libc_init_array+0x38>)
 8004b2c:	4c0d      	ldr	r4, [pc, #52]	; (8004b64 <__libc_init_array+0x3c>)
 8004b2e:	1b64      	subs	r4, r4, r5
 8004b30:	10a4      	asrs	r4, r4, #2
 8004b32:	2600      	movs	r6, #0
 8004b34:	42a6      	cmp	r6, r4
 8004b36:	d109      	bne.n	8004b4c <__libc_init_array+0x24>
 8004b38:	4d0b      	ldr	r5, [pc, #44]	; (8004b68 <__libc_init_array+0x40>)
 8004b3a:	4c0c      	ldr	r4, [pc, #48]	; (8004b6c <__libc_init_array+0x44>)
 8004b3c:	f005 fbee 	bl	800a31c <_init>
 8004b40:	1b64      	subs	r4, r4, r5
 8004b42:	10a4      	asrs	r4, r4, #2
 8004b44:	2600      	movs	r6, #0
 8004b46:	42a6      	cmp	r6, r4
 8004b48:	d105      	bne.n	8004b56 <__libc_init_array+0x2e>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b50:	4798      	blx	r3
 8004b52:	3601      	adds	r6, #1
 8004b54:	e7ee      	b.n	8004b34 <__libc_init_array+0xc>
 8004b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5a:	4798      	blx	r3
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	e7f2      	b.n	8004b46 <__libc_init_array+0x1e>
 8004b60:	0800a8f0 	.word	0x0800a8f0
 8004b64:	0800a8f0 	.word	0x0800a8f0
 8004b68:	0800a8f0 	.word	0x0800a8f0
 8004b6c:	0800a8f4 	.word	0x0800a8f4

08004b70 <memset>:
 8004b70:	4402      	add	r2, r0
 8004b72:	4603      	mov	r3, r0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d100      	bne.n	8004b7a <memset+0xa>
 8004b78:	4770      	bx	lr
 8004b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7e:	e7f9      	b.n	8004b74 <memset+0x4>

08004b80 <__cvt>:
 8004b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	ec55 4b10 	vmov	r4, r5, d0
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	460e      	mov	r6, r1
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	462b      	mov	r3, r5
 8004b90:	bfbb      	ittet	lt
 8004b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b96:	461d      	movlt	r5, r3
 8004b98:	2300      	movge	r3, #0
 8004b9a:	232d      	movlt	r3, #45	; 0x2d
 8004b9c:	700b      	strb	r3, [r1, #0]
 8004b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ba4:	4691      	mov	r9, r2
 8004ba6:	f023 0820 	bic.w	r8, r3, #32
 8004baa:	bfbc      	itt	lt
 8004bac:	4622      	movlt	r2, r4
 8004bae:	4614      	movlt	r4, r2
 8004bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bb4:	d005      	beq.n	8004bc2 <__cvt+0x42>
 8004bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bba:	d100      	bne.n	8004bbe <__cvt+0x3e>
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	e000      	b.n	8004bc4 <__cvt+0x44>
 8004bc2:	2103      	movs	r1, #3
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	ab02      	add	r3, sp, #8
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	ec45 4b10 	vmov	d0, r4, r5
 8004bd0:	4653      	mov	r3, sl
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	f001 fdb4 	bl	8006740 <_dtoa_r>
 8004bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bdc:	4607      	mov	r7, r0
 8004bde:	d102      	bne.n	8004be6 <__cvt+0x66>
 8004be0:	f019 0f01 	tst.w	r9, #1
 8004be4:	d022      	beq.n	8004c2c <__cvt+0xac>
 8004be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bea:	eb07 0906 	add.w	r9, r7, r6
 8004bee:	d110      	bne.n	8004c12 <__cvt+0x92>
 8004bf0:	783b      	ldrb	r3, [r7, #0]
 8004bf2:	2b30      	cmp	r3, #48	; 0x30
 8004bf4:	d10a      	bne.n	8004c0c <__cvt+0x8c>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb ff83 	bl	8000b08 <__aeabi_dcmpeq>
 8004c02:	b918      	cbnz	r0, 8004c0c <__cvt+0x8c>
 8004c04:	f1c6 0601 	rsb	r6, r6, #1
 8004c08:	f8ca 6000 	str.w	r6, [sl]
 8004c0c:	f8da 3000 	ldr.w	r3, [sl]
 8004c10:	4499      	add	r9, r3
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb ff75 	bl	8000b08 <__aeabi_dcmpeq>
 8004c1e:	b108      	cbz	r0, 8004c24 <__cvt+0xa4>
 8004c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c24:	2230      	movs	r2, #48	; 0x30
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	454b      	cmp	r3, r9
 8004c2a:	d307      	bcc.n	8004c3c <__cvt+0xbc>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c30:	1bdb      	subs	r3, r3, r7
 8004c32:	4638      	mov	r0, r7
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	b004      	add	sp, #16
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	1c59      	adds	r1, r3, #1
 8004c3e:	9103      	str	r1, [sp, #12]
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e7f0      	b.n	8004c26 <__cvt+0xa6>

08004c44 <__exponent>:
 8004c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c46:	4603      	mov	r3, r0
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	bfb8      	it	lt
 8004c4c:	4249      	neglt	r1, r1
 8004c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8004c52:	bfb4      	ite	lt
 8004c54:	222d      	movlt	r2, #45	; 0x2d
 8004c56:	222b      	movge	r2, #43	; 0x2b
 8004c58:	2909      	cmp	r1, #9
 8004c5a:	7042      	strb	r2, [r0, #1]
 8004c5c:	dd2a      	ble.n	8004cb4 <__exponent+0x70>
 8004c5e:	f10d 0407 	add.w	r4, sp, #7
 8004c62:	46a4      	mov	ip, r4
 8004c64:	270a      	movs	r7, #10
 8004c66:	46a6      	mov	lr, r4
 8004c68:	460a      	mov	r2, r1
 8004c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8004c72:	3530      	adds	r5, #48	; 0x30
 8004c74:	2a63      	cmp	r2, #99	; 0x63
 8004c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c7e:	4631      	mov	r1, r6
 8004c80:	dcf1      	bgt.n	8004c66 <__exponent+0x22>
 8004c82:	3130      	adds	r1, #48	; 0x30
 8004c84:	f1ae 0502 	sub.w	r5, lr, #2
 8004c88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c8c:	1c44      	adds	r4, r0, #1
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4561      	cmp	r1, ip
 8004c92:	d30a      	bcc.n	8004caa <__exponent+0x66>
 8004c94:	f10d 0209 	add.w	r2, sp, #9
 8004c98:	eba2 020e 	sub.w	r2, r2, lr
 8004c9c:	4565      	cmp	r5, ip
 8004c9e:	bf88      	it	hi
 8004ca0:	2200      	movhi	r2, #0
 8004ca2:	4413      	add	r3, r2
 8004ca4:	1a18      	subs	r0, r3, r0
 8004ca6:	b003      	add	sp, #12
 8004ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cb2:	e7ed      	b.n	8004c90 <__exponent+0x4c>
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	3130      	adds	r1, #48	; 0x30
 8004cb8:	7083      	strb	r3, [r0, #2]
 8004cba:	70c1      	strb	r1, [r0, #3]
 8004cbc:	1d03      	adds	r3, r0, #4
 8004cbe:	e7f1      	b.n	8004ca4 <__exponent+0x60>

08004cc0 <_printf_float>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	ed2d 8b02 	vpush	{d8}
 8004cc8:	b08d      	sub	sp, #52	; 0x34
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	f002 fe8f 	bl	80079f8 <_localeconv_r>
 8004cda:	f8d0 a000 	ldr.w	sl, [r0]
 8004cde:	4650      	mov	r0, sl
 8004ce0:	f7fb fa96 	bl	8000210 <strlen>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	9305      	str	r3, [sp, #20]
 8004cec:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	f103 0208 	add.w	r2, r3, #8
 8004cfe:	f8c8 2000 	str.w	r2, [r8]
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d12:	9307      	str	r3, [sp, #28]
 8004d14:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d18:	ee08 0a10 	vmov	s16, r0
 8004d1c:	4b9f      	ldr	r3, [pc, #636]	; (8004f9c <_printf_float+0x2dc>)
 8004d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	f7fb ff21 	bl	8000b6c <__aeabi_dcmpun>
 8004d2a:	bb88      	cbnz	r0, 8004d90 <_printf_float+0xd0>
 8004d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d30:	4b9a      	ldr	r3, [pc, #616]	; (8004f9c <_printf_float+0x2dc>)
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	f7fb fefb 	bl	8000b30 <__aeabi_dcmple>
 8004d3a:	bb48      	cbnz	r0, 8004d90 <_printf_float+0xd0>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4640      	mov	r0, r8
 8004d42:	4649      	mov	r1, r9
 8004d44:	f7fb feea 	bl	8000b1c <__aeabi_dcmplt>
 8004d48:	b110      	cbz	r0, 8004d50 <_printf_float+0x90>
 8004d4a:	232d      	movs	r3, #45	; 0x2d
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d50:	4b93      	ldr	r3, [pc, #588]	; (8004fa0 <_printf_float+0x2e0>)
 8004d52:	4894      	ldr	r0, [pc, #592]	; (8004fa4 <_printf_float+0x2e4>)
 8004d54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d58:	bf94      	ite	ls
 8004d5a:	4698      	movls	r8, r3
 8004d5c:	4680      	movhi	r8, r0
 8004d5e:	2303      	movs	r3, #3
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	9b05      	ldr	r3, [sp, #20]
 8004d64:	f023 0204 	bic.w	r2, r3, #4
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	f04f 0900 	mov.w	r9, #0
 8004d6e:	9700      	str	r7, [sp, #0]
 8004d70:	4633      	mov	r3, r6
 8004d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f9d8 	bl	800512c <_printf_common>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f040 8090 	bne.w	8004ea2 <_printf_float+0x1e2>
 8004d82:	f04f 30ff 	mov.w	r0, #4294967295
 8004d86:	b00d      	add	sp, #52	; 0x34
 8004d88:	ecbd 8b02 	vpop	{d8}
 8004d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d90:	4642      	mov	r2, r8
 8004d92:	464b      	mov	r3, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fee8 	bl	8000b6c <__aeabi_dcmpun>
 8004d9c:	b140      	cbz	r0, 8004db0 <_printf_float+0xf0>
 8004d9e:	464b      	mov	r3, r9
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfbc      	itt	lt
 8004da4:	232d      	movlt	r3, #45	; 0x2d
 8004da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004daa:	487f      	ldr	r0, [pc, #508]	; (8004fa8 <_printf_float+0x2e8>)
 8004dac:	4b7f      	ldr	r3, [pc, #508]	; (8004fac <_printf_float+0x2ec>)
 8004dae:	e7d1      	b.n	8004d54 <_printf_float+0x94>
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004db6:	9206      	str	r2, [sp, #24]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	d13f      	bne.n	8004e3c <_printf_float+0x17c>
 8004dbc:	2306      	movs	r3, #6
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	9b05      	ldr	r3, [sp, #20]
 8004dc2:	6861      	ldr	r1, [r4, #4]
 8004dc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8004dce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dd2:	ab09      	add	r3, sp, #36	; 0x24
 8004dd4:	ec49 8b10 	vmov	d0, r8, r9
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004de0:	4628      	mov	r0, r5
 8004de2:	f7ff fecd 	bl	8004b80 <__cvt>
 8004de6:	9b06      	ldr	r3, [sp, #24]
 8004de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dea:	2b47      	cmp	r3, #71	; 0x47
 8004dec:	4680      	mov	r8, r0
 8004dee:	d108      	bne.n	8004e02 <_printf_float+0x142>
 8004df0:	1cc8      	adds	r0, r1, #3
 8004df2:	db02      	blt.n	8004dfa <_printf_float+0x13a>
 8004df4:	6863      	ldr	r3, [r4, #4]
 8004df6:	4299      	cmp	r1, r3
 8004df8:	dd41      	ble.n	8004e7e <_printf_float+0x1be>
 8004dfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8004dfe:	fa5f fb8b 	uxtb.w	fp, fp
 8004e02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e06:	d820      	bhi.n	8004e4a <_printf_float+0x18a>
 8004e08:	3901      	subs	r1, #1
 8004e0a:	465a      	mov	r2, fp
 8004e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e10:	9109      	str	r1, [sp, #36]	; 0x24
 8004e12:	f7ff ff17 	bl	8004c44 <__exponent>
 8004e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e18:	1813      	adds	r3, r2, r0
 8004e1a:	2a01      	cmp	r2, #1
 8004e1c:	4681      	mov	r9, r0
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	dc02      	bgt.n	8004e28 <_printf_float+0x168>
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	07d2      	lsls	r2, r2, #31
 8004e26:	d501      	bpl.n	8004e2c <_printf_float+0x16c>
 8004e28:	3301      	adds	r3, #1
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d09c      	beq.n	8004d6e <_printf_float+0xae>
 8004e34:	232d      	movs	r3, #45	; 0x2d
 8004e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3a:	e798      	b.n	8004d6e <_printf_float+0xae>
 8004e3c:	9a06      	ldr	r2, [sp, #24]
 8004e3e:	2a47      	cmp	r2, #71	; 0x47
 8004e40:	d1be      	bne.n	8004dc0 <_printf_float+0x100>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1bc      	bne.n	8004dc0 <_printf_float+0x100>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e7b9      	b.n	8004dbe <_printf_float+0xfe>
 8004e4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e4e:	d118      	bne.n	8004e82 <_printf_float+0x1c2>
 8004e50:	2900      	cmp	r1, #0
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	dd0b      	ble.n	8004e6e <_printf_float+0x1ae>
 8004e56:	6121      	str	r1, [r4, #16]
 8004e58:	b913      	cbnz	r3, 8004e60 <_printf_float+0x1a0>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	07d0      	lsls	r0, r2, #31
 8004e5e:	d502      	bpl.n	8004e66 <_printf_float+0x1a6>
 8004e60:	3301      	adds	r3, #1
 8004e62:	440b      	add	r3, r1
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e68:	f04f 0900 	mov.w	r9, #0
 8004e6c:	e7de      	b.n	8004e2c <_printf_float+0x16c>
 8004e6e:	b913      	cbnz	r3, 8004e76 <_printf_float+0x1b6>
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	07d2      	lsls	r2, r2, #31
 8004e74:	d501      	bpl.n	8004e7a <_printf_float+0x1ba>
 8004e76:	3302      	adds	r3, #2
 8004e78:	e7f4      	b.n	8004e64 <_printf_float+0x1a4>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e7f2      	b.n	8004e64 <_printf_float+0x1a4>
 8004e7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e84:	4299      	cmp	r1, r3
 8004e86:	db05      	blt.n	8004e94 <_printf_float+0x1d4>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	6121      	str	r1, [r4, #16]
 8004e8c:	07d8      	lsls	r0, r3, #31
 8004e8e:	d5ea      	bpl.n	8004e66 <_printf_float+0x1a6>
 8004e90:	1c4b      	adds	r3, r1, #1
 8004e92:	e7e7      	b.n	8004e64 <_printf_float+0x1a4>
 8004e94:	2900      	cmp	r1, #0
 8004e96:	bfd4      	ite	le
 8004e98:	f1c1 0202 	rsble	r2, r1, #2
 8004e9c:	2201      	movgt	r2, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	e7e0      	b.n	8004e64 <_printf_float+0x1a4>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	055a      	lsls	r2, r3, #21
 8004ea6:	d407      	bmi.n	8004eb8 <_printf_float+0x1f8>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	4642      	mov	r2, r8
 8004eac:	4631      	mov	r1, r6
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d12c      	bne.n	8004f10 <_printf_float+0x250>
 8004eb6:	e764      	b.n	8004d82 <_printf_float+0xc2>
 8004eb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ebc:	f240 80e0 	bls.w	8005080 <_printf_float+0x3c0>
 8004ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f7fb fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d034      	beq.n	8004f3a <_printf_float+0x27a>
 8004ed0:	4a37      	ldr	r2, [pc, #220]	; (8004fb0 <_printf_float+0x2f0>)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	f43f af51 	beq.w	8004d82 <_printf_float+0xc2>
 8004ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	db02      	blt.n	8004eee <_printf_float+0x22e>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	07d8      	lsls	r0, r3, #31
 8004eec:	d510      	bpl.n	8004f10 <_printf_float+0x250>
 8004eee:	ee18 3a10 	vmov	r3, s16
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	f43f af41 	beq.w	8004d82 <_printf_float+0xc2>
 8004f00:	f04f 0800 	mov.w	r8, #0
 8004f04:	f104 091a 	add.w	r9, r4, #26
 8004f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	4543      	cmp	r3, r8
 8004f0e:	dc09      	bgt.n	8004f24 <_printf_float+0x264>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	079b      	lsls	r3, r3, #30
 8004f14:	f100 8105 	bmi.w	8005122 <_printf_float+0x462>
 8004f18:	68e0      	ldr	r0, [r4, #12]
 8004f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f1c:	4298      	cmp	r0, r3
 8004f1e:	bfb8      	it	lt
 8004f20:	4618      	movlt	r0, r3
 8004f22:	e730      	b.n	8004d86 <_printf_float+0xc6>
 8004f24:	2301      	movs	r3, #1
 8004f26:	464a      	mov	r2, r9
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f af27 	beq.w	8004d82 <_printf_float+0xc2>
 8004f34:	f108 0801 	add.w	r8, r8, #1
 8004f38:	e7e6      	b.n	8004f08 <_printf_float+0x248>
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	dc39      	bgt.n	8004fb4 <_printf_float+0x2f4>
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <_printf_float+0x2f0>)
 8004f42:	2301      	movs	r3, #1
 8004f44:	4631      	mov	r1, r6
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f43f af19 	beq.w	8004d82 <_printf_float+0xc2>
 8004f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d102      	bne.n	8004f5e <_printf_float+0x29e>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d5d8      	bpl.n	8004f10 <_printf_float+0x250>
 8004f5e:	ee18 3a10 	vmov	r3, s16
 8004f62:	4652      	mov	r2, sl
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f43f af09 	beq.w	8004d82 <_printf_float+0xc2>
 8004f70:	f04f 0900 	mov.w	r9, #0
 8004f74:	f104 0a1a 	add.w	sl, r4, #26
 8004f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7a:	425b      	negs	r3, r3
 8004f7c:	454b      	cmp	r3, r9
 8004f7e:	dc01      	bgt.n	8004f84 <_printf_float+0x2c4>
 8004f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f82:	e792      	b.n	8004eaa <_printf_float+0x1ea>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4652      	mov	r2, sl
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f aef7 	beq.w	8004d82 <_printf_float+0xc2>
 8004f94:	f109 0901 	add.w	r9, r9, #1
 8004f98:	e7ee      	b.n	8004f78 <_printf_float+0x2b8>
 8004f9a:	bf00      	nop
 8004f9c:	7fefffff 	.word	0x7fefffff
 8004fa0:	0800a3f4 	.word	0x0800a3f4
 8004fa4:	0800a3f8 	.word	0x0800a3f8
 8004fa8:	0800a400 	.word	0x0800a400
 8004fac:	0800a3fc 	.word	0x0800a3fc
 8004fb0:	0800a404 	.word	0x0800a404
 8004fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bfa8      	it	ge
 8004fbc:	461a      	movge	r2, r3
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	4691      	mov	r9, r2
 8004fc2:	dc37      	bgt.n	8005034 <_printf_float+0x374>
 8004fc4:	f04f 0b00 	mov.w	fp, #0
 8004fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fcc:	f104 021a 	add.w	r2, r4, #26
 8004fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	eba3 0309 	sub.w	r3, r3, r9
 8004fd8:	455b      	cmp	r3, fp
 8004fda:	dc33      	bgt.n	8005044 <_printf_float+0x384>
 8004fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	db3b      	blt.n	800505c <_printf_float+0x39c>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	07da      	lsls	r2, r3, #31
 8004fe8:	d438      	bmi.n	800505c <_printf_float+0x39c>
 8004fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fec:	9b05      	ldr	r3, [sp, #20]
 8004fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	eba2 0901 	sub.w	r9, r2, r1
 8004ff6:	4599      	cmp	r9, r3
 8004ff8:	bfa8      	it	ge
 8004ffa:	4699      	movge	r9, r3
 8004ffc:	f1b9 0f00 	cmp.w	r9, #0
 8005000:	dc35      	bgt.n	800506e <_printf_float+0x3ae>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800500a:	f104 0a1a 	add.w	sl, r4, #26
 800500e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	eba3 0309 	sub.w	r3, r3, r9
 8005018:	4543      	cmp	r3, r8
 800501a:	f77f af79 	ble.w	8004f10 <_printf_float+0x250>
 800501e:	2301      	movs	r3, #1
 8005020:	4652      	mov	r2, sl
 8005022:	4631      	mov	r1, r6
 8005024:	4628      	mov	r0, r5
 8005026:	47b8      	blx	r7
 8005028:	3001      	adds	r0, #1
 800502a:	f43f aeaa 	beq.w	8004d82 <_printf_float+0xc2>
 800502e:	f108 0801 	add.w	r8, r8, #1
 8005032:	e7ec      	b.n	800500e <_printf_float+0x34e>
 8005034:	4613      	mov	r3, r2
 8005036:	4631      	mov	r1, r6
 8005038:	4642      	mov	r2, r8
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d1c0      	bne.n	8004fc4 <_printf_float+0x304>
 8005042:	e69e      	b.n	8004d82 <_printf_float+0xc2>
 8005044:	2301      	movs	r3, #1
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	9205      	str	r2, [sp, #20]
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f ae97 	beq.w	8004d82 <_printf_float+0xc2>
 8005054:	9a05      	ldr	r2, [sp, #20]
 8005056:	f10b 0b01 	add.w	fp, fp, #1
 800505a:	e7b9      	b.n	8004fd0 <_printf_float+0x310>
 800505c:	ee18 3a10 	vmov	r3, s16
 8005060:	4652      	mov	r2, sl
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	d1be      	bne.n	8004fea <_printf_float+0x32a>
 800506c:	e689      	b.n	8004d82 <_printf_float+0xc2>
 800506e:	9a05      	ldr	r2, [sp, #20]
 8005070:	464b      	mov	r3, r9
 8005072:	4442      	add	r2, r8
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	d1c1      	bne.n	8005002 <_printf_float+0x342>
 800507e:	e680      	b.n	8004d82 <_printf_float+0xc2>
 8005080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005082:	2a01      	cmp	r2, #1
 8005084:	dc01      	bgt.n	800508a <_printf_float+0x3ca>
 8005086:	07db      	lsls	r3, r3, #31
 8005088:	d538      	bpl.n	80050fc <_printf_float+0x43c>
 800508a:	2301      	movs	r3, #1
 800508c:	4642      	mov	r2, r8
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f ae74 	beq.w	8004d82 <_printf_float+0xc2>
 800509a:	ee18 3a10 	vmov	r3, s16
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f ae6b 	beq.w	8004d82 <_printf_float+0xc2>
 80050ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050b0:	2200      	movs	r2, #0
 80050b2:	2300      	movs	r3, #0
 80050b4:	f7fb fd28 	bl	8000b08 <__aeabi_dcmpeq>
 80050b8:	b9d8      	cbnz	r0, 80050f2 <_printf_float+0x432>
 80050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050bc:	f108 0201 	add.w	r2, r8, #1
 80050c0:	3b01      	subs	r3, #1
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	d10e      	bne.n	80050ea <_printf_float+0x42a>
 80050cc:	e659      	b.n	8004d82 <_printf_float+0xc2>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4652      	mov	r2, sl
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f ae52 	beq.w	8004d82 <_printf_float+0xc2>
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	4543      	cmp	r3, r8
 80050e8:	dcf1      	bgt.n	80050ce <_printf_float+0x40e>
 80050ea:	464b      	mov	r3, r9
 80050ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050f0:	e6dc      	b.n	8004eac <_printf_float+0x1ec>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0a1a 	add.w	sl, r4, #26
 80050fa:	e7f2      	b.n	80050e2 <_printf_float+0x422>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4642      	mov	r2, r8
 8005100:	e7df      	b.n	80050c2 <_printf_float+0x402>
 8005102:	2301      	movs	r3, #1
 8005104:	464a      	mov	r2, r9
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f ae38 	beq.w	8004d82 <_printf_float+0xc2>
 8005112:	f108 0801 	add.w	r8, r8, #1
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800511a:	1a5b      	subs	r3, r3, r1
 800511c:	4543      	cmp	r3, r8
 800511e:	dcf0      	bgt.n	8005102 <_printf_float+0x442>
 8005120:	e6fa      	b.n	8004f18 <_printf_float+0x258>
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	f104 0919 	add.w	r9, r4, #25
 800512a:	e7f4      	b.n	8005116 <_printf_float+0x456>

0800512c <_printf_common>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	4616      	mov	r6, r2
 8005132:	4699      	mov	r9, r3
 8005134:	688a      	ldr	r2, [r1, #8]
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800513c:	4293      	cmp	r3, r2
 800513e:	bfb8      	it	lt
 8005140:	4613      	movlt	r3, r2
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005148:	4607      	mov	r7, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b10a      	cbz	r2, 8005152 <_printf_common+0x26>
 800514e:	3301      	adds	r3, #1
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0699      	lsls	r1, r3, #26
 8005156:	bf42      	ittt	mi
 8005158:	6833      	ldrmi	r3, [r6, #0]
 800515a:	3302      	addmi	r3, #2
 800515c:	6033      	strmi	r3, [r6, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d106      	bne.n	8005174 <_printf_common+0x48>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	6832      	ldr	r2, [r6, #0]
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	42ab      	cmp	r3, r5
 8005172:	dc26      	bgt.n	80051c2 <_printf_common+0x96>
 8005174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005178:	1e13      	subs	r3, r2, #0
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	bf18      	it	ne
 800517e:	2301      	movne	r3, #1
 8005180:	0692      	lsls	r2, r2, #26
 8005182:	d42b      	bmi.n	80051dc <_printf_common+0xb0>
 8005184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d01e      	beq.n	80051d0 <_printf_common+0xa4>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	68e5      	ldr	r5, [r4, #12]
 8005196:	6832      	ldr	r2, [r6, #0]
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b04      	cmp	r3, #4
 800519e:	bf08      	it	eq
 80051a0:	1aad      	subeq	r5, r5, r2
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	2600      	movs	r6, #0
 80051b8:	341a      	adds	r4, #26
 80051ba:	42b5      	cmp	r5, r6
 80051bc:	d11a      	bne.n	80051f4 <_printf_common+0xc8>
 80051be:	2000      	movs	r0, #0
 80051c0:	e008      	b.n	80051d4 <_printf_common+0xa8>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4649      	mov	r1, r9
 80051c8:	4638      	mov	r0, r7
 80051ca:	47c0      	blx	r8
 80051cc:	3001      	adds	r0, #1
 80051ce:	d103      	bne.n	80051d8 <_printf_common+0xac>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	3501      	adds	r5, #1
 80051da:	e7c6      	b.n	800516a <_printf_common+0x3e>
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	2030      	movs	r0, #48	; 0x30
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e6:	4422      	add	r2, r4
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f0:	3302      	adds	r3, #2
 80051f2:	e7c7      	b.n	8005184 <_printf_common+0x58>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4622      	mov	r2, r4
 80051f8:	4649      	mov	r1, r9
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d0e6      	beq.n	80051d0 <_printf_common+0xa4>
 8005202:	3601      	adds	r6, #1
 8005204:	e7d9      	b.n	80051ba <_printf_common+0x8e>
	...

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	460c      	mov	r4, r1
 800520e:	4691      	mov	r9, r2
 8005210:	7e27      	ldrb	r7, [r4, #24]
 8005212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005214:	2f78      	cmp	r7, #120	; 0x78
 8005216:	4680      	mov	r8, r0
 8005218:	469a      	mov	sl, r3
 800521a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	; 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d8 	beq.w	80053da <_printf_i+0x1d2>
 800522a:	2f58      	cmp	r7, #88	; 0x58
 800522c:	f000 80a3 	beq.w	8005376 <_printf_i+0x16e>
 8005230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a001      	add	r0, pc, #4	; (adr r0, 8005248 <_printf_i+0x40>)
 8005244:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053c1 	.word	0x080053c1
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080053a3 	.word	0x080053a3
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053e3 	.word	0x080053e3
 800528c:	08005231 	.word	0x08005231
 8005290:	080052e5 	.word	0x080052e5
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	080053ab 	.word	0x080053ab
 80052a0:	680b      	ldr	r3, [r1, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	600a      	str	r2, [r1, #0]
 80052a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a3      	b.n	80053fc <_printf_i+0x1f4>
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	6808      	ldr	r0, [r1, #0]
 80052b8:	062e      	lsls	r6, r5, #24
 80052ba:	f100 0304 	add.w	r3, r0, #4
 80052be:	d50a      	bpl.n	80052d6 <_printf_i+0xce>
 80052c0:	6805      	ldr	r5, [r0, #0]
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xc8>
 80052c8:	232d      	movs	r3, #45	; 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	485e      	ldr	r0, [pc, #376]	; (800544c <_printf_i+0x244>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e019      	b.n	800530a <_printf_i+0x102>
 80052d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052da:	6805      	ldr	r5, [r0, #0]
 80052dc:	600b      	str	r3, [r1, #0]
 80052de:	bf18      	it	ne
 80052e0:	b22d      	sxthne	r5, r5
 80052e2:	e7ef      	b.n	80052c4 <_printf_i+0xbc>
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	6825      	ldr	r5, [r4, #0]
 80052e8:	1d18      	adds	r0, r3, #4
 80052ea:	6008      	str	r0, [r1, #0]
 80052ec:	0628      	lsls	r0, r5, #24
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0xec>
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0xf2>
 80052f4:	0669      	lsls	r1, r5, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0xe8>
 80052f8:	881d      	ldrh	r5, [r3, #0]
 80052fa:	4854      	ldr	r0, [pc, #336]	; (800544c <_printf_i+0x244>)
 80052fc:	2f6f      	cmp	r7, #111	; 0x6f
 80052fe:	bf0c      	ite	eq
 8005300:	2308      	moveq	r3, #8
 8005302:	230a      	movne	r3, #10
 8005304:	2100      	movs	r1, #0
 8005306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800530a:	6866      	ldr	r6, [r4, #4]
 800530c:	60a6      	str	r6, [r4, #8]
 800530e:	2e00      	cmp	r6, #0
 8005310:	bfa2      	ittt	ge
 8005312:	6821      	ldrge	r1, [r4, #0]
 8005314:	f021 0104 	bicge.w	r1, r1, #4
 8005318:	6021      	strge	r1, [r4, #0]
 800531a:	b90d      	cbnz	r5, 8005320 <_printf_i+0x118>
 800531c:	2e00      	cmp	r6, #0
 800531e:	d04d      	beq.n	80053bc <_printf_i+0x1b4>
 8005320:	4616      	mov	r6, r2
 8005322:	fbb5 f1f3 	udiv	r1, r5, r3
 8005326:	fb03 5711 	mls	r7, r3, r1, r5
 800532a:	5dc7      	ldrb	r7, [r0, r7]
 800532c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005330:	462f      	mov	r7, r5
 8005332:	42bb      	cmp	r3, r7
 8005334:	460d      	mov	r5, r1
 8005336:	d9f4      	bls.n	8005322 <_printf_i+0x11a>
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10b      	bne.n	8005354 <_printf_i+0x14c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07df      	lsls	r7, r3, #31
 8005340:	d508      	bpl.n	8005354 <_printf_i+0x14c>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	4299      	cmp	r1, r3
 8005348:	bfde      	ittt	le
 800534a:	2330      	movle	r3, #48	; 0x30
 800534c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005350:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005354:	1b92      	subs	r2, r2, r6
 8005356:	6122      	str	r2, [r4, #16]
 8005358:	f8cd a000 	str.w	sl, [sp]
 800535c:	464b      	mov	r3, r9
 800535e:	aa03      	add	r2, sp, #12
 8005360:	4621      	mov	r1, r4
 8005362:	4640      	mov	r0, r8
 8005364:	f7ff fee2 	bl	800512c <_printf_common>
 8005368:	3001      	adds	r0, #1
 800536a:	d14c      	bne.n	8005406 <_printf_i+0x1fe>
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	b004      	add	sp, #16
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	4835      	ldr	r0, [pc, #212]	; (800544c <_printf_i+0x244>)
 8005378:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	680e      	ldr	r6, [r1, #0]
 8005380:	061f      	lsls	r7, r3, #24
 8005382:	f856 5b04 	ldr.w	r5, [r6], #4
 8005386:	600e      	str	r6, [r1, #0]
 8005388:	d514      	bpl.n	80053b4 <_printf_i+0x1ac>
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b91d      	cbnz	r5, 800539e <_printf_i+0x196>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f023 0320 	bic.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	2310      	movs	r3, #16
 80053a0:	e7b0      	b.n	8005304 <_printf_i+0xfc>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f043 0320 	orr.w	r3, r3, #32
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2378      	movs	r3, #120	; 0x78
 80053ac:	4828      	ldr	r0, [pc, #160]	; (8005450 <_printf_i+0x248>)
 80053ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b2:	e7e3      	b.n	800537c <_printf_i+0x174>
 80053b4:	065e      	lsls	r6, r3, #25
 80053b6:	bf48      	it	mi
 80053b8:	b2ad      	uxthmi	r5, r5
 80053ba:	e7e6      	b.n	800538a <_printf_i+0x182>
 80053bc:	4616      	mov	r6, r2
 80053be:	e7bb      	b.n	8005338 <_printf_i+0x130>
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	6826      	ldr	r6, [r4, #0]
 80053c4:	6960      	ldr	r0, [r4, #20]
 80053c6:	1d1d      	adds	r5, r3, #4
 80053c8:	600d      	str	r5, [r1, #0]
 80053ca:	0635      	lsls	r5, r6, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0x1cc>
 80053d0:	6018      	str	r0, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0x1d2>
 80053d4:	0671      	lsls	r1, r6, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0x1c8>
 80053d8:	8018      	strh	r0, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	4616      	mov	r6, r2
 80053e0:	e7ba      	b.n	8005358 <_printf_i+0x150>
 80053e2:	680b      	ldr	r3, [r1, #0]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	600a      	str	r2, [r1, #0]
 80053e8:	681e      	ldr	r6, [r3, #0]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7fa ff16 	bl	8000220 <memchr>
 80053f4:	b108      	cbz	r0, 80053fa <_printf_i+0x1f2>
 80053f6:	1b80      	subs	r0, r0, r6
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	e7a8      	b.n	8005358 <_printf_i+0x150>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d0ab      	beq.n	800536c <_printf_i+0x164>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	d413      	bmi.n	8005442 <_printf_i+0x23a>
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	4298      	cmp	r0, r3
 8005420:	bfb8      	it	lt
 8005422:	4618      	movlt	r0, r3
 8005424:	e7a4      	b.n	8005370 <_printf_i+0x168>
 8005426:	2301      	movs	r3, #1
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d09b      	beq.n	800536c <_printf_i+0x164>
 8005434:	3501      	adds	r5, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1a5b      	subs	r3, r3, r1
 800543c:	42ab      	cmp	r3, r5
 800543e:	dcf2      	bgt.n	8005426 <_printf_i+0x21e>
 8005440:	e7eb      	b.n	800541a <_printf_i+0x212>
 8005442:	2500      	movs	r5, #0
 8005444:	f104 0619 	add.w	r6, r4, #25
 8005448:	e7f5      	b.n	8005436 <_printf_i+0x22e>
 800544a:	bf00      	nop
 800544c:	0800a406 	.word	0x0800a406
 8005450:	0800a417 	.word	0x0800a417

08005454 <_scanf_float>:
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	b087      	sub	sp, #28
 800545a:	4617      	mov	r7, r2
 800545c:	9303      	str	r3, [sp, #12]
 800545e:	688b      	ldr	r3, [r1, #8]
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005466:	bf83      	ittte	hi
 8005468:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800546c:	195b      	addhi	r3, r3, r5
 800546e:	9302      	strhi	r3, [sp, #8]
 8005470:	2300      	movls	r3, #0
 8005472:	bf86      	itte	hi
 8005474:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005478:	608b      	strhi	r3, [r1, #8]
 800547a:	9302      	strls	r3, [sp, #8]
 800547c:	680b      	ldr	r3, [r1, #0]
 800547e:	468b      	mov	fp, r1
 8005480:	2500      	movs	r5, #0
 8005482:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005486:	f84b 3b1c 	str.w	r3, [fp], #28
 800548a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800548e:	4680      	mov	r8, r0
 8005490:	460c      	mov	r4, r1
 8005492:	465e      	mov	r6, fp
 8005494:	46aa      	mov	sl, r5
 8005496:	46a9      	mov	r9, r5
 8005498:	9501      	str	r5, [sp, #4]
 800549a:	68a2      	ldr	r2, [r4, #8]
 800549c:	b152      	cbz	r2, 80054b4 <_scanf_float+0x60>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b4e      	cmp	r3, #78	; 0x4e
 80054a4:	d864      	bhi.n	8005570 <_scanf_float+0x11c>
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d83c      	bhi.n	8005524 <_scanf_float+0xd0>
 80054aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80054ae:	b2c8      	uxtb	r0, r1
 80054b0:	280e      	cmp	r0, #14
 80054b2:	d93a      	bls.n	800552a <_scanf_float+0xd6>
 80054b4:	f1b9 0f00 	cmp.w	r9, #0
 80054b8:	d003      	beq.n	80054c2 <_scanf_float+0x6e>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c6:	f1ba 0f01 	cmp.w	sl, #1
 80054ca:	f200 8113 	bhi.w	80056f4 <_scanf_float+0x2a0>
 80054ce:	455e      	cmp	r6, fp
 80054d0:	f200 8105 	bhi.w	80056de <_scanf_float+0x28a>
 80054d4:	2501      	movs	r5, #1
 80054d6:	4628      	mov	r0, r5
 80054d8:	b007      	add	sp, #28
 80054da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054e2:	2a0d      	cmp	r2, #13
 80054e4:	d8e6      	bhi.n	80054b4 <_scanf_float+0x60>
 80054e6:	a101      	add	r1, pc, #4	; (adr r1, 80054ec <_scanf_float+0x98>)
 80054e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054ec:	0800562b 	.word	0x0800562b
 80054f0:	080054b5 	.word	0x080054b5
 80054f4:	080054b5 	.word	0x080054b5
 80054f8:	080054b5 	.word	0x080054b5
 80054fc:	0800568b 	.word	0x0800568b
 8005500:	08005663 	.word	0x08005663
 8005504:	080054b5 	.word	0x080054b5
 8005508:	080054b5 	.word	0x080054b5
 800550c:	08005639 	.word	0x08005639
 8005510:	080054b5 	.word	0x080054b5
 8005514:	080054b5 	.word	0x080054b5
 8005518:	080054b5 	.word	0x080054b5
 800551c:	080054b5 	.word	0x080054b5
 8005520:	080055f1 	.word	0x080055f1
 8005524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005528:	e7db      	b.n	80054e2 <_scanf_float+0x8e>
 800552a:	290e      	cmp	r1, #14
 800552c:	d8c2      	bhi.n	80054b4 <_scanf_float+0x60>
 800552e:	a001      	add	r0, pc, #4	; (adr r0, 8005534 <_scanf_float+0xe0>)
 8005530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005534:	080055e3 	.word	0x080055e3
 8005538:	080054b5 	.word	0x080054b5
 800553c:	080055e3 	.word	0x080055e3
 8005540:	08005677 	.word	0x08005677
 8005544:	080054b5 	.word	0x080054b5
 8005548:	08005591 	.word	0x08005591
 800554c:	080055cd 	.word	0x080055cd
 8005550:	080055cd 	.word	0x080055cd
 8005554:	080055cd 	.word	0x080055cd
 8005558:	080055cd 	.word	0x080055cd
 800555c:	080055cd 	.word	0x080055cd
 8005560:	080055cd 	.word	0x080055cd
 8005564:	080055cd 	.word	0x080055cd
 8005568:	080055cd 	.word	0x080055cd
 800556c:	080055cd 	.word	0x080055cd
 8005570:	2b6e      	cmp	r3, #110	; 0x6e
 8005572:	d809      	bhi.n	8005588 <_scanf_float+0x134>
 8005574:	2b60      	cmp	r3, #96	; 0x60
 8005576:	d8b2      	bhi.n	80054de <_scanf_float+0x8a>
 8005578:	2b54      	cmp	r3, #84	; 0x54
 800557a:	d077      	beq.n	800566c <_scanf_float+0x218>
 800557c:	2b59      	cmp	r3, #89	; 0x59
 800557e:	d199      	bne.n	80054b4 <_scanf_float+0x60>
 8005580:	2d07      	cmp	r5, #7
 8005582:	d197      	bne.n	80054b4 <_scanf_float+0x60>
 8005584:	2508      	movs	r5, #8
 8005586:	e029      	b.n	80055dc <_scanf_float+0x188>
 8005588:	2b74      	cmp	r3, #116	; 0x74
 800558a:	d06f      	beq.n	800566c <_scanf_float+0x218>
 800558c:	2b79      	cmp	r3, #121	; 0x79
 800558e:	e7f6      	b.n	800557e <_scanf_float+0x12a>
 8005590:	6821      	ldr	r1, [r4, #0]
 8005592:	05c8      	lsls	r0, r1, #23
 8005594:	d51a      	bpl.n	80055cc <_scanf_float+0x178>
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800559c:	6021      	str	r1, [r4, #0]
 800559e:	f109 0901 	add.w	r9, r9, #1
 80055a2:	b11b      	cbz	r3, 80055ac <_scanf_float+0x158>
 80055a4:	3b01      	subs	r3, #1
 80055a6:	3201      	adds	r2, #1
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	60a2      	str	r2, [r4, #8]
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60a3      	str	r3, [r4, #8]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	3301      	adds	r3, #1
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	f340 8084 	ble.w	80056cc <_scanf_float+0x278>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	3301      	adds	r3, #1
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	e766      	b.n	800549a <_scanf_float+0x46>
 80055cc:	eb1a 0f05 	cmn.w	sl, r5
 80055d0:	f47f af70 	bne.w	80054b4 <_scanf_float+0x60>
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055da:	6022      	str	r2, [r4, #0]
 80055dc:	f806 3b01 	strb.w	r3, [r6], #1
 80055e0:	e7e4      	b.n	80055ac <_scanf_float+0x158>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	0610      	lsls	r0, r2, #24
 80055e6:	f57f af65 	bpl.w	80054b4 <_scanf_float+0x60>
 80055ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ee:	e7f4      	b.n	80055da <_scanf_float+0x186>
 80055f0:	f1ba 0f00 	cmp.w	sl, #0
 80055f4:	d10e      	bne.n	8005614 <_scanf_float+0x1c0>
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	d10e      	bne.n	800561a <_scanf_float+0x1c6>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005602:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005606:	d108      	bne.n	800561a <_scanf_float+0x1c6>
 8005608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	f04f 0a01 	mov.w	sl, #1
 8005612:	e7e3      	b.n	80055dc <_scanf_float+0x188>
 8005614:	f1ba 0f02 	cmp.w	sl, #2
 8005618:	d055      	beq.n	80056c6 <_scanf_float+0x272>
 800561a:	2d01      	cmp	r5, #1
 800561c:	d002      	beq.n	8005624 <_scanf_float+0x1d0>
 800561e:	2d04      	cmp	r5, #4
 8005620:	f47f af48 	bne.w	80054b4 <_scanf_float+0x60>
 8005624:	3501      	adds	r5, #1
 8005626:	b2ed      	uxtb	r5, r5
 8005628:	e7d8      	b.n	80055dc <_scanf_float+0x188>
 800562a:	f1ba 0f01 	cmp.w	sl, #1
 800562e:	f47f af41 	bne.w	80054b4 <_scanf_float+0x60>
 8005632:	f04f 0a02 	mov.w	sl, #2
 8005636:	e7d1      	b.n	80055dc <_scanf_float+0x188>
 8005638:	b97d      	cbnz	r5, 800565a <_scanf_float+0x206>
 800563a:	f1b9 0f00 	cmp.w	r9, #0
 800563e:	f47f af3c 	bne.w	80054ba <_scanf_float+0x66>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005648:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800564c:	f47f af39 	bne.w	80054c2 <_scanf_float+0x6e>
 8005650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	2501      	movs	r5, #1
 8005658:	e7c0      	b.n	80055dc <_scanf_float+0x188>
 800565a:	2d03      	cmp	r5, #3
 800565c:	d0e2      	beq.n	8005624 <_scanf_float+0x1d0>
 800565e:	2d05      	cmp	r5, #5
 8005660:	e7de      	b.n	8005620 <_scanf_float+0x1cc>
 8005662:	2d02      	cmp	r5, #2
 8005664:	f47f af26 	bne.w	80054b4 <_scanf_float+0x60>
 8005668:	2503      	movs	r5, #3
 800566a:	e7b7      	b.n	80055dc <_scanf_float+0x188>
 800566c:	2d06      	cmp	r5, #6
 800566e:	f47f af21 	bne.w	80054b4 <_scanf_float+0x60>
 8005672:	2507      	movs	r5, #7
 8005674:	e7b2      	b.n	80055dc <_scanf_float+0x188>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	0591      	lsls	r1, r2, #22
 800567a:	f57f af1b 	bpl.w	80054b4 <_scanf_float+0x60>
 800567e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	f8cd 9004 	str.w	r9, [sp, #4]
 8005688:	e7a8      	b.n	80055dc <_scanf_float+0x188>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005690:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005694:	d006      	beq.n	80056a4 <_scanf_float+0x250>
 8005696:	0550      	lsls	r0, r2, #21
 8005698:	f57f af0c 	bpl.w	80054b4 <_scanf_float+0x60>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	f43f af0f 	beq.w	80054c2 <_scanf_float+0x6e>
 80056a4:	0591      	lsls	r1, r2, #22
 80056a6:	bf58      	it	pl
 80056a8:	9901      	ldrpl	r1, [sp, #4]
 80056aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056ae:	bf58      	it	pl
 80056b0:	eba9 0101 	subpl.w	r1, r9, r1
 80056b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80056b8:	bf58      	it	pl
 80056ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	f04f 0900 	mov.w	r9, #0
 80056c4:	e78a      	b.n	80055dc <_scanf_float+0x188>
 80056c6:	f04f 0a03 	mov.w	sl, #3
 80056ca:	e787      	b.n	80055dc <_scanf_float+0x188>
 80056cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056d0:	4639      	mov	r1, r7
 80056d2:	4640      	mov	r0, r8
 80056d4:	4798      	blx	r3
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f aedf 	beq.w	800549a <_scanf_float+0x46>
 80056dc:	e6ea      	b.n	80054b4 <_scanf_float+0x60>
 80056de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056e6:	463a      	mov	r2, r7
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	e6ec      	b.n	80054ce <_scanf_float+0x7a>
 80056f4:	1e6b      	subs	r3, r5, #1
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d825      	bhi.n	8005746 <_scanf_float+0x2f2>
 80056fa:	2d02      	cmp	r5, #2
 80056fc:	d836      	bhi.n	800576c <_scanf_float+0x318>
 80056fe:	455e      	cmp	r6, fp
 8005700:	f67f aee8 	bls.w	80054d4 <_scanf_float+0x80>
 8005704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005708:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800570c:	463a      	mov	r2, r7
 800570e:	4640      	mov	r0, r8
 8005710:	4798      	blx	r3
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	3b01      	subs	r3, #1
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	e7f1      	b.n	80056fe <_scanf_float+0x2aa>
 800571a:	9802      	ldr	r0, [sp, #8]
 800571c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005720:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005724:	9002      	str	r0, [sp, #8]
 8005726:	463a      	mov	r2, r7
 8005728:	4640      	mov	r0, r8
 800572a:	4798      	blx	r3
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	3b01      	subs	r3, #1
 8005730:	6123      	str	r3, [r4, #16]
 8005732:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005736:	fa5f fa8a 	uxtb.w	sl, sl
 800573a:	f1ba 0f02 	cmp.w	sl, #2
 800573e:	d1ec      	bne.n	800571a <_scanf_float+0x2c6>
 8005740:	3d03      	subs	r5, #3
 8005742:	b2ed      	uxtb	r5, r5
 8005744:	1b76      	subs	r6, r6, r5
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	05da      	lsls	r2, r3, #23
 800574a:	d52f      	bpl.n	80057ac <_scanf_float+0x358>
 800574c:	055b      	lsls	r3, r3, #21
 800574e:	d510      	bpl.n	8005772 <_scanf_float+0x31e>
 8005750:	455e      	cmp	r6, fp
 8005752:	f67f aebf 	bls.w	80054d4 <_scanf_float+0x80>
 8005756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800575a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800575e:	463a      	mov	r2, r7
 8005760:	4640      	mov	r0, r8
 8005762:	4798      	blx	r3
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	3b01      	subs	r3, #1
 8005768:	6123      	str	r3, [r4, #16]
 800576a:	e7f1      	b.n	8005750 <_scanf_float+0x2fc>
 800576c:	46aa      	mov	sl, r5
 800576e:	9602      	str	r6, [sp, #8]
 8005770:	e7df      	b.n	8005732 <_scanf_float+0x2de>
 8005772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	2965      	cmp	r1, #101	; 0x65
 800577a:	f103 33ff 	add.w	r3, r3, #4294967295
 800577e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	d00c      	beq.n	80057a0 <_scanf_float+0x34c>
 8005786:	2945      	cmp	r1, #69	; 0x45
 8005788:	d00a      	beq.n	80057a0 <_scanf_float+0x34c>
 800578a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800578e:	463a      	mov	r2, r7
 8005790:	4640      	mov	r0, r8
 8005792:	4798      	blx	r3
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800579a:	3b01      	subs	r3, #1
 800579c:	1eb5      	subs	r5, r6, #2
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057a4:	463a      	mov	r2, r7
 80057a6:	4640      	mov	r0, r8
 80057a8:	4798      	blx	r3
 80057aa:	462e      	mov	r6, r5
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	f015 0510 	ands.w	r5, r5, #16
 80057b2:	d158      	bne.n	8005866 <_scanf_float+0x412>
 80057b4:	7035      	strb	r5, [r6, #0]
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	d11c      	bne.n	80057fc <_scanf_float+0x3a8>
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	454b      	cmp	r3, r9
 80057c6:	eba3 0209 	sub.w	r2, r3, r9
 80057ca:	d124      	bne.n	8005816 <_scanf_float+0x3c2>
 80057cc:	2200      	movs	r2, #0
 80057ce:	4659      	mov	r1, fp
 80057d0:	4640      	mov	r0, r8
 80057d2:	f000 fe9b 	bl	800650c <_strtod_r>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	6821      	ldr	r1, [r4, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f011 0f02 	tst.w	r1, #2
 80057e0:	ec57 6b10 	vmov	r6, r7, d0
 80057e4:	f103 0204 	add.w	r2, r3, #4
 80057e8:	d020      	beq.n	800582c <_scanf_float+0x3d8>
 80057ea:	9903      	ldr	r1, [sp, #12]
 80057ec:	600a      	str	r2, [r1, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	e9c3 6700 	strd	r6, r7, [r3]
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60e3      	str	r3, [r4, #12]
 80057fa:	e66c      	b.n	80054d6 <_scanf_float+0x82>
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0e4      	beq.n	80057cc <_scanf_float+0x378>
 8005802:	9905      	ldr	r1, [sp, #20]
 8005804:	230a      	movs	r3, #10
 8005806:	462a      	mov	r2, r5
 8005808:	3101      	adds	r1, #1
 800580a:	4640      	mov	r0, r8
 800580c:	f000 ff08 	bl	8006620 <_strtol_r>
 8005810:	9b04      	ldr	r3, [sp, #16]
 8005812:	9e05      	ldr	r6, [sp, #20]
 8005814:	1ac2      	subs	r2, r0, r3
 8005816:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800581a:	429e      	cmp	r6, r3
 800581c:	bf28      	it	cs
 800581e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005822:	4912      	ldr	r1, [pc, #72]	; (800586c <_scanf_float+0x418>)
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f82b 	bl	8005880 <siprintf>
 800582a:	e7cf      	b.n	80057cc <_scanf_float+0x378>
 800582c:	f011 0f04 	tst.w	r1, #4
 8005830:	9903      	ldr	r1, [sp, #12]
 8005832:	600a      	str	r2, [r1, #0]
 8005834:	d1db      	bne.n	80057ee <_scanf_float+0x39a>
 8005836:	f8d3 8000 	ldr.w	r8, [r3]
 800583a:	ee10 2a10 	vmov	r2, s0
 800583e:	ee10 0a10 	vmov	r0, s0
 8005842:	463b      	mov	r3, r7
 8005844:	4639      	mov	r1, r7
 8005846:	f7fb f991 	bl	8000b6c <__aeabi_dcmpun>
 800584a:	b128      	cbz	r0, 8005858 <_scanf_float+0x404>
 800584c:	4808      	ldr	r0, [pc, #32]	; (8005870 <_scanf_float+0x41c>)
 800584e:	f000 f811 	bl	8005874 <nanf>
 8005852:	ed88 0a00 	vstr	s0, [r8]
 8005856:	e7cd      	b.n	80057f4 <_scanf_float+0x3a0>
 8005858:	4630      	mov	r0, r6
 800585a:	4639      	mov	r1, r7
 800585c:	f7fb f9e4 	bl	8000c28 <__aeabi_d2f>
 8005860:	f8c8 0000 	str.w	r0, [r8]
 8005864:	e7c6      	b.n	80057f4 <_scanf_float+0x3a0>
 8005866:	2500      	movs	r5, #0
 8005868:	e635      	b.n	80054d6 <_scanf_float+0x82>
 800586a:	bf00      	nop
 800586c:	0800a428 	.word	0x0800a428
 8005870:	0800a840 	.word	0x0800a840

08005874 <nanf>:
 8005874:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800587c <nanf+0x8>
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	7fc00000 	.word	0x7fc00000

08005880 <siprintf>:
 8005880:	b40e      	push	{r1, r2, r3}
 8005882:	b500      	push	{lr}
 8005884:	b09c      	sub	sp, #112	; 0x70
 8005886:	ab1d      	add	r3, sp, #116	; 0x74
 8005888:	9002      	str	r0, [sp, #8]
 800588a:	9006      	str	r0, [sp, #24]
 800588c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005890:	4809      	ldr	r0, [pc, #36]	; (80058b8 <siprintf+0x38>)
 8005892:	9107      	str	r1, [sp, #28]
 8005894:	9104      	str	r1, [sp, #16]
 8005896:	4909      	ldr	r1, [pc, #36]	; (80058bc <siprintf+0x3c>)
 8005898:	f853 2b04 	ldr.w	r2, [r3], #4
 800589c:	9105      	str	r1, [sp, #20]
 800589e:	6800      	ldr	r0, [r0, #0]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	a902      	add	r1, sp, #8
 80058a4:	f002 fea4 	bl	80085f0 <_svfiprintf_r>
 80058a8:	9b02      	ldr	r3, [sp, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	b01c      	add	sp, #112	; 0x70
 80058b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b4:	b003      	add	sp, #12
 80058b6:	4770      	bx	lr
 80058b8:	2000000c 	.word	0x2000000c
 80058bc:	ffff0208 	.word	0xffff0208

080058c0 <sulp>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	ec45 4b10 	vmov	d0, r4, r5
 80058ca:	4616      	mov	r6, r2
 80058cc:	f002 fc2c 	bl	8008128 <__ulp>
 80058d0:	ec51 0b10 	vmov	r0, r1, d0
 80058d4:	b17e      	cbz	r6, 80058f6 <sulp+0x36>
 80058d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058de:	2b00      	cmp	r3, #0
 80058e0:	dd09      	ble.n	80058f6 <sulp+0x36>
 80058e2:	051b      	lsls	r3, r3, #20
 80058e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058e8:	2400      	movs	r4, #0
 80058ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7fa fea1 	bl	8000638 <__aeabi_dmul>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}

080058f8 <_strtod_l>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	b0a3      	sub	sp, #140	; 0x8c
 80058fe:	461f      	mov	r7, r3
 8005900:	2300      	movs	r3, #0
 8005902:	931e      	str	r3, [sp, #120]	; 0x78
 8005904:	4ba4      	ldr	r3, [pc, #656]	; (8005b98 <_strtod_l+0x2a0>)
 8005906:	9219      	str	r2, [sp, #100]	; 0x64
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	9307      	str	r3, [sp, #28]
 800590c:	4604      	mov	r4, r0
 800590e:	4618      	mov	r0, r3
 8005910:	4688      	mov	r8, r1
 8005912:	f7fa fc7d 	bl	8000210 <strlen>
 8005916:	f04f 0a00 	mov.w	sl, #0
 800591a:	4605      	mov	r5, r0
 800591c:	f04f 0b00 	mov.w	fp, #0
 8005920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	2a2b      	cmp	r2, #43	; 0x2b
 800592a:	d04c      	beq.n	80059c6 <_strtod_l+0xce>
 800592c:	d839      	bhi.n	80059a2 <_strtod_l+0xaa>
 800592e:	2a0d      	cmp	r2, #13
 8005930:	d832      	bhi.n	8005998 <_strtod_l+0xa0>
 8005932:	2a08      	cmp	r2, #8
 8005934:	d832      	bhi.n	800599c <_strtod_l+0xa4>
 8005936:	2a00      	cmp	r2, #0
 8005938:	d03c      	beq.n	80059b4 <_strtod_l+0xbc>
 800593a:	2300      	movs	r3, #0
 800593c:	930e      	str	r3, [sp, #56]	; 0x38
 800593e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005940:	7833      	ldrb	r3, [r6, #0]
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	f040 80b4 	bne.w	8005ab0 <_strtod_l+0x1b8>
 8005948:	7873      	ldrb	r3, [r6, #1]
 800594a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800594e:	2b58      	cmp	r3, #88	; 0x58
 8005950:	d16c      	bne.n	8005a2c <_strtod_l+0x134>
 8005952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	ab1e      	add	r3, sp, #120	; 0x78
 8005958:	9702      	str	r7, [sp, #8]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4a8f      	ldr	r2, [pc, #572]	; (8005b9c <_strtod_l+0x2a4>)
 800595e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005960:	a91d      	add	r1, sp, #116	; 0x74
 8005962:	4620      	mov	r0, r4
 8005964:	f001 fd40 	bl	80073e8 <__gethex>
 8005968:	f010 0707 	ands.w	r7, r0, #7
 800596c:	4605      	mov	r5, r0
 800596e:	d005      	beq.n	800597c <_strtod_l+0x84>
 8005970:	2f06      	cmp	r7, #6
 8005972:	d12a      	bne.n	80059ca <_strtod_l+0xd2>
 8005974:	3601      	adds	r6, #1
 8005976:	2300      	movs	r3, #0
 8005978:	961d      	str	r6, [sp, #116]	; 0x74
 800597a:	930e      	str	r3, [sp, #56]	; 0x38
 800597c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 8596 	bne.w	80064b0 <_strtod_l+0xbb8>
 8005984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005986:	b1db      	cbz	r3, 80059c0 <_strtod_l+0xc8>
 8005988:	4652      	mov	r2, sl
 800598a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800598e:	ec43 2b10 	vmov	d0, r2, r3
 8005992:	b023      	add	sp, #140	; 0x8c
 8005994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005998:	2a20      	cmp	r2, #32
 800599a:	d1ce      	bne.n	800593a <_strtod_l+0x42>
 800599c:	3301      	adds	r3, #1
 800599e:	931d      	str	r3, [sp, #116]	; 0x74
 80059a0:	e7c0      	b.n	8005924 <_strtod_l+0x2c>
 80059a2:	2a2d      	cmp	r2, #45	; 0x2d
 80059a4:	d1c9      	bne.n	800593a <_strtod_l+0x42>
 80059a6:	2201      	movs	r2, #1
 80059a8:	920e      	str	r2, [sp, #56]	; 0x38
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	921d      	str	r2, [sp, #116]	; 0x74
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1c4      	bne.n	800593e <_strtod_l+0x46>
 80059b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 8576 	bne.w	80064ac <_strtod_l+0xbb4>
 80059c0:	4652      	mov	r2, sl
 80059c2:	465b      	mov	r3, fp
 80059c4:	e7e3      	b.n	800598e <_strtod_l+0x96>
 80059c6:	2200      	movs	r2, #0
 80059c8:	e7ee      	b.n	80059a8 <_strtod_l+0xb0>
 80059ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059cc:	b13a      	cbz	r2, 80059de <_strtod_l+0xe6>
 80059ce:	2135      	movs	r1, #53	; 0x35
 80059d0:	a820      	add	r0, sp, #128	; 0x80
 80059d2:	f002 fcb4 	bl	800833e <__copybits>
 80059d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80059d8:	4620      	mov	r0, r4
 80059da:	f002 f879 	bl	8007ad0 <_Bfree>
 80059de:	3f01      	subs	r7, #1
 80059e0:	2f05      	cmp	r7, #5
 80059e2:	d807      	bhi.n	80059f4 <_strtod_l+0xfc>
 80059e4:	e8df f007 	tbb	[pc, r7]
 80059e8:	1d180b0e 	.word	0x1d180b0e
 80059ec:	030e      	.short	0x030e
 80059ee:	f04f 0b00 	mov.w	fp, #0
 80059f2:	46da      	mov	sl, fp
 80059f4:	0728      	lsls	r0, r5, #28
 80059f6:	d5c1      	bpl.n	800597c <_strtod_l+0x84>
 80059f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80059fc:	e7be      	b.n	800597c <_strtod_l+0x84>
 80059fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005a02:	e7f7      	b.n	80059f4 <_strtod_l+0xfc>
 8005a04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005a08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a16:	e7ed      	b.n	80059f4 <_strtod_l+0xfc>
 8005a18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005ba0 <_strtod_l+0x2a8>
 8005a1c:	f04f 0a00 	mov.w	sl, #0
 8005a20:	e7e8      	b.n	80059f4 <_strtod_l+0xfc>
 8005a22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a26:	f04f 3aff 	mov.w	sl, #4294967295
 8005a2a:	e7e3      	b.n	80059f4 <_strtod_l+0xfc>
 8005a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	921d      	str	r2, [sp, #116]	; 0x74
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d0f9      	beq.n	8005a2c <_strtod_l+0x134>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d09f      	beq.n	800597c <_strtod_l+0x84>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a46:	930a      	str	r3, [sp, #40]	; 0x28
 8005a48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a4c:	464f      	mov	r7, r9
 8005a4e:	220a      	movs	r2, #10
 8005a50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005a52:	7806      	ldrb	r6, [r0, #0]
 8005a54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a58:	b2d9      	uxtb	r1, r3
 8005a5a:	2909      	cmp	r1, #9
 8005a5c:	d92a      	bls.n	8005ab4 <_strtod_l+0x1bc>
 8005a5e:	9907      	ldr	r1, [sp, #28]
 8005a60:	462a      	mov	r2, r5
 8005a62:	f002 fedd 	bl	8008820 <strncmp>
 8005a66:	b398      	cbz	r0, 8005ad0 <_strtod_l+0x1d8>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4633      	mov	r3, r6
 8005a6c:	463d      	mov	r5, r7
 8005a6e:	9007      	str	r0, [sp, #28]
 8005a70:	4602      	mov	r2, r0
 8005a72:	2b65      	cmp	r3, #101	; 0x65
 8005a74:	d001      	beq.n	8005a7a <_strtod_l+0x182>
 8005a76:	2b45      	cmp	r3, #69	; 0x45
 8005a78:	d118      	bne.n	8005aac <_strtod_l+0x1b4>
 8005a7a:	b91d      	cbnz	r5, 8005a84 <_strtod_l+0x18c>
 8005a7c:	9b04      	ldr	r3, [sp, #16]
 8005a7e:	4303      	orrs	r3, r0
 8005a80:	d098      	beq.n	80059b4 <_strtod_l+0xbc>
 8005a82:	2500      	movs	r5, #0
 8005a84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005a88:	f108 0301 	add.w	r3, r8, #1
 8005a8c:	931d      	str	r3, [sp, #116]	; 0x74
 8005a8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005a92:	2b2b      	cmp	r3, #43	; 0x2b
 8005a94:	d075      	beq.n	8005b82 <_strtod_l+0x28a>
 8005a96:	2b2d      	cmp	r3, #45	; 0x2d
 8005a98:	d07b      	beq.n	8005b92 <_strtod_l+0x29a>
 8005a9a:	f04f 0c00 	mov.w	ip, #0
 8005a9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005aa2:	2909      	cmp	r1, #9
 8005aa4:	f240 8082 	bls.w	8005bac <_strtod_l+0x2b4>
 8005aa8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005aac:	2600      	movs	r6, #0
 8005aae:	e09d      	b.n	8005bec <_strtod_l+0x2f4>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e7c4      	b.n	8005a3e <_strtod_l+0x146>
 8005ab4:	2f08      	cmp	r7, #8
 8005ab6:	bfd8      	it	le
 8005ab8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005aba:	f100 0001 	add.w	r0, r0, #1
 8005abe:	bfda      	itte	le
 8005ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ac4:	9309      	strle	r3, [sp, #36]	; 0x24
 8005ac6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005aca:	3701      	adds	r7, #1
 8005acc:	901d      	str	r0, [sp, #116]	; 0x74
 8005ace:	e7bf      	b.n	8005a50 <_strtod_l+0x158>
 8005ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ad2:	195a      	adds	r2, r3, r5
 8005ad4:	921d      	str	r2, [sp, #116]	; 0x74
 8005ad6:	5d5b      	ldrb	r3, [r3, r5]
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	d037      	beq.n	8005b4c <_strtod_l+0x254>
 8005adc:	9007      	str	r0, [sp, #28]
 8005ade:	463d      	mov	r5, r7
 8005ae0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ae4:	2a09      	cmp	r2, #9
 8005ae6:	d912      	bls.n	8005b0e <_strtod_l+0x216>
 8005ae8:	2201      	movs	r2, #1
 8005aea:	e7c2      	b.n	8005a72 <_strtod_l+0x17a>
 8005aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	921d      	str	r2, [sp, #116]	; 0x74
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	3001      	adds	r0, #1
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	d0f8      	beq.n	8005aec <_strtod_l+0x1f4>
 8005afa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005afe:	2a08      	cmp	r2, #8
 8005b00:	f200 84db 	bhi.w	80064ba <_strtod_l+0xbc2>
 8005b04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b06:	9007      	str	r0, [sp, #28]
 8005b08:	2000      	movs	r0, #0
 8005b0a:	920a      	str	r2, [sp, #40]	; 0x28
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	3b30      	subs	r3, #48	; 0x30
 8005b10:	f100 0201 	add.w	r2, r0, #1
 8005b14:	d014      	beq.n	8005b40 <_strtod_l+0x248>
 8005b16:	9907      	ldr	r1, [sp, #28]
 8005b18:	4411      	add	r1, r2
 8005b1a:	9107      	str	r1, [sp, #28]
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	eb00 0e05 	add.w	lr, r0, r5
 8005b22:	210a      	movs	r1, #10
 8005b24:	4572      	cmp	r2, lr
 8005b26:	d113      	bne.n	8005b50 <_strtod_l+0x258>
 8005b28:	182a      	adds	r2, r5, r0
 8005b2a:	2a08      	cmp	r2, #8
 8005b2c:	f105 0501 	add.w	r5, r5, #1
 8005b30:	4405      	add	r5, r0
 8005b32:	dc1c      	bgt.n	8005b6e <_strtod_l+0x276>
 8005b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b36:	220a      	movs	r2, #10
 8005b38:	fb02 3301 	mla	r3, r2, r1, r3
 8005b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3e:	2200      	movs	r2, #0
 8005b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	911d      	str	r1, [sp, #116]	; 0x74
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	e7c9      	b.n	8005ae0 <_strtod_l+0x1e8>
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	e7d2      	b.n	8005af6 <_strtod_l+0x1fe>
 8005b50:	2a08      	cmp	r2, #8
 8005b52:	dc04      	bgt.n	8005b5e <_strtod_l+0x266>
 8005b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b56:	434e      	muls	r6, r1
 8005b58:	9609      	str	r6, [sp, #36]	; 0x24
 8005b5a:	3201      	adds	r2, #1
 8005b5c:	e7e2      	b.n	8005b24 <_strtod_l+0x22c>
 8005b5e:	f102 0c01 	add.w	ip, r2, #1
 8005b62:	f1bc 0f10 	cmp.w	ip, #16
 8005b66:	bfd8      	it	le
 8005b68:	fb01 f909 	mulle.w	r9, r1, r9
 8005b6c:	e7f5      	b.n	8005b5a <_strtod_l+0x262>
 8005b6e:	2d10      	cmp	r5, #16
 8005b70:	bfdc      	itt	le
 8005b72:	220a      	movle	r2, #10
 8005b74:	fb02 3909 	mlale	r9, r2, r9, r3
 8005b78:	e7e1      	b.n	8005b3e <_strtod_l+0x246>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9307      	str	r3, [sp, #28]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	e77c      	b.n	8005a7c <_strtod_l+0x184>
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	f108 0302 	add.w	r3, r8, #2
 8005b8a:	931d      	str	r3, [sp, #116]	; 0x74
 8005b8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005b90:	e785      	b.n	8005a9e <_strtod_l+0x1a6>
 8005b92:	f04f 0c01 	mov.w	ip, #1
 8005b96:	e7f6      	b.n	8005b86 <_strtod_l+0x28e>
 8005b98:	0800a680 	.word	0x0800a680
 8005b9c:	0800a430 	.word	0x0800a430
 8005ba0:	7ff00000 	.word	0x7ff00000
 8005ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	911d      	str	r1, [sp, #116]	; 0x74
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d0f9      	beq.n	8005ba4 <_strtod_l+0x2ac>
 8005bb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005bb4:	2908      	cmp	r1, #8
 8005bb6:	f63f af79 	bhi.w	8005aac <_strtod_l+0x1b4>
 8005bba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc0:	9308      	str	r3, [sp, #32]
 8005bc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	911d      	str	r1, [sp, #116]	; 0x74
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005bce:	2e09      	cmp	r6, #9
 8005bd0:	d937      	bls.n	8005c42 <_strtod_l+0x34a>
 8005bd2:	9e08      	ldr	r6, [sp, #32]
 8005bd4:	1b89      	subs	r1, r1, r6
 8005bd6:	2908      	cmp	r1, #8
 8005bd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bdc:	dc02      	bgt.n	8005be4 <_strtod_l+0x2ec>
 8005bde:	4576      	cmp	r6, lr
 8005be0:	bfa8      	it	ge
 8005be2:	4676      	movge	r6, lr
 8005be4:	f1bc 0f00 	cmp.w	ip, #0
 8005be8:	d000      	beq.n	8005bec <_strtod_l+0x2f4>
 8005bea:	4276      	negs	r6, r6
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	d14f      	bne.n	8005c90 <_strtod_l+0x398>
 8005bf0:	9904      	ldr	r1, [sp, #16]
 8005bf2:	4301      	orrs	r1, r0
 8005bf4:	f47f aec2 	bne.w	800597c <_strtod_l+0x84>
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	f47f aedb 	bne.w	80059b4 <_strtod_l+0xbc>
 8005bfe:	2b69      	cmp	r3, #105	; 0x69
 8005c00:	d027      	beq.n	8005c52 <_strtod_l+0x35a>
 8005c02:	dc24      	bgt.n	8005c4e <_strtod_l+0x356>
 8005c04:	2b49      	cmp	r3, #73	; 0x49
 8005c06:	d024      	beq.n	8005c52 <_strtod_l+0x35a>
 8005c08:	2b4e      	cmp	r3, #78	; 0x4e
 8005c0a:	f47f aed3 	bne.w	80059b4 <_strtod_l+0xbc>
 8005c0e:	499e      	ldr	r1, [pc, #632]	; (8005e88 <_strtod_l+0x590>)
 8005c10:	a81d      	add	r0, sp, #116	; 0x74
 8005c12:	f001 fe41 	bl	8007898 <__match>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f43f aecc 	beq.w	80059b4 <_strtod_l+0xbc>
 8005c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b28      	cmp	r3, #40	; 0x28
 8005c22:	d12d      	bne.n	8005c80 <_strtod_l+0x388>
 8005c24:	4999      	ldr	r1, [pc, #612]	; (8005e8c <_strtod_l+0x594>)
 8005c26:	aa20      	add	r2, sp, #128	; 0x80
 8005c28:	a81d      	add	r0, sp, #116	; 0x74
 8005c2a:	f001 fe49 	bl	80078c0 <__hexnan>
 8005c2e:	2805      	cmp	r0, #5
 8005c30:	d126      	bne.n	8005c80 <_strtod_l+0x388>
 8005c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005c38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c40:	e69c      	b.n	800597c <_strtod_l+0x84>
 8005c42:	210a      	movs	r1, #10
 8005c44:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005c48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c4c:	e7b9      	b.n	8005bc2 <_strtod_l+0x2ca>
 8005c4e:	2b6e      	cmp	r3, #110	; 0x6e
 8005c50:	e7db      	b.n	8005c0a <_strtod_l+0x312>
 8005c52:	498f      	ldr	r1, [pc, #572]	; (8005e90 <_strtod_l+0x598>)
 8005c54:	a81d      	add	r0, sp, #116	; 0x74
 8005c56:	f001 fe1f 	bl	8007898 <__match>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f43f aeaa 	beq.w	80059b4 <_strtod_l+0xbc>
 8005c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c62:	498c      	ldr	r1, [pc, #560]	; (8005e94 <_strtod_l+0x59c>)
 8005c64:	3b01      	subs	r3, #1
 8005c66:	a81d      	add	r0, sp, #116	; 0x74
 8005c68:	931d      	str	r3, [sp, #116]	; 0x74
 8005c6a:	f001 fe15 	bl	8007898 <__match>
 8005c6e:	b910      	cbnz	r0, 8005c76 <_strtod_l+0x37e>
 8005c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c72:	3301      	adds	r3, #1
 8005c74:	931d      	str	r3, [sp, #116]	; 0x74
 8005c76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005ea4 <_strtod_l+0x5ac>
 8005c7a:	f04f 0a00 	mov.w	sl, #0
 8005c7e:	e67d      	b.n	800597c <_strtod_l+0x84>
 8005c80:	4885      	ldr	r0, [pc, #532]	; (8005e98 <_strtod_l+0x5a0>)
 8005c82:	f002 fdb5 	bl	80087f0 <nan>
 8005c86:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005c8e:	e675      	b.n	800597c <_strtod_l+0x84>
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c94:	1af3      	subs	r3, r6, r3
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	bf08      	it	eq
 8005c9a:	462f      	moveq	r7, r5
 8005c9c:	2d10      	cmp	r5, #16
 8005c9e:	9308      	str	r3, [sp, #32]
 8005ca0:	46a8      	mov	r8, r5
 8005ca2:	bfa8      	it	ge
 8005ca4:	f04f 0810 	movge.w	r8, #16
 8005ca8:	f7fa fc4c 	bl	8000544 <__aeabi_ui2d>
 8005cac:	2d09      	cmp	r5, #9
 8005cae:	4682      	mov	sl, r0
 8005cb0:	468b      	mov	fp, r1
 8005cb2:	dd13      	ble.n	8005cdc <_strtod_l+0x3e4>
 8005cb4:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <_strtod_l+0x5a4>)
 8005cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cbe:	f7fa fcbb 	bl	8000638 <__aeabi_dmul>
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	4648      	mov	r0, r9
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	f7fa fc3c 	bl	8000544 <__aeabi_ui2d>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fafa 	bl	80002cc <__adddf3>
 8005cd8:	4682      	mov	sl, r0
 8005cda:	468b      	mov	fp, r1
 8005cdc:	2d0f      	cmp	r5, #15
 8005cde:	dc38      	bgt.n	8005d52 <_strtod_l+0x45a>
 8005ce0:	9b08      	ldr	r3, [sp, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f43f ae4a 	beq.w	800597c <_strtod_l+0x84>
 8005ce8:	dd24      	ble.n	8005d34 <_strtod_l+0x43c>
 8005cea:	2b16      	cmp	r3, #22
 8005cec:	dc0b      	bgt.n	8005d06 <_strtod_l+0x40e>
 8005cee:	4d6b      	ldr	r5, [pc, #428]	; (8005e9c <_strtod_l+0x5a4>)
 8005cf0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005cf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	f7fa fc9c 	bl	8000638 <__aeabi_dmul>
 8005d00:	4682      	mov	sl, r0
 8005d02:	468b      	mov	fp, r1
 8005d04:	e63a      	b.n	800597c <_strtod_l+0x84>
 8005d06:	9a08      	ldr	r2, [sp, #32]
 8005d08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	db20      	blt.n	8005d52 <_strtod_l+0x45a>
 8005d10:	4c62      	ldr	r4, [pc, #392]	; (8005e9c <_strtod_l+0x5a4>)
 8005d12:	f1c5 050f 	rsb	r5, r5, #15
 8005d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d1a:	4652      	mov	r2, sl
 8005d1c:	465b      	mov	r3, fp
 8005d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d22:	f7fa fc89 	bl	8000638 <__aeabi_dmul>
 8005d26:	9b08      	ldr	r3, [sp, #32]
 8005d28:	1b5d      	subs	r5, r3, r5
 8005d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d32:	e7e3      	b.n	8005cfc <_strtod_l+0x404>
 8005d34:	9b08      	ldr	r3, [sp, #32]
 8005d36:	3316      	adds	r3, #22
 8005d38:	db0b      	blt.n	8005d52 <_strtod_l+0x45a>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <_strtod_l+0x5a4>)
 8005d3e:	1b9e      	subs	r6, r3, r6
 8005d40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d48:	4650      	mov	r0, sl
 8005d4a:	4659      	mov	r1, fp
 8005d4c:	f7fa fd9e 	bl	800088c <__aeabi_ddiv>
 8005d50:	e7d6      	b.n	8005d00 <_strtod_l+0x408>
 8005d52:	9b08      	ldr	r3, [sp, #32]
 8005d54:	eba5 0808 	sub.w	r8, r5, r8
 8005d58:	4498      	add	r8, r3
 8005d5a:	f1b8 0f00 	cmp.w	r8, #0
 8005d5e:	dd71      	ble.n	8005e44 <_strtod_l+0x54c>
 8005d60:	f018 030f 	ands.w	r3, r8, #15
 8005d64:	d00a      	beq.n	8005d7c <_strtod_l+0x484>
 8005d66:	494d      	ldr	r1, [pc, #308]	; (8005e9c <_strtod_l+0x5a4>)
 8005d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	465b      	mov	r3, fp
 8005d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	4682      	mov	sl, r0
 8005d7a:	468b      	mov	fp, r1
 8005d7c:	f038 080f 	bics.w	r8, r8, #15
 8005d80:	d04d      	beq.n	8005e1e <_strtod_l+0x526>
 8005d82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d86:	dd22      	ble.n	8005dce <_strtod_l+0x4d6>
 8005d88:	2500      	movs	r5, #0
 8005d8a:	462e      	mov	r6, r5
 8005d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8005d8e:	9507      	str	r5, [sp, #28]
 8005d90:	2322      	movs	r3, #34	; 0x22
 8005d92:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005ea4 <_strtod_l+0x5ac>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	f04f 0a00 	mov.w	sl, #0
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f43f adec 	beq.w	800597c <_strtod_l+0x84>
 8005da4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005da6:	4620      	mov	r0, r4
 8005da8:	f001 fe92 	bl	8007ad0 <_Bfree>
 8005dac:	9907      	ldr	r1, [sp, #28]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f001 fe8e 	bl	8007ad0 <_Bfree>
 8005db4:	4631      	mov	r1, r6
 8005db6:	4620      	mov	r0, r4
 8005db8:	f001 fe8a 	bl	8007ad0 <_Bfree>
 8005dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 fe86 	bl	8007ad0 <_Bfree>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f001 fe82 	bl	8007ad0 <_Bfree>
 8005dcc:	e5d6      	b.n	800597c <_strtod_l+0x84>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	4699      	mov	r9, r3
 8005dda:	f1b8 0f01 	cmp.w	r8, #1
 8005dde:	dc21      	bgt.n	8005e24 <_strtod_l+0x52c>
 8005de0:	b10b      	cbz	r3, 8005de6 <_strtod_l+0x4ee>
 8005de2:	4682      	mov	sl, r0
 8005de4:	468b      	mov	fp, r1
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <_strtod_l+0x5a8>)
 8005de8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005dec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005df0:	4652      	mov	r2, sl
 8005df2:	465b      	mov	r3, fp
 8005df4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005df8:	f7fa fc1e 	bl	8000638 <__aeabi_dmul>
 8005dfc:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <_strtod_l+0x5ac>)
 8005dfe:	460a      	mov	r2, r1
 8005e00:	400b      	ands	r3, r1
 8005e02:	4929      	ldr	r1, [pc, #164]	; (8005ea8 <_strtod_l+0x5b0>)
 8005e04:	428b      	cmp	r3, r1
 8005e06:	4682      	mov	sl, r0
 8005e08:	d8be      	bhi.n	8005d88 <_strtod_l+0x490>
 8005e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	bf86      	itte	hi
 8005e12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005eac <_strtod_l+0x5b4>
 8005e16:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	e081      	b.n	8005f28 <_strtod_l+0x630>
 8005e24:	f018 0f01 	tst.w	r8, #1
 8005e28:	d007      	beq.n	8005e3a <_strtod_l+0x542>
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <_strtod_l+0x5a8>)
 8005e2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa fc00 	bl	8000638 <__aeabi_dmul>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f109 0901 	add.w	r9, r9, #1
 8005e3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e42:	e7ca      	b.n	8005dda <_strtod_l+0x4e2>
 8005e44:	d0eb      	beq.n	8005e1e <_strtod_l+0x526>
 8005e46:	f1c8 0800 	rsb	r8, r8, #0
 8005e4a:	f018 020f 	ands.w	r2, r8, #15
 8005e4e:	d00a      	beq.n	8005e66 <_strtod_l+0x56e>
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <_strtod_l+0x5a4>)
 8005e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e56:	4650      	mov	r0, sl
 8005e58:	4659      	mov	r1, fp
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fd15 	bl	800088c <__aeabi_ddiv>
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e6a:	d0d8      	beq.n	8005e1e <_strtod_l+0x526>
 8005e6c:	f1b8 0f1f 	cmp.w	r8, #31
 8005e70:	dd1e      	ble.n	8005eb0 <_strtod_l+0x5b8>
 8005e72:	2500      	movs	r5, #0
 8005e74:	462e      	mov	r6, r5
 8005e76:	9509      	str	r5, [sp, #36]	; 0x24
 8005e78:	9507      	str	r5, [sp, #28]
 8005e7a:	2322      	movs	r3, #34	; 0x22
 8005e7c:	f04f 0a00 	mov.w	sl, #0
 8005e80:	f04f 0b00 	mov.w	fp, #0
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	e789      	b.n	8005d9c <_strtod_l+0x4a4>
 8005e88:	0800a401 	.word	0x0800a401
 8005e8c:	0800a444 	.word	0x0800a444
 8005e90:	0800a3f9 	.word	0x0800a3f9
 8005e94:	0800a584 	.word	0x0800a584
 8005e98:	0800a840 	.word	0x0800a840
 8005e9c:	0800a720 	.word	0x0800a720
 8005ea0:	0800a6f8 	.word	0x0800a6f8
 8005ea4:	7ff00000 	.word	0x7ff00000
 8005ea8:	7ca00000 	.word	0x7ca00000
 8005eac:	7fefffff 	.word	0x7fefffff
 8005eb0:	f018 0310 	ands.w	r3, r8, #16
 8005eb4:	bf18      	it	ne
 8005eb6:	236a      	movne	r3, #106	; 0x6a
 8005eb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006270 <_strtod_l+0x978>
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f018 0f01 	tst.w	r8, #1
 8005ec8:	d004      	beq.n	8005ed4 <_strtod_l+0x5dc>
 8005eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ece:	f7fa fbb3 	bl	8000638 <__aeabi_dmul>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ed8:	f109 0908 	add.w	r9, r9, #8
 8005edc:	d1f2      	bne.n	8005ec4 <_strtod_l+0x5cc>
 8005ede:	b10b      	cbz	r3, 8005ee4 <_strtod_l+0x5ec>
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	468b      	mov	fp, r1
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	b1bb      	cbz	r3, 8005f18 <_strtod_l+0x620>
 8005ee8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005eec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	dd10      	ble.n	8005f18 <_strtod_l+0x620>
 8005ef6:	2b1f      	cmp	r3, #31
 8005ef8:	f340 8128 	ble.w	800614c <_strtod_l+0x854>
 8005efc:	2b34      	cmp	r3, #52	; 0x34
 8005efe:	bfde      	ittt	le
 8005f00:	3b20      	suble	r3, #32
 8005f02:	f04f 32ff 	movle.w	r2, #4294967295
 8005f06:	fa02 f303 	lslle.w	r3, r2, r3
 8005f0a:	f04f 0a00 	mov.w	sl, #0
 8005f0e:	bfcc      	ite	gt
 8005f10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f14:	ea03 0b01 	andle.w	fp, r3, r1
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	4659      	mov	r1, fp
 8005f20:	f7fa fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1a4      	bne.n	8005e72 <_strtod_l+0x57a>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f2e:	462b      	mov	r3, r5
 8005f30:	463a      	mov	r2, r7
 8005f32:	4620      	mov	r0, r4
 8005f34:	f001 fe38 	bl	8007ba8 <__s2b>
 8005f38:	9009      	str	r0, [sp, #36]	; 0x24
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f af24 	beq.w	8005d88 <_strtod_l+0x490>
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	1b9e      	subs	r6, r3, r6
 8005f44:	9b08      	ldr	r3, [sp, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb4      	ite	lt
 8005f4a:	4633      	movlt	r3, r6
 8005f4c:	2300      	movge	r3, #0
 8005f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	2500      	movs	r5, #0
 8005f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f58:	9318      	str	r3, [sp, #96]	; 0x60
 8005f5a:	462e      	mov	r6, r5
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	4620      	mov	r0, r4
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	f001 fd75 	bl	8007a50 <_Balloc>
 8005f66:	9007      	str	r0, [sp, #28]
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f af11 	beq.w	8005d90 <_strtod_l+0x498>
 8005f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	3202      	adds	r2, #2
 8005f74:	f103 010c 	add.w	r1, r3, #12
 8005f78:	0092      	lsls	r2, r2, #2
 8005f7a:	300c      	adds	r0, #12
 8005f7c:	f001 fd5a 	bl	8007a34 <memcpy>
 8005f80:	ec4b ab10 	vmov	d0, sl, fp
 8005f84:	aa20      	add	r2, sp, #128	; 0x80
 8005f86:	a91f      	add	r1, sp, #124	; 0x7c
 8005f88:	4620      	mov	r0, r4
 8005f8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005f8e:	f002 f947 	bl	8008220 <__d2b>
 8005f92:	901e      	str	r0, [sp, #120]	; 0x78
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f43f aefb 	beq.w	8005d90 <_strtod_l+0x498>
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f001 fe9d 	bl	8007cdc <__i2b>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f43f aef3 	beq.w	8005d90 <_strtod_l+0x498>
 8005faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fac:	9904      	ldr	r1, [sp, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfab      	itete	ge
 8005fb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005fb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005fb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005fb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005fbc:	bfac      	ite	ge
 8005fbe:	eb03 0902 	addge.w	r9, r3, r2
 8005fc2:	1ad7      	sublt	r7, r2, r3
 8005fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fc6:	eba3 0801 	sub.w	r8, r3, r1
 8005fca:	4490      	add	r8, r2
 8005fcc:	4ba3      	ldr	r3, [pc, #652]	; (800625c <_strtod_l+0x964>)
 8005fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fd2:	4598      	cmp	r8, r3
 8005fd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fd8:	f280 80cc 	bge.w	8006174 <_strtod_l+0x87c>
 8005fdc:	eba3 0308 	sub.w	r3, r3, r8
 8005fe0:	2b1f      	cmp	r3, #31
 8005fe2:	eba2 0203 	sub.w	r2, r2, r3
 8005fe6:	f04f 0101 	mov.w	r1, #1
 8005fea:	f300 80b6 	bgt.w	800615a <_strtod_l+0x862>
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff8:	eb09 0802 	add.w	r8, r9, r2
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	45c1      	cmp	r9, r8
 8006000:	4417      	add	r7, r2
 8006002:	441f      	add	r7, r3
 8006004:	464b      	mov	r3, r9
 8006006:	bfa8      	it	ge
 8006008:	4643      	movge	r3, r8
 800600a:	42bb      	cmp	r3, r7
 800600c:	bfa8      	it	ge
 800600e:	463b      	movge	r3, r7
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfc2      	ittt	gt
 8006014:	eba8 0803 	subgt.w	r8, r8, r3
 8006018:	1aff      	subgt	r7, r7, r3
 800601a:	eba9 0903 	subgt.w	r9, r9, r3
 800601e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	dd17      	ble.n	8006054 <_strtod_l+0x75c>
 8006024:	4631      	mov	r1, r6
 8006026:	461a      	mov	r2, r3
 8006028:	4620      	mov	r0, r4
 800602a:	f001 ff13 	bl	8007e54 <__pow5mult>
 800602e:	4606      	mov	r6, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	f43f aead 	beq.w	8005d90 <_strtod_l+0x498>
 8006036:	4601      	mov	r1, r0
 8006038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800603a:	4620      	mov	r0, r4
 800603c:	f001 fe64 	bl	8007d08 <__multiply>
 8006040:	900f      	str	r0, [sp, #60]	; 0x3c
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f aea4 	beq.w	8005d90 <_strtod_l+0x498>
 8006048:	991e      	ldr	r1, [sp, #120]	; 0x78
 800604a:	4620      	mov	r0, r4
 800604c:	f001 fd40 	bl	8007ad0 <_Bfree>
 8006050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006052:	931e      	str	r3, [sp, #120]	; 0x78
 8006054:	f1b8 0f00 	cmp.w	r8, #0
 8006058:	f300 8091 	bgt.w	800617e <_strtod_l+0x886>
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd08      	ble.n	8006074 <_strtod_l+0x77c>
 8006062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006064:	9907      	ldr	r1, [sp, #28]
 8006066:	4620      	mov	r0, r4
 8006068:	f001 fef4 	bl	8007e54 <__pow5mult>
 800606c:	9007      	str	r0, [sp, #28]
 800606e:	2800      	cmp	r0, #0
 8006070:	f43f ae8e 	beq.w	8005d90 <_strtod_l+0x498>
 8006074:	2f00      	cmp	r7, #0
 8006076:	dd08      	ble.n	800608a <_strtod_l+0x792>
 8006078:	9907      	ldr	r1, [sp, #28]
 800607a:	463a      	mov	r2, r7
 800607c:	4620      	mov	r0, r4
 800607e:	f001 ff43 	bl	8007f08 <__lshift>
 8006082:	9007      	str	r0, [sp, #28]
 8006084:	2800      	cmp	r0, #0
 8006086:	f43f ae83 	beq.w	8005d90 <_strtod_l+0x498>
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	dd08      	ble.n	80060a2 <_strtod_l+0x7aa>
 8006090:	4631      	mov	r1, r6
 8006092:	464a      	mov	r2, r9
 8006094:	4620      	mov	r0, r4
 8006096:	f001 ff37 	bl	8007f08 <__lshift>
 800609a:	4606      	mov	r6, r0
 800609c:	2800      	cmp	r0, #0
 800609e:	f43f ae77 	beq.w	8005d90 <_strtod_l+0x498>
 80060a2:	9a07      	ldr	r2, [sp, #28]
 80060a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 ffb6 	bl	8008018 <__mdiff>
 80060ac:	4605      	mov	r5, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f ae6e 	beq.w	8005d90 <_strtod_l+0x498>
 80060b4:	68c3      	ldr	r3, [r0, #12]
 80060b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b8:	2300      	movs	r3, #0
 80060ba:	60c3      	str	r3, [r0, #12]
 80060bc:	4631      	mov	r1, r6
 80060be:	f001 ff8f 	bl	8007fe0 <__mcmp>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	da65      	bge.n	8006192 <_strtod_l+0x89a>
 80060c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c8:	ea53 030a 	orrs.w	r3, r3, sl
 80060cc:	f040 8087 	bne.w	80061de <_strtod_l+0x8e6>
 80060d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 8082 	bne.w	80061de <_strtod_l+0x8e6>
 80060da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060e6:	d97a      	bls.n	80061de <_strtod_l+0x8e6>
 80060e8:	696b      	ldr	r3, [r5, #20]
 80060ea:	b913      	cbnz	r3, 80060f2 <_strtod_l+0x7fa>
 80060ec:	692b      	ldr	r3, [r5, #16]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	dd75      	ble.n	80061de <_strtod_l+0x8e6>
 80060f2:	4629      	mov	r1, r5
 80060f4:	2201      	movs	r2, #1
 80060f6:	4620      	mov	r0, r4
 80060f8:	f001 ff06 	bl	8007f08 <__lshift>
 80060fc:	4631      	mov	r1, r6
 80060fe:	4605      	mov	r5, r0
 8006100:	f001 ff6e 	bl	8007fe0 <__mcmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	dd6a      	ble.n	80061de <_strtod_l+0x8e6>
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	4a55      	ldr	r2, [pc, #340]	; (8006260 <_strtod_l+0x968>)
 800610c:	465b      	mov	r3, fp
 800610e:	2900      	cmp	r1, #0
 8006110:	f000 8085 	beq.w	800621e <_strtod_l+0x926>
 8006114:	ea02 010b 	and.w	r1, r2, fp
 8006118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800611c:	dc7f      	bgt.n	800621e <_strtod_l+0x926>
 800611e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006122:	f77f aeaa 	ble.w	8005e7a <_strtod_l+0x582>
 8006126:	4a4f      	ldr	r2, [pc, #316]	; (8006264 <_strtod_l+0x96c>)
 8006128:	2300      	movs	r3, #0
 800612a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800612e:	4650      	mov	r0, sl
 8006130:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006134:	4659      	mov	r1, fp
 8006136:	f7fa fa7f 	bl	8000638 <__aeabi_dmul>
 800613a:	460b      	mov	r3, r1
 800613c:	4303      	orrs	r3, r0
 800613e:	bf08      	it	eq
 8006140:	2322      	moveq	r3, #34	; 0x22
 8006142:	4682      	mov	sl, r0
 8006144:	468b      	mov	fp, r1
 8006146:	bf08      	it	eq
 8006148:	6023      	streq	r3, [r4, #0]
 800614a:	e62b      	b.n	8005da4 <_strtod_l+0x4ac>
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	ea03 0a0a 	and.w	sl, r3, sl
 8006158:	e6de      	b.n	8005f18 <_strtod_l+0x620>
 800615a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800615e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006162:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006166:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800616a:	fa01 f308 	lsl.w	r3, r1, r8
 800616e:	930c      	str	r3, [sp, #48]	; 0x30
 8006170:	9111      	str	r1, [sp, #68]	; 0x44
 8006172:	e741      	b.n	8005ff8 <_strtod_l+0x700>
 8006174:	2300      	movs	r3, #0
 8006176:	930c      	str	r3, [sp, #48]	; 0x30
 8006178:	2301      	movs	r3, #1
 800617a:	9311      	str	r3, [sp, #68]	; 0x44
 800617c:	e73c      	b.n	8005ff8 <_strtod_l+0x700>
 800617e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006180:	4642      	mov	r2, r8
 8006182:	4620      	mov	r0, r4
 8006184:	f001 fec0 	bl	8007f08 <__lshift>
 8006188:	901e      	str	r0, [sp, #120]	; 0x78
 800618a:	2800      	cmp	r0, #0
 800618c:	f47f af66 	bne.w	800605c <_strtod_l+0x764>
 8006190:	e5fe      	b.n	8005d90 <_strtod_l+0x498>
 8006192:	465f      	mov	r7, fp
 8006194:	d16e      	bne.n	8006274 <_strtod_l+0x97c>
 8006196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006198:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800619c:	b342      	cbz	r2, 80061f0 <_strtod_l+0x8f8>
 800619e:	4a32      	ldr	r2, [pc, #200]	; (8006268 <_strtod_l+0x970>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d128      	bne.n	80061f6 <_strtod_l+0x8fe>
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	4650      	mov	r0, sl
 80061a8:	b1eb      	cbz	r3, 80061e6 <_strtod_l+0x8ee>
 80061aa:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <_strtod_l+0x968>)
 80061ac:	403a      	ands	r2, r7
 80061ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80061b2:	f04f 31ff 	mov.w	r1, #4294967295
 80061b6:	d819      	bhi.n	80061ec <_strtod_l+0x8f4>
 80061b8:	0d12      	lsrs	r2, r2, #20
 80061ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	4298      	cmp	r0, r3
 80061c4:	d117      	bne.n	80061f6 <_strtod_l+0x8fe>
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <_strtod_l+0x974>)
 80061c8:	429f      	cmp	r7, r3
 80061ca:	d102      	bne.n	80061d2 <_strtod_l+0x8da>
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f addf 	beq.w	8005d90 <_strtod_l+0x498>
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <_strtod_l+0x968>)
 80061d4:	403b      	ands	r3, r7
 80061d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1a0      	bne.n	8006126 <_strtod_l+0x82e>
 80061e4:	e5de      	b.n	8005da4 <_strtod_l+0x4ac>
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	e7ea      	b.n	80061c2 <_strtod_l+0x8ca>
 80061ec:	460b      	mov	r3, r1
 80061ee:	e7e8      	b.n	80061c2 <_strtod_l+0x8ca>
 80061f0:	ea53 030a 	orrs.w	r3, r3, sl
 80061f4:	d088      	beq.n	8006108 <_strtod_l+0x810>
 80061f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f8:	b1db      	cbz	r3, 8006232 <_strtod_l+0x93a>
 80061fa:	423b      	tst	r3, r7
 80061fc:	d0ef      	beq.n	80061de <_strtod_l+0x8e6>
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	9a04      	ldr	r2, [sp, #16]
 8006202:	4650      	mov	r0, sl
 8006204:	4659      	mov	r1, fp
 8006206:	b1c3      	cbz	r3, 800623a <_strtod_l+0x942>
 8006208:	f7ff fb5a 	bl	80058c0 <sulp>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006214:	f7fa f85a 	bl	80002cc <__adddf3>
 8006218:	4682      	mov	sl, r0
 800621a:	468b      	mov	fp, r1
 800621c:	e7df      	b.n	80061de <_strtod_l+0x8e6>
 800621e:	4013      	ands	r3, r2
 8006220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006224:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800622c:	f04f 3aff 	mov.w	sl, #4294967295
 8006230:	e7d5      	b.n	80061de <_strtod_l+0x8e6>
 8006232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006234:	ea13 0f0a 	tst.w	r3, sl
 8006238:	e7e0      	b.n	80061fc <_strtod_l+0x904>
 800623a:	f7ff fb41 	bl	80058c0 <sulp>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006246:	f7fa f83f 	bl	80002c8 <__aeabi_dsub>
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	4682      	mov	sl, r0
 8006250:	468b      	mov	fp, r1
 8006252:	f7fa fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8006256:	2800      	cmp	r0, #0
 8006258:	d0c1      	beq.n	80061de <_strtod_l+0x8e6>
 800625a:	e60e      	b.n	8005e7a <_strtod_l+0x582>
 800625c:	fffffc02 	.word	0xfffffc02
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	39500000 	.word	0x39500000
 8006268:	000fffff 	.word	0x000fffff
 800626c:	7fefffff 	.word	0x7fefffff
 8006270:	0800a458 	.word	0x0800a458
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	f002 f82e 	bl	80082d8 <__ratio>
 800627c:	ec59 8b10 	vmov	r8, r9, d0
 8006280:	ee10 0a10 	vmov	r0, s0
 8006284:	2200      	movs	r2, #0
 8006286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa fc50 	bl	8000b30 <__aeabi_dcmple>
 8006290:	2800      	cmp	r0, #0
 8006292:	d07c      	beq.n	800638e <_strtod_l+0xa96>
 8006294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04c      	beq.n	8006334 <_strtod_l+0xa3c>
 800629a:	4b95      	ldr	r3, [pc, #596]	; (80064f0 <_strtod_l+0xbf8>)
 800629c:	2200      	movs	r2, #0
 800629e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80062a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80064f0 <_strtod_l+0xbf8>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	4b92      	ldr	r3, [pc, #584]	; (80064f4 <_strtod_l+0xbfc>)
 80062ac:	403b      	ands	r3, r7
 80062ae:	9311      	str	r3, [sp, #68]	; 0x44
 80062b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062b2:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <_strtod_l+0xc00>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f040 80b2 	bne.w	800641e <_strtod_l+0xb26>
 80062ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80062c6:	ec4b ab10 	vmov	d0, sl, fp
 80062ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80062ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062d2:	f001 ff29 	bl	8008128 <__ulp>
 80062d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062da:	ec53 2b10 	vmov	r2, r3, d0
 80062de:	f7fa f9ab 	bl	8000638 <__aeabi_dmul>
 80062e2:	4652      	mov	r2, sl
 80062e4:	465b      	mov	r3, fp
 80062e6:	f7f9 fff1 	bl	80002cc <__adddf3>
 80062ea:	460b      	mov	r3, r1
 80062ec:	4981      	ldr	r1, [pc, #516]	; (80064f4 <_strtod_l+0xbfc>)
 80062ee:	4a83      	ldr	r2, [pc, #524]	; (80064fc <_strtod_l+0xc04>)
 80062f0:	4019      	ands	r1, r3
 80062f2:	4291      	cmp	r1, r2
 80062f4:	4682      	mov	sl, r0
 80062f6:	d95e      	bls.n	80063b6 <_strtod_l+0xabe>
 80062f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062fe:	4293      	cmp	r3, r2
 8006300:	d103      	bne.n	800630a <_strtod_l+0xa12>
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006304:	3301      	adds	r3, #1
 8006306:	f43f ad43 	beq.w	8005d90 <_strtod_l+0x498>
 800630a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006508 <_strtod_l+0xc10>
 800630e:	f04f 3aff 	mov.w	sl, #4294967295
 8006312:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006314:	4620      	mov	r0, r4
 8006316:	f001 fbdb 	bl	8007ad0 <_Bfree>
 800631a:	9907      	ldr	r1, [sp, #28]
 800631c:	4620      	mov	r0, r4
 800631e:	f001 fbd7 	bl	8007ad0 <_Bfree>
 8006322:	4631      	mov	r1, r6
 8006324:	4620      	mov	r0, r4
 8006326:	f001 fbd3 	bl	8007ad0 <_Bfree>
 800632a:	4629      	mov	r1, r5
 800632c:	4620      	mov	r0, r4
 800632e:	f001 fbcf 	bl	8007ad0 <_Bfree>
 8006332:	e613      	b.n	8005f5c <_strtod_l+0x664>
 8006334:	f1ba 0f00 	cmp.w	sl, #0
 8006338:	d11b      	bne.n	8006372 <_strtod_l+0xa7a>
 800633a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800633e:	b9f3      	cbnz	r3, 800637e <_strtod_l+0xa86>
 8006340:	4b6b      	ldr	r3, [pc, #428]	; (80064f0 <_strtod_l+0xbf8>)
 8006342:	2200      	movs	r2, #0
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800634c:	b9d0      	cbnz	r0, 8006384 <_strtod_l+0xa8c>
 800634e:	4640      	mov	r0, r8
 8006350:	4649      	mov	r1, r9
 8006352:	4b6b      	ldr	r3, [pc, #428]	; (8006500 <_strtod_l+0xc08>)
 8006354:	2200      	movs	r2, #0
 8006356:	f7fa f96f 	bl	8000638 <__aeabi_dmul>
 800635a:	4680      	mov	r8, r0
 800635c:	4689      	mov	r9, r1
 800635e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006362:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006366:	931b      	str	r3, [sp, #108]	; 0x6c
 8006368:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800636c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006370:	e79b      	b.n	80062aa <_strtod_l+0x9b2>
 8006372:	f1ba 0f01 	cmp.w	sl, #1
 8006376:	d102      	bne.n	800637e <_strtod_l+0xa86>
 8006378:	2f00      	cmp	r7, #0
 800637a:	f43f ad7e 	beq.w	8005e7a <_strtod_l+0x582>
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <_strtod_l+0xc0c>)
 8006380:	2200      	movs	r2, #0
 8006382:	e78c      	b.n	800629e <_strtod_l+0x9a6>
 8006384:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006500 <_strtod_l+0xc08>
 8006388:	f04f 0800 	mov.w	r8, #0
 800638c:	e7e7      	b.n	800635e <_strtod_l+0xa66>
 800638e:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <_strtod_l+0xc08>)
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	2200      	movs	r2, #0
 8006396:	f7fa f94f 	bl	8000638 <__aeabi_dmul>
 800639a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	b933      	cbnz	r3, 80063b0 <_strtod_l+0xab8>
 80063a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a6:	9012      	str	r0, [sp, #72]	; 0x48
 80063a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80063ae:	e7dd      	b.n	800636c <_strtod_l+0xa74>
 80063b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80063b4:	e7f9      	b.n	80063aa <_strtod_l+0xab2>
 80063b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1a8      	bne.n	8006312 <_strtod_l+0xa1a>
 80063c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063c6:	0d1b      	lsrs	r3, r3, #20
 80063c8:	051b      	lsls	r3, r3, #20
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1a1      	bne.n	8006312 <_strtod_l+0xa1a>
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa fce1 	bl	8000d98 <__aeabi_d2lz>
 80063d6:	f7fa f901 	bl	80005dc <__aeabi_l2d>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f7f9 ff71 	bl	80002c8 <__aeabi_dsub>
 80063e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ec:	ea43 030a 	orr.w	r3, r3, sl
 80063f0:	4313      	orrs	r3, r2
 80063f2:	4680      	mov	r8, r0
 80063f4:	4689      	mov	r9, r1
 80063f6:	d053      	beq.n	80064a0 <_strtod_l+0xba8>
 80063f8:	a335      	add	r3, pc, #212	; (adr r3, 80064d0 <_strtod_l+0xbd8>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa fb8d 	bl	8000b1c <__aeabi_dcmplt>
 8006402:	2800      	cmp	r0, #0
 8006404:	f47f acce 	bne.w	8005da4 <_strtod_l+0x4ac>
 8006408:	a333      	add	r3, pc, #204	; (adr r3, 80064d8 <_strtod_l+0xbe0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa fba1 	bl	8000b58 <__aeabi_dcmpgt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f43f af7b 	beq.w	8006312 <_strtod_l+0xa1a>
 800641c:	e4c2      	b.n	8005da4 <_strtod_l+0x4ac>
 800641e:	9b04      	ldr	r3, [sp, #16]
 8006420:	b333      	cbz	r3, 8006470 <_strtod_l+0xb78>
 8006422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006428:	d822      	bhi.n	8006470 <_strtod_l+0xb78>
 800642a:	a32d      	add	r3, pc, #180	; (adr r3, 80064e0 <_strtod_l+0xbe8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fb7c 	bl	8000b30 <__aeabi_dcmple>
 8006438:	b1a0      	cbz	r0, 8006464 <_strtod_l+0xb6c>
 800643a:	4649      	mov	r1, r9
 800643c:	4640      	mov	r0, r8
 800643e:	f7fa fbd3 	bl	8000be8 <__aeabi_d2uiz>
 8006442:	2801      	cmp	r0, #1
 8006444:	bf38      	it	cc
 8006446:	2001      	movcc	r0, #1
 8006448:	f7fa f87c 	bl	8000544 <__aeabi_ui2d>
 800644c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800644e:	4680      	mov	r8, r0
 8006450:	4689      	mov	r9, r1
 8006452:	bb13      	cbnz	r3, 800649a <_strtod_l+0xba2>
 8006454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006458:	9014      	str	r0, [sp, #80]	; 0x50
 800645a:	9315      	str	r3, [sp, #84]	; 0x54
 800645c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006460:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	930d      	str	r3, [sp, #52]	; 0x34
 8006470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006474:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800647c:	f001 fe54 	bl	8008128 <__ulp>
 8006480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006484:	ec53 2b10 	vmov	r2, r3, d0
 8006488:	f7fa f8d6 	bl	8000638 <__aeabi_dmul>
 800648c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006490:	f7f9 ff1c 	bl	80002cc <__adddf3>
 8006494:	4682      	mov	sl, r0
 8006496:	468b      	mov	fp, r1
 8006498:	e78f      	b.n	80063ba <_strtod_l+0xac2>
 800649a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800649e:	e7dd      	b.n	800645c <_strtod_l+0xb64>
 80064a0:	a311      	add	r3, pc, #68	; (adr r3, 80064e8 <_strtod_l+0xbf0>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa fb39 	bl	8000b1c <__aeabi_dcmplt>
 80064aa:	e7b4      	b.n	8006416 <_strtod_l+0xb1e>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930e      	str	r3, [sp, #56]	; 0x38
 80064b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	f7ff ba65 	b.w	8005984 <_strtod_l+0x8c>
 80064ba:	2b65      	cmp	r3, #101	; 0x65
 80064bc:	f43f ab5d 	beq.w	8005b7a <_strtod_l+0x282>
 80064c0:	2b45      	cmp	r3, #69	; 0x45
 80064c2:	f43f ab5a 	beq.w	8005b7a <_strtod_l+0x282>
 80064c6:	2201      	movs	r2, #1
 80064c8:	f7ff bb92 	b.w	8005bf0 <_strtod_l+0x2f8>
 80064cc:	f3af 8000 	nop.w
 80064d0:	94a03595 	.word	0x94a03595
 80064d4:	3fdfffff 	.word	0x3fdfffff
 80064d8:	35afe535 	.word	0x35afe535
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	ffc00000 	.word	0xffc00000
 80064e4:	41dfffff 	.word	0x41dfffff
 80064e8:	94a03595 	.word	0x94a03595
 80064ec:	3fcfffff 	.word	0x3fcfffff
 80064f0:	3ff00000 	.word	0x3ff00000
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	7fe00000 	.word	0x7fe00000
 80064fc:	7c9fffff 	.word	0x7c9fffff
 8006500:	3fe00000 	.word	0x3fe00000
 8006504:	bff00000 	.word	0xbff00000
 8006508:	7fefffff 	.word	0x7fefffff

0800650c <_strtod_r>:
 800650c:	4b01      	ldr	r3, [pc, #4]	; (8006514 <_strtod_r+0x8>)
 800650e:	f7ff b9f3 	b.w	80058f8 <_strtod_l>
 8006512:	bf00      	nop
 8006514:	20000074 	.word	0x20000074

08006518 <_strtol_l.isra.0>:
 8006518:	2b01      	cmp	r3, #1
 800651a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651e:	d001      	beq.n	8006524 <_strtol_l.isra.0+0xc>
 8006520:	2b24      	cmp	r3, #36	; 0x24
 8006522:	d906      	bls.n	8006532 <_strtol_l.isra.0+0x1a>
 8006524:	f7fe fafa 	bl	8004b1c <__errno>
 8006528:	2316      	movs	r3, #22
 800652a:	6003      	str	r3, [r0, #0]
 800652c:	2000      	movs	r0, #0
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	4f3a      	ldr	r7, [pc, #232]	; (800661c <_strtol_l.isra.0+0x104>)
 8006534:	468e      	mov	lr, r1
 8006536:	4676      	mov	r6, lr
 8006538:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800653c:	5de5      	ldrb	r5, [r4, r7]
 800653e:	f015 0508 	ands.w	r5, r5, #8
 8006542:	d1f8      	bne.n	8006536 <_strtol_l.isra.0+0x1e>
 8006544:	2c2d      	cmp	r4, #45	; 0x2d
 8006546:	d134      	bne.n	80065b2 <_strtol_l.isra.0+0x9a>
 8006548:	f89e 4000 	ldrb.w	r4, [lr]
 800654c:	f04f 0801 	mov.w	r8, #1
 8006550:	f106 0e02 	add.w	lr, r6, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <_strtol_l.isra.0+0xfa>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d10c      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 800655c:	2c30      	cmp	r4, #48	; 0x30
 800655e:	d10a      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 8006560:	f89e 4000 	ldrb.w	r4, [lr]
 8006564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006568:	2c58      	cmp	r4, #88	; 0x58
 800656a:	d14d      	bne.n	8006608 <_strtol_l.isra.0+0xf0>
 800656c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006570:	2310      	movs	r3, #16
 8006572:	f10e 0e02 	add.w	lr, lr, #2
 8006576:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800657a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800657e:	2600      	movs	r6, #0
 8006580:	fbbc f9f3 	udiv	r9, ip, r3
 8006584:	4635      	mov	r5, r6
 8006586:	fb03 ca19 	mls	sl, r3, r9, ip
 800658a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800658e:	2f09      	cmp	r7, #9
 8006590:	d818      	bhi.n	80065c4 <_strtol_l.isra.0+0xac>
 8006592:	463c      	mov	r4, r7
 8006594:	42a3      	cmp	r3, r4
 8006596:	dd24      	ble.n	80065e2 <_strtol_l.isra.0+0xca>
 8006598:	2e00      	cmp	r6, #0
 800659a:	db1f      	blt.n	80065dc <_strtol_l.isra.0+0xc4>
 800659c:	45a9      	cmp	r9, r5
 800659e:	d31d      	bcc.n	80065dc <_strtol_l.isra.0+0xc4>
 80065a0:	d101      	bne.n	80065a6 <_strtol_l.isra.0+0x8e>
 80065a2:	45a2      	cmp	sl, r4
 80065a4:	db1a      	blt.n	80065dc <_strtol_l.isra.0+0xc4>
 80065a6:	fb05 4503 	mla	r5, r5, r3, r4
 80065aa:	2601      	movs	r6, #1
 80065ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80065b0:	e7eb      	b.n	800658a <_strtol_l.isra.0+0x72>
 80065b2:	2c2b      	cmp	r4, #43	; 0x2b
 80065b4:	bf08      	it	eq
 80065b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80065ba:	46a8      	mov	r8, r5
 80065bc:	bf08      	it	eq
 80065be:	f106 0e02 	addeq.w	lr, r6, #2
 80065c2:	e7c7      	b.n	8006554 <_strtol_l.isra.0+0x3c>
 80065c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80065c8:	2f19      	cmp	r7, #25
 80065ca:	d801      	bhi.n	80065d0 <_strtol_l.isra.0+0xb8>
 80065cc:	3c37      	subs	r4, #55	; 0x37
 80065ce:	e7e1      	b.n	8006594 <_strtol_l.isra.0+0x7c>
 80065d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80065d4:	2f19      	cmp	r7, #25
 80065d6:	d804      	bhi.n	80065e2 <_strtol_l.isra.0+0xca>
 80065d8:	3c57      	subs	r4, #87	; 0x57
 80065da:	e7db      	b.n	8006594 <_strtol_l.isra.0+0x7c>
 80065dc:	f04f 36ff 	mov.w	r6, #4294967295
 80065e0:	e7e4      	b.n	80065ac <_strtol_l.isra.0+0x94>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	da05      	bge.n	80065f2 <_strtol_l.isra.0+0xda>
 80065e6:	2322      	movs	r3, #34	; 0x22
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	4665      	mov	r5, ip
 80065ec:	b942      	cbnz	r2, 8006600 <_strtol_l.isra.0+0xe8>
 80065ee:	4628      	mov	r0, r5
 80065f0:	e79d      	b.n	800652e <_strtol_l.isra.0+0x16>
 80065f2:	f1b8 0f00 	cmp.w	r8, #0
 80065f6:	d000      	beq.n	80065fa <_strtol_l.isra.0+0xe2>
 80065f8:	426d      	negs	r5, r5
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d0f7      	beq.n	80065ee <_strtol_l.isra.0+0xd6>
 80065fe:	b10e      	cbz	r6, 8006604 <_strtol_l.isra.0+0xec>
 8006600:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006604:	6011      	str	r1, [r2, #0]
 8006606:	e7f2      	b.n	80065ee <_strtol_l.isra.0+0xd6>
 8006608:	2430      	movs	r4, #48	; 0x30
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1b3      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 800660e:	2308      	movs	r3, #8
 8006610:	e7b1      	b.n	8006576 <_strtol_l.isra.0+0x5e>
 8006612:	2c30      	cmp	r4, #48	; 0x30
 8006614:	d0a4      	beq.n	8006560 <_strtol_l.isra.0+0x48>
 8006616:	230a      	movs	r3, #10
 8006618:	e7ad      	b.n	8006576 <_strtol_l.isra.0+0x5e>
 800661a:	bf00      	nop
 800661c:	0800a481 	.word	0x0800a481

08006620 <_strtol_r>:
 8006620:	f7ff bf7a 	b.w	8006518 <_strtol_l.isra.0>

08006624 <quorem>:
 8006624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	6903      	ldr	r3, [r0, #16]
 800662a:	690c      	ldr	r4, [r1, #16]
 800662c:	42a3      	cmp	r3, r4
 800662e:	4607      	mov	r7, r0
 8006630:	f2c0 8081 	blt.w	8006736 <quorem+0x112>
 8006634:	3c01      	subs	r4, #1
 8006636:	f101 0814 	add.w	r8, r1, #20
 800663a:	f100 0514 	add.w	r5, r0, #20
 800663e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800664c:	3301      	adds	r3, #1
 800664e:	429a      	cmp	r2, r3
 8006650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006658:	fbb2 f6f3 	udiv	r6, r2, r3
 800665c:	d331      	bcc.n	80066c2 <quorem+0x9e>
 800665e:	f04f 0e00 	mov.w	lr, #0
 8006662:	4640      	mov	r0, r8
 8006664:	46ac      	mov	ip, r5
 8006666:	46f2      	mov	sl, lr
 8006668:	f850 2b04 	ldr.w	r2, [r0], #4
 800666c:	b293      	uxth	r3, r2
 800666e:	fb06 e303 	mla	r3, r6, r3, lr
 8006672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006676:	b29b      	uxth	r3, r3
 8006678:	ebaa 0303 	sub.w	r3, sl, r3
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	f8dc a000 	ldr.w	sl, [ip]
 8006682:	fb06 e202 	mla	r2, r6, r2, lr
 8006686:	fa13 f38a 	uxtah	r3, r3, sl
 800668a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800668e:	fa1f fa82 	uxth.w	sl, r2
 8006692:	f8dc 2000 	ldr.w	r2, [ip]
 8006696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800669a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a4:	4581      	cmp	r9, r0
 80066a6:	f84c 3b04 	str.w	r3, [ip], #4
 80066aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066ae:	d2db      	bcs.n	8006668 <quorem+0x44>
 80066b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80066b4:	b92b      	cbnz	r3, 80066c2 <quorem+0x9e>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	3b04      	subs	r3, #4
 80066ba:	429d      	cmp	r5, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	d32e      	bcc.n	800671e <quorem+0xfa>
 80066c0:	613c      	str	r4, [r7, #16]
 80066c2:	4638      	mov	r0, r7
 80066c4:	f001 fc8c 	bl	8007fe0 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	db24      	blt.n	8006716 <quorem+0xf2>
 80066cc:	3601      	adds	r6, #1
 80066ce:	4628      	mov	r0, r5
 80066d0:	f04f 0c00 	mov.w	ip, #0
 80066d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80066d8:	f8d0 e000 	ldr.w	lr, [r0]
 80066dc:	b293      	uxth	r3, r2
 80066de:	ebac 0303 	sub.w	r3, ip, r3
 80066e2:	0c12      	lsrs	r2, r2, #16
 80066e4:	fa13 f38e 	uxtah	r3, r3, lr
 80066e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f6:	45c1      	cmp	r9, r8
 80066f8:	f840 3b04 	str.w	r3, [r0], #4
 80066fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006700:	d2e8      	bcs.n	80066d4 <quorem+0xb0>
 8006702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	b922      	cbnz	r2, 8006716 <quorem+0xf2>
 800670c:	3b04      	subs	r3, #4
 800670e:	429d      	cmp	r5, r3
 8006710:	461a      	mov	r2, r3
 8006712:	d30a      	bcc.n	800672a <quorem+0x106>
 8006714:	613c      	str	r4, [r7, #16]
 8006716:	4630      	mov	r0, r6
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	3b04      	subs	r3, #4
 8006722:	2a00      	cmp	r2, #0
 8006724:	d1cc      	bne.n	80066c0 <quorem+0x9c>
 8006726:	3c01      	subs	r4, #1
 8006728:	e7c7      	b.n	80066ba <quorem+0x96>
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	3b04      	subs	r3, #4
 800672e:	2a00      	cmp	r2, #0
 8006730:	d1f0      	bne.n	8006714 <quorem+0xf0>
 8006732:	3c01      	subs	r4, #1
 8006734:	e7eb      	b.n	800670e <quorem+0xea>
 8006736:	2000      	movs	r0, #0
 8006738:	e7ee      	b.n	8006718 <quorem+0xf4>
 800673a:	0000      	movs	r0, r0
 800673c:	0000      	movs	r0, r0
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b02 	vpush	{d8}
 8006748:	ec57 6b10 	vmov	r6, r7, d0
 800674c:	b095      	sub	sp, #84	; 0x54
 800674e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006754:	9105      	str	r1, [sp, #20]
 8006756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800675a:	4604      	mov	r4, r0
 800675c:	9209      	str	r2, [sp, #36]	; 0x24
 800675e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006760:	b975      	cbnz	r5, 8006780 <_dtoa_r+0x40>
 8006762:	2010      	movs	r0, #16
 8006764:	f001 f94c 	bl	8007a00 <malloc>
 8006768:	4602      	mov	r2, r0
 800676a:	6260      	str	r0, [r4, #36]	; 0x24
 800676c:	b920      	cbnz	r0, 8006778 <_dtoa_r+0x38>
 800676e:	4bb2      	ldr	r3, [pc, #712]	; (8006a38 <_dtoa_r+0x2f8>)
 8006770:	21ea      	movs	r1, #234	; 0xea
 8006772:	48b2      	ldr	r0, [pc, #712]	; (8006a3c <_dtoa_r+0x2fc>)
 8006774:	f002 f874 	bl	8008860 <__assert_func>
 8006778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800677c:	6005      	str	r5, [r0, #0]
 800677e:	60c5      	str	r5, [r0, #12]
 8006780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	b151      	cbz	r1, 800679c <_dtoa_r+0x5c>
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	604a      	str	r2, [r1, #4]
 800678a:	2301      	movs	r3, #1
 800678c:	4093      	lsls	r3, r2
 800678e:	608b      	str	r3, [r1, #8]
 8006790:	4620      	mov	r0, r4
 8006792:	f001 f99d 	bl	8007ad0 <_Bfree>
 8006796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	1e3b      	subs	r3, r7, #0
 800679e:	bfb9      	ittee	lt
 80067a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	9303      	strlt	r3, [sp, #12]
 80067a6:	2300      	movge	r3, #0
 80067a8:	f8c8 3000 	strge.w	r3, [r8]
 80067ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80067b0:	4ba3      	ldr	r3, [pc, #652]	; (8006a40 <_dtoa_r+0x300>)
 80067b2:	bfbc      	itt	lt
 80067b4:	2201      	movlt	r2, #1
 80067b6:	f8c8 2000 	strlt.w	r2, [r8]
 80067ba:	ea33 0309 	bics.w	r3, r3, r9
 80067be:	d11b      	bne.n	80067f8 <_dtoa_r+0xb8>
 80067c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067cc:	4333      	orrs	r3, r6
 80067ce:	f000 857a 	beq.w	80072c6 <_dtoa_r+0xb86>
 80067d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d4:	b963      	cbnz	r3, 80067f0 <_dtoa_r+0xb0>
 80067d6:	4b9b      	ldr	r3, [pc, #620]	; (8006a44 <_dtoa_r+0x304>)
 80067d8:	e024      	b.n	8006824 <_dtoa_r+0xe4>
 80067da:	4b9b      	ldr	r3, [pc, #620]	; (8006a48 <_dtoa_r+0x308>)
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	9800      	ldr	r0, [sp, #0]
 80067e6:	b015      	add	sp, #84	; 0x54
 80067e8:	ecbd 8b02 	vpop	{d8}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <_dtoa_r+0x304>)
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	3303      	adds	r3, #3
 80067f6:	e7f3      	b.n	80067e0 <_dtoa_r+0xa0>
 80067f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	ec51 0b17 	vmov	r0, r1, d7
 8006802:	2300      	movs	r3, #0
 8006804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006808:	f7fa f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800680c:	4680      	mov	r8, r0
 800680e:	b158      	cbz	r0, 8006828 <_dtoa_r+0xe8>
 8006810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006812:	2301      	movs	r3, #1
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8551 	beq.w	80072c0 <_dtoa_r+0xb80>
 800681e:	488b      	ldr	r0, [pc, #556]	; (8006a4c <_dtoa_r+0x30c>)
 8006820:	6018      	str	r0, [r3, #0]
 8006822:	1e43      	subs	r3, r0, #1
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	e7dd      	b.n	80067e4 <_dtoa_r+0xa4>
 8006828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800682c:	aa12      	add	r2, sp, #72	; 0x48
 800682e:	a913      	add	r1, sp, #76	; 0x4c
 8006830:	4620      	mov	r0, r4
 8006832:	f001 fcf5 	bl	8008220 <__d2b>
 8006836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800683a:	4683      	mov	fp, r0
 800683c:	2d00      	cmp	r5, #0
 800683e:	d07c      	beq.n	800693a <_dtoa_r+0x1fa>
 8006840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800684a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800684e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800685a:	4b7d      	ldr	r3, [pc, #500]	; (8006a50 <_dtoa_r+0x310>)
 800685c:	2200      	movs	r2, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fd31 	bl	80002c8 <__aeabi_dsub>
 8006866:	a36e      	add	r3, pc, #440	; (adr r3, 8006a20 <_dtoa_r+0x2e0>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fee4 	bl	8000638 <__aeabi_dmul>
 8006870:	a36d      	add	r3, pc, #436	; (adr r3, 8006a28 <_dtoa_r+0x2e8>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fd29 	bl	80002cc <__adddf3>
 800687a:	4606      	mov	r6, r0
 800687c:	4628      	mov	r0, r5
 800687e:	460f      	mov	r7, r1
 8006880:	f7f9 fe70 	bl	8000564 <__aeabi_i2d>
 8006884:	a36a      	add	r3, pc, #424	; (adr r3, 8006a30 <_dtoa_r+0x2f0>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fed5 	bl	8000638 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fd19 	bl	80002cc <__adddf3>
 800689a:	4606      	mov	r6, r0
 800689c:	460f      	mov	r7, r1
 800689e:	f7fa f97b 	bl	8000b98 <__aeabi_d2iz>
 80068a2:	2200      	movs	r2, #0
 80068a4:	4682      	mov	sl, r0
 80068a6:	2300      	movs	r3, #0
 80068a8:	4630      	mov	r0, r6
 80068aa:	4639      	mov	r1, r7
 80068ac:	f7fa f936 	bl	8000b1c <__aeabi_dcmplt>
 80068b0:	b148      	cbz	r0, 80068c6 <_dtoa_r+0x186>
 80068b2:	4650      	mov	r0, sl
 80068b4:	f7f9 fe56 	bl	8000564 <__aeabi_i2d>
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	f7fa f924 	bl	8000b08 <__aeabi_dcmpeq>
 80068c0:	b908      	cbnz	r0, 80068c6 <_dtoa_r+0x186>
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c6:	f1ba 0f16 	cmp.w	sl, #22
 80068ca:	d854      	bhi.n	8006976 <_dtoa_r+0x236>
 80068cc:	4b61      	ldr	r3, [pc, #388]	; (8006a54 <_dtoa_r+0x314>)
 80068ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068da:	f7fa f91f 	bl	8000b1c <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d04b      	beq.n	800697a <_dtoa_r+0x23a>
 80068e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068e6:	2300      	movs	r3, #0
 80068e8:	930e      	str	r3, [sp, #56]	; 0x38
 80068ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ec:	1b5d      	subs	r5, r3, r5
 80068ee:	1e6b      	subs	r3, r5, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	bf43      	ittte	mi
 80068f4:	2300      	movmi	r3, #0
 80068f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80068fa:	9304      	strmi	r3, [sp, #16]
 80068fc:	f04f 0800 	movpl.w	r8, #0
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	db3b      	blt.n	800697e <_dtoa_r+0x23e>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800690c:	4453      	add	r3, sl
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	2300      	movs	r3, #0
 8006912:	9306      	str	r3, [sp, #24]
 8006914:	9b05      	ldr	r3, [sp, #20]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d869      	bhi.n	80069ee <_dtoa_r+0x2ae>
 800691a:	2b05      	cmp	r3, #5
 800691c:	bfc4      	itt	gt
 800691e:	3b04      	subgt	r3, #4
 8006920:	9305      	strgt	r3, [sp, #20]
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	f1a3 0302 	sub.w	r3, r3, #2
 8006928:	bfcc      	ite	gt
 800692a:	2500      	movgt	r5, #0
 800692c:	2501      	movle	r5, #1
 800692e:	2b03      	cmp	r3, #3
 8006930:	d869      	bhi.n	8006a06 <_dtoa_r+0x2c6>
 8006932:	e8df f003 	tbb	[pc, r3]
 8006936:	4e2c      	.short	0x4e2c
 8006938:	5a4c      	.short	0x5a4c
 800693a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800693e:	441d      	add	r5, r3
 8006940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006944:	2b20      	cmp	r3, #32
 8006946:	bfc1      	itttt	gt
 8006948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800694c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006950:	fa09 f303 	lslgt.w	r3, r9, r3
 8006954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006958:	bfda      	itte	le
 800695a:	f1c3 0320 	rsble	r3, r3, #32
 800695e:	fa06 f003 	lslle.w	r0, r6, r3
 8006962:	4318      	orrgt	r0, r3
 8006964:	f7f9 fdee 	bl	8000544 <__aeabi_ui2d>
 8006968:	2301      	movs	r3, #1
 800696a:	4606      	mov	r6, r0
 800696c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006970:	3d01      	subs	r5, #1
 8006972:	9310      	str	r3, [sp, #64]	; 0x40
 8006974:	e771      	b.n	800685a <_dtoa_r+0x11a>
 8006976:	2301      	movs	r3, #1
 8006978:	e7b6      	b.n	80068e8 <_dtoa_r+0x1a8>
 800697a:	900e      	str	r0, [sp, #56]	; 0x38
 800697c:	e7b5      	b.n	80068ea <_dtoa_r+0x1aa>
 800697e:	f1ca 0300 	rsb	r3, sl, #0
 8006982:	9306      	str	r3, [sp, #24]
 8006984:	2300      	movs	r3, #0
 8006986:	eba8 080a 	sub.w	r8, r8, sl
 800698a:	930d      	str	r3, [sp, #52]	; 0x34
 800698c:	e7c2      	b.n	8006914 <_dtoa_r+0x1d4>
 800698e:	2300      	movs	r3, #0
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc39      	bgt.n	8006a0c <_dtoa_r+0x2cc>
 8006998:	f04f 0901 	mov.w	r9, #1
 800699c:	f8cd 9004 	str.w	r9, [sp, #4]
 80069a0:	464b      	mov	r3, r9
 80069a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80069a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	6042      	str	r2, [r0, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f102 0614 	add.w	r6, r2, #20
 80069b2:	429e      	cmp	r6, r3
 80069b4:	6841      	ldr	r1, [r0, #4]
 80069b6:	d92f      	bls.n	8006a18 <_dtoa_r+0x2d8>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 f849 	bl	8007a50 <_Balloc>
 80069be:	9000      	str	r0, [sp, #0]
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d14b      	bne.n	8006a5c <_dtoa_r+0x31c>
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <_dtoa_r+0x318>)
 80069c6:	4602      	mov	r2, r0
 80069c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069cc:	e6d1      	b.n	8006772 <_dtoa_r+0x32>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7de      	b.n	8006990 <_dtoa_r+0x250>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9308      	str	r3, [sp, #32]
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	eb0a 0903 	add.w	r9, sl, r3
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	bfb8      	it	lt
 80069e6:	2301      	movlt	r3, #1
 80069e8:	e7dd      	b.n	80069a6 <_dtoa_r+0x266>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7f2      	b.n	80069d4 <_dtoa_r+0x294>
 80069ee:	2501      	movs	r5, #1
 80069f0:	2300      	movs	r3, #0
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	9508      	str	r5, [sp, #32]
 80069f6:	f04f 39ff 	mov.w	r9, #4294967295
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a00:	2312      	movs	r3, #18
 8006a02:	9209      	str	r2, [sp, #36]	; 0x24
 8006a04:	e7cf      	b.n	80069a6 <_dtoa_r+0x266>
 8006a06:	2301      	movs	r3, #1
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	e7f4      	b.n	80069f6 <_dtoa_r+0x2b6>
 8006a0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a14:	464b      	mov	r3, r9
 8006a16:	e7c6      	b.n	80069a6 <_dtoa_r+0x266>
 8006a18:	3101      	adds	r1, #1
 8006a1a:	6041      	str	r1, [r0, #4]
 8006a1c:	0052      	lsls	r2, r2, #1
 8006a1e:	e7c6      	b.n	80069ae <_dtoa_r+0x26e>
 8006a20:	636f4361 	.word	0x636f4361
 8006a24:	3fd287a7 	.word	0x3fd287a7
 8006a28:	8b60c8b3 	.word	0x8b60c8b3
 8006a2c:	3fc68a28 	.word	0x3fc68a28
 8006a30:	509f79fb 	.word	0x509f79fb
 8006a34:	3fd34413 	.word	0x3fd34413
 8006a38:	0800a58e 	.word	0x0800a58e
 8006a3c:	0800a5a5 	.word	0x0800a5a5
 8006a40:	7ff00000 	.word	0x7ff00000
 8006a44:	0800a58a 	.word	0x0800a58a
 8006a48:	0800a581 	.word	0x0800a581
 8006a4c:	0800a405 	.word	0x0800a405
 8006a50:	3ff80000 	.word	0x3ff80000
 8006a54:	0800a720 	.word	0x0800a720
 8006a58:	0800a604 	.word	0x0800a604
 8006a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a5e:	9a00      	ldr	r2, [sp, #0]
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	2b0e      	cmp	r3, #14
 8006a66:	f200 80ad 	bhi.w	8006bc4 <_dtoa_r+0x484>
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	f000 80aa 	beq.w	8006bc4 <_dtoa_r+0x484>
 8006a70:	f1ba 0f00 	cmp.w	sl, #0
 8006a74:	dd36      	ble.n	8006ae4 <_dtoa_r+0x3a4>
 8006a76:	4ac3      	ldr	r2, [pc, #780]	; (8006d84 <_dtoa_r+0x644>)
 8006a78:	f00a 030f 	and.w	r3, sl, #15
 8006a7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a80:	ed93 7b00 	vldr	d7, [r3]
 8006a84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8006a90:	eef0 8a67 	vmov.f32	s17, s15
 8006a94:	d016      	beq.n	8006ac4 <_dtoa_r+0x384>
 8006a96:	4bbc      	ldr	r3, [pc, #752]	; (8006d88 <_dtoa_r+0x648>)
 8006a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aa0:	f7f9 fef4 	bl	800088c <__aeabi_ddiv>
 8006aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa8:	f007 070f 	and.w	r7, r7, #15
 8006aac:	2503      	movs	r5, #3
 8006aae:	4eb6      	ldr	r6, [pc, #728]	; (8006d88 <_dtoa_r+0x648>)
 8006ab0:	b957      	cbnz	r7, 8006ac8 <_dtoa_r+0x388>
 8006ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab6:	ec53 2b18 	vmov	r2, r3, d8
 8006aba:	f7f9 fee7 	bl	800088c <__aeabi_ddiv>
 8006abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac2:	e029      	b.n	8006b18 <_dtoa_r+0x3d8>
 8006ac4:	2502      	movs	r5, #2
 8006ac6:	e7f2      	b.n	8006aae <_dtoa_r+0x36e>
 8006ac8:	07f9      	lsls	r1, r7, #31
 8006aca:	d508      	bpl.n	8006ade <_dtoa_r+0x39e>
 8006acc:	ec51 0b18 	vmov	r0, r1, d8
 8006ad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ad4:	f7f9 fdb0 	bl	8000638 <__aeabi_dmul>
 8006ad8:	ec41 0b18 	vmov	d8, r0, r1
 8006adc:	3501      	adds	r5, #1
 8006ade:	107f      	asrs	r7, r7, #1
 8006ae0:	3608      	adds	r6, #8
 8006ae2:	e7e5      	b.n	8006ab0 <_dtoa_r+0x370>
 8006ae4:	f000 80a6 	beq.w	8006c34 <_dtoa_r+0x4f4>
 8006ae8:	f1ca 0600 	rsb	r6, sl, #0
 8006aec:	4ba5      	ldr	r3, [pc, #660]	; (8006d84 <_dtoa_r+0x644>)
 8006aee:	4fa6      	ldr	r7, [pc, #664]	; (8006d88 <_dtoa_r+0x648>)
 8006af0:	f006 020f 	and.w	r2, r6, #15
 8006af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b08:	1136      	asrs	r6, r6, #4
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2502      	movs	r5, #2
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	f040 8085 	bne.w	8006c1e <_dtoa_r+0x4de>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1d2      	bne.n	8006abe <_dtoa_r+0x37e>
 8006b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 808c 	beq.w	8006c38 <_dtoa_r+0x4f8>
 8006b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b24:	4b99      	ldr	r3, [pc, #612]	; (8006d8c <_dtoa_r+0x64c>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fff6 	bl	8000b1c <__aeabi_dcmplt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f000 8081 	beq.w	8006c38 <_dtoa_r+0x4f8>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d07d      	beq.n	8006c38 <_dtoa_r+0x4f8>
 8006b3c:	f1b9 0f00 	cmp.w	r9, #0
 8006b40:	dd3c      	ble.n	8006bbc <_dtoa_r+0x47c>
 8006b42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <_dtoa_r+0x650>)
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 fd72 	bl	8000638 <__aeabi_dmul>
 8006b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b58:	3501      	adds	r5, #1
 8006b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006b5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fcfe 	bl	8000564 <__aeabi_i2d>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7f9 fd64 	bl	8000638 <__aeabi_dmul>
 8006b70:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <_dtoa_r+0x654>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fbaa 	bl	80002cc <__adddf3>
 8006b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d15c      	bne.n	8006c42 <_dtoa_r+0x502>
 8006b88:	4b83      	ldr	r3, [pc, #524]	; (8006d98 <_dtoa_r+0x658>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 fb9a 	bl	80002c8 <__aeabi_dsub>
 8006b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b98:	4606      	mov	r6, r0
 8006b9a:	460f      	mov	r7, r1
 8006b9c:	f7f9 ffdc 	bl	8000b58 <__aeabi_dcmpgt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f040 8296 	bne.w	80070d2 <_dtoa_r+0x992>
 8006ba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006baa:	4630      	mov	r0, r6
 8006bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f040 8288 	bne.w	80070cc <_dtoa_r+0x98c>
 8006bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f2c0 8158 	blt.w	8006e7c <_dtoa_r+0x73c>
 8006bcc:	f1ba 0f0e 	cmp.w	sl, #14
 8006bd0:	f300 8154 	bgt.w	8006e7c <_dtoa_r+0x73c>
 8006bd4:	4b6b      	ldr	r3, [pc, #428]	; (8006d84 <_dtoa_r+0x644>)
 8006bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f280 80e3 	bge.w	8006dac <_dtoa_r+0x66c>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f300 80df 	bgt.w	8006dac <_dtoa_r+0x66c>
 8006bee:	f040 826d 	bne.w	80070cc <_dtoa_r+0x98c>
 8006bf2:	4b69      	ldr	r3, [pc, #420]	; (8006d98 <_dtoa_r+0x658>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 fd1d 	bl	8000638 <__aeabi_dmul>
 8006bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c02:	f7f9 ff9f 	bl	8000b44 <__aeabi_dcmpge>
 8006c06:	9e01      	ldr	r6, [sp, #4]
 8006c08:	4637      	mov	r7, r6
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	f040 8243 	bne.w	8007096 <_dtoa_r+0x956>
 8006c10:	9d00      	ldr	r5, [sp, #0]
 8006c12:	2331      	movs	r3, #49	; 0x31
 8006c14:	f805 3b01 	strb.w	r3, [r5], #1
 8006c18:	f10a 0a01 	add.w	sl, sl, #1
 8006c1c:	e23f      	b.n	800709e <_dtoa_r+0x95e>
 8006c1e:	07f2      	lsls	r2, r6, #31
 8006c20:	d505      	bpl.n	8006c2e <_dtoa_r+0x4ee>
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	f7f9 fd07 	bl	8000638 <__aeabi_dmul>
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	1076      	asrs	r6, r6, #1
 8006c30:	3708      	adds	r7, #8
 8006c32:	e76c      	b.n	8006b0e <_dtoa_r+0x3ce>
 8006c34:	2502      	movs	r5, #2
 8006c36:	e76f      	b.n	8006b18 <_dtoa_r+0x3d8>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c40:	e78d      	b.n	8006b5e <_dtoa_r+0x41e>
 8006c42:	9900      	ldr	r1, [sp, #0]
 8006c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c48:	4b4e      	ldr	r3, [pc, #312]	; (8006d84 <_dtoa_r+0x644>)
 8006c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c4e:	4401      	add	r1, r0
 8006c50:	9102      	str	r1, [sp, #8]
 8006c52:	9908      	ldr	r1, [sp, #32]
 8006c54:	eeb0 8a47 	vmov.f32	s16, s14
 8006c58:	eef0 8a67 	vmov.f32	s17, s15
 8006c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c64:	2900      	cmp	r1, #0
 8006c66:	d045      	beq.n	8006cf4 <_dtoa_r+0x5b4>
 8006c68:	494c      	ldr	r1, [pc, #304]	; (8006d9c <_dtoa_r+0x65c>)
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f7f9 fe0e 	bl	800088c <__aeabi_ddiv>
 8006c70:	ec53 2b18 	vmov	r2, r3, d8
 8006c74:	f7f9 fb28 	bl	80002c8 <__aeabi_dsub>
 8006c78:	9d00      	ldr	r5, [sp, #0]
 8006c7a:	ec41 0b18 	vmov	d8, r0, r1
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7f9 ff89 	bl	8000b98 <__aeabi_d2iz>
 8006c86:	900c      	str	r0, [sp, #48]	; 0x30
 8006c88:	f7f9 fc6c 	bl	8000564 <__aeabi_i2d>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 fb18 	bl	80002c8 <__aeabi_dsub>
 8006c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c9a:	3330      	adds	r3, #48	; 0x30
 8006c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8006ca0:	ec53 2b18 	vmov	r2, r3, d8
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d165      	bne.n	8006d7c <_dtoa_r+0x63c>
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4935      	ldr	r1, [pc, #212]	; (8006d8c <_dtoa_r+0x64c>)
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f7f9 fb06 	bl	80002c8 <__aeabi_dsub>
 8006cbc:	ec53 2b18 	vmov	r2, r3, d8
 8006cc0:	f7f9 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 80b9 	bne.w	8006e3c <_dtoa_r+0x6fc>
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	f43f af75 	beq.w	8006bbc <_dtoa_r+0x47c>
 8006cd2:	4b2f      	ldr	r3, [pc, #188]	; (8006d90 <_dtoa_r+0x650>)
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f7f9 fcad 	bl	8000638 <__aeabi_dmul>
 8006cde:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <_dtoa_r+0x650>)
 8006ce0:	ec41 0b18 	vmov	d8, r0, r1
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fca5 	bl	8000638 <__aeabi_dmul>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	e7c4      	b.n	8006c7e <_dtoa_r+0x53e>
 8006cf4:	ec51 0b17 	vmov	r0, r1, d7
 8006cf8:	f7f9 fc9e 	bl	8000638 <__aeabi_dmul>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	9d00      	ldr	r5, [sp, #0]
 8006d00:	930c      	str	r3, [sp, #48]	; 0x30
 8006d02:	ec41 0b18 	vmov	d8, r0, r1
 8006d06:	4639      	mov	r1, r7
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7f9 ff45 	bl	8000b98 <__aeabi_d2iz>
 8006d0e:	9011      	str	r0, [sp, #68]	; 0x44
 8006d10:	f7f9 fc28 	bl	8000564 <__aeabi_i2d>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d22:	3330      	adds	r3, #48	; 0x30
 8006d24:	f805 3b01 	strb.w	r3, [r5], #1
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	d134      	bne.n	8006da0 <_dtoa_r+0x660>
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <_dtoa_r+0x65c>)
 8006d38:	ec51 0b18 	vmov	r0, r1, d8
 8006d3c:	f7f9 fac6 	bl	80002cc <__adddf3>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 ff06 	bl	8000b58 <__aeabi_dcmpgt>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d175      	bne.n	8006e3c <_dtoa_r+0x6fc>
 8006d50:	ec53 2b18 	vmov	r2, r3, d8
 8006d54:	4911      	ldr	r1, [pc, #68]	; (8006d9c <_dtoa_r+0x65c>)
 8006d56:	2000      	movs	r0, #0
 8006d58:	f7f9 fab6 	bl	80002c8 <__aeabi_dsub>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4630      	mov	r0, r6
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 feda 	bl	8000b1c <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f43f af27 	beq.w	8006bbc <_dtoa_r+0x47c>
 8006d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d70:	1e6b      	subs	r3, r5, #1
 8006d72:	930c      	str	r3, [sp, #48]	; 0x30
 8006d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d0f8      	beq.n	8006d6e <_dtoa_r+0x62e>
 8006d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d80:	e04a      	b.n	8006e18 <_dtoa_r+0x6d8>
 8006d82:	bf00      	nop
 8006d84:	0800a720 	.word	0x0800a720
 8006d88:	0800a6f8 	.word	0x0800a6f8
 8006d8c:	3ff00000 	.word	0x3ff00000
 8006d90:	40240000 	.word	0x40240000
 8006d94:	401c0000 	.word	0x401c0000
 8006d98:	40140000 	.word	0x40140000
 8006d9c:	3fe00000 	.word	0x3fe00000
 8006da0:	4baf      	ldr	r3, [pc, #700]	; (8007060 <_dtoa_r+0x920>)
 8006da2:	f7f9 fc49 	bl	8000638 <__aeabi_dmul>
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	e7ac      	b.n	8006d06 <_dtoa_r+0x5c6>
 8006dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006db0:	9d00      	ldr	r5, [sp, #0]
 8006db2:	4642      	mov	r2, r8
 8006db4:	464b      	mov	r3, r9
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fd67 	bl	800088c <__aeabi_ddiv>
 8006dbe:	f7f9 feeb 	bl	8000b98 <__aeabi_d2iz>
 8006dc2:	9002      	str	r0, [sp, #8]
 8006dc4:	f7f9 fbce 	bl	8000564 <__aeabi_i2d>
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	f7f9 fc34 	bl	8000638 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fa76 	bl	80002c8 <__aeabi_dsub>
 8006ddc:	9e02      	ldr	r6, [sp, #8]
 8006dde:	9f01      	ldr	r7, [sp, #4]
 8006de0:	3630      	adds	r6, #48	; 0x30
 8006de2:	f805 6b01 	strb.w	r6, [r5], #1
 8006de6:	9e00      	ldr	r6, [sp, #0]
 8006de8:	1bae      	subs	r6, r5, r6
 8006dea:	42b7      	cmp	r7, r6
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	d137      	bne.n	8006e62 <_dtoa_r+0x722>
 8006df2:	f7f9 fa6b 	bl	80002cc <__adddf3>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	f7f9 feab 	bl	8000b58 <__aeabi_dcmpgt>
 8006e02:	b9c8      	cbnz	r0, 8006e38 <_dtoa_r+0x6f8>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 fe7c 	bl	8000b08 <__aeabi_dcmpeq>
 8006e10:	b110      	cbz	r0, 8006e18 <_dtoa_r+0x6d8>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d40f      	bmi.n	8006e38 <_dtoa_r+0x6f8>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	f000 fe58 	bl	8007ad0 <_Bfree>
 8006e20:	2300      	movs	r3, #0
 8006e22:	702b      	strb	r3, [r5, #0]
 8006e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e26:	f10a 0001 	add.w	r0, sl, #1
 8006e2a:	6018      	str	r0, [r3, #0]
 8006e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f43f acd8 	beq.w	80067e4 <_dtoa_r+0xa4>
 8006e34:	601d      	str	r5, [r3, #0]
 8006e36:	e4d5      	b.n	80067e4 <_dtoa_r+0xa4>
 8006e38:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e44:	2a39      	cmp	r2, #57	; 0x39
 8006e46:	d108      	bne.n	8006e5a <_dtoa_r+0x71a>
 8006e48:	9a00      	ldr	r2, [sp, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d1f7      	bne.n	8006e3e <_dtoa_r+0x6fe>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	9900      	ldr	r1, [sp, #0]
 8006e52:	3201      	adds	r2, #1
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	2230      	movs	r2, #48	; 0x30
 8006e58:	700a      	strb	r2, [r1, #0]
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	3201      	adds	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e78c      	b.n	8006d7c <_dtoa_r+0x63c>
 8006e62:	4b7f      	ldr	r3, [pc, #508]	; (8007060 <_dtoa_r+0x920>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	f7f9 fbe7 	bl	8000638 <__aeabi_dmul>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	f7f9 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d09b      	beq.n	8006db2 <_dtoa_r+0x672>
 8006e7a:	e7cd      	b.n	8006e18 <_dtoa_r+0x6d8>
 8006e7c:	9a08      	ldr	r2, [sp, #32]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	f000 80c4 	beq.w	800700c <_dtoa_r+0x8cc>
 8006e84:	9a05      	ldr	r2, [sp, #20]
 8006e86:	2a01      	cmp	r2, #1
 8006e88:	f300 80a8 	bgt.w	8006fdc <_dtoa_r+0x89c>
 8006e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	f000 80a0 	beq.w	8006fd4 <_dtoa_r+0x894>
 8006e94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e98:	9e06      	ldr	r6, [sp, #24]
 8006e9a:	4645      	mov	r5, r8
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	441a      	add	r2, r3
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4498      	add	r8, r3
 8006ea6:	9204      	str	r2, [sp, #16]
 8006ea8:	f000 ff18 	bl	8007cdc <__i2b>
 8006eac:	4607      	mov	r7, r0
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	dd0b      	ble.n	8006eca <_dtoa_r+0x78a>
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd08      	ble.n	8006eca <_dtoa_r+0x78a>
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	bfa8      	it	ge
 8006ebe:	462b      	movge	r3, r5
 8006ec0:	eba8 0803 	sub.w	r8, r8, r3
 8006ec4:	1aed      	subs	r5, r5, r3
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	b1fb      	cbz	r3, 8006f0e <_dtoa_r+0x7ce>
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 809f 	beq.w	8007014 <_dtoa_r+0x8d4>
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	dd11      	ble.n	8006efe <_dtoa_r+0x7be>
 8006eda:	4639      	mov	r1, r7
 8006edc:	4632      	mov	r2, r6
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 ffb8 	bl	8007e54 <__pow5mult>
 8006ee4:	465a      	mov	r2, fp
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 ff0c 	bl	8007d08 <__multiply>
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	9007      	str	r0, [sp, #28]
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fdeb 	bl	8007ad0 <_Bfree>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	469b      	mov	fp, r3
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	1b9a      	subs	r2, r3, r6
 8006f02:	d004      	beq.n	8006f0e <_dtoa_r+0x7ce>
 8006f04:	4659      	mov	r1, fp
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 ffa4 	bl	8007e54 <__pow5mult>
 8006f0c:	4683      	mov	fp, r0
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fee3 	bl	8007cdc <__i2b>
 8006f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	dd7c      	ble.n	8007018 <_dtoa_r+0x8d8>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4601      	mov	r1, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 ff96 	bl	8007e54 <__pow5mult>
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	dd76      	ble.n	800701e <_dtoa_r+0x8de>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	6933      	ldr	r3, [r6, #16]
 8006f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f3a:	6918      	ldr	r0, [r3, #16]
 8006f3c:	f000 fe7e 	bl	8007c3c <__hi0bits>
 8006f40:	f1c0 0020 	rsb	r0, r0, #32
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	4418      	add	r0, r3
 8006f48:	f010 001f 	ands.w	r0, r0, #31
 8006f4c:	f000 8086 	beq.w	800705c <_dtoa_r+0x91c>
 8006f50:	f1c0 0320 	rsb	r3, r0, #32
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	dd7f      	ble.n	8007058 <_dtoa_r+0x918>
 8006f58:	f1c0 001c 	rsb	r0, r0, #28
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4403      	add	r3, r0
 8006f60:	4480      	add	r8, r0
 8006f62:	4405      	add	r5, r0
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	f1b8 0f00 	cmp.w	r8, #0
 8006f6a:	dd05      	ble.n	8006f78 <_dtoa_r+0x838>
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	4642      	mov	r2, r8
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 ffc9 	bl	8007f08 <__lshift>
 8006f76:	4683      	mov	fp, r0
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dd05      	ble.n	8006f8a <_dtoa_r+0x84a>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	461a      	mov	r2, r3
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 ffc0 	bl	8007f08 <__lshift>
 8006f88:	4606      	mov	r6, r0
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d069      	beq.n	8007064 <_dtoa_r+0x924>
 8006f90:	4631      	mov	r1, r6
 8006f92:	4658      	mov	r0, fp
 8006f94:	f001 f824 	bl	8007fe0 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	da63      	bge.n	8007064 <_dtoa_r+0x924>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fdb6 	bl	8007b14 <__multadd>
 8006fa8:	9b08      	ldr	r3, [sp, #32]
 8006faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fae:	4683      	mov	fp, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 818f 	beq.w	80072d4 <_dtoa_r+0xb94>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	2300      	movs	r3, #0
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fda9 	bl	8007b14 <__multadd>
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f300 808e 	bgt.w	80070e8 <_dtoa_r+0x9a8>
 8006fcc:	9b05      	ldr	r3, [sp, #20]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	dc50      	bgt.n	8007074 <_dtoa_r+0x934>
 8006fd2:	e089      	b.n	80070e8 <_dtoa_r+0x9a8>
 8006fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fda:	e75d      	b.n	8006e98 <_dtoa_r+0x758>
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	1e5e      	subs	r6, r3, #1
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	42b3      	cmp	r3, r6
 8006fe4:	bfbf      	itttt	lt
 8006fe6:	9b06      	ldrlt	r3, [sp, #24]
 8006fe8:	9606      	strlt	r6, [sp, #24]
 8006fea:	1af2      	sublt	r2, r6, r3
 8006fec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006fee:	bfb6      	itet	lt
 8006ff0:	189b      	addlt	r3, r3, r2
 8006ff2:	1b9e      	subge	r6, r3, r6
 8006ff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	bfb8      	it	lt
 8006ffa:	2600      	movlt	r6, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfb5      	itete	lt
 8007000:	eba8 0503 	sublt.w	r5, r8, r3
 8007004:	9b01      	ldrge	r3, [sp, #4]
 8007006:	2300      	movlt	r3, #0
 8007008:	4645      	movge	r5, r8
 800700a:	e747      	b.n	8006e9c <_dtoa_r+0x75c>
 800700c:	9e06      	ldr	r6, [sp, #24]
 800700e:	9f08      	ldr	r7, [sp, #32]
 8007010:	4645      	mov	r5, r8
 8007012:	e74c      	b.n	8006eae <_dtoa_r+0x76e>
 8007014:	9a06      	ldr	r2, [sp, #24]
 8007016:	e775      	b.n	8006f04 <_dtoa_r+0x7c4>
 8007018:	9b05      	ldr	r3, [sp, #20]
 800701a:	2b01      	cmp	r3, #1
 800701c:	dc18      	bgt.n	8007050 <_dtoa_r+0x910>
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	b9b3      	cbnz	r3, 8007050 <_dtoa_r+0x910>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007028:	b9a3      	cbnz	r3, 8007054 <_dtoa_r+0x914>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	051b      	lsls	r3, r3, #20
 8007034:	b12b      	cbz	r3, 8007042 <_dtoa_r+0x902>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	3301      	adds	r3, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	2301      	movs	r3, #1
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	f47f af74 	bne.w	8006f34 <_dtoa_r+0x7f4>
 800704c:	2001      	movs	r0, #1
 800704e:	e779      	b.n	8006f44 <_dtoa_r+0x804>
 8007050:	2300      	movs	r3, #0
 8007052:	e7f6      	b.n	8007042 <_dtoa_r+0x902>
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	e7f4      	b.n	8007042 <_dtoa_r+0x902>
 8007058:	d085      	beq.n	8006f66 <_dtoa_r+0x826>
 800705a:	4618      	mov	r0, r3
 800705c:	301c      	adds	r0, #28
 800705e:	e77d      	b.n	8006f5c <_dtoa_r+0x81c>
 8007060:	40240000 	.word	0x40240000
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	dc38      	bgt.n	80070dc <_dtoa_r+0x99c>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	2b02      	cmp	r3, #2
 800706e:	dd35      	ble.n	80070dc <_dtoa_r+0x99c>
 8007070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	d10d      	bne.n	8007096 <_dtoa_r+0x956>
 800707a:	4631      	mov	r1, r6
 800707c:	464b      	mov	r3, r9
 800707e:	2205      	movs	r2, #5
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fd47 	bl	8007b14 <__multadd>
 8007086:	4601      	mov	r1, r0
 8007088:	4606      	mov	r6, r0
 800708a:	4658      	mov	r0, fp
 800708c:	f000 ffa8 	bl	8007fe0 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	f73f adbd 	bgt.w	8006c10 <_dtoa_r+0x4d0>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	9d00      	ldr	r5, [sp, #0]
 800709a:	ea6f 0a03 	mvn.w	sl, r3
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	4631      	mov	r1, r6
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fd13 	bl	8007ad0 <_Bfree>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	f43f aeb4 	beq.w	8006e18 <_dtoa_r+0x6d8>
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	d005      	beq.n	80070c2 <_dtoa_r+0x982>
 80070b6:	45b8      	cmp	r8, r7
 80070b8:	d003      	beq.n	80070c2 <_dtoa_r+0x982>
 80070ba:	4641      	mov	r1, r8
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fd07 	bl	8007ad0 <_Bfree>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fd03 	bl	8007ad0 <_Bfree>
 80070ca:	e6a5      	b.n	8006e18 <_dtoa_r+0x6d8>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4637      	mov	r7, r6
 80070d0:	e7e1      	b.n	8007096 <_dtoa_r+0x956>
 80070d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80070d8:	4637      	mov	r7, r6
 80070da:	e599      	b.n	8006c10 <_dtoa_r+0x4d0>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80fd 	beq.w	80072e2 <_dtoa_r+0xba2>
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x9b8>
 80070ec:	4639      	mov	r1, r7
 80070ee:	462a      	mov	r2, r5
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 ff09 	bl	8007f08 <__lshift>
 80070f6:	4607      	mov	r7, r0
 80070f8:	9b06      	ldr	r3, [sp, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d05c      	beq.n	80071b8 <_dtoa_r+0xa78>
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fca5 	bl	8007a50 <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b928      	cbnz	r0, 8007116 <_dtoa_r+0x9d6>
 800710a:	4b80      	ldr	r3, [pc, #512]	; (800730c <_dtoa_r+0xbcc>)
 800710c:	4602      	mov	r2, r0
 800710e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007112:	f7ff bb2e 	b.w	8006772 <_dtoa_r+0x32>
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	f107 010c 	add.w	r1, r7, #12
 8007120:	300c      	adds	r0, #12
 8007122:	f000 fc87 	bl	8007a34 <memcpy>
 8007126:	2201      	movs	r2, #1
 8007128:	4629      	mov	r1, r5
 800712a:	4620      	mov	r0, r4
 800712c:	f000 feec 	bl	8007f08 <__lshift>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	444b      	add	r3, r9
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	46b8      	mov	r8, r7
 8007144:	9306      	str	r3, [sp, #24]
 8007146:	4607      	mov	r7, r0
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	4631      	mov	r1, r6
 800714c:	3b01      	subs	r3, #1
 800714e:	4658      	mov	r0, fp
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	f7ff fa67 	bl	8006624 <quorem>
 8007156:	4603      	mov	r3, r0
 8007158:	3330      	adds	r3, #48	; 0x30
 800715a:	9004      	str	r0, [sp, #16]
 800715c:	4641      	mov	r1, r8
 800715e:	4658      	mov	r0, fp
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	f000 ff3d 	bl	8007fe0 <__mcmp>
 8007166:	463a      	mov	r2, r7
 8007168:	4681      	mov	r9, r0
 800716a:	4631      	mov	r1, r6
 800716c:	4620      	mov	r0, r4
 800716e:	f000 ff53 	bl	8008018 <__mdiff>
 8007172:	68c2      	ldr	r2, [r0, #12]
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	4605      	mov	r5, r0
 8007178:	bb02      	cbnz	r2, 80071bc <_dtoa_r+0xa7c>
 800717a:	4601      	mov	r1, r0
 800717c:	4658      	mov	r0, fp
 800717e:	f000 ff2f 	bl	8007fe0 <__mcmp>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	4602      	mov	r2, r0
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800718e:	f000 fc9f 	bl	8007ad0 <_Bfree>
 8007192:	9b05      	ldr	r3, [sp, #20]
 8007194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007196:	9d01      	ldr	r5, [sp, #4]
 8007198:	ea43 0102 	orr.w	r1, r3, r2
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	430b      	orrs	r3, r1
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	d10d      	bne.n	80071c0 <_dtoa_r+0xa80>
 80071a4:	2b39      	cmp	r3, #57	; 0x39
 80071a6:	d029      	beq.n	80071fc <_dtoa_r+0xabc>
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	dd01      	ble.n	80071b2 <_dtoa_r+0xa72>
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	3331      	adds	r3, #49	; 0x31
 80071b2:	9a02      	ldr	r2, [sp, #8]
 80071b4:	7013      	strb	r3, [r2, #0]
 80071b6:	e774      	b.n	80070a2 <_dtoa_r+0x962>
 80071b8:	4638      	mov	r0, r7
 80071ba:	e7b9      	b.n	8007130 <_dtoa_r+0x9f0>
 80071bc:	2201      	movs	r2, #1
 80071be:	e7e2      	b.n	8007186 <_dtoa_r+0xa46>
 80071c0:	f1b9 0f00 	cmp.w	r9, #0
 80071c4:	db06      	blt.n	80071d4 <_dtoa_r+0xa94>
 80071c6:	9905      	ldr	r1, [sp, #20]
 80071c8:	ea41 0909 	orr.w	r9, r1, r9
 80071cc:	9906      	ldr	r1, [sp, #24]
 80071ce:	ea59 0101 	orrs.w	r1, r9, r1
 80071d2:	d120      	bne.n	8007216 <_dtoa_r+0xad6>
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	ddec      	ble.n	80071b2 <_dtoa_r+0xa72>
 80071d8:	4659      	mov	r1, fp
 80071da:	2201      	movs	r2, #1
 80071dc:	4620      	mov	r0, r4
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f000 fe92 	bl	8007f08 <__lshift>
 80071e4:	4631      	mov	r1, r6
 80071e6:	4683      	mov	fp, r0
 80071e8:	f000 fefa 	bl	8007fe0 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	dc02      	bgt.n	80071f8 <_dtoa_r+0xab8>
 80071f2:	d1de      	bne.n	80071b2 <_dtoa_r+0xa72>
 80071f4:	07da      	lsls	r2, r3, #31
 80071f6:	d5dc      	bpl.n	80071b2 <_dtoa_r+0xa72>
 80071f8:	2b39      	cmp	r3, #57	; 0x39
 80071fa:	d1d8      	bne.n	80071ae <_dtoa_r+0xa6e>
 80071fc:	9a02      	ldr	r2, [sp, #8]
 80071fe:	2339      	movs	r3, #57	; 0x39
 8007200:	7013      	strb	r3, [r2, #0]
 8007202:	462b      	mov	r3, r5
 8007204:	461d      	mov	r5, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800720c:	2a39      	cmp	r2, #57	; 0x39
 800720e:	d050      	beq.n	80072b2 <_dtoa_r+0xb72>
 8007210:	3201      	adds	r2, #1
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e745      	b.n	80070a2 <_dtoa_r+0x962>
 8007216:	2a00      	cmp	r2, #0
 8007218:	dd03      	ble.n	8007222 <_dtoa_r+0xae2>
 800721a:	2b39      	cmp	r3, #57	; 0x39
 800721c:	d0ee      	beq.n	80071fc <_dtoa_r+0xabc>
 800721e:	3301      	adds	r3, #1
 8007220:	e7c7      	b.n	80071b2 <_dtoa_r+0xa72>
 8007222:	9a01      	ldr	r2, [sp, #4]
 8007224:	9907      	ldr	r1, [sp, #28]
 8007226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800722a:	428a      	cmp	r2, r1
 800722c:	d02a      	beq.n	8007284 <_dtoa_r+0xb44>
 800722e:	4659      	mov	r1, fp
 8007230:	2300      	movs	r3, #0
 8007232:	220a      	movs	r2, #10
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fc6d 	bl	8007b14 <__multadd>
 800723a:	45b8      	cmp	r8, r7
 800723c:	4683      	mov	fp, r0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	f04f 020a 	mov.w	r2, #10
 8007246:	4641      	mov	r1, r8
 8007248:	4620      	mov	r0, r4
 800724a:	d107      	bne.n	800725c <_dtoa_r+0xb1c>
 800724c:	f000 fc62 	bl	8007b14 <__multadd>
 8007250:	4680      	mov	r8, r0
 8007252:	4607      	mov	r7, r0
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	3301      	adds	r3, #1
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	e775      	b.n	8007148 <_dtoa_r+0xa08>
 800725c:	f000 fc5a 	bl	8007b14 <__multadd>
 8007260:	4639      	mov	r1, r7
 8007262:	4680      	mov	r8, r0
 8007264:	2300      	movs	r3, #0
 8007266:	220a      	movs	r2, #10
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fc53 	bl	8007b14 <__multadd>
 800726e:	4607      	mov	r7, r0
 8007270:	e7f0      	b.n	8007254 <_dtoa_r+0xb14>
 8007272:	f1b9 0f00 	cmp.w	r9, #0
 8007276:	9a00      	ldr	r2, [sp, #0]
 8007278:	bfcc      	ite	gt
 800727a:	464d      	movgt	r5, r9
 800727c:	2501      	movle	r5, #1
 800727e:	4415      	add	r5, r2
 8007280:	f04f 0800 	mov.w	r8, #0
 8007284:	4659      	mov	r1, fp
 8007286:	2201      	movs	r2, #1
 8007288:	4620      	mov	r0, r4
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	f000 fe3c 	bl	8007f08 <__lshift>
 8007290:	4631      	mov	r1, r6
 8007292:	4683      	mov	fp, r0
 8007294:	f000 fea4 	bl	8007fe0 <__mcmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	dcb2      	bgt.n	8007202 <_dtoa_r+0xac2>
 800729c:	d102      	bne.n	80072a4 <_dtoa_r+0xb64>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	07db      	lsls	r3, r3, #31
 80072a2:	d4ae      	bmi.n	8007202 <_dtoa_r+0xac2>
 80072a4:	462b      	mov	r3, r5
 80072a6:	461d      	mov	r5, r3
 80072a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ac:	2a30      	cmp	r2, #48	; 0x30
 80072ae:	d0fa      	beq.n	80072a6 <_dtoa_r+0xb66>
 80072b0:	e6f7      	b.n	80070a2 <_dtoa_r+0x962>
 80072b2:	9a00      	ldr	r2, [sp, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d1a5      	bne.n	8007204 <_dtoa_r+0xac4>
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	2331      	movs	r3, #49	; 0x31
 80072be:	e779      	b.n	80071b4 <_dtoa_r+0xa74>
 80072c0:	4b13      	ldr	r3, [pc, #76]	; (8007310 <_dtoa_r+0xbd0>)
 80072c2:	f7ff baaf 	b.w	8006824 <_dtoa_r+0xe4>
 80072c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f aa86 	bne.w	80067da <_dtoa_r+0x9a>
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <_dtoa_r+0xbd4>)
 80072d0:	f7ff baa8 	b.w	8006824 <_dtoa_r+0xe4>
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	dc03      	bgt.n	80072e2 <_dtoa_r+0xba2>
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f73f aec9 	bgt.w	8007074 <_dtoa_r+0x934>
 80072e2:	9d00      	ldr	r5, [sp, #0]
 80072e4:	4631      	mov	r1, r6
 80072e6:	4658      	mov	r0, fp
 80072e8:	f7ff f99c 	bl	8006624 <quorem>
 80072ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072f0:	f805 3b01 	strb.w	r3, [r5], #1
 80072f4:	9a00      	ldr	r2, [sp, #0]
 80072f6:	1aaa      	subs	r2, r5, r2
 80072f8:	4591      	cmp	r9, r2
 80072fa:	ddba      	ble.n	8007272 <_dtoa_r+0xb32>
 80072fc:	4659      	mov	r1, fp
 80072fe:	2300      	movs	r3, #0
 8007300:	220a      	movs	r2, #10
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fc06 	bl	8007b14 <__multadd>
 8007308:	4683      	mov	fp, r0
 800730a:	e7eb      	b.n	80072e4 <_dtoa_r+0xba4>
 800730c:	0800a604 	.word	0x0800a604
 8007310:	0800a404 	.word	0x0800a404
 8007314:	0800a581 	.word	0x0800a581

08007318 <rshift>:
 8007318:	6903      	ldr	r3, [r0, #16]
 800731a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800731e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007322:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007326:	f100 0414 	add.w	r4, r0, #20
 800732a:	dd45      	ble.n	80073b8 <rshift+0xa0>
 800732c:	f011 011f 	ands.w	r1, r1, #31
 8007330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007338:	d10c      	bne.n	8007354 <rshift+0x3c>
 800733a:	f100 0710 	add.w	r7, r0, #16
 800733e:	4629      	mov	r1, r5
 8007340:	42b1      	cmp	r1, r6
 8007342:	d334      	bcc.n	80073ae <rshift+0x96>
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	1eea      	subs	r2, r5, #3
 800734a:	4296      	cmp	r6, r2
 800734c:	bf38      	it	cc
 800734e:	2300      	movcc	r3, #0
 8007350:	4423      	add	r3, r4
 8007352:	e015      	b.n	8007380 <rshift+0x68>
 8007354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007358:	f1c1 0820 	rsb	r8, r1, #32
 800735c:	40cf      	lsrs	r7, r1
 800735e:	f105 0e04 	add.w	lr, r5, #4
 8007362:	46a1      	mov	r9, r4
 8007364:	4576      	cmp	r6, lr
 8007366:	46f4      	mov	ip, lr
 8007368:	d815      	bhi.n	8007396 <rshift+0x7e>
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009a      	lsls	r2, r3, #2
 800736e:	3a04      	subs	r2, #4
 8007370:	3501      	adds	r5, #1
 8007372:	42ae      	cmp	r6, r5
 8007374:	bf38      	it	cc
 8007376:	2200      	movcc	r2, #0
 8007378:	18a3      	adds	r3, r4, r2
 800737a:	50a7      	str	r7, [r4, r2]
 800737c:	b107      	cbz	r7, 8007380 <rshift+0x68>
 800737e:	3304      	adds	r3, #4
 8007380:	1b1a      	subs	r2, r3, r4
 8007382:	42a3      	cmp	r3, r4
 8007384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007388:	bf08      	it	eq
 800738a:	2300      	moveq	r3, #0
 800738c:	6102      	str	r2, [r0, #16]
 800738e:	bf08      	it	eq
 8007390:	6143      	streq	r3, [r0, #20]
 8007392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007396:	f8dc c000 	ldr.w	ip, [ip]
 800739a:	fa0c fc08 	lsl.w	ip, ip, r8
 800739e:	ea4c 0707 	orr.w	r7, ip, r7
 80073a2:	f849 7b04 	str.w	r7, [r9], #4
 80073a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073aa:	40cf      	lsrs	r7, r1
 80073ac:	e7da      	b.n	8007364 <rshift+0x4c>
 80073ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80073b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80073b6:	e7c3      	b.n	8007340 <rshift+0x28>
 80073b8:	4623      	mov	r3, r4
 80073ba:	e7e1      	b.n	8007380 <rshift+0x68>

080073bc <__hexdig_fun>:
 80073bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d802      	bhi.n	80073ca <__hexdig_fun+0xe>
 80073c4:	3820      	subs	r0, #32
 80073c6:	b2c0      	uxtb	r0, r0
 80073c8:	4770      	bx	lr
 80073ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d801      	bhi.n	80073d6 <__hexdig_fun+0x1a>
 80073d2:	3847      	subs	r0, #71	; 0x47
 80073d4:	e7f7      	b.n	80073c6 <__hexdig_fun+0xa>
 80073d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d801      	bhi.n	80073e2 <__hexdig_fun+0x26>
 80073de:	3827      	subs	r0, #39	; 0x27
 80073e0:	e7f1      	b.n	80073c6 <__hexdig_fun+0xa>
 80073e2:	2000      	movs	r0, #0
 80073e4:	4770      	bx	lr
	...

080073e8 <__gethex>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	ed2d 8b02 	vpush	{d8}
 80073f0:	b089      	sub	sp, #36	; 0x24
 80073f2:	ee08 0a10 	vmov	s16, r0
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	4bbc      	ldr	r3, [pc, #752]	; (80076ec <__gethex+0x304>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	468b      	mov	fp, r1
 8007402:	4690      	mov	r8, r2
 8007404:	f7f8 ff04 	bl	8000210 <strlen>
 8007408:	9b01      	ldr	r3, [sp, #4]
 800740a:	f8db 2000 	ldr.w	r2, [fp]
 800740e:	4403      	add	r3, r0
 8007410:	4682      	mov	sl, r0
 8007412:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	1c93      	adds	r3, r2, #2
 800741a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800741e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007422:	32fe      	adds	r2, #254	; 0xfe
 8007424:	18d1      	adds	r1, r2, r3
 8007426:	461f      	mov	r7, r3
 8007428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800742c:	9100      	str	r1, [sp, #0]
 800742e:	2830      	cmp	r0, #48	; 0x30
 8007430:	d0f8      	beq.n	8007424 <__gethex+0x3c>
 8007432:	f7ff ffc3 	bl	80073bc <__hexdig_fun>
 8007436:	4604      	mov	r4, r0
 8007438:	2800      	cmp	r0, #0
 800743a:	d13a      	bne.n	80074b2 <__gethex+0xca>
 800743c:	9901      	ldr	r1, [sp, #4]
 800743e:	4652      	mov	r2, sl
 8007440:	4638      	mov	r0, r7
 8007442:	f001 f9ed 	bl	8008820 <strncmp>
 8007446:	4605      	mov	r5, r0
 8007448:	2800      	cmp	r0, #0
 800744a:	d168      	bne.n	800751e <__gethex+0x136>
 800744c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007450:	eb07 060a 	add.w	r6, r7, sl
 8007454:	f7ff ffb2 	bl	80073bc <__hexdig_fun>
 8007458:	2800      	cmp	r0, #0
 800745a:	d062      	beq.n	8007522 <__gethex+0x13a>
 800745c:	4633      	mov	r3, r6
 800745e:	7818      	ldrb	r0, [r3, #0]
 8007460:	2830      	cmp	r0, #48	; 0x30
 8007462:	461f      	mov	r7, r3
 8007464:	f103 0301 	add.w	r3, r3, #1
 8007468:	d0f9      	beq.n	800745e <__gethex+0x76>
 800746a:	f7ff ffa7 	bl	80073bc <__hexdig_fun>
 800746e:	2301      	movs	r3, #1
 8007470:	fab0 f480 	clz	r4, r0
 8007474:	0964      	lsrs	r4, r4, #5
 8007476:	4635      	mov	r5, r6
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	463a      	mov	r2, r7
 800747c:	4616      	mov	r6, r2
 800747e:	3201      	adds	r2, #1
 8007480:	7830      	ldrb	r0, [r6, #0]
 8007482:	f7ff ff9b 	bl	80073bc <__hexdig_fun>
 8007486:	2800      	cmp	r0, #0
 8007488:	d1f8      	bne.n	800747c <__gethex+0x94>
 800748a:	9901      	ldr	r1, [sp, #4]
 800748c:	4652      	mov	r2, sl
 800748e:	4630      	mov	r0, r6
 8007490:	f001 f9c6 	bl	8008820 <strncmp>
 8007494:	b980      	cbnz	r0, 80074b8 <__gethex+0xd0>
 8007496:	b94d      	cbnz	r5, 80074ac <__gethex+0xc4>
 8007498:	eb06 050a 	add.w	r5, r6, sl
 800749c:	462a      	mov	r2, r5
 800749e:	4616      	mov	r6, r2
 80074a0:	3201      	adds	r2, #1
 80074a2:	7830      	ldrb	r0, [r6, #0]
 80074a4:	f7ff ff8a 	bl	80073bc <__hexdig_fun>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d1f8      	bne.n	800749e <__gethex+0xb6>
 80074ac:	1bad      	subs	r5, r5, r6
 80074ae:	00ad      	lsls	r5, r5, #2
 80074b0:	e004      	b.n	80074bc <__gethex+0xd4>
 80074b2:	2400      	movs	r4, #0
 80074b4:	4625      	mov	r5, r4
 80074b6:	e7e0      	b.n	800747a <__gethex+0x92>
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	d1f7      	bne.n	80074ac <__gethex+0xc4>
 80074bc:	7833      	ldrb	r3, [r6, #0]
 80074be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074c2:	2b50      	cmp	r3, #80	; 0x50
 80074c4:	d13b      	bne.n	800753e <__gethex+0x156>
 80074c6:	7873      	ldrb	r3, [r6, #1]
 80074c8:	2b2b      	cmp	r3, #43	; 0x2b
 80074ca:	d02c      	beq.n	8007526 <__gethex+0x13e>
 80074cc:	2b2d      	cmp	r3, #45	; 0x2d
 80074ce:	d02e      	beq.n	800752e <__gethex+0x146>
 80074d0:	1c71      	adds	r1, r6, #1
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	7808      	ldrb	r0, [r1, #0]
 80074d8:	f7ff ff70 	bl	80073bc <__hexdig_fun>
 80074dc:	1e43      	subs	r3, r0, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b18      	cmp	r3, #24
 80074e2:	d82c      	bhi.n	800753e <__gethex+0x156>
 80074e4:	f1a0 0210 	sub.w	r2, r0, #16
 80074e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074ec:	f7ff ff66 	bl	80073bc <__hexdig_fun>
 80074f0:	1e43      	subs	r3, r0, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b18      	cmp	r3, #24
 80074f6:	d91d      	bls.n	8007534 <__gethex+0x14c>
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	d000      	beq.n	8007500 <__gethex+0x118>
 80074fe:	4252      	negs	r2, r2
 8007500:	4415      	add	r5, r2
 8007502:	f8cb 1000 	str.w	r1, [fp]
 8007506:	b1e4      	cbz	r4, 8007542 <__gethex+0x15a>
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2700      	movne	r7, #0
 8007510:	2706      	moveq	r7, #6
 8007512:	4638      	mov	r0, r7
 8007514:	b009      	add	sp, #36	; 0x24
 8007516:	ecbd 8b02 	vpop	{d8}
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	463e      	mov	r6, r7
 8007520:	4625      	mov	r5, r4
 8007522:	2401      	movs	r4, #1
 8007524:	e7ca      	b.n	80074bc <__gethex+0xd4>
 8007526:	f04f 0900 	mov.w	r9, #0
 800752a:	1cb1      	adds	r1, r6, #2
 800752c:	e7d3      	b.n	80074d6 <__gethex+0xee>
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	e7fa      	b.n	800752a <__gethex+0x142>
 8007534:	230a      	movs	r3, #10
 8007536:	fb03 0202 	mla	r2, r3, r2, r0
 800753a:	3a10      	subs	r2, #16
 800753c:	e7d4      	b.n	80074e8 <__gethex+0x100>
 800753e:	4631      	mov	r1, r6
 8007540:	e7df      	b.n	8007502 <__gethex+0x11a>
 8007542:	1bf3      	subs	r3, r6, r7
 8007544:	3b01      	subs	r3, #1
 8007546:	4621      	mov	r1, r4
 8007548:	2b07      	cmp	r3, #7
 800754a:	dc0b      	bgt.n	8007564 <__gethex+0x17c>
 800754c:	ee18 0a10 	vmov	r0, s16
 8007550:	f000 fa7e 	bl	8007a50 <_Balloc>
 8007554:	4604      	mov	r4, r0
 8007556:	b940      	cbnz	r0, 800756a <__gethex+0x182>
 8007558:	4b65      	ldr	r3, [pc, #404]	; (80076f0 <__gethex+0x308>)
 800755a:	4602      	mov	r2, r0
 800755c:	21de      	movs	r1, #222	; 0xde
 800755e:	4865      	ldr	r0, [pc, #404]	; (80076f4 <__gethex+0x30c>)
 8007560:	f001 f97e 	bl	8008860 <__assert_func>
 8007564:	3101      	adds	r1, #1
 8007566:	105b      	asrs	r3, r3, #1
 8007568:	e7ee      	b.n	8007548 <__gethex+0x160>
 800756a:	f100 0914 	add.w	r9, r0, #20
 800756e:	f04f 0b00 	mov.w	fp, #0
 8007572:	f1ca 0301 	rsb	r3, sl, #1
 8007576:	f8cd 9008 	str.w	r9, [sp, #8]
 800757a:	f8cd b000 	str.w	fp, [sp]
 800757e:	9306      	str	r3, [sp, #24]
 8007580:	42b7      	cmp	r7, r6
 8007582:	d340      	bcc.n	8007606 <__gethex+0x21e>
 8007584:	9802      	ldr	r0, [sp, #8]
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	f840 3b04 	str.w	r3, [r0], #4
 800758c:	eba0 0009 	sub.w	r0, r0, r9
 8007590:	1080      	asrs	r0, r0, #2
 8007592:	0146      	lsls	r6, r0, #5
 8007594:	6120      	str	r0, [r4, #16]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fb50 	bl	8007c3c <__hi0bits>
 800759c:	1a30      	subs	r0, r6, r0
 800759e:	f8d8 6000 	ldr.w	r6, [r8]
 80075a2:	42b0      	cmp	r0, r6
 80075a4:	dd63      	ble.n	800766e <__gethex+0x286>
 80075a6:	1b87      	subs	r7, r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 feea 	bl	8008384 <__any_on>
 80075b0:	4682      	mov	sl, r0
 80075b2:	b1a8      	cbz	r0, 80075e0 <__gethex+0x1f8>
 80075b4:	1e7b      	subs	r3, r7, #1
 80075b6:	1159      	asrs	r1, r3, #5
 80075b8:	f003 021f 	and.w	r2, r3, #31
 80075bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075c0:	f04f 0a01 	mov.w	sl, #1
 80075c4:	fa0a f202 	lsl.w	r2, sl, r2
 80075c8:	420a      	tst	r2, r1
 80075ca:	d009      	beq.n	80075e0 <__gethex+0x1f8>
 80075cc:	4553      	cmp	r3, sl
 80075ce:	dd05      	ble.n	80075dc <__gethex+0x1f4>
 80075d0:	1eb9      	subs	r1, r7, #2
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fed6 	bl	8008384 <__any_on>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d145      	bne.n	8007668 <__gethex+0x280>
 80075dc:	f04f 0a02 	mov.w	sl, #2
 80075e0:	4639      	mov	r1, r7
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff fe98 	bl	8007318 <rshift>
 80075e8:	443d      	add	r5, r7
 80075ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075ee:	42ab      	cmp	r3, r5
 80075f0:	da4c      	bge.n	800768c <__gethex+0x2a4>
 80075f2:	ee18 0a10 	vmov	r0, s16
 80075f6:	4621      	mov	r1, r4
 80075f8:	f000 fa6a 	bl	8007ad0 <_Bfree>
 80075fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075fe:	2300      	movs	r3, #0
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	27a3      	movs	r7, #163	; 0xa3
 8007604:	e785      	b.n	8007512 <__gethex+0x12a>
 8007606:	1e73      	subs	r3, r6, #1
 8007608:	9a05      	ldr	r2, [sp, #20]
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007610:	4293      	cmp	r3, r2
 8007612:	d019      	beq.n	8007648 <__gethex+0x260>
 8007614:	f1bb 0f20 	cmp.w	fp, #32
 8007618:	d107      	bne.n	800762a <__gethex+0x242>
 800761a:	9b02      	ldr	r3, [sp, #8]
 800761c:	9a00      	ldr	r2, [sp, #0]
 800761e:	f843 2b04 	str.w	r2, [r3], #4
 8007622:	9302      	str	r3, [sp, #8]
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	469b      	mov	fp, r3
 800762a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800762e:	f7ff fec5 	bl	80073bc <__hexdig_fun>
 8007632:	9b00      	ldr	r3, [sp, #0]
 8007634:	f000 000f 	and.w	r0, r0, #15
 8007638:	fa00 f00b 	lsl.w	r0, r0, fp
 800763c:	4303      	orrs	r3, r0
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	f10b 0b04 	add.w	fp, fp, #4
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	e00d      	b.n	8007664 <__gethex+0x27c>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	9a06      	ldr	r2, [sp, #24]
 800764c:	4413      	add	r3, r2
 800764e:	42bb      	cmp	r3, r7
 8007650:	d3e0      	bcc.n	8007614 <__gethex+0x22c>
 8007652:	4618      	mov	r0, r3
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	4652      	mov	r2, sl
 800765a:	f001 f8e1 	bl	8008820 <strncmp>
 800765e:	9b07      	ldr	r3, [sp, #28]
 8007660:	2800      	cmp	r0, #0
 8007662:	d1d7      	bne.n	8007614 <__gethex+0x22c>
 8007664:	461e      	mov	r6, r3
 8007666:	e78b      	b.n	8007580 <__gethex+0x198>
 8007668:	f04f 0a03 	mov.w	sl, #3
 800766c:	e7b8      	b.n	80075e0 <__gethex+0x1f8>
 800766e:	da0a      	bge.n	8007686 <__gethex+0x29e>
 8007670:	1a37      	subs	r7, r6, r0
 8007672:	4621      	mov	r1, r4
 8007674:	ee18 0a10 	vmov	r0, s16
 8007678:	463a      	mov	r2, r7
 800767a:	f000 fc45 	bl	8007f08 <__lshift>
 800767e:	1bed      	subs	r5, r5, r7
 8007680:	4604      	mov	r4, r0
 8007682:	f100 0914 	add.w	r9, r0, #20
 8007686:	f04f 0a00 	mov.w	sl, #0
 800768a:	e7ae      	b.n	80075ea <__gethex+0x202>
 800768c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007690:	42a8      	cmp	r0, r5
 8007692:	dd72      	ble.n	800777a <__gethex+0x392>
 8007694:	1b45      	subs	r5, r0, r5
 8007696:	42ae      	cmp	r6, r5
 8007698:	dc36      	bgt.n	8007708 <__gethex+0x320>
 800769a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d02a      	beq.n	80076f8 <__gethex+0x310>
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d02c      	beq.n	8007700 <__gethex+0x318>
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d115      	bne.n	80076d6 <__gethex+0x2ee>
 80076aa:	42ae      	cmp	r6, r5
 80076ac:	d113      	bne.n	80076d6 <__gethex+0x2ee>
 80076ae:	2e01      	cmp	r6, #1
 80076b0:	d10b      	bne.n	80076ca <__gethex+0x2e2>
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	f8c9 3000 	str.w	r3, [r9]
 80076c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c4:	2762      	movs	r7, #98	; 0x62
 80076c6:	601c      	str	r4, [r3, #0]
 80076c8:	e723      	b.n	8007512 <__gethex+0x12a>
 80076ca:	1e71      	subs	r1, r6, #1
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fe59 	bl	8008384 <__any_on>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1ed      	bne.n	80076b2 <__gethex+0x2ca>
 80076d6:	ee18 0a10 	vmov	r0, s16
 80076da:	4621      	mov	r1, r4
 80076dc:	f000 f9f8 	bl	8007ad0 <_Bfree>
 80076e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e2:	2300      	movs	r3, #0
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	2750      	movs	r7, #80	; 0x50
 80076e8:	e713      	b.n	8007512 <__gethex+0x12a>
 80076ea:	bf00      	nop
 80076ec:	0800a680 	.word	0x0800a680
 80076f0:	0800a604 	.word	0x0800a604
 80076f4:	0800a615 	.word	0x0800a615
 80076f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1eb      	bne.n	80076d6 <__gethex+0x2ee>
 80076fe:	e7d8      	b.n	80076b2 <__gethex+0x2ca>
 8007700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1d5      	bne.n	80076b2 <__gethex+0x2ca>
 8007706:	e7e6      	b.n	80076d6 <__gethex+0x2ee>
 8007708:	1e6f      	subs	r7, r5, #1
 800770a:	f1ba 0f00 	cmp.w	sl, #0
 800770e:	d131      	bne.n	8007774 <__gethex+0x38c>
 8007710:	b127      	cbz	r7, 800771c <__gethex+0x334>
 8007712:	4639      	mov	r1, r7
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fe35 	bl	8008384 <__any_on>
 800771a:	4682      	mov	sl, r0
 800771c:	117b      	asrs	r3, r7, #5
 800771e:	2101      	movs	r1, #1
 8007720:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007724:	f007 071f 	and.w	r7, r7, #31
 8007728:	fa01 f707 	lsl.w	r7, r1, r7
 800772c:	421f      	tst	r7, r3
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	bf18      	it	ne
 8007734:	f04a 0a02 	orrne.w	sl, sl, #2
 8007738:	1b76      	subs	r6, r6, r5
 800773a:	f7ff fded 	bl	8007318 <rshift>
 800773e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007742:	2702      	movs	r7, #2
 8007744:	f1ba 0f00 	cmp.w	sl, #0
 8007748:	d048      	beq.n	80077dc <__gethex+0x3f4>
 800774a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d015      	beq.n	800777e <__gethex+0x396>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d017      	beq.n	8007786 <__gethex+0x39e>
 8007756:	2b01      	cmp	r3, #1
 8007758:	d109      	bne.n	800776e <__gethex+0x386>
 800775a:	f01a 0f02 	tst.w	sl, #2
 800775e:	d006      	beq.n	800776e <__gethex+0x386>
 8007760:	f8d9 0000 	ldr.w	r0, [r9]
 8007764:	ea4a 0a00 	orr.w	sl, sl, r0
 8007768:	f01a 0f01 	tst.w	sl, #1
 800776c:	d10e      	bne.n	800778c <__gethex+0x3a4>
 800776e:	f047 0710 	orr.w	r7, r7, #16
 8007772:	e033      	b.n	80077dc <__gethex+0x3f4>
 8007774:	f04f 0a01 	mov.w	sl, #1
 8007778:	e7d0      	b.n	800771c <__gethex+0x334>
 800777a:	2701      	movs	r7, #1
 800777c:	e7e2      	b.n	8007744 <__gethex+0x35c>
 800777e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007780:	f1c3 0301 	rsb	r3, r3, #1
 8007784:	9315      	str	r3, [sp, #84]	; 0x54
 8007786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0f0      	beq.n	800776e <__gethex+0x386>
 800778c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007790:	f104 0314 	add.w	r3, r4, #20
 8007794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800779c:	f04f 0c00 	mov.w	ip, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077aa:	d01c      	beq.n	80077e6 <__gethex+0x3fe>
 80077ac:	3201      	adds	r2, #1
 80077ae:	6002      	str	r2, [r0, #0]
 80077b0:	2f02      	cmp	r7, #2
 80077b2:	f104 0314 	add.w	r3, r4, #20
 80077b6:	d13f      	bne.n	8007838 <__gethex+0x450>
 80077b8:	f8d8 2000 	ldr.w	r2, [r8]
 80077bc:	3a01      	subs	r2, #1
 80077be:	42b2      	cmp	r2, r6
 80077c0:	d10a      	bne.n	80077d8 <__gethex+0x3f0>
 80077c2:	1171      	asrs	r1, r6, #5
 80077c4:	2201      	movs	r2, #1
 80077c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077ca:	f006 061f 	and.w	r6, r6, #31
 80077ce:	fa02 f606 	lsl.w	r6, r2, r6
 80077d2:	421e      	tst	r6, r3
 80077d4:	bf18      	it	ne
 80077d6:	4617      	movne	r7, r2
 80077d8:	f047 0720 	orr.w	r7, r7, #32
 80077dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077de:	601c      	str	r4, [r3, #0]
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	601d      	str	r5, [r3, #0]
 80077e4:	e695      	b.n	8007512 <__gethex+0x12a>
 80077e6:	4299      	cmp	r1, r3
 80077e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80077ec:	d8d8      	bhi.n	80077a0 <__gethex+0x3b8>
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	459b      	cmp	fp, r3
 80077f2:	db19      	blt.n	8007828 <__gethex+0x440>
 80077f4:	6861      	ldr	r1, [r4, #4]
 80077f6:	ee18 0a10 	vmov	r0, s16
 80077fa:	3101      	adds	r1, #1
 80077fc:	f000 f928 	bl	8007a50 <_Balloc>
 8007800:	4681      	mov	r9, r0
 8007802:	b918      	cbnz	r0, 800780c <__gethex+0x424>
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <__gethex+0x488>)
 8007806:	4602      	mov	r2, r0
 8007808:	2184      	movs	r1, #132	; 0x84
 800780a:	e6a8      	b.n	800755e <__gethex+0x176>
 800780c:	6922      	ldr	r2, [r4, #16]
 800780e:	3202      	adds	r2, #2
 8007810:	f104 010c 	add.w	r1, r4, #12
 8007814:	0092      	lsls	r2, r2, #2
 8007816:	300c      	adds	r0, #12
 8007818:	f000 f90c 	bl	8007a34 <memcpy>
 800781c:	4621      	mov	r1, r4
 800781e:	ee18 0a10 	vmov	r0, s16
 8007822:	f000 f955 	bl	8007ad0 <_Bfree>
 8007826:	464c      	mov	r4, r9
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007830:	6122      	str	r2, [r4, #16]
 8007832:	2201      	movs	r2, #1
 8007834:	615a      	str	r2, [r3, #20]
 8007836:	e7bb      	b.n	80077b0 <__gethex+0x3c8>
 8007838:	6922      	ldr	r2, [r4, #16]
 800783a:	455a      	cmp	r2, fp
 800783c:	dd0b      	ble.n	8007856 <__gethex+0x46e>
 800783e:	2101      	movs	r1, #1
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fd69 	bl	8007318 <rshift>
 8007846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800784a:	3501      	adds	r5, #1
 800784c:	42ab      	cmp	r3, r5
 800784e:	f6ff aed0 	blt.w	80075f2 <__gethex+0x20a>
 8007852:	2701      	movs	r7, #1
 8007854:	e7c0      	b.n	80077d8 <__gethex+0x3f0>
 8007856:	f016 061f 	ands.w	r6, r6, #31
 800785a:	d0fa      	beq.n	8007852 <__gethex+0x46a>
 800785c:	449a      	add	sl, r3
 800785e:	f1c6 0620 	rsb	r6, r6, #32
 8007862:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007866:	f000 f9e9 	bl	8007c3c <__hi0bits>
 800786a:	42b0      	cmp	r0, r6
 800786c:	dbe7      	blt.n	800783e <__gethex+0x456>
 800786e:	e7f0      	b.n	8007852 <__gethex+0x46a>
 8007870:	0800a604 	.word	0x0800a604

08007874 <L_shift>:
 8007874:	f1c2 0208 	rsb	r2, r2, #8
 8007878:	0092      	lsls	r2, r2, #2
 800787a:	b570      	push	{r4, r5, r6, lr}
 800787c:	f1c2 0620 	rsb	r6, r2, #32
 8007880:	6843      	ldr	r3, [r0, #4]
 8007882:	6804      	ldr	r4, [r0, #0]
 8007884:	fa03 f506 	lsl.w	r5, r3, r6
 8007888:	432c      	orrs	r4, r5
 800788a:	40d3      	lsrs	r3, r2
 800788c:	6004      	str	r4, [r0, #0]
 800788e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007892:	4288      	cmp	r0, r1
 8007894:	d3f4      	bcc.n	8007880 <L_shift+0xc>
 8007896:	bd70      	pop	{r4, r5, r6, pc}

08007898 <__match>:
 8007898:	b530      	push	{r4, r5, lr}
 800789a:	6803      	ldr	r3, [r0, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a2:	b914      	cbnz	r4, 80078aa <__match+0x12>
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	2001      	movs	r0, #1
 80078a8:	bd30      	pop	{r4, r5, pc}
 80078aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078b2:	2d19      	cmp	r5, #25
 80078b4:	bf98      	it	ls
 80078b6:	3220      	addls	r2, #32
 80078b8:	42a2      	cmp	r2, r4
 80078ba:	d0f0      	beq.n	800789e <__match+0x6>
 80078bc:	2000      	movs	r0, #0
 80078be:	e7f3      	b.n	80078a8 <__match+0x10>

080078c0 <__hexnan>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	680b      	ldr	r3, [r1, #0]
 80078c6:	6801      	ldr	r1, [r0, #0]
 80078c8:	115e      	asrs	r6, r3, #5
 80078ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078ce:	f013 031f 	ands.w	r3, r3, #31
 80078d2:	b087      	sub	sp, #28
 80078d4:	bf18      	it	ne
 80078d6:	3604      	addne	r6, #4
 80078d8:	2500      	movs	r5, #0
 80078da:	1f37      	subs	r7, r6, #4
 80078dc:	4682      	mov	sl, r0
 80078de:	4690      	mov	r8, r2
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80078e6:	46b9      	mov	r9, r7
 80078e8:	463c      	mov	r4, r7
 80078ea:	9502      	str	r5, [sp, #8]
 80078ec:	46ab      	mov	fp, r5
 80078ee:	784a      	ldrb	r2, [r1, #1]
 80078f0:	1c4b      	adds	r3, r1, #1
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	b342      	cbz	r2, 8007948 <__hexnan+0x88>
 80078f6:	4610      	mov	r0, r2
 80078f8:	9105      	str	r1, [sp, #20]
 80078fa:	9204      	str	r2, [sp, #16]
 80078fc:	f7ff fd5e 	bl	80073bc <__hexdig_fun>
 8007900:	2800      	cmp	r0, #0
 8007902:	d14f      	bne.n	80079a4 <__hexnan+0xe4>
 8007904:	9a04      	ldr	r2, [sp, #16]
 8007906:	9905      	ldr	r1, [sp, #20]
 8007908:	2a20      	cmp	r2, #32
 800790a:	d818      	bhi.n	800793e <__hexnan+0x7e>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	459b      	cmp	fp, r3
 8007910:	dd13      	ble.n	800793a <__hexnan+0x7a>
 8007912:	454c      	cmp	r4, r9
 8007914:	d206      	bcs.n	8007924 <__hexnan+0x64>
 8007916:	2d07      	cmp	r5, #7
 8007918:	dc04      	bgt.n	8007924 <__hexnan+0x64>
 800791a:	462a      	mov	r2, r5
 800791c:	4649      	mov	r1, r9
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ffa8 	bl	8007874 <L_shift>
 8007924:	4544      	cmp	r4, r8
 8007926:	d950      	bls.n	80079ca <__hexnan+0x10a>
 8007928:	2300      	movs	r3, #0
 800792a:	f1a4 0904 	sub.w	r9, r4, #4
 800792e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007932:	f8cd b008 	str.w	fp, [sp, #8]
 8007936:	464c      	mov	r4, r9
 8007938:	461d      	mov	r5, r3
 800793a:	9903      	ldr	r1, [sp, #12]
 800793c:	e7d7      	b.n	80078ee <__hexnan+0x2e>
 800793e:	2a29      	cmp	r2, #41	; 0x29
 8007940:	d156      	bne.n	80079f0 <__hexnan+0x130>
 8007942:	3102      	adds	r1, #2
 8007944:	f8ca 1000 	str.w	r1, [sl]
 8007948:	f1bb 0f00 	cmp.w	fp, #0
 800794c:	d050      	beq.n	80079f0 <__hexnan+0x130>
 800794e:	454c      	cmp	r4, r9
 8007950:	d206      	bcs.n	8007960 <__hexnan+0xa0>
 8007952:	2d07      	cmp	r5, #7
 8007954:	dc04      	bgt.n	8007960 <__hexnan+0xa0>
 8007956:	462a      	mov	r2, r5
 8007958:	4649      	mov	r1, r9
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff ff8a 	bl	8007874 <L_shift>
 8007960:	4544      	cmp	r4, r8
 8007962:	d934      	bls.n	80079ce <__hexnan+0x10e>
 8007964:	f1a8 0204 	sub.w	r2, r8, #4
 8007968:	4623      	mov	r3, r4
 800796a:	f853 1b04 	ldr.w	r1, [r3], #4
 800796e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007972:	429f      	cmp	r7, r3
 8007974:	d2f9      	bcs.n	800796a <__hexnan+0xaa>
 8007976:	1b3b      	subs	r3, r7, r4
 8007978:	f023 0303 	bic.w	r3, r3, #3
 800797c:	3304      	adds	r3, #4
 800797e:	3401      	adds	r4, #1
 8007980:	3e03      	subs	r6, #3
 8007982:	42b4      	cmp	r4, r6
 8007984:	bf88      	it	hi
 8007986:	2304      	movhi	r3, #4
 8007988:	4443      	add	r3, r8
 800798a:	2200      	movs	r2, #0
 800798c:	f843 2b04 	str.w	r2, [r3], #4
 8007990:	429f      	cmp	r7, r3
 8007992:	d2fb      	bcs.n	800798c <__hexnan+0xcc>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	b91b      	cbnz	r3, 80079a0 <__hexnan+0xe0>
 8007998:	4547      	cmp	r7, r8
 800799a:	d127      	bne.n	80079ec <__hexnan+0x12c>
 800799c:	2301      	movs	r3, #1
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	2005      	movs	r0, #5
 80079a2:	e026      	b.n	80079f2 <__hexnan+0x132>
 80079a4:	3501      	adds	r5, #1
 80079a6:	2d08      	cmp	r5, #8
 80079a8:	f10b 0b01 	add.w	fp, fp, #1
 80079ac:	dd06      	ble.n	80079bc <__hexnan+0xfc>
 80079ae:	4544      	cmp	r4, r8
 80079b0:	d9c3      	bls.n	800793a <__hexnan+0x7a>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80079b8:	2501      	movs	r5, #1
 80079ba:	3c04      	subs	r4, #4
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	f000 000f 	and.w	r0, r0, #15
 80079c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	e7b7      	b.n	800793a <__hexnan+0x7a>
 80079ca:	2508      	movs	r5, #8
 80079cc:	e7b5      	b.n	800793a <__hexnan+0x7a>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0df      	beq.n	8007994 <__hexnan+0xd4>
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	f1c3 0320 	rsb	r3, r3, #32
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079e4:	401a      	ands	r2, r3
 80079e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80079ea:	e7d3      	b.n	8007994 <__hexnan+0xd4>
 80079ec:	3f04      	subs	r7, #4
 80079ee:	e7d1      	b.n	8007994 <__hexnan+0xd4>
 80079f0:	2004      	movs	r0, #4
 80079f2:	b007      	add	sp, #28
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079f8 <_localeconv_r>:
 80079f8:	4800      	ldr	r0, [pc, #0]	; (80079fc <_localeconv_r+0x4>)
 80079fa:	4770      	bx	lr
 80079fc:	20000164 	.word	0x20000164

08007a00 <malloc>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <malloc+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f000 bd3d 	b.w	8008484 <_malloc_r>
 8007a0a:	bf00      	nop
 8007a0c:	2000000c 	.word	0x2000000c

08007a10 <__ascii_mbtowc>:
 8007a10:	b082      	sub	sp, #8
 8007a12:	b901      	cbnz	r1, 8007a16 <__ascii_mbtowc+0x6>
 8007a14:	a901      	add	r1, sp, #4
 8007a16:	b142      	cbz	r2, 8007a2a <__ascii_mbtowc+0x1a>
 8007a18:	b14b      	cbz	r3, 8007a2e <__ascii_mbtowc+0x1e>
 8007a1a:	7813      	ldrb	r3, [r2, #0]
 8007a1c:	600b      	str	r3, [r1, #0]
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	1e10      	subs	r0, r2, #0
 8007a22:	bf18      	it	ne
 8007a24:	2001      	movne	r0, #1
 8007a26:	b002      	add	sp, #8
 8007a28:	4770      	bx	lr
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	e7fb      	b.n	8007a26 <__ascii_mbtowc+0x16>
 8007a2e:	f06f 0001 	mvn.w	r0, #1
 8007a32:	e7f8      	b.n	8007a26 <__ascii_mbtowc+0x16>

08007a34 <memcpy>:
 8007a34:	440a      	add	r2, r1
 8007a36:	4291      	cmp	r1, r2
 8007a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a3c:	d100      	bne.n	8007a40 <memcpy+0xc>
 8007a3e:	4770      	bx	lr
 8007a40:	b510      	push	{r4, lr}
 8007a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	d1f9      	bne.n	8007a42 <memcpy+0xe>
 8007a4e:	bd10      	pop	{r4, pc}

08007a50 <_Balloc>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a54:	4604      	mov	r4, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Balloc+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ffd0 	bl	8007a00 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6260      	str	r0, [r4, #36]	; 0x24
 8007a64:	b920      	cbnz	r0, 8007a70 <_Balloc+0x20>
 8007a66:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <_Balloc+0x78>)
 8007a68:	4818      	ldr	r0, [pc, #96]	; (8007acc <_Balloc+0x7c>)
 8007a6a:	2166      	movs	r1, #102	; 0x66
 8007a6c:	f000 fef8 	bl	8008860 <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a7a:	68f3      	ldr	r3, [r6, #12]
 8007a7c:	b183      	cbz	r3, 8007aa0 <_Balloc+0x50>
 8007a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a86:	b9b8      	cbnz	r0, 8007ab8 <_Balloc+0x68>
 8007a88:	2101      	movs	r1, #1
 8007a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a8e:	1d72      	adds	r2, r6, #5
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fc97 	bl	80083c6 <_calloc_r>
 8007a98:	b160      	cbz	r0, 8007ab4 <_Balloc+0x64>
 8007a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a9e:	e00e      	b.n	8007abe <_Balloc+0x6e>
 8007aa0:	2221      	movs	r2, #33	; 0x21
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fc8e 	bl	80083c6 <_calloc_r>
 8007aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aac:	60f0      	str	r0, [r6, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <_Balloc+0x2e>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	6802      	ldr	r2, [r0, #0]
 8007aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ac4:	e7f7      	b.n	8007ab6 <_Balloc+0x66>
 8007ac6:	bf00      	nop
 8007ac8:	0800a58e 	.word	0x0800a58e
 8007acc:	0800a694 	.word	0x0800a694

08007ad0 <_Bfree>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b976      	cbnz	r6, 8007af8 <_Bfree+0x28>
 8007ada:	2010      	movs	r0, #16
 8007adc:	f7ff ff90 	bl	8007a00 <malloc>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ae4:	b920      	cbnz	r0, 8007af0 <_Bfree+0x20>
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <_Bfree+0x3c>)
 8007ae8:	4809      	ldr	r0, [pc, #36]	; (8007b10 <_Bfree+0x40>)
 8007aea:	218a      	movs	r1, #138	; 0x8a
 8007aec:	f000 feb8 	bl	8008860 <__assert_func>
 8007af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af4:	6006      	str	r6, [r0, #0]
 8007af6:	60c6      	str	r6, [r0, #12]
 8007af8:	b13c      	cbz	r4, 8007b0a <_Bfree+0x3a>
 8007afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007afc:	6862      	ldr	r2, [r4, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b04:	6021      	str	r1, [r4, #0]
 8007b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	0800a58e 	.word	0x0800a58e
 8007b10:	0800a694 	.word	0x0800a694

08007b14 <__multadd>:
 8007b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b18:	690e      	ldr	r6, [r1, #16]
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	4698      	mov	r8, r3
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f101 0014 	add.w	r0, r1, #20
 8007b24:	2300      	movs	r3, #0
 8007b26:	6805      	ldr	r5, [r0, #0]
 8007b28:	b2a9      	uxth	r1, r5
 8007b2a:	fb02 8101 	mla	r1, r2, r1, r8
 8007b2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b32:	0c2d      	lsrs	r5, r5, #16
 8007b34:	fb02 c505 	mla	r5, r2, r5, ip
 8007b38:	b289      	uxth	r1, r1
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b40:	429e      	cmp	r6, r3
 8007b42:	f840 1b04 	str.w	r1, [r0], #4
 8007b46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b4a:	dcec      	bgt.n	8007b26 <__multadd+0x12>
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	d022      	beq.n	8007b98 <__multadd+0x84>
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	dc19      	bgt.n	8007b8c <__multadd+0x78>
 8007b58:	6861      	ldr	r1, [r4, #4]
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	f7ff ff77 	bl	8007a50 <_Balloc>
 8007b62:	4605      	mov	r5, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <__multadd+0x5e>
 8007b66:	4602      	mov	r2, r0
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <__multadd+0x8c>)
 8007b6a:	480e      	ldr	r0, [pc, #56]	; (8007ba4 <__multadd+0x90>)
 8007b6c:	21b5      	movs	r1, #181	; 0xb5
 8007b6e:	f000 fe77 	bl	8008860 <__assert_func>
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	3202      	adds	r2, #2
 8007b76:	f104 010c 	add.w	r1, r4, #12
 8007b7a:	0092      	lsls	r2, r2, #2
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	f7ff ff59 	bl	8007a34 <memcpy>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4638      	mov	r0, r7
 8007b86:	f7ff ffa3 	bl	8007ad0 <_Bfree>
 8007b8a:	462c      	mov	r4, r5
 8007b8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b90:	3601      	adds	r6, #1
 8007b92:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b96:	6126      	str	r6, [r4, #16]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9e:	bf00      	nop
 8007ba0:	0800a604 	.word	0x0800a604
 8007ba4:	0800a694 	.word	0x0800a694

08007ba8 <__s2b>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	460c      	mov	r4, r1
 8007bae:	4615      	mov	r5, r2
 8007bb0:	461f      	mov	r7, r3
 8007bb2:	2209      	movs	r2, #9
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	db09      	blt.n	8007bd8 <__s2b+0x30>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff ff43 	bl	8007a50 <_Balloc>
 8007bca:	b940      	cbnz	r0, 8007bde <__s2b+0x36>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <__s2b+0x8c>)
 8007bd0:	4819      	ldr	r0, [pc, #100]	; (8007c38 <__s2b+0x90>)
 8007bd2:	21ce      	movs	r1, #206	; 0xce
 8007bd4:	f000 fe44 	bl	8008860 <__assert_func>
 8007bd8:	0052      	lsls	r2, r2, #1
 8007bda:	3101      	adds	r1, #1
 8007bdc:	e7f0      	b.n	8007bc0 <__s2b+0x18>
 8007bde:	9b08      	ldr	r3, [sp, #32]
 8007be0:	6143      	str	r3, [r0, #20]
 8007be2:	2d09      	cmp	r5, #9
 8007be4:	f04f 0301 	mov.w	r3, #1
 8007be8:	6103      	str	r3, [r0, #16]
 8007bea:	dd16      	ble.n	8007c1a <__s2b+0x72>
 8007bec:	f104 0909 	add.w	r9, r4, #9
 8007bf0:	46c8      	mov	r8, r9
 8007bf2:	442c      	add	r4, r5
 8007bf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	3b30      	subs	r3, #48	; 0x30
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ff88 	bl	8007b14 <__multadd>
 8007c04:	45a0      	cmp	r8, r4
 8007c06:	d1f5      	bne.n	8007bf4 <__s2b+0x4c>
 8007c08:	f1a5 0408 	sub.w	r4, r5, #8
 8007c0c:	444c      	add	r4, r9
 8007c0e:	1b2d      	subs	r5, r5, r4
 8007c10:	1963      	adds	r3, r4, r5
 8007c12:	42bb      	cmp	r3, r7
 8007c14:	db04      	blt.n	8007c20 <__s2b+0x78>
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	340a      	adds	r4, #10
 8007c1c:	2509      	movs	r5, #9
 8007c1e:	e7f6      	b.n	8007c0e <__s2b+0x66>
 8007c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c24:	4601      	mov	r1, r0
 8007c26:	3b30      	subs	r3, #48	; 0x30
 8007c28:	220a      	movs	r2, #10
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7ff ff72 	bl	8007b14 <__multadd>
 8007c30:	e7ee      	b.n	8007c10 <__s2b+0x68>
 8007c32:	bf00      	nop
 8007c34:	0800a604 	.word	0x0800a604
 8007c38:	0800a694 	.word	0x0800a694

08007c3c <__hi0bits>:
 8007c3c:	0c03      	lsrs	r3, r0, #16
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	b9d3      	cbnz	r3, 8007c78 <__hi0bits+0x3c>
 8007c42:	0400      	lsls	r0, r0, #16
 8007c44:	2310      	movs	r3, #16
 8007c46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c4a:	bf04      	itt	eq
 8007c4c:	0200      	lsleq	r0, r0, #8
 8007c4e:	3308      	addeq	r3, #8
 8007c50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c54:	bf04      	itt	eq
 8007c56:	0100      	lsleq	r0, r0, #4
 8007c58:	3304      	addeq	r3, #4
 8007c5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c5e:	bf04      	itt	eq
 8007c60:	0080      	lsleq	r0, r0, #2
 8007c62:	3302      	addeq	r3, #2
 8007c64:	2800      	cmp	r0, #0
 8007c66:	db05      	blt.n	8007c74 <__hi0bits+0x38>
 8007c68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c6c:	f103 0301 	add.w	r3, r3, #1
 8007c70:	bf08      	it	eq
 8007c72:	2320      	moveq	r3, #32
 8007c74:	4618      	mov	r0, r3
 8007c76:	4770      	bx	lr
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e7e4      	b.n	8007c46 <__hi0bits+0xa>

08007c7c <__lo0bits>:
 8007c7c:	6803      	ldr	r3, [r0, #0]
 8007c7e:	f013 0207 	ands.w	r2, r3, #7
 8007c82:	4601      	mov	r1, r0
 8007c84:	d00b      	beq.n	8007c9e <__lo0bits+0x22>
 8007c86:	07da      	lsls	r2, r3, #31
 8007c88:	d424      	bmi.n	8007cd4 <__lo0bits+0x58>
 8007c8a:	0798      	lsls	r0, r3, #30
 8007c8c:	bf49      	itett	mi
 8007c8e:	085b      	lsrmi	r3, r3, #1
 8007c90:	089b      	lsrpl	r3, r3, #2
 8007c92:	2001      	movmi	r0, #1
 8007c94:	600b      	strmi	r3, [r1, #0]
 8007c96:	bf5c      	itt	pl
 8007c98:	600b      	strpl	r3, [r1, #0]
 8007c9a:	2002      	movpl	r0, #2
 8007c9c:	4770      	bx	lr
 8007c9e:	b298      	uxth	r0, r3
 8007ca0:	b9b0      	cbnz	r0, 8007cd0 <__lo0bits+0x54>
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	2010      	movs	r0, #16
 8007ca6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007caa:	bf04      	itt	eq
 8007cac:	0a1b      	lsreq	r3, r3, #8
 8007cae:	3008      	addeq	r0, #8
 8007cb0:	071a      	lsls	r2, r3, #28
 8007cb2:	bf04      	itt	eq
 8007cb4:	091b      	lsreq	r3, r3, #4
 8007cb6:	3004      	addeq	r0, #4
 8007cb8:	079a      	lsls	r2, r3, #30
 8007cba:	bf04      	itt	eq
 8007cbc:	089b      	lsreq	r3, r3, #2
 8007cbe:	3002      	addeq	r0, #2
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	d403      	bmi.n	8007ccc <__lo0bits+0x50>
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	f100 0001 	add.w	r0, r0, #1
 8007cca:	d005      	beq.n	8007cd8 <__lo0bits+0x5c>
 8007ccc:	600b      	str	r3, [r1, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	e7e8      	b.n	8007ca6 <__lo0bits+0x2a>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr
 8007cd8:	2020      	movs	r0, #32
 8007cda:	4770      	bx	lr

08007cdc <__i2b>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f7ff feb5 	bl	8007a50 <_Balloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__i2b+0x1a>
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <__i2b+0x24>)
 8007cec:	4805      	ldr	r0, [pc, #20]	; (8007d04 <__i2b+0x28>)
 8007cee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cf2:	f000 fdb5 	bl	8008860 <__assert_func>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6144      	str	r4, [r0, #20]
 8007cfa:	6103      	str	r3, [r0, #16]
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	0800a604 	.word	0x0800a604
 8007d04:	0800a694 	.word	0x0800a694

08007d08 <__multiply>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	690a      	ldr	r2, [r1, #16]
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	bfb8      	it	lt
 8007d16:	460b      	movlt	r3, r1
 8007d18:	460d      	mov	r5, r1
 8007d1a:	bfbc      	itt	lt
 8007d1c:	4625      	movlt	r5, r4
 8007d1e:	461c      	movlt	r4, r3
 8007d20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007d24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d28:	68ab      	ldr	r3, [r5, #8]
 8007d2a:	6869      	ldr	r1, [r5, #4]
 8007d2c:	eb0a 0709 	add.w	r7, sl, r9
 8007d30:	42bb      	cmp	r3, r7
 8007d32:	b085      	sub	sp, #20
 8007d34:	bfb8      	it	lt
 8007d36:	3101      	addlt	r1, #1
 8007d38:	f7ff fe8a 	bl	8007a50 <_Balloc>
 8007d3c:	b930      	cbnz	r0, 8007d4c <__multiply+0x44>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <__multiply+0x144>)
 8007d42:	4843      	ldr	r0, [pc, #268]	; (8007e50 <__multiply+0x148>)
 8007d44:	f240 115d 	movw	r1, #349	; 0x15d
 8007d48:	f000 fd8a 	bl	8008860 <__assert_func>
 8007d4c:	f100 0614 	add.w	r6, r0, #20
 8007d50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d54:	4633      	mov	r3, r6
 8007d56:	2200      	movs	r2, #0
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	d31e      	bcc.n	8007d9a <__multiply+0x92>
 8007d5c:	f105 0c14 	add.w	ip, r5, #20
 8007d60:	f104 0314 	add.w	r3, r4, #20
 8007d64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	ebac 0205 	sub.w	r2, ip, r5
 8007d72:	3a15      	subs	r2, #21
 8007d74:	f022 0203 	bic.w	r2, r2, #3
 8007d78:	3204      	adds	r2, #4
 8007d7a:	f105 0115 	add.w	r1, r5, #21
 8007d7e:	458c      	cmp	ip, r1
 8007d80:	bf38      	it	cc
 8007d82:	2204      	movcc	r2, #4
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	9a02      	ldr	r2, [sp, #8]
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d808      	bhi.n	8007da0 <__multiply+0x98>
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	dc55      	bgt.n	8007e3e <__multiply+0x136>
 8007d92:	6107      	str	r7, [r0, #16]
 8007d94:	b005      	add	sp, #20
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	f843 2b04 	str.w	r2, [r3], #4
 8007d9e:	e7db      	b.n	8007d58 <__multiply+0x50>
 8007da0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007da4:	f1ba 0f00 	cmp.w	sl, #0
 8007da8:	d020      	beq.n	8007dec <__multiply+0xe4>
 8007daa:	f105 0e14 	add.w	lr, r5, #20
 8007dae:	46b1      	mov	r9, r6
 8007db0:	2200      	movs	r2, #0
 8007db2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007db6:	f8d9 b000 	ldr.w	fp, [r9]
 8007dba:	b2a1      	uxth	r1, r4
 8007dbc:	fa1f fb8b 	uxth.w	fp, fp
 8007dc0:	fb0a b101 	mla	r1, sl, r1, fp
 8007dc4:	4411      	add	r1, r2
 8007dc6:	f8d9 2000 	ldr.w	r2, [r9]
 8007dca:	0c24      	lsrs	r4, r4, #16
 8007dcc:	0c12      	lsrs	r2, r2, #16
 8007dce:	fb0a 2404 	mla	r4, sl, r4, r2
 8007dd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007dd6:	b289      	uxth	r1, r1
 8007dd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ddc:	45f4      	cmp	ip, lr
 8007dde:	f849 1b04 	str.w	r1, [r9], #4
 8007de2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007de6:	d8e4      	bhi.n	8007db2 <__multiply+0xaa>
 8007de8:	9901      	ldr	r1, [sp, #4]
 8007dea:	5072      	str	r2, [r6, r1]
 8007dec:	9a03      	ldr	r2, [sp, #12]
 8007dee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007df2:	3304      	adds	r3, #4
 8007df4:	f1b9 0f00 	cmp.w	r9, #0
 8007df8:	d01f      	beq.n	8007e3a <__multiply+0x132>
 8007dfa:	6834      	ldr	r4, [r6, #0]
 8007dfc:	f105 0114 	add.w	r1, r5, #20
 8007e00:	46b6      	mov	lr, r6
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	880a      	ldrh	r2, [r1, #0]
 8007e08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e0c:	fb09 b202 	mla	r2, r9, r2, fp
 8007e10:	4492      	add	sl, r2
 8007e12:	b2a4      	uxth	r4, r4
 8007e14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007e18:	f84e 4b04 	str.w	r4, [lr], #4
 8007e1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007e20:	f8be 2000 	ldrh.w	r2, [lr]
 8007e24:	0c24      	lsrs	r4, r4, #16
 8007e26:	fb09 2404 	mla	r4, r9, r4, r2
 8007e2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007e2e:	458c      	cmp	ip, r1
 8007e30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e34:	d8e7      	bhi.n	8007e06 <__multiply+0xfe>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	50b4      	str	r4, [r6, r2]
 8007e3a:	3604      	adds	r6, #4
 8007e3c:	e7a3      	b.n	8007d86 <__multiply+0x7e>
 8007e3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1a5      	bne.n	8007d92 <__multiply+0x8a>
 8007e46:	3f01      	subs	r7, #1
 8007e48:	e7a1      	b.n	8007d8e <__multiply+0x86>
 8007e4a:	bf00      	nop
 8007e4c:	0800a604 	.word	0x0800a604
 8007e50:	0800a694 	.word	0x0800a694

08007e54 <__pow5mult>:
 8007e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4615      	mov	r5, r2
 8007e5a:	f012 0203 	ands.w	r2, r2, #3
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	d007      	beq.n	8007e74 <__pow5mult+0x20>
 8007e64:	4c25      	ldr	r4, [pc, #148]	; (8007efc <__pow5mult+0xa8>)
 8007e66:	3a01      	subs	r2, #1
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6e:	f7ff fe51 	bl	8007b14 <__multadd>
 8007e72:	4607      	mov	r7, r0
 8007e74:	10ad      	asrs	r5, r5, #2
 8007e76:	d03d      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e7a:	b97c      	cbnz	r4, 8007e9c <__pow5mult+0x48>
 8007e7c:	2010      	movs	r0, #16
 8007e7e:	f7ff fdbf 	bl	8007a00 <malloc>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6270      	str	r0, [r6, #36]	; 0x24
 8007e86:	b928      	cbnz	r0, 8007e94 <__pow5mult+0x40>
 8007e88:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <__pow5mult+0xac>)
 8007e8a:	481e      	ldr	r0, [pc, #120]	; (8007f04 <__pow5mult+0xb0>)
 8007e8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e90:	f000 fce6 	bl	8008860 <__assert_func>
 8007e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e98:	6004      	str	r4, [r0, #0]
 8007e9a:	60c4      	str	r4, [r0, #12]
 8007e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea4:	b94c      	cbnz	r4, 8007eba <__pow5mult+0x66>
 8007ea6:	f240 2171 	movw	r1, #625	; 0x271
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7ff ff16 	bl	8007cdc <__i2b>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	07eb      	lsls	r3, r5, #31
 8007ec0:	d50a      	bpl.n	8007ed8 <__pow5mult+0x84>
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ff1e 	bl	8007d08 <__multiply>
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f7ff fdfd 	bl	8007ad0 <_Bfree>
 8007ed6:	4647      	mov	r7, r8
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	d00b      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	b938      	cbnz	r0, 8007ef0 <__pow5mult+0x9c>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff ff0f 	bl	8007d08 <__multiply>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	f8c0 9000 	str.w	r9, [r0]
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	e7e4      	b.n	8007ebe <__pow5mult+0x6a>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	bf00      	nop
 8007efc:	0800a7e8 	.word	0x0800a7e8
 8007f00:	0800a58e 	.word	0x0800a58e
 8007f04:	0800a694 	.word	0x0800a694

08007f08 <__lshift>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6849      	ldr	r1, [r1, #4]
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	4607      	mov	r7, r0
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f20:	f108 0601 	add.w	r6, r8, #1
 8007f24:	42b3      	cmp	r3, r6
 8007f26:	db0b      	blt.n	8007f40 <__lshift+0x38>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fd91 	bl	8007a50 <_Balloc>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b948      	cbnz	r0, 8007f46 <__lshift+0x3e>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <__lshift+0xd0>)
 8007f36:	4829      	ldr	r0, [pc, #164]	; (8007fdc <__lshift+0xd4>)
 8007f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f3c:	f000 fc90 	bl	8008860 <__assert_func>
 8007f40:	3101      	adds	r1, #1
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	e7ee      	b.n	8007f24 <__lshift+0x1c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f100 0114 	add.w	r1, r0, #20
 8007f4c:	f100 0210 	add.w	r2, r0, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	4553      	cmp	r3, sl
 8007f54:	db33      	blt.n	8007fbe <__lshift+0xb6>
 8007f56:	6920      	ldr	r0, [r4, #16]
 8007f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f5c:	f104 0314 	add.w	r3, r4, #20
 8007f60:	f019 091f 	ands.w	r9, r9, #31
 8007f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f6c:	d02b      	beq.n	8007fc6 <__lshift+0xbe>
 8007f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f72:	468a      	mov	sl, r1
 8007f74:	2200      	movs	r2, #0
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	fa00 f009 	lsl.w	r0, r0, r9
 8007f7c:	4302      	orrs	r2, r0
 8007f7e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	459c      	cmp	ip, r3
 8007f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f8c:	d8f3      	bhi.n	8007f76 <__lshift+0x6e>
 8007f8e:	ebac 0304 	sub.w	r3, ip, r4
 8007f92:	3b15      	subs	r3, #21
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	3304      	adds	r3, #4
 8007f9a:	f104 0015 	add.w	r0, r4, #21
 8007f9e:	4584      	cmp	ip, r0
 8007fa0:	bf38      	it	cc
 8007fa2:	2304      	movcc	r3, #4
 8007fa4:	50ca      	str	r2, [r1, r3]
 8007fa6:	b10a      	cbz	r2, 8007fac <__lshift+0xa4>
 8007fa8:	f108 0602 	add.w	r6, r8, #2
 8007fac:	3e01      	subs	r6, #1
 8007fae:	4638      	mov	r0, r7
 8007fb0:	612e      	str	r6, [r5, #16]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	f7ff fd8c 	bl	8007ad0 <_Bfree>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	e7c5      	b.n	8007f52 <__lshift+0x4a>
 8007fc6:	3904      	subs	r1, #4
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd0:	459c      	cmp	ip, r3
 8007fd2:	d8f9      	bhi.n	8007fc8 <__lshift+0xc0>
 8007fd4:	e7ea      	b.n	8007fac <__lshift+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	0800a604 	.word	0x0800a604
 8007fdc:	0800a694 	.word	0x0800a694

08007fe0 <__mcmp>:
 8007fe0:	b530      	push	{r4, r5, lr}
 8007fe2:	6902      	ldr	r2, [r0, #16]
 8007fe4:	690c      	ldr	r4, [r1, #16]
 8007fe6:	1b12      	subs	r2, r2, r4
 8007fe8:	d10e      	bne.n	8008008 <__mcmp+0x28>
 8007fea:	f100 0314 	add.w	r3, r0, #20
 8007fee:	3114      	adds	r1, #20
 8007ff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008000:	42a5      	cmp	r5, r4
 8008002:	d003      	beq.n	800800c <__mcmp+0x2c>
 8008004:	d305      	bcc.n	8008012 <__mcmp+0x32>
 8008006:	2201      	movs	r2, #1
 8008008:	4610      	mov	r0, r2
 800800a:	bd30      	pop	{r4, r5, pc}
 800800c:	4283      	cmp	r3, r0
 800800e:	d3f3      	bcc.n	8007ff8 <__mcmp+0x18>
 8008010:	e7fa      	b.n	8008008 <__mcmp+0x28>
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	e7f7      	b.n	8008008 <__mcmp+0x28>

08008018 <__mdiff>:
 8008018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	4606      	mov	r6, r0
 8008020:	4611      	mov	r1, r2
 8008022:	4620      	mov	r0, r4
 8008024:	4617      	mov	r7, r2
 8008026:	f7ff ffdb 	bl	8007fe0 <__mcmp>
 800802a:	1e05      	subs	r5, r0, #0
 800802c:	d110      	bne.n	8008050 <__mdiff+0x38>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fd0d 	bl	8007a50 <_Balloc>
 8008036:	b930      	cbnz	r0, 8008046 <__mdiff+0x2e>
 8008038:	4b39      	ldr	r3, [pc, #228]	; (8008120 <__mdiff+0x108>)
 800803a:	4602      	mov	r2, r0
 800803c:	f240 2132 	movw	r1, #562	; 0x232
 8008040:	4838      	ldr	r0, [pc, #224]	; (8008124 <__mdiff+0x10c>)
 8008042:	f000 fc0d 	bl	8008860 <__assert_func>
 8008046:	2301      	movs	r3, #1
 8008048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800804c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	bfa4      	itt	ge
 8008052:	463b      	movge	r3, r7
 8008054:	4627      	movge	r7, r4
 8008056:	4630      	mov	r0, r6
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	bfa6      	itte	ge
 800805c:	461c      	movge	r4, r3
 800805e:	2500      	movge	r5, #0
 8008060:	2501      	movlt	r5, #1
 8008062:	f7ff fcf5 	bl	8007a50 <_Balloc>
 8008066:	b920      	cbnz	r0, 8008072 <__mdiff+0x5a>
 8008068:	4b2d      	ldr	r3, [pc, #180]	; (8008120 <__mdiff+0x108>)
 800806a:	4602      	mov	r2, r0
 800806c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008070:	e7e6      	b.n	8008040 <__mdiff+0x28>
 8008072:	693e      	ldr	r6, [r7, #16]
 8008074:	60c5      	str	r5, [r0, #12]
 8008076:	6925      	ldr	r5, [r4, #16]
 8008078:	f107 0114 	add.w	r1, r7, #20
 800807c:	f104 0914 	add.w	r9, r4, #20
 8008080:	f100 0e14 	add.w	lr, r0, #20
 8008084:	f107 0210 	add.w	r2, r7, #16
 8008088:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800808c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008090:	46f2      	mov	sl, lr
 8008092:	2700      	movs	r7, #0
 8008094:	f859 3b04 	ldr.w	r3, [r9], #4
 8008098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800809c:	fa1f f883 	uxth.w	r8, r3
 80080a0:	fa17 f78b 	uxtah	r7, r7, fp
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	eba7 0808 	sub.w	r8, r7, r8
 80080aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080b2:	fa1f f888 	uxth.w	r8, r8
 80080b6:	141f      	asrs	r7, r3, #16
 80080b8:	454d      	cmp	r5, r9
 80080ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080be:	f84a 3b04 	str.w	r3, [sl], #4
 80080c2:	d8e7      	bhi.n	8008094 <__mdiff+0x7c>
 80080c4:	1b2b      	subs	r3, r5, r4
 80080c6:	3b15      	subs	r3, #21
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	3304      	adds	r3, #4
 80080ce:	3415      	adds	r4, #21
 80080d0:	42a5      	cmp	r5, r4
 80080d2:	bf38      	it	cc
 80080d4:	2304      	movcc	r3, #4
 80080d6:	4419      	add	r1, r3
 80080d8:	4473      	add	r3, lr
 80080da:	469e      	mov	lr, r3
 80080dc:	460d      	mov	r5, r1
 80080de:	4565      	cmp	r5, ip
 80080e0:	d30e      	bcc.n	8008100 <__mdiff+0xe8>
 80080e2:	f10c 0203 	add.w	r2, ip, #3
 80080e6:	1a52      	subs	r2, r2, r1
 80080e8:	f022 0203 	bic.w	r2, r2, #3
 80080ec:	3903      	subs	r1, #3
 80080ee:	458c      	cmp	ip, r1
 80080f0:	bf38      	it	cc
 80080f2:	2200      	movcc	r2, #0
 80080f4:	441a      	add	r2, r3
 80080f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080fa:	b17b      	cbz	r3, 800811c <__mdiff+0x104>
 80080fc:	6106      	str	r6, [r0, #16]
 80080fe:	e7a5      	b.n	800804c <__mdiff+0x34>
 8008100:	f855 8b04 	ldr.w	r8, [r5], #4
 8008104:	fa17 f488 	uxtah	r4, r7, r8
 8008108:	1422      	asrs	r2, r4, #16
 800810a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800810e:	b2a4      	uxth	r4, r4
 8008110:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008114:	f84e 4b04 	str.w	r4, [lr], #4
 8008118:	1417      	asrs	r7, r2, #16
 800811a:	e7e0      	b.n	80080de <__mdiff+0xc6>
 800811c:	3e01      	subs	r6, #1
 800811e:	e7ea      	b.n	80080f6 <__mdiff+0xde>
 8008120:	0800a604 	.word	0x0800a604
 8008124:	0800a694 	.word	0x0800a694

08008128 <__ulp>:
 8008128:	b082      	sub	sp, #8
 800812a:	ed8d 0b00 	vstr	d0, [sp]
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	4912      	ldr	r1, [pc, #72]	; (800817c <__ulp+0x54>)
 8008132:	4019      	ands	r1, r3
 8008134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008138:	2900      	cmp	r1, #0
 800813a:	dd05      	ble.n	8008148 <__ulp+0x20>
 800813c:	2200      	movs	r2, #0
 800813e:	460b      	mov	r3, r1
 8008140:	ec43 2b10 	vmov	d0, r2, r3
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	4249      	negs	r1, r1
 800814a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800814e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	da04      	bge.n	8008166 <__ulp+0x3e>
 800815c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008160:	fa41 f300 	asr.w	r3, r1, r0
 8008164:	e7ec      	b.n	8008140 <__ulp+0x18>
 8008166:	f1a0 0114 	sub.w	r1, r0, #20
 800816a:	291e      	cmp	r1, #30
 800816c:	bfda      	itte	le
 800816e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008172:	fa20 f101 	lsrle.w	r1, r0, r1
 8008176:	2101      	movgt	r1, #1
 8008178:	460a      	mov	r2, r1
 800817a:	e7e1      	b.n	8008140 <__ulp+0x18>
 800817c:	7ff00000 	.word	0x7ff00000

08008180 <__b2d>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	6905      	ldr	r5, [r0, #16]
 8008184:	f100 0714 	add.w	r7, r0, #20
 8008188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800818c:	1f2e      	subs	r6, r5, #4
 800818e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fd52 	bl	8007c3c <__hi0bits>
 8008198:	f1c0 0320 	rsb	r3, r0, #32
 800819c:	280a      	cmp	r0, #10
 800819e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800821c <__b2d+0x9c>
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	dc14      	bgt.n	80081d0 <__b2d+0x50>
 80081a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80081aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80081ae:	42b7      	cmp	r7, r6
 80081b0:	ea41 030c 	orr.w	r3, r1, ip
 80081b4:	bf34      	ite	cc
 80081b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081ba:	2100      	movcs	r1, #0
 80081bc:	3015      	adds	r0, #21
 80081be:	fa04 f000 	lsl.w	r0, r4, r0
 80081c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80081c6:	ea40 0201 	orr.w	r2, r0, r1
 80081ca:	ec43 2b10 	vmov	d0, r2, r3
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	42b7      	cmp	r7, r6
 80081d2:	bf3a      	itte	cc
 80081d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80081dc:	2100      	movcs	r1, #0
 80081de:	380b      	subs	r0, #11
 80081e0:	d017      	beq.n	8008212 <__b2d+0x92>
 80081e2:	f1c0 0c20 	rsb	ip, r0, #32
 80081e6:	fa04 f500 	lsl.w	r5, r4, r0
 80081ea:	42be      	cmp	r6, r7
 80081ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80081f0:	ea45 0504 	orr.w	r5, r5, r4
 80081f4:	bf8c      	ite	hi
 80081f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80081fa:	2400      	movls	r4, #0
 80081fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008200:	fa01 f000 	lsl.w	r0, r1, r0
 8008204:	fa24 f40c 	lsr.w	r4, r4, ip
 8008208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800820c:	ea40 0204 	orr.w	r2, r0, r4
 8008210:	e7db      	b.n	80081ca <__b2d+0x4a>
 8008212:	ea44 030c 	orr.w	r3, r4, ip
 8008216:	460a      	mov	r2, r1
 8008218:	e7d7      	b.n	80081ca <__b2d+0x4a>
 800821a:	bf00      	nop
 800821c:	3ff00000 	.word	0x3ff00000

08008220 <__d2b>:
 8008220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008224:	4689      	mov	r9, r1
 8008226:	2101      	movs	r1, #1
 8008228:	ec57 6b10 	vmov	r6, r7, d0
 800822c:	4690      	mov	r8, r2
 800822e:	f7ff fc0f 	bl	8007a50 <_Balloc>
 8008232:	4604      	mov	r4, r0
 8008234:	b930      	cbnz	r0, 8008244 <__d2b+0x24>
 8008236:	4602      	mov	r2, r0
 8008238:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <__d2b+0xb0>)
 800823a:	4826      	ldr	r0, [pc, #152]	; (80082d4 <__d2b+0xb4>)
 800823c:	f240 310a 	movw	r1, #778	; 0x30a
 8008240:	f000 fb0e 	bl	8008860 <__assert_func>
 8008244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800824c:	bb35      	cbnz	r5, 800829c <__d2b+0x7c>
 800824e:	2e00      	cmp	r6, #0
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	d028      	beq.n	80082a6 <__d2b+0x86>
 8008254:	4668      	mov	r0, sp
 8008256:	9600      	str	r6, [sp, #0]
 8008258:	f7ff fd10 	bl	8007c7c <__lo0bits>
 800825c:	9900      	ldr	r1, [sp, #0]
 800825e:	b300      	cbz	r0, 80082a2 <__d2b+0x82>
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	f1c0 0320 	rsb	r3, r0, #32
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	430b      	orrs	r3, r1
 800826c:	40c2      	lsrs	r2, r0
 800826e:	6163      	str	r3, [r4, #20]
 8008270:	9201      	str	r2, [sp, #4]
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	61a3      	str	r3, [r4, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2202      	movne	r2, #2
 800827c:	2201      	moveq	r2, #1
 800827e:	6122      	str	r2, [r4, #16]
 8008280:	b1d5      	cbz	r5, 80082b8 <__d2b+0x98>
 8008282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008286:	4405      	add	r5, r0
 8008288:	f8c9 5000 	str.w	r5, [r9]
 800828c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008290:	f8c8 0000 	str.w	r0, [r8]
 8008294:	4620      	mov	r0, r4
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082a0:	e7d5      	b.n	800824e <__d2b+0x2e>
 80082a2:	6161      	str	r1, [r4, #20]
 80082a4:	e7e5      	b.n	8008272 <__d2b+0x52>
 80082a6:	a801      	add	r0, sp, #4
 80082a8:	f7ff fce8 	bl	8007c7c <__lo0bits>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	2201      	movs	r2, #1
 80082b2:	6122      	str	r2, [r4, #16]
 80082b4:	3020      	adds	r0, #32
 80082b6:	e7e3      	b.n	8008280 <__d2b+0x60>
 80082b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082c0:	f8c9 0000 	str.w	r0, [r9]
 80082c4:	6918      	ldr	r0, [r3, #16]
 80082c6:	f7ff fcb9 	bl	8007c3c <__hi0bits>
 80082ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ce:	e7df      	b.n	8008290 <__d2b+0x70>
 80082d0:	0800a604 	.word	0x0800a604
 80082d4:	0800a694 	.word	0x0800a694

080082d8 <__ratio>:
 80082d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4688      	mov	r8, r1
 80082de:	4669      	mov	r1, sp
 80082e0:	4681      	mov	r9, r0
 80082e2:	f7ff ff4d 	bl	8008180 <__b2d>
 80082e6:	a901      	add	r1, sp, #4
 80082e8:	4640      	mov	r0, r8
 80082ea:	ec55 4b10 	vmov	r4, r5, d0
 80082ee:	f7ff ff47 	bl	8008180 <__b2d>
 80082f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80082fa:	eba3 0c02 	sub.w	ip, r3, r2
 80082fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008308:	ec51 0b10 	vmov	r0, r1, d0
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfd6      	itet	le
 8008310:	460a      	movle	r2, r1
 8008312:	462a      	movgt	r2, r5
 8008314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008318:	468b      	mov	fp, r1
 800831a:	462f      	mov	r7, r5
 800831c:	bfd4      	ite	le
 800831e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008326:	4620      	mov	r0, r4
 8008328:	ee10 2a10 	vmov	r2, s0
 800832c:	465b      	mov	r3, fp
 800832e:	4639      	mov	r1, r7
 8008330:	f7f8 faac 	bl	800088c <__aeabi_ddiv>
 8008334:	ec41 0b10 	vmov	d0, r0, r1
 8008338:	b003      	add	sp, #12
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800833e <__copybits>:
 800833e:	3901      	subs	r1, #1
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	1149      	asrs	r1, r1, #5
 8008344:	6914      	ldr	r4, [r2, #16]
 8008346:	3101      	adds	r1, #1
 8008348:	f102 0314 	add.w	r3, r2, #20
 800834c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008354:	1f05      	subs	r5, r0, #4
 8008356:	42a3      	cmp	r3, r4
 8008358:	d30c      	bcc.n	8008374 <__copybits+0x36>
 800835a:	1aa3      	subs	r3, r4, r2
 800835c:	3b11      	subs	r3, #17
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	3211      	adds	r2, #17
 8008364:	42a2      	cmp	r2, r4
 8008366:	bf88      	it	hi
 8008368:	2300      	movhi	r3, #0
 800836a:	4418      	add	r0, r3
 800836c:	2300      	movs	r3, #0
 800836e:	4288      	cmp	r0, r1
 8008370:	d305      	bcc.n	800837e <__copybits+0x40>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f853 6b04 	ldr.w	r6, [r3], #4
 8008378:	f845 6f04 	str.w	r6, [r5, #4]!
 800837c:	e7eb      	b.n	8008356 <__copybits+0x18>
 800837e:	f840 3b04 	str.w	r3, [r0], #4
 8008382:	e7f4      	b.n	800836e <__copybits+0x30>

08008384 <__any_on>:
 8008384:	f100 0214 	add.w	r2, r0, #20
 8008388:	6900      	ldr	r0, [r0, #16]
 800838a:	114b      	asrs	r3, r1, #5
 800838c:	4298      	cmp	r0, r3
 800838e:	b510      	push	{r4, lr}
 8008390:	db11      	blt.n	80083b6 <__any_on+0x32>
 8008392:	dd0a      	ble.n	80083aa <__any_on+0x26>
 8008394:	f011 011f 	ands.w	r1, r1, #31
 8008398:	d007      	beq.n	80083aa <__any_on+0x26>
 800839a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800839e:	fa24 f001 	lsr.w	r0, r4, r1
 80083a2:	fa00 f101 	lsl.w	r1, r0, r1
 80083a6:	428c      	cmp	r4, r1
 80083a8:	d10b      	bne.n	80083c2 <__any_on+0x3e>
 80083aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d803      	bhi.n	80083ba <__any_on+0x36>
 80083b2:	2000      	movs	r0, #0
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	4603      	mov	r3, r0
 80083b8:	e7f7      	b.n	80083aa <__any_on+0x26>
 80083ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083be:	2900      	cmp	r1, #0
 80083c0:	d0f5      	beq.n	80083ae <__any_on+0x2a>
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7f6      	b.n	80083b4 <__any_on+0x30>

080083c6 <_calloc_r>:
 80083c6:	b513      	push	{r0, r1, r4, lr}
 80083c8:	434a      	muls	r2, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	f000 f859 	bl	8008484 <_malloc_r>
 80083d2:	4604      	mov	r4, r0
 80083d4:	b118      	cbz	r0, 80083de <_calloc_r+0x18>
 80083d6:	9a01      	ldr	r2, [sp, #4]
 80083d8:	2100      	movs	r1, #0
 80083da:	f7fc fbc9 	bl	8004b70 <memset>
 80083de:	4620      	mov	r0, r4
 80083e0:	b002      	add	sp, #8
 80083e2:	bd10      	pop	{r4, pc}

080083e4 <_free_r>:
 80083e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d048      	beq.n	800847c <_free_r+0x98>
 80083ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ee:	9001      	str	r0, [sp, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f1a1 0404 	sub.w	r4, r1, #4
 80083f6:	bfb8      	it	lt
 80083f8:	18e4      	addlt	r4, r4, r3
 80083fa:	f000 fa7b 	bl	80088f4 <__malloc_lock>
 80083fe:	4a20      	ldr	r2, [pc, #128]	; (8008480 <_free_r+0x9c>)
 8008400:	9801      	ldr	r0, [sp, #4]
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	4615      	mov	r5, r2
 8008406:	b933      	cbnz	r3, 8008416 <_free_r+0x32>
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	6014      	str	r4, [r2, #0]
 800840c:	b003      	add	sp, #12
 800840e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008412:	f000 ba75 	b.w	8008900 <__malloc_unlock>
 8008416:	42a3      	cmp	r3, r4
 8008418:	d90b      	bls.n	8008432 <_free_r+0x4e>
 800841a:	6821      	ldr	r1, [r4, #0]
 800841c:	1862      	adds	r2, r4, r1
 800841e:	4293      	cmp	r3, r2
 8008420:	bf04      	itt	eq
 8008422:	681a      	ldreq	r2, [r3, #0]
 8008424:	685b      	ldreq	r3, [r3, #4]
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	bf04      	itt	eq
 800842a:	1852      	addeq	r2, r2, r1
 800842c:	6022      	streq	r2, [r4, #0]
 800842e:	602c      	str	r4, [r5, #0]
 8008430:	e7ec      	b.n	800840c <_free_r+0x28>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x58>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x4e>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1855      	adds	r5, r2, r1
 8008440:	42a5      	cmp	r5, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x78>
 8008444:	6824      	ldr	r4, [r4, #0]
 8008446:	4421      	add	r1, r4
 8008448:	1854      	adds	r4, r2, r1
 800844a:	42a3      	cmp	r3, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1dd      	bne.n	800840c <_free_r+0x28>
 8008450:	681c      	ldr	r4, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	4421      	add	r1, r4
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	e7d7      	b.n	800840c <_free_r+0x28>
 800845c:	d902      	bls.n	8008464 <_free_r+0x80>
 800845e:	230c      	movs	r3, #12
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7d3      	b.n	800840c <_free_r+0x28>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7c7      	b.n	800840c <_free_r+0x28>
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	20000204 	.word	0x20000204

08008484 <_malloc_r>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	1ccd      	adds	r5, r1, #3
 8008488:	f025 0503 	bic.w	r5, r5, #3
 800848c:	3508      	adds	r5, #8
 800848e:	2d0c      	cmp	r5, #12
 8008490:	bf38      	it	cc
 8008492:	250c      	movcc	r5, #12
 8008494:	2d00      	cmp	r5, #0
 8008496:	4606      	mov	r6, r0
 8008498:	db01      	blt.n	800849e <_malloc_r+0x1a>
 800849a:	42a9      	cmp	r1, r5
 800849c:	d903      	bls.n	80084a6 <_malloc_r+0x22>
 800849e:	230c      	movs	r3, #12
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	2000      	movs	r0, #0
 80084a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a6:	f000 fa25 	bl	80088f4 <__malloc_lock>
 80084aa:	4921      	ldr	r1, [pc, #132]	; (8008530 <_malloc_r+0xac>)
 80084ac:	680a      	ldr	r2, [r1, #0]
 80084ae:	4614      	mov	r4, r2
 80084b0:	b99c      	cbnz	r4, 80084da <_malloc_r+0x56>
 80084b2:	4f20      	ldr	r7, [pc, #128]	; (8008534 <_malloc_r+0xb0>)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	b923      	cbnz	r3, 80084c2 <_malloc_r+0x3e>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f9a0 	bl	8008800 <_sbrk_r>
 80084c0:	6038      	str	r0, [r7, #0]
 80084c2:	4629      	mov	r1, r5
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f99b 	bl	8008800 <_sbrk_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d123      	bne.n	8008516 <_malloc_r+0x92>
 80084ce:	230c      	movs	r3, #12
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	4630      	mov	r0, r6
 80084d4:	f000 fa14 	bl	8008900 <__malloc_unlock>
 80084d8:	e7e3      	b.n	80084a2 <_malloc_r+0x1e>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	1b5b      	subs	r3, r3, r5
 80084de:	d417      	bmi.n	8008510 <_malloc_r+0x8c>
 80084e0:	2b0b      	cmp	r3, #11
 80084e2:	d903      	bls.n	80084ec <_malloc_r+0x68>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	441c      	add	r4, r3
 80084e8:	6025      	str	r5, [r4, #0]
 80084ea:	e004      	b.n	80084f6 <_malloc_r+0x72>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	42a2      	cmp	r2, r4
 80084f0:	bf0c      	ite	eq
 80084f2:	600b      	streq	r3, [r1, #0]
 80084f4:	6053      	strne	r3, [r2, #4]
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 fa02 	bl	8008900 <__malloc_unlock>
 80084fc:	f104 000b 	add.w	r0, r4, #11
 8008500:	1d23      	adds	r3, r4, #4
 8008502:	f020 0007 	bic.w	r0, r0, #7
 8008506:	1ac2      	subs	r2, r0, r3
 8008508:	d0cc      	beq.n	80084a4 <_malloc_r+0x20>
 800850a:	1a1b      	subs	r3, r3, r0
 800850c:	50a3      	str	r3, [r4, r2]
 800850e:	e7c9      	b.n	80084a4 <_malloc_r+0x20>
 8008510:	4622      	mov	r2, r4
 8008512:	6864      	ldr	r4, [r4, #4]
 8008514:	e7cc      	b.n	80084b0 <_malloc_r+0x2c>
 8008516:	1cc4      	adds	r4, r0, #3
 8008518:	f024 0403 	bic.w	r4, r4, #3
 800851c:	42a0      	cmp	r0, r4
 800851e:	d0e3      	beq.n	80084e8 <_malloc_r+0x64>
 8008520:	1a21      	subs	r1, r4, r0
 8008522:	4630      	mov	r0, r6
 8008524:	f000 f96c 	bl	8008800 <_sbrk_r>
 8008528:	3001      	adds	r0, #1
 800852a:	d1dd      	bne.n	80084e8 <_malloc_r+0x64>
 800852c:	e7cf      	b.n	80084ce <_malloc_r+0x4a>
 800852e:	bf00      	nop
 8008530:	20000204 	.word	0x20000204
 8008534:	20000208 	.word	0x20000208

08008538 <__ssputs_r>:
 8008538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	688e      	ldr	r6, [r1, #8]
 800853e:	429e      	cmp	r6, r3
 8008540:	4682      	mov	sl, r0
 8008542:	460c      	mov	r4, r1
 8008544:	4690      	mov	r8, r2
 8008546:	461f      	mov	r7, r3
 8008548:	d838      	bhi.n	80085bc <__ssputs_r+0x84>
 800854a:	898a      	ldrh	r2, [r1, #12]
 800854c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008550:	d032      	beq.n	80085b8 <__ssputs_r+0x80>
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	6909      	ldr	r1, [r1, #16]
 8008556:	eba5 0901 	sub.w	r9, r5, r1
 800855a:	6965      	ldr	r5, [r4, #20]
 800855c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008564:	3301      	adds	r3, #1
 8008566:	444b      	add	r3, r9
 8008568:	106d      	asrs	r5, r5, #1
 800856a:	429d      	cmp	r5, r3
 800856c:	bf38      	it	cc
 800856e:	461d      	movcc	r5, r3
 8008570:	0553      	lsls	r3, r2, #21
 8008572:	d531      	bpl.n	80085d8 <__ssputs_r+0xa0>
 8008574:	4629      	mov	r1, r5
 8008576:	f7ff ff85 	bl	8008484 <_malloc_r>
 800857a:	4606      	mov	r6, r0
 800857c:	b950      	cbnz	r0, 8008594 <__ssputs_r+0x5c>
 800857e:	230c      	movs	r3, #12
 8008580:	f8ca 3000 	str.w	r3, [sl]
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	464a      	mov	r2, r9
 8008598:	f7ff fa4c 	bl	8007a34 <memcpy>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	6126      	str	r6, [r4, #16]
 80085aa:	6165      	str	r5, [r4, #20]
 80085ac:	444e      	add	r6, r9
 80085ae:	eba5 0509 	sub.w	r5, r5, r9
 80085b2:	6026      	str	r6, [r4, #0]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	463e      	mov	r6, r7
 80085b8:	42be      	cmp	r6, r7
 80085ba:	d900      	bls.n	80085be <__ssputs_r+0x86>
 80085bc:	463e      	mov	r6, r7
 80085be:	4632      	mov	r2, r6
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	4641      	mov	r1, r8
 80085c4:	f000 f97c 	bl	80088c0 <memmove>
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	1b9b      	subs	r3, r3, r6
 80085ce:	4432      	add	r2, r6
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7db      	b.n	8008590 <__ssputs_r+0x58>
 80085d8:	462a      	mov	r2, r5
 80085da:	f000 f997 	bl	800890c <_realloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e1      	bne.n	80085a8 <__ssputs_r+0x70>
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	4650      	mov	r0, sl
 80085e8:	f7ff fefc 	bl	80083e4 <_free_r>
 80085ec:	e7c7      	b.n	800857e <__ssputs_r+0x46>
	...

080085f0 <_svfiprintf_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	4698      	mov	r8, r3
 80085f6:	898b      	ldrh	r3, [r1, #12]
 80085f8:	061b      	lsls	r3, r3, #24
 80085fa:	b09d      	sub	sp, #116	; 0x74
 80085fc:	4607      	mov	r7, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	4614      	mov	r4, r2
 8008602:	d50e      	bpl.n	8008622 <_svfiprintf_r+0x32>
 8008604:	690b      	ldr	r3, [r1, #16]
 8008606:	b963      	cbnz	r3, 8008622 <_svfiprintf_r+0x32>
 8008608:	2140      	movs	r1, #64	; 0x40
 800860a:	f7ff ff3b 	bl	8008484 <_malloc_r>
 800860e:	6028      	str	r0, [r5, #0]
 8008610:	6128      	str	r0, [r5, #16]
 8008612:	b920      	cbnz	r0, 800861e <_svfiprintf_r+0x2e>
 8008614:	230c      	movs	r3, #12
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	e0d1      	b.n	80087c2 <_svfiprintf_r+0x1d2>
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	616b      	str	r3, [r5, #20]
 8008622:	2300      	movs	r3, #0
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	2320      	movs	r3, #32
 8008628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008630:	2330      	movs	r3, #48	; 0x30
 8008632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087dc <_svfiprintf_r+0x1ec>
 8008636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800863a:	f04f 0901 	mov.w	r9, #1
 800863e:	4623      	mov	r3, r4
 8008640:	469a      	mov	sl, r3
 8008642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008646:	b10a      	cbz	r2, 800864c <_svfiprintf_r+0x5c>
 8008648:	2a25      	cmp	r2, #37	; 0x25
 800864a:	d1f9      	bne.n	8008640 <_svfiprintf_r+0x50>
 800864c:	ebba 0b04 	subs.w	fp, sl, r4
 8008650:	d00b      	beq.n	800866a <_svfiprintf_r+0x7a>
 8008652:	465b      	mov	r3, fp
 8008654:	4622      	mov	r2, r4
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ff6d 	bl	8008538 <__ssputs_r>
 800865e:	3001      	adds	r0, #1
 8008660:	f000 80aa 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008666:	445a      	add	r2, fp
 8008668:	9209      	str	r2, [sp, #36]	; 0x24
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 80a2 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008674:	2300      	movs	r3, #0
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867e:	f10a 0a01 	add.w	sl, sl, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	9307      	str	r3, [sp, #28]
 8008686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800868a:	931a      	str	r3, [sp, #104]	; 0x68
 800868c:	4654      	mov	r4, sl
 800868e:	2205      	movs	r2, #5
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	4851      	ldr	r0, [pc, #324]	; (80087dc <_svfiprintf_r+0x1ec>)
 8008696:	f7f7 fdc3 	bl	8000220 <memchr>
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	b9d8      	cbnz	r0, 80086d6 <_svfiprintf_r+0xe6>
 800869e:	06d0      	lsls	r0, r2, #27
 80086a0:	bf44      	itt	mi
 80086a2:	2320      	movmi	r3, #32
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a8:	0711      	lsls	r1, r2, #28
 80086aa:	bf44      	itt	mi
 80086ac:	232b      	movmi	r3, #43	; 0x2b
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b2a      	cmp	r3, #42	; 0x2a
 80086b8:	d015      	beq.n	80086e6 <_svfiprintf_r+0xf6>
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	4654      	mov	r4, sl
 80086be:	2000      	movs	r0, #0
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4621      	mov	r1, r4
 80086c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ca:	3b30      	subs	r3, #48	; 0x30
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d94e      	bls.n	800876e <_svfiprintf_r+0x17e>
 80086d0:	b1b0      	cbz	r0, 8008700 <_svfiprintf_r+0x110>
 80086d2:	9207      	str	r2, [sp, #28]
 80086d4:	e014      	b.n	8008700 <_svfiprintf_r+0x110>
 80086d6:	eba0 0308 	sub.w	r3, r0, r8
 80086da:	fa09 f303 	lsl.w	r3, r9, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	46a2      	mov	sl, r4
 80086e4:	e7d2      	b.n	800868c <_svfiprintf_r+0x9c>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d19      	adds	r1, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfbb      	ittet	lt
 80086f2:	425b      	neglt	r3, r3
 80086f4:	f042 0202 	orrlt.w	r2, r2, #2
 80086f8:	9307      	strge	r3, [sp, #28]
 80086fa:	9307      	strlt	r3, [sp, #28]
 80086fc:	bfb8      	it	lt
 80086fe:	9204      	strlt	r2, [sp, #16]
 8008700:	7823      	ldrb	r3, [r4, #0]
 8008702:	2b2e      	cmp	r3, #46	; 0x2e
 8008704:	d10c      	bne.n	8008720 <_svfiprintf_r+0x130>
 8008706:	7863      	ldrb	r3, [r4, #1]
 8008708:	2b2a      	cmp	r3, #42	; 0x2a
 800870a:	d135      	bne.n	8008778 <_svfiprintf_r+0x188>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9203      	str	r2, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb8      	it	lt
 8008718:	f04f 33ff 	movlt.w	r3, #4294967295
 800871c:	3402      	adds	r4, #2
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087ec <_svfiprintf_r+0x1fc>
 8008724:	7821      	ldrb	r1, [r4, #0]
 8008726:	2203      	movs	r2, #3
 8008728:	4650      	mov	r0, sl
 800872a:	f7f7 fd79 	bl	8000220 <memchr>
 800872e:	b140      	cbz	r0, 8008742 <_svfiprintf_r+0x152>
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	eba0 000a 	sub.w	r0, r0, sl
 8008736:	fa03 f000 	lsl.w	r0, r3, r0
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	4303      	orrs	r3, r0
 800873e:	3401      	adds	r4, #1
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	4826      	ldr	r0, [pc, #152]	; (80087e0 <_svfiprintf_r+0x1f0>)
 8008748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800874c:	2206      	movs	r2, #6
 800874e:	f7f7 fd67 	bl	8000220 <memchr>
 8008752:	2800      	cmp	r0, #0
 8008754:	d038      	beq.n	80087c8 <_svfiprintf_r+0x1d8>
 8008756:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <_svfiprintf_r+0x1f4>)
 8008758:	bb1b      	cbnz	r3, 80087a2 <_svfiprintf_r+0x1b2>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	3307      	adds	r3, #7
 800875e:	f023 0307 	bic.w	r3, r3, #7
 8008762:	3308      	adds	r3, #8
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008768:	4433      	add	r3, r6
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	e767      	b.n	800863e <_svfiprintf_r+0x4e>
 800876e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008772:	460c      	mov	r4, r1
 8008774:	2001      	movs	r0, #1
 8008776:	e7a5      	b.n	80086c4 <_svfiprintf_r+0xd4>
 8008778:	2300      	movs	r3, #0
 800877a:	3401      	adds	r4, #1
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	4619      	mov	r1, r3
 8008780:	f04f 0c0a 	mov.w	ip, #10
 8008784:	4620      	mov	r0, r4
 8008786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878a:	3a30      	subs	r2, #48	; 0x30
 800878c:	2a09      	cmp	r2, #9
 800878e:	d903      	bls.n	8008798 <_svfiprintf_r+0x1a8>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0c5      	beq.n	8008720 <_svfiprintf_r+0x130>
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	e7c3      	b.n	8008720 <_svfiprintf_r+0x130>
 8008798:	fb0c 2101 	mla	r1, ip, r1, r2
 800879c:	4604      	mov	r4, r0
 800879e:	2301      	movs	r3, #1
 80087a0:	e7f0      	b.n	8008784 <_svfiprintf_r+0x194>
 80087a2:	ab03      	add	r3, sp, #12
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	462a      	mov	r2, r5
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <_svfiprintf_r+0x1f8>)
 80087aa:	a904      	add	r1, sp, #16
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7fc fa87 	bl	8004cc0 <_printf_float>
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	4606      	mov	r6, r0
 80087b6:	d1d6      	bne.n	8008766 <_svfiprintf_r+0x176>
 80087b8:	89ab      	ldrh	r3, [r5, #12]
 80087ba:	065b      	lsls	r3, r3, #25
 80087bc:	f53f af2c 	bmi.w	8008618 <_svfiprintf_r+0x28>
 80087c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c2:	b01d      	add	sp, #116	; 0x74
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <_svfiprintf_r+0x1f8>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7fc fd18 	bl	8005208 <_printf_i>
 80087d8:	e7eb      	b.n	80087b2 <_svfiprintf_r+0x1c2>
 80087da:	bf00      	nop
 80087dc:	0800a7f4 	.word	0x0800a7f4
 80087e0:	0800a7fe 	.word	0x0800a7fe
 80087e4:	08004cc1 	.word	0x08004cc1
 80087e8:	08008539 	.word	0x08008539
 80087ec:	0800a7fa 	.word	0x0800a7fa

080087f0 <nan>:
 80087f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087f8 <nan+0x8>
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	00000000 	.word	0x00000000
 80087fc:	7ff80000 	.word	0x7ff80000

08008800 <_sbrk_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d06      	ldr	r5, [pc, #24]	; (800881c <_sbrk_r+0x1c>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	f7f9 fd38 	bl	8002280 <_sbrk>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_sbrk_r+0x1a>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_sbrk_r+0x1a>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	2000052c 	.word	0x2000052c

08008820 <strncmp>:
 8008820:	b510      	push	{r4, lr}
 8008822:	b16a      	cbz	r2, 8008840 <strncmp+0x20>
 8008824:	3901      	subs	r1, #1
 8008826:	1884      	adds	r4, r0, r2
 8008828:	f810 3b01 	ldrb.w	r3, [r0], #1
 800882c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008830:	4293      	cmp	r3, r2
 8008832:	d103      	bne.n	800883c <strncmp+0x1c>
 8008834:	42a0      	cmp	r0, r4
 8008836:	d001      	beq.n	800883c <strncmp+0x1c>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f5      	bne.n	8008828 <strncmp+0x8>
 800883c:	1a98      	subs	r0, r3, r2
 800883e:	bd10      	pop	{r4, pc}
 8008840:	4610      	mov	r0, r2
 8008842:	e7fc      	b.n	800883e <strncmp+0x1e>

08008844 <__ascii_wctomb>:
 8008844:	b149      	cbz	r1, 800885a <__ascii_wctomb+0x16>
 8008846:	2aff      	cmp	r2, #255	; 0xff
 8008848:	bf85      	ittet	hi
 800884a:	238a      	movhi	r3, #138	; 0x8a
 800884c:	6003      	strhi	r3, [r0, #0]
 800884e:	700a      	strbls	r2, [r1, #0]
 8008850:	f04f 30ff 	movhi.w	r0, #4294967295
 8008854:	bf98      	it	ls
 8008856:	2001      	movls	r0, #1
 8008858:	4770      	bx	lr
 800885a:	4608      	mov	r0, r1
 800885c:	4770      	bx	lr
	...

08008860 <__assert_func>:
 8008860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008862:	4614      	mov	r4, r2
 8008864:	461a      	mov	r2, r3
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <__assert_func+0x2c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4605      	mov	r5, r0
 800886c:	68d8      	ldr	r0, [r3, #12]
 800886e:	b14c      	cbz	r4, 8008884 <__assert_func+0x24>
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <__assert_func+0x30>)
 8008872:	9100      	str	r1, [sp, #0]
 8008874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <__assert_func+0x34>)
 800887a:	462b      	mov	r3, r5
 800887c:	f000 f80e 	bl	800889c <fiprintf>
 8008880:	f000 fa84 	bl	8008d8c <abort>
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <__assert_func+0x38>)
 8008886:	461c      	mov	r4, r3
 8008888:	e7f3      	b.n	8008872 <__assert_func+0x12>
 800888a:	bf00      	nop
 800888c:	2000000c 	.word	0x2000000c
 8008890:	0800a805 	.word	0x0800a805
 8008894:	0800a812 	.word	0x0800a812
 8008898:	0800a840 	.word	0x0800a840

0800889c <fiprintf>:
 800889c:	b40e      	push	{r1, r2, r3}
 800889e:	b503      	push	{r0, r1, lr}
 80088a0:	4601      	mov	r1, r0
 80088a2:	ab03      	add	r3, sp, #12
 80088a4:	4805      	ldr	r0, [pc, #20]	; (80088bc <fiprintf+0x20>)
 80088a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f000 f87d 	bl	80089ac <_vfiprintf_r>
 80088b2:	b002      	add	sp, #8
 80088b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b8:	b003      	add	sp, #12
 80088ba:	4770      	bx	lr
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <memmove>:
 80088c0:	4288      	cmp	r0, r1
 80088c2:	b510      	push	{r4, lr}
 80088c4:	eb01 0402 	add.w	r4, r1, r2
 80088c8:	d902      	bls.n	80088d0 <memmove+0x10>
 80088ca:	4284      	cmp	r4, r0
 80088cc:	4623      	mov	r3, r4
 80088ce:	d807      	bhi.n	80088e0 <memmove+0x20>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	42a1      	cmp	r1, r4
 80088d4:	d008      	beq.n	80088e8 <memmove+0x28>
 80088d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088de:	e7f8      	b.n	80088d2 <memmove+0x12>
 80088e0:	4402      	add	r2, r0
 80088e2:	4601      	mov	r1, r0
 80088e4:	428a      	cmp	r2, r1
 80088e6:	d100      	bne.n	80088ea <memmove+0x2a>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088f2:	e7f7      	b.n	80088e4 <memmove+0x24>

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_lock+0x8>)
 80088f6:	f000 bc09 	b.w	800910c <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000534 	.word	0x20000534

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__malloc_unlock+0x8>)
 8008902:	f000 bc04 	b.w	800910e <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20000534 	.word	0x20000534

0800890c <_realloc_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	4607      	mov	r7, r0
 8008910:	4614      	mov	r4, r2
 8008912:	460e      	mov	r6, r1
 8008914:	b921      	cbnz	r1, 8008920 <_realloc_r+0x14>
 8008916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800891a:	4611      	mov	r1, r2
 800891c:	f7ff bdb2 	b.w	8008484 <_malloc_r>
 8008920:	b922      	cbnz	r2, 800892c <_realloc_r+0x20>
 8008922:	f7ff fd5f 	bl	80083e4 <_free_r>
 8008926:	4625      	mov	r5, r4
 8008928:	4628      	mov	r0, r5
 800892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892c:	f000 fc54 	bl	80091d8 <_malloc_usable_size_r>
 8008930:	42a0      	cmp	r0, r4
 8008932:	d20f      	bcs.n	8008954 <_realloc_r+0x48>
 8008934:	4621      	mov	r1, r4
 8008936:	4638      	mov	r0, r7
 8008938:	f7ff fda4 	bl	8008484 <_malloc_r>
 800893c:	4605      	mov	r5, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	d0f2      	beq.n	8008928 <_realloc_r+0x1c>
 8008942:	4631      	mov	r1, r6
 8008944:	4622      	mov	r2, r4
 8008946:	f7ff f875 	bl	8007a34 <memcpy>
 800894a:	4631      	mov	r1, r6
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff fd49 	bl	80083e4 <_free_r>
 8008952:	e7e9      	b.n	8008928 <_realloc_r+0x1c>
 8008954:	4635      	mov	r5, r6
 8008956:	e7e7      	b.n	8008928 <_realloc_r+0x1c>

08008958 <__sfputc_r>:
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	b410      	push	{r4}
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	da08      	bge.n	8008976 <__sfputc_r+0x1e>
 8008964:	6994      	ldr	r4, [r2, #24]
 8008966:	42a3      	cmp	r3, r4
 8008968:	db01      	blt.n	800896e <__sfputc_r+0x16>
 800896a:	290a      	cmp	r1, #10
 800896c:	d103      	bne.n	8008976 <__sfputc_r+0x1e>
 800896e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008972:	f000 b94b 	b.w	8008c0c <__swbuf_r>
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	1c58      	adds	r0, r3, #1
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	7019      	strb	r1, [r3, #0]
 800897e:	4608      	mov	r0, r1
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	4770      	bx	lr

08008986 <__sfputs_r>:
 8008986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4614      	mov	r4, r2
 800898e:	18d5      	adds	r5, r2, r3
 8008990:	42ac      	cmp	r4, r5
 8008992:	d101      	bne.n	8008998 <__sfputs_r+0x12>
 8008994:	2000      	movs	r0, #0
 8008996:	e007      	b.n	80089a8 <__sfputs_r+0x22>
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	463a      	mov	r2, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffda 	bl	8008958 <__sfputc_r>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d1f3      	bne.n	8008990 <__sfputs_r+0xa>
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ac <_vfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460d      	mov	r5, r1
 80089b2:	b09d      	sub	sp, #116	; 0x74
 80089b4:	4614      	mov	r4, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	4606      	mov	r6, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_vfiprintf_r+0x18>
 80089bc:	6983      	ldr	r3, [r0, #24]
 80089be:	b90b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x18>
 80089c0:	f000 fb06 	bl	8008fd0 <__sinit>
 80089c4:	4b89      	ldr	r3, [pc, #548]	; (8008bec <_vfiprintf_r+0x240>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	d11b      	bne.n	8008a02 <_vfiprintf_r+0x56>
 80089ca:	6875      	ldr	r5, [r6, #4]
 80089cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d405      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d402      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089da:	f000 fb97 	bl	800910c <__retarget_lock_acquire_recursive>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	d501      	bpl.n	80089e8 <_vfiprintf_r+0x3c>
 80089e4:	692b      	ldr	r3, [r5, #16]
 80089e6:	b9eb      	cbnz	r3, 8008a24 <_vfiprintf_r+0x78>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 f960 	bl	8008cb0 <__swsetup_r>
 80089f0:	b1c0      	cbz	r0, 8008a24 <_vfiprintf_r+0x78>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07dc      	lsls	r4, r3, #31
 80089f6:	d50e      	bpl.n	8008a16 <_vfiprintf_r+0x6a>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	b01d      	add	sp, #116	; 0x74
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	4b7b      	ldr	r3, [pc, #492]	; (8008bf0 <_vfiprintf_r+0x244>)
 8008a04:	429d      	cmp	r5, r3
 8008a06:	d101      	bne.n	8008a0c <_vfiprintf_r+0x60>
 8008a08:	68b5      	ldr	r5, [r6, #8]
 8008a0a:	e7df      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a0c:	4b79      	ldr	r3, [pc, #484]	; (8008bf4 <_vfiprintf_r+0x248>)
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	bf08      	it	eq
 8008a12:	68f5      	ldreq	r5, [r6, #12]
 8008a14:	e7da      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	0598      	lsls	r0, r3, #22
 8008a1a:	d4ed      	bmi.n	80089f8 <_vfiprintf_r+0x4c>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1e:	f000 fb76 	bl	800910e <__retarget_lock_release_recursive>
 8008a22:	e7e9      	b.n	80089f8 <_vfiprintf_r+0x4c>
 8008a24:	2300      	movs	r3, #0
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a32:	2330      	movs	r3, #48	; 0x30
 8008a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bf8 <_vfiprintf_r+0x24c>
 8008a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a3c:	f04f 0901 	mov.w	r9, #1
 8008a40:	4623      	mov	r3, r4
 8008a42:	469a      	mov	sl, r3
 8008a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a48:	b10a      	cbz	r2, 8008a4e <_vfiprintf_r+0xa2>
 8008a4a:	2a25      	cmp	r2, #37	; 0x25
 8008a4c:	d1f9      	bne.n	8008a42 <_vfiprintf_r+0x96>
 8008a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a52:	d00b      	beq.n	8008a6c <_vfiprintf_r+0xc0>
 8008a54:	465b      	mov	r3, fp
 8008a56:	4622      	mov	r2, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7ff ff93 	bl	8008986 <__sfputs_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	f000 80aa 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a68:	445a      	add	r2, fp
 8008a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80a2 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a80:	f10a 0a01 	add.w	sl, sl, #1
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2205      	movs	r2, #5
 8008a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a96:	4858      	ldr	r0, [pc, #352]	; (8008bf8 <_vfiprintf_r+0x24c>)
 8008a98:	f7f7 fbc2 	bl	8000220 <memchr>
 8008a9c:	9a04      	ldr	r2, [sp, #16]
 8008a9e:	b9d8      	cbnz	r0, 8008ad8 <_vfiprintf_r+0x12c>
 8008aa0:	06d1      	lsls	r1, r2, #27
 8008aa2:	bf44      	itt	mi
 8008aa4:	2320      	movmi	r3, #32
 8008aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aaa:	0713      	lsls	r3, r2, #28
 8008aac:	bf44      	itt	mi
 8008aae:	232b      	movmi	r3, #43	; 0x2b
 8008ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aba:	d015      	beq.n	8008ae8 <_vfiprintf_r+0x13c>
 8008abc:	9a07      	ldr	r2, [sp, #28]
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f04f 0c0a 	mov.w	ip, #10
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008acc:	3b30      	subs	r3, #48	; 0x30
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d94e      	bls.n	8008b70 <_vfiprintf_r+0x1c4>
 8008ad2:	b1b0      	cbz	r0, 8008b02 <_vfiprintf_r+0x156>
 8008ad4:	9207      	str	r2, [sp, #28]
 8008ad6:	e014      	b.n	8008b02 <_vfiprintf_r+0x156>
 8008ad8:	eba0 0308 	sub.w	r3, r0, r8
 8008adc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	46a2      	mov	sl, r4
 8008ae6:	e7d2      	b.n	8008a8e <_vfiprintf_r+0xe2>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d19      	adds	r1, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9103      	str	r1, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfbb      	ittet	lt
 8008af4:	425b      	neglt	r3, r3
 8008af6:	f042 0202 	orrlt.w	r2, r2, #2
 8008afa:	9307      	strge	r3, [sp, #28]
 8008afc:	9307      	strlt	r3, [sp, #28]
 8008afe:	bfb8      	it	lt
 8008b00:	9204      	strlt	r2, [sp, #16]
 8008b02:	7823      	ldrb	r3, [r4, #0]
 8008b04:	2b2e      	cmp	r3, #46	; 0x2e
 8008b06:	d10c      	bne.n	8008b22 <_vfiprintf_r+0x176>
 8008b08:	7863      	ldrb	r3, [r4, #1]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d135      	bne.n	8008b7a <_vfiprintf_r+0x1ce>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	1d1a      	adds	r2, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9203      	str	r2, [sp, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b1e:	3402      	adds	r4, #2
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c08 <_vfiprintf_r+0x25c>
 8008b26:	7821      	ldrb	r1, [r4, #0]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f7f7 fb78 	bl	8000220 <memchr>
 8008b30:	b140      	cbz	r0, 8008b44 <_vfiprintf_r+0x198>
 8008b32:	2340      	movs	r3, #64	; 0x40
 8008b34:	eba0 000a 	sub.w	r0, r0, sl
 8008b38:	fa03 f000 	lsl.w	r0, r3, r0
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	3401      	adds	r4, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b48:	482c      	ldr	r0, [pc, #176]	; (8008bfc <_vfiprintf_r+0x250>)
 8008b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b4e:	2206      	movs	r2, #6
 8008b50:	f7f7 fb66 	bl	8000220 <memchr>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d03f      	beq.n	8008bd8 <_vfiprintf_r+0x22c>
 8008b58:	4b29      	ldr	r3, [pc, #164]	; (8008c00 <_vfiprintf_r+0x254>)
 8008b5a:	bb1b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x1f8>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	3307      	adds	r3, #7
 8008b60:	f023 0307 	bic.w	r3, r3, #7
 8008b64:	3308      	adds	r3, #8
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	443b      	add	r3, r7
 8008b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6e:	e767      	b.n	8008a40 <_vfiprintf_r+0x94>
 8008b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b74:	460c      	mov	r4, r1
 8008b76:	2001      	movs	r0, #1
 8008b78:	e7a5      	b.n	8008ac6 <_vfiprintf_r+0x11a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	9305      	str	r3, [sp, #20]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4620      	mov	r0, r4
 8008b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b8c:	3a30      	subs	r2, #48	; 0x30
 8008b8e:	2a09      	cmp	r2, #9
 8008b90:	d903      	bls.n	8008b9a <_vfiprintf_r+0x1ee>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0c5      	beq.n	8008b22 <_vfiprintf_r+0x176>
 8008b96:	9105      	str	r1, [sp, #20]
 8008b98:	e7c3      	b.n	8008b22 <_vfiprintf_r+0x176>
 8008b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7f0      	b.n	8008b86 <_vfiprintf_r+0x1da>
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <_vfiprintf_r+0x258>)
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7fc f886 	bl	8004cc0 <_printf_float>
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	1c78      	adds	r0, r7, #1
 8008bb8:	d1d6      	bne.n	8008b68 <_vfiprintf_r+0x1bc>
 8008bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bbc:	07d9      	lsls	r1, r3, #31
 8008bbe:	d405      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc0:	89ab      	ldrh	r3, [r5, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d402      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc8:	f000 faa1 	bl	800910e <__retarget_lock_release_recursive>
 8008bcc:	89ab      	ldrh	r3, [r5, #12]
 8008bce:	065b      	lsls	r3, r3, #25
 8008bd0:	f53f af12 	bmi.w	80089f8 <_vfiprintf_r+0x4c>
 8008bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bd6:	e711      	b.n	80089fc <_vfiprintf_r+0x50>
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <_vfiprintf_r+0x258>)
 8008be0:	a904      	add	r1, sp, #16
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7fc fb10 	bl	8005208 <_printf_i>
 8008be8:	e7e4      	b.n	8008bb4 <_vfiprintf_r+0x208>
 8008bea:	bf00      	nop
 8008bec:	0800a864 	.word	0x0800a864
 8008bf0:	0800a884 	.word	0x0800a884
 8008bf4:	0800a844 	.word	0x0800a844
 8008bf8:	0800a7f4 	.word	0x0800a7f4
 8008bfc:	0800a7fe 	.word	0x0800a7fe
 8008c00:	08004cc1 	.word	0x08004cc1
 8008c04:	08008987 	.word	0x08008987
 8008c08:	0800a7fa 	.word	0x0800a7fa

08008c0c <__swbuf_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	460e      	mov	r6, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	4605      	mov	r5, r0
 8008c14:	b118      	cbz	r0, 8008c1e <__swbuf_r+0x12>
 8008c16:	6983      	ldr	r3, [r0, #24]
 8008c18:	b90b      	cbnz	r3, 8008c1e <__swbuf_r+0x12>
 8008c1a:	f000 f9d9 	bl	8008fd0 <__sinit>
 8008c1e:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <__swbuf_r+0x98>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	d12b      	bne.n	8008c7c <__swbuf_r+0x70>
 8008c24:	686c      	ldr	r4, [r5, #4]
 8008c26:	69a3      	ldr	r3, [r4, #24]
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	071a      	lsls	r2, r3, #28
 8008c2e:	d52f      	bpl.n	8008c90 <__swbuf_r+0x84>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	b36b      	cbz	r3, 8008c90 <__swbuf_r+0x84>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	6820      	ldr	r0, [r4, #0]
 8008c38:	1ac0      	subs	r0, r0, r3
 8008c3a:	6963      	ldr	r3, [r4, #20]
 8008c3c:	b2f6      	uxtb	r6, r6
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	4637      	mov	r7, r6
 8008c42:	dc04      	bgt.n	8008c4e <__swbuf_r+0x42>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f92e 	bl	8008ea8 <_fflush_r>
 8008c4c:	bb30      	cbnz	r0, 8008c9c <__swbuf_r+0x90>
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	60a3      	str	r3, [r4, #8]
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	701e      	strb	r6, [r3, #0]
 8008c5c:	6963      	ldr	r3, [r4, #20]
 8008c5e:	3001      	adds	r0, #1
 8008c60:	4283      	cmp	r3, r0
 8008c62:	d004      	beq.n	8008c6e <__swbuf_r+0x62>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d506      	bpl.n	8008c78 <__swbuf_r+0x6c>
 8008c6a:	2e0a      	cmp	r6, #10
 8008c6c:	d104      	bne.n	8008c78 <__swbuf_r+0x6c>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 f919 	bl	8008ea8 <_fflush_r>
 8008c76:	b988      	cbnz	r0, 8008c9c <__swbuf_r+0x90>
 8008c78:	4638      	mov	r0, r7
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <__swbuf_r+0x9c>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d101      	bne.n	8008c86 <__swbuf_r+0x7a>
 8008c82:	68ac      	ldr	r4, [r5, #8]
 8008c84:	e7cf      	b.n	8008c26 <__swbuf_r+0x1a>
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <__swbuf_r+0xa0>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	bf08      	it	eq
 8008c8c:	68ec      	ldreq	r4, [r5, #12]
 8008c8e:	e7ca      	b.n	8008c26 <__swbuf_r+0x1a>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 f80c 	bl	8008cb0 <__swsetup_r>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0cb      	beq.n	8008c34 <__swbuf_r+0x28>
 8008c9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008ca0:	e7ea      	b.n	8008c78 <__swbuf_r+0x6c>
 8008ca2:	bf00      	nop
 8008ca4:	0800a864 	.word	0x0800a864
 8008ca8:	0800a884 	.word	0x0800a884
 8008cac:	0800a844 	.word	0x0800a844

08008cb0 <__swsetup_r>:
 8008cb0:	4b32      	ldr	r3, [pc, #200]	; (8008d7c <__swsetup_r+0xcc>)
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	681d      	ldr	r5, [r3, #0]
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460c      	mov	r4, r1
 8008cba:	b125      	cbz	r5, 8008cc6 <__swsetup_r+0x16>
 8008cbc:	69ab      	ldr	r3, [r5, #24]
 8008cbe:	b913      	cbnz	r3, 8008cc6 <__swsetup_r+0x16>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f985 	bl	8008fd0 <__sinit>
 8008cc6:	4b2e      	ldr	r3, [pc, #184]	; (8008d80 <__swsetup_r+0xd0>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	d10f      	bne.n	8008cec <__swsetup_r+0x3c>
 8008ccc:	686c      	ldr	r4, [r5, #4]
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cd4:	0719      	lsls	r1, r3, #28
 8008cd6:	d42c      	bmi.n	8008d32 <__swsetup_r+0x82>
 8008cd8:	06dd      	lsls	r5, r3, #27
 8008cda:	d411      	bmi.n	8008d00 <__swsetup_r+0x50>
 8008cdc:	2309      	movs	r3, #9
 8008cde:	6033      	str	r3, [r6, #0]
 8008ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cea:	e03e      	b.n	8008d6a <__swsetup_r+0xba>
 8008cec:	4b25      	ldr	r3, [pc, #148]	; (8008d84 <__swsetup_r+0xd4>)
 8008cee:	429c      	cmp	r4, r3
 8008cf0:	d101      	bne.n	8008cf6 <__swsetup_r+0x46>
 8008cf2:	68ac      	ldr	r4, [r5, #8]
 8008cf4:	e7eb      	b.n	8008cce <__swsetup_r+0x1e>
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <__swsetup_r+0xd8>)
 8008cf8:	429c      	cmp	r4, r3
 8008cfa:	bf08      	it	eq
 8008cfc:	68ec      	ldreq	r4, [r5, #12]
 8008cfe:	e7e6      	b.n	8008cce <__swsetup_r+0x1e>
 8008d00:	0758      	lsls	r0, r3, #29
 8008d02:	d512      	bpl.n	8008d2a <__swsetup_r+0x7a>
 8008d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d06:	b141      	cbz	r1, 8008d1a <__swsetup_r+0x6a>
 8008d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d0c:	4299      	cmp	r1, r3
 8008d0e:	d002      	beq.n	8008d16 <__swsetup_r+0x66>
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff fb67 	bl	80083e4 <_free_r>
 8008d16:	2300      	movs	r3, #0
 8008d18:	6363      	str	r3, [r4, #52]	; 0x34
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	2300      	movs	r3, #0
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f043 0308 	orr.w	r3, r3, #8
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	b94b      	cbnz	r3, 8008d4a <__swsetup_r+0x9a>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d40:	d003      	beq.n	8008d4a <__swsetup_r+0x9a>
 8008d42:	4621      	mov	r1, r4
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 fa07 	bl	8009158 <__smakebuf_r>
 8008d4a:	89a0      	ldrh	r0, [r4, #12]
 8008d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d50:	f010 0301 	ands.w	r3, r0, #1
 8008d54:	d00a      	beq.n	8008d6c <__swsetup_r+0xbc>
 8008d56:	2300      	movs	r3, #0
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	6963      	ldr	r3, [r4, #20]
 8008d5c:	425b      	negs	r3, r3
 8008d5e:	61a3      	str	r3, [r4, #24]
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	b943      	cbnz	r3, 8008d76 <__swsetup_r+0xc6>
 8008d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d68:	d1ba      	bne.n	8008ce0 <__swsetup_r+0x30>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	0781      	lsls	r1, r0, #30
 8008d6e:	bf58      	it	pl
 8008d70:	6963      	ldrpl	r3, [r4, #20]
 8008d72:	60a3      	str	r3, [r4, #8]
 8008d74:	e7f4      	b.n	8008d60 <__swsetup_r+0xb0>
 8008d76:	2000      	movs	r0, #0
 8008d78:	e7f7      	b.n	8008d6a <__swsetup_r+0xba>
 8008d7a:	bf00      	nop
 8008d7c:	2000000c 	.word	0x2000000c
 8008d80:	0800a864 	.word	0x0800a864
 8008d84:	0800a884 	.word	0x0800a884
 8008d88:	0800a844 	.word	0x0800a844

08008d8c <abort>:
 8008d8c:	b508      	push	{r3, lr}
 8008d8e:	2006      	movs	r0, #6
 8008d90:	f000 fa52 	bl	8009238 <raise>
 8008d94:	2001      	movs	r0, #1
 8008d96:	f7f9 f9fb 	bl	8002190 <_exit>
	...

08008d9c <__sflush_r>:
 8008d9c:	898a      	ldrh	r2, [r1, #12]
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	4605      	mov	r5, r0
 8008da4:	0710      	lsls	r0, r2, #28
 8008da6:	460c      	mov	r4, r1
 8008da8:	d458      	bmi.n	8008e5c <__sflush_r+0xc0>
 8008daa:	684b      	ldr	r3, [r1, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc05      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc02      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d0f9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc8:	682f      	ldr	r7, [r5, #0]
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	d032      	beq.n	8008e34 <__sflush_r+0x98>
 8008dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	075a      	lsls	r2, r3, #29
 8008dd4:	d505      	bpl.n	8008de2 <__sflush_r+0x46>
 8008dd6:	6863      	ldr	r3, [r4, #4]
 8008dd8:	1ac0      	subs	r0, r0, r3
 8008dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ddc:	b10b      	cbz	r3, 8008de2 <__sflush_r+0x46>
 8008dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de0:	1ac0      	subs	r0, r0, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	4602      	mov	r2, r0
 8008de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b0      	blx	r6
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	d106      	bne.n	8008e02 <__sflush_r+0x66>
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	291d      	cmp	r1, #29
 8008df8:	d82c      	bhi.n	8008e54 <__sflush_r+0xb8>
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <__sflush_r+0x108>)
 8008dfc:	40ca      	lsrs	r2, r1
 8008dfe:	07d6      	lsls	r6, r2, #31
 8008e00:	d528      	bpl.n	8008e54 <__sflush_r+0xb8>
 8008e02:	2200      	movs	r2, #0
 8008e04:	6062      	str	r2, [r4, #4]
 8008e06:	04d9      	lsls	r1, r3, #19
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	6022      	str	r2, [r4, #0]
 8008e0c:	d504      	bpl.n	8008e18 <__sflush_r+0x7c>
 8008e0e:	1c42      	adds	r2, r0, #1
 8008e10:	d101      	bne.n	8008e16 <__sflush_r+0x7a>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b903      	cbnz	r3, 8008e18 <__sflush_r+0x7c>
 8008e16:	6560      	str	r0, [r4, #84]	; 0x54
 8008e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e1a:	602f      	str	r7, [r5, #0]
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d0ca      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e24:	4299      	cmp	r1, r3
 8008e26:	d002      	beq.n	8008e2e <__sflush_r+0x92>
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f7ff fadb 	bl	80083e4 <_free_r>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	6360      	str	r0, [r4, #52]	; 0x34
 8008e32:	e7c1      	b.n	8008db8 <__sflush_r+0x1c>
 8008e34:	6a21      	ldr	r1, [r4, #32]
 8008e36:	2301      	movs	r3, #1
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b0      	blx	r6
 8008e3c:	1c41      	adds	r1, r0, #1
 8008e3e:	d1c7      	bne.n	8008dd0 <__sflush_r+0x34>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0c4      	beq.n	8008dd0 <__sflush_r+0x34>
 8008e46:	2b1d      	cmp	r3, #29
 8008e48:	d001      	beq.n	8008e4e <__sflush_r+0xb2>
 8008e4a:	2b16      	cmp	r3, #22
 8008e4c:	d101      	bne.n	8008e52 <__sflush_r+0xb6>
 8008e4e:	602f      	str	r7, [r5, #0]
 8008e50:	e7b1      	b.n	8008db6 <__sflush_r+0x1a>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	e7ad      	b.n	8008db8 <__sflush_r+0x1c>
 8008e5c:	690f      	ldr	r7, [r1, #16]
 8008e5e:	2f00      	cmp	r7, #0
 8008e60:	d0a9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e62:	0793      	lsls	r3, r2, #30
 8008e64:	680e      	ldr	r6, [r1, #0]
 8008e66:	bf08      	it	eq
 8008e68:	694b      	ldreq	r3, [r1, #20]
 8008e6a:	600f      	str	r7, [r1, #0]
 8008e6c:	bf18      	it	ne
 8008e6e:	2300      	movne	r3, #0
 8008e70:	eba6 0807 	sub.w	r8, r6, r7
 8008e74:	608b      	str	r3, [r1, #8]
 8008e76:	f1b8 0f00 	cmp.w	r8, #0
 8008e7a:	dd9c      	ble.n	8008db6 <__sflush_r+0x1a>
 8008e7c:	6a21      	ldr	r1, [r4, #32]
 8008e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e80:	4643      	mov	r3, r8
 8008e82:	463a      	mov	r2, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b0      	blx	r6
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dc06      	bgt.n	8008e9a <__sflush_r+0xfe>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	e78e      	b.n	8008db8 <__sflush_r+0x1c>
 8008e9a:	4407      	add	r7, r0
 8008e9c:	eba8 0800 	sub.w	r8, r8, r0
 8008ea0:	e7e9      	b.n	8008e76 <__sflush_r+0xda>
 8008ea2:	bf00      	nop
 8008ea4:	20400001 	.word	0x20400001

08008ea8 <_fflush_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	690b      	ldr	r3, [r1, #16]
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_fflush_r+0x10>
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	b118      	cbz	r0, 8008ec2 <_fflush_r+0x1a>
 8008eba:	6983      	ldr	r3, [r0, #24]
 8008ebc:	b90b      	cbnz	r3, 8008ec2 <_fflush_r+0x1a>
 8008ebe:	f000 f887 	bl	8008fd0 <__sinit>
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <_fflush_r+0x6c>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d11b      	bne.n	8008f00 <_fflush_r+0x58>
 8008ec8:	686c      	ldr	r4, [r5, #4]
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0ef      	beq.n	8008eb2 <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x3a>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x3a>
 8008edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ede:	f000 f915 	bl	800910c <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff59 	bl	8008d9c <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eec:	07da      	lsls	r2, r3, #31
 8008eee:	4605      	mov	r5, r0
 8008ef0:	d4e0      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4dd      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efa:	f000 f908 	bl	800910e <__retarget_lock_release_recursive>
 8008efe:	e7d9      	b.n	8008eb4 <_fflush_r+0xc>
 8008f00:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <_fflush_r+0x70>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <_fflush_r+0x62>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7df      	b.n	8008eca <_fflush_r+0x22>
 8008f0a:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <_fflush_r+0x74>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7da      	b.n	8008eca <_fflush_r+0x22>
 8008f14:	0800a864 	.word	0x0800a864
 8008f18:	0800a884 	.word	0x0800a884
 8008f1c:	0800a844 	.word	0x0800a844

08008f20 <std>:
 8008f20:	2300      	movs	r3, #0
 8008f22:	b510      	push	{r4, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	e9c0 3300 	strd	r3, r3, [r0]
 8008f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f2e:	6083      	str	r3, [r0, #8]
 8008f30:	8181      	strh	r1, [r0, #12]
 8008f32:	6643      	str	r3, [r0, #100]	; 0x64
 8008f34:	81c2      	strh	r2, [r0, #14]
 8008f36:	6183      	str	r3, [r0, #24]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	305c      	adds	r0, #92	; 0x5c
 8008f3e:	f7fb fe17 	bl	8004b70 <memset>
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <std+0x38>)
 8008f44:	6263      	str	r3, [r4, #36]	; 0x24
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <std+0x3c>)
 8008f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <std+0x40>)
 8008f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <std+0x44>)
 8008f50:	6224      	str	r4, [r4, #32]
 8008f52:	6323      	str	r3, [r4, #48]	; 0x30
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	bf00      	nop
 8008f58:	08009271 	.word	0x08009271
 8008f5c:	08009293 	.word	0x08009293
 8008f60:	080092cb 	.word	0x080092cb
 8008f64:	080092ef 	.word	0x080092ef

08008f68 <_cleanup_r>:
 8008f68:	4901      	ldr	r1, [pc, #4]	; (8008f70 <_cleanup_r+0x8>)
 8008f6a:	f000 b8af 	b.w	80090cc <_fwalk_reent>
 8008f6e:	bf00      	nop
 8008f70:	08008ea9 	.word	0x08008ea9

08008f74 <__sfmoreglue>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	1e4a      	subs	r2, r1, #1
 8008f78:	2568      	movs	r5, #104	; 0x68
 8008f7a:	4355      	muls	r5, r2
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f82:	f7ff fa7f 	bl	8008484 <_malloc_r>
 8008f86:	4604      	mov	r4, r0
 8008f88:	b140      	cbz	r0, 8008f9c <__sfmoreglue+0x28>
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f90:	300c      	adds	r0, #12
 8008f92:	60a0      	str	r0, [r4, #8]
 8008f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f98:	f7fb fdea 	bl	8004b70 <memset>
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}

08008fa0 <__sfp_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sfp_lock_acquire+0x8>)
 8008fa2:	f000 b8b3 	b.w	800910c <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20000538 	.word	0x20000538

08008fac <__sfp_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sfp_lock_release+0x8>)
 8008fae:	f000 b8ae 	b.w	800910e <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20000538 	.word	0x20000538

08008fb8 <__sinit_lock_acquire>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__sinit_lock_acquire+0x8>)
 8008fba:	f000 b8a7 	b.w	800910c <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	20000533 	.word	0x20000533

08008fc4 <__sinit_lock_release>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__sinit_lock_release+0x8>)
 8008fc6:	f000 b8a2 	b.w	800910e <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20000533 	.word	0x20000533

08008fd0 <__sinit>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f7ff fff0 	bl	8008fb8 <__sinit_lock_acquire>
 8008fd8:	69a3      	ldr	r3, [r4, #24]
 8008fda:	b11b      	cbz	r3, 8008fe4 <__sinit+0x14>
 8008fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe0:	f7ff bff0 	b.w	8008fc4 <__sinit_lock_release>
 8008fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <__sinit+0x68>)
 8008fec:	4a13      	ldr	r2, [pc, #76]	; (800903c <__sinit+0x6c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	bf04      	itt	eq
 8008ff6:	2301      	moveq	r3, #1
 8008ff8:	61a3      	streq	r3, [r4, #24]
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 f820 	bl	8009040 <__sfp>
 8009000:	6060      	str	r0, [r4, #4]
 8009002:	4620      	mov	r0, r4
 8009004:	f000 f81c 	bl	8009040 <__sfp>
 8009008:	60a0      	str	r0, [r4, #8]
 800900a:	4620      	mov	r0, r4
 800900c:	f000 f818 	bl	8009040 <__sfp>
 8009010:	2200      	movs	r2, #0
 8009012:	60e0      	str	r0, [r4, #12]
 8009014:	2104      	movs	r1, #4
 8009016:	6860      	ldr	r0, [r4, #4]
 8009018:	f7ff ff82 	bl	8008f20 <std>
 800901c:	68a0      	ldr	r0, [r4, #8]
 800901e:	2201      	movs	r2, #1
 8009020:	2109      	movs	r1, #9
 8009022:	f7ff ff7d 	bl	8008f20 <std>
 8009026:	68e0      	ldr	r0, [r4, #12]
 8009028:	2202      	movs	r2, #2
 800902a:	2112      	movs	r1, #18
 800902c:	f7ff ff78 	bl	8008f20 <std>
 8009030:	2301      	movs	r3, #1
 8009032:	61a3      	str	r3, [r4, #24]
 8009034:	e7d2      	b.n	8008fdc <__sinit+0xc>
 8009036:	bf00      	nop
 8009038:	0800a3f0 	.word	0x0800a3f0
 800903c:	08008f69 	.word	0x08008f69

08009040 <__sfp>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	4607      	mov	r7, r0
 8009044:	f7ff ffac 	bl	8008fa0 <__sfp_lock_acquire>
 8009048:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <__sfp+0x84>)
 800904a:	681e      	ldr	r6, [r3, #0]
 800904c:	69b3      	ldr	r3, [r6, #24]
 800904e:	b913      	cbnz	r3, 8009056 <__sfp+0x16>
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff ffbd 	bl	8008fd0 <__sinit>
 8009056:	3648      	adds	r6, #72	; 0x48
 8009058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	d503      	bpl.n	8009068 <__sfp+0x28>
 8009060:	6833      	ldr	r3, [r6, #0]
 8009062:	b30b      	cbz	r3, 80090a8 <__sfp+0x68>
 8009064:	6836      	ldr	r6, [r6, #0]
 8009066:	e7f7      	b.n	8009058 <__sfp+0x18>
 8009068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800906c:	b9d5      	cbnz	r5, 80090a4 <__sfp+0x64>
 800906e:	4b16      	ldr	r3, [pc, #88]	; (80090c8 <__sfp+0x88>)
 8009070:	60e3      	str	r3, [r4, #12]
 8009072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009076:	6665      	str	r5, [r4, #100]	; 0x64
 8009078:	f000 f847 	bl	800910a <__retarget_lock_init_recursive>
 800907c:	f7ff ff96 	bl	8008fac <__sfp_lock_release>
 8009080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009088:	6025      	str	r5, [r4, #0]
 800908a:	61a5      	str	r5, [r4, #24]
 800908c:	2208      	movs	r2, #8
 800908e:	4629      	mov	r1, r5
 8009090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009094:	f7fb fd6c 	bl	8004b70 <memset>
 8009098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800909c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090a0:	4620      	mov	r0, r4
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a4:	3468      	adds	r4, #104	; 0x68
 80090a6:	e7d9      	b.n	800905c <__sfp+0x1c>
 80090a8:	2104      	movs	r1, #4
 80090aa:	4638      	mov	r0, r7
 80090ac:	f7ff ff62 	bl	8008f74 <__sfmoreglue>
 80090b0:	4604      	mov	r4, r0
 80090b2:	6030      	str	r0, [r6, #0]
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1d5      	bne.n	8009064 <__sfp+0x24>
 80090b8:	f7ff ff78 	bl	8008fac <__sfp_lock_release>
 80090bc:	230c      	movs	r3, #12
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	e7ee      	b.n	80090a0 <__sfp+0x60>
 80090c2:	bf00      	nop
 80090c4:	0800a3f0 	.word	0x0800a3f0
 80090c8:	ffff0001 	.word	0xffff0001

080090cc <_fwalk_reent>:
 80090cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	4606      	mov	r6, r0
 80090d2:	4688      	mov	r8, r1
 80090d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090d8:	2700      	movs	r7, #0
 80090da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090de:	f1b9 0901 	subs.w	r9, r9, #1
 80090e2:	d505      	bpl.n	80090f0 <_fwalk_reent+0x24>
 80090e4:	6824      	ldr	r4, [r4, #0]
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d1f7      	bne.n	80090da <_fwalk_reent+0xe>
 80090ea:	4638      	mov	r0, r7
 80090ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f0:	89ab      	ldrh	r3, [r5, #12]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d907      	bls.n	8009106 <_fwalk_reent+0x3a>
 80090f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090fa:	3301      	adds	r3, #1
 80090fc:	d003      	beq.n	8009106 <_fwalk_reent+0x3a>
 80090fe:	4629      	mov	r1, r5
 8009100:	4630      	mov	r0, r6
 8009102:	47c0      	blx	r8
 8009104:	4307      	orrs	r7, r0
 8009106:	3568      	adds	r5, #104	; 0x68
 8009108:	e7e9      	b.n	80090de <_fwalk_reent+0x12>

0800910a <__retarget_lock_init_recursive>:
 800910a:	4770      	bx	lr

0800910c <__retarget_lock_acquire_recursive>:
 800910c:	4770      	bx	lr

0800910e <__retarget_lock_release_recursive>:
 800910e:	4770      	bx	lr

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2900      	cmp	r1, #0
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da07      	bge.n	8009132 <__swhatbuf_r+0x22>
 8009122:	2300      	movs	r3, #0
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	89b3      	ldrh	r3, [r6, #12]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	d410      	bmi.n	800914e <__swhatbuf_r+0x3e>
 800912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009130:	e00e      	b.n	8009150 <__swhatbuf_r+0x40>
 8009132:	466a      	mov	r2, sp
 8009134:	f000 f902 	bl	800933c <_fstat_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	dbf2      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913c:	9a01      	ldr	r2, [sp, #4]
 800913e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009146:	425a      	negs	r2, r3
 8009148:	415a      	adcs	r2, r3
 800914a:	602a      	str	r2, [r5, #0]
 800914c:	e7ee      	b.n	800912c <__swhatbuf_r+0x1c>
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2000      	movs	r0, #0
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	b016      	add	sp, #88	; 0x58
 8009156:	bd70      	pop	{r4, r5, r6, pc}

08009158 <__smakebuf_r>:
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800915c:	079d      	lsls	r5, r3, #30
 800915e:	4606      	mov	r6, r0
 8009160:	460c      	mov	r4, r1
 8009162:	d507      	bpl.n	8009174 <__smakebuf_r+0x1c>
 8009164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2301      	movs	r3, #1
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	ab01      	add	r3, sp, #4
 8009176:	466a      	mov	r2, sp
 8009178:	f7ff ffca 	bl	8009110 <__swhatbuf_r>
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff f97f 	bl	8008484 <_malloc_r>
 8009186:	b948      	cbnz	r0, 800919c <__smakebuf_r+0x44>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d4ef      	bmi.n	8009170 <__smakebuf_r+0x18>
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7e3      	b.n	8009164 <__smakebuf_r+0xc>
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <__smakebuf_r+0x7c>)
 800919e:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	6163      	str	r3, [r4, #20]
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	6120      	str	r0, [r4, #16]
 80091b2:	b15b      	cbz	r3, 80091cc <__smakebuf_r+0x74>
 80091b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 f8d1 	bl	8009360 <_isatty_r>
 80091be:	b128      	cbz	r0, 80091cc <__smakebuf_r+0x74>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	89a0      	ldrh	r0, [r4, #12]
 80091ce:	4305      	orrs	r5, r0
 80091d0:	81a5      	strh	r5, [r4, #12]
 80091d2:	e7cd      	b.n	8009170 <__smakebuf_r+0x18>
 80091d4:	08008f69 	.word	0x08008f69

080091d8 <_malloc_usable_size_r>:
 80091d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091dc:	1f18      	subs	r0, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbc      	itt	lt
 80091e2:	580b      	ldrlt	r3, [r1, r0]
 80091e4:	18c0      	addlt	r0, r0, r3
 80091e6:	4770      	bx	lr

080091e8 <_raise_r>:
 80091e8:	291f      	cmp	r1, #31
 80091ea:	b538      	push	{r3, r4, r5, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	d904      	bls.n	80091fc <_raise_r+0x14>
 80091f2:	2316      	movs	r3, #22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091fe:	b112      	cbz	r2, 8009206 <_raise_r+0x1e>
 8009200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009204:	b94b      	cbnz	r3, 800921a <_raise_r+0x32>
 8009206:	4620      	mov	r0, r4
 8009208:	f000 f830 	bl	800926c <_getpid_r>
 800920c:	462a      	mov	r2, r5
 800920e:	4601      	mov	r1, r0
 8009210:	4620      	mov	r0, r4
 8009212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009216:	f000 b817 	b.w	8009248 <_kill_r>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d00a      	beq.n	8009234 <_raise_r+0x4c>
 800921e:	1c59      	adds	r1, r3, #1
 8009220:	d103      	bne.n	800922a <_raise_r+0x42>
 8009222:	2316      	movs	r3, #22
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	2001      	movs	r0, #1
 8009228:	e7e7      	b.n	80091fa <_raise_r+0x12>
 800922a:	2400      	movs	r4, #0
 800922c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009230:	4628      	mov	r0, r5
 8009232:	4798      	blx	r3
 8009234:	2000      	movs	r0, #0
 8009236:	e7e0      	b.n	80091fa <_raise_r+0x12>

08009238 <raise>:
 8009238:	4b02      	ldr	r3, [pc, #8]	; (8009244 <raise+0xc>)
 800923a:	4601      	mov	r1, r0
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f7ff bfd3 	b.w	80091e8 <_raise_r>
 8009242:	bf00      	nop
 8009244:	2000000c 	.word	0x2000000c

08009248 <_kill_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_kill_r+0x20>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	f7f8 ff8b 	bl	8002170 <_kill>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d102      	bne.n	8009264 <_kill_r+0x1c>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	b103      	cbz	r3, 8009264 <_kill_r+0x1c>
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	2000052c 	.word	0x2000052c

0800926c <_getpid_r>:
 800926c:	f7f8 bf78 	b.w	8002160 <_getpid>

08009270 <__sread>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f000 f894 	bl	80093a4 <_read_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	bfab      	itete	ge
 8009280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009282:	89a3      	ldrhlt	r3, [r4, #12]
 8009284:	181b      	addge	r3, r3, r0
 8009286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800928a:	bfac      	ite	ge
 800928c:	6563      	strge	r3, [r4, #84]	; 0x54
 800928e:	81a3      	strhlt	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__swrite>:
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	461f      	mov	r7, r3
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	05db      	lsls	r3, r3, #23
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	d505      	bpl.n	80092b0 <__swrite+0x1e>
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f000 f868 	bl	8009380 <_lseek_r>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	f000 b817 	b.w	80092f8 <_write_r>

080092ca <__sseek>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 f855 	bl	8009380 <_lseek_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	bf15      	itete	ne
 80092dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e6:	81a3      	strheq	r3, [r4, #12]
 80092e8:	bf18      	it	ne
 80092ea:	81a3      	strhne	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__sclose>:
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 b813 	b.w	800931c <_close_r>
	...

080092f8 <_write_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	; (8009318 <_write_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f8 ff69 	bl	80021de <_write>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_write_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_write_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	2000052c 	.word	0x2000052c

0800931c <_close_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d06      	ldr	r5, [pc, #24]	; (8009338 <_close_r+0x1c>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	f7f8 ff75 	bl	8002216 <_close>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_close_r+0x1a>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_close_r+0x1a>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	2000052c 	.word	0x2000052c

0800933c <_fstat_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	; (800935c <_fstat_r+0x20>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f7f8 ff70 	bl	800222e <_fstat>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d102      	bne.n	8009358 <_fstat_r+0x1c>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	b103      	cbz	r3, 8009358 <_fstat_r+0x1c>
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	bf00      	nop
 800935c:	2000052c 	.word	0x2000052c

08009360 <_isatty_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_isatty_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 ff6f 	bl	800224e <_isatty>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_isatty_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_isatty_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	2000052c 	.word	0x2000052c

08009380 <_lseek_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d07      	ldr	r5, [pc, #28]	; (80093a0 <_lseek_r+0x20>)
 8009384:	4604      	mov	r4, r0
 8009386:	4608      	mov	r0, r1
 8009388:	4611      	mov	r1, r2
 800938a:	2200      	movs	r2, #0
 800938c:	602a      	str	r2, [r5, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f7f8 ff68 	bl	8002264 <_lseek>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_lseek_r+0x1e>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_lseek_r+0x1e>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	2000052c 	.word	0x2000052c

080093a4 <_read_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_read_r+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f8 fef6 	bl	80021a4 <_read>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_read_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_read_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	2000052c 	.word	0x2000052c

080093c8 <pow>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	ec59 8b10 	vmov	r8, r9, d0
 80093d0:	ec57 6b11 	vmov	r6, r7, d1
 80093d4:	f000 f8a8 	bl	8009528 <__ieee754_pow>
 80093d8:	4b4e      	ldr	r3, [pc, #312]	; (8009514 <pow+0x14c>)
 80093da:	f993 3000 	ldrsb.w	r3, [r3]
 80093de:	3301      	adds	r3, #1
 80093e0:	ec55 4b10 	vmov	r4, r5, d0
 80093e4:	d015      	beq.n	8009412 <pow+0x4a>
 80093e6:	4632      	mov	r2, r6
 80093e8:	463b      	mov	r3, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f7 fbbd 	bl	8000b6c <__aeabi_dcmpun>
 80093f2:	b970      	cbnz	r0, 8009412 <pow+0x4a>
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 fbb6 	bl	8000b6c <__aeabi_dcmpun>
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	b148      	cbz	r0, 800941a <pow+0x52>
 8009406:	4630      	mov	r0, r6
 8009408:	4639      	mov	r1, r7
 800940a:	f7f7 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 800940e:	2800      	cmp	r0, #0
 8009410:	d17d      	bne.n	800950e <pow+0x146>
 8009412:	ec45 4b10 	vmov	d0, r4, r5
 8009416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f7 fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8009422:	b1e0      	cbz	r0, 800945e <pow+0x96>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 8009430:	2800      	cmp	r0, #0
 8009432:	d16c      	bne.n	800950e <pow+0x146>
 8009434:	ec47 6b10 	vmov	d0, r6, r7
 8009438:	f000 fe55 	bl	800a0e6 <finite>
 800943c:	2800      	cmp	r0, #0
 800943e:	d0e8      	beq.n	8009412 <pow+0x4a>
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 fb68 	bl	8000b1c <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0e0      	beq.n	8009412 <pow+0x4a>
 8009450:	f7fb fb64 	bl	8004b1c <__errno>
 8009454:	2321      	movs	r3, #33	; 0x21
 8009456:	6003      	str	r3, [r0, #0]
 8009458:	2400      	movs	r4, #0
 800945a:	4d2f      	ldr	r5, [pc, #188]	; (8009518 <pow+0x150>)
 800945c:	e7d9      	b.n	8009412 <pow+0x4a>
 800945e:	ec45 4b10 	vmov	d0, r4, r5
 8009462:	f000 fe40 	bl	800a0e6 <finite>
 8009466:	bbb8      	cbnz	r0, 80094d8 <pow+0x110>
 8009468:	ec49 8b10 	vmov	d0, r8, r9
 800946c:	f000 fe3b 	bl	800a0e6 <finite>
 8009470:	b390      	cbz	r0, 80094d8 <pow+0x110>
 8009472:	ec47 6b10 	vmov	d0, r6, r7
 8009476:	f000 fe36 	bl	800a0e6 <finite>
 800947a:	b368      	cbz	r0, 80094d8 <pow+0x110>
 800947c:	4622      	mov	r2, r4
 800947e:	462b      	mov	r3, r5
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f7 fb72 	bl	8000b6c <__aeabi_dcmpun>
 8009488:	b160      	cbz	r0, 80094a4 <pow+0xdc>
 800948a:	f7fb fb47 	bl	8004b1c <__errno>
 800948e:	2321      	movs	r3, #33	; 0x21
 8009490:	6003      	str	r3, [r0, #0]
 8009492:	2200      	movs	r2, #0
 8009494:	2300      	movs	r3, #0
 8009496:	4610      	mov	r0, r2
 8009498:	4619      	mov	r1, r3
 800949a:	f7f7 f9f7 	bl	800088c <__aeabi_ddiv>
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	e7b6      	b.n	8009412 <pow+0x4a>
 80094a4:	f7fb fb3a 	bl	8004b1c <__errno>
 80094a8:	2322      	movs	r3, #34	; 0x22
 80094aa:	6003      	str	r3, [r0, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	2300      	movs	r3, #0
 80094b0:	4640      	mov	r0, r8
 80094b2:	4649      	mov	r1, r9
 80094b4:	f7f7 fb32 	bl	8000b1c <__aeabi_dcmplt>
 80094b8:	2400      	movs	r4, #0
 80094ba:	b158      	cbz	r0, 80094d4 <pow+0x10c>
 80094bc:	ec47 6b10 	vmov	d0, r6, r7
 80094c0:	f000 fe1c 	bl	800a0fc <rint>
 80094c4:	4632      	mov	r2, r6
 80094c6:	ec51 0b10 	vmov	r0, r1, d0
 80094ca:	463b      	mov	r3, r7
 80094cc:	f7f7 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0c2      	beq.n	800945a <pow+0x92>
 80094d4:	4d11      	ldr	r5, [pc, #68]	; (800951c <pow+0x154>)
 80094d6:	e79c      	b.n	8009412 <pow+0x4a>
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	f7f7 fb12 	bl	8000b08 <__aeabi_dcmpeq>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d094      	beq.n	8009412 <pow+0x4a>
 80094e8:	ec49 8b10 	vmov	d0, r8, r9
 80094ec:	f000 fdfb 	bl	800a0e6 <finite>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d08e      	beq.n	8009412 <pow+0x4a>
 80094f4:	ec47 6b10 	vmov	d0, r6, r7
 80094f8:	f000 fdf5 	bl	800a0e6 <finite>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d088      	beq.n	8009412 <pow+0x4a>
 8009500:	f7fb fb0c 	bl	8004b1c <__errno>
 8009504:	2322      	movs	r3, #34	; 0x22
 8009506:	6003      	str	r3, [r0, #0]
 8009508:	2400      	movs	r4, #0
 800950a:	2500      	movs	r5, #0
 800950c:	e781      	b.n	8009412 <pow+0x4a>
 800950e:	4d04      	ldr	r5, [pc, #16]	; (8009520 <pow+0x158>)
 8009510:	2400      	movs	r4, #0
 8009512:	e77e      	b.n	8009412 <pow+0x4a>
 8009514:	200001e0 	.word	0x200001e0
 8009518:	fff00000 	.word	0xfff00000
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	3ff00000 	.word	0x3ff00000
 8009524:	00000000 	.word	0x00000000

08009528 <__ieee754_pow>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	ed2d 8b06 	vpush	{d8-d10}
 8009530:	b08d      	sub	sp, #52	; 0x34
 8009532:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009536:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800953a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800953e:	ea56 0100 	orrs.w	r1, r6, r0
 8009542:	ec53 2b10 	vmov	r2, r3, d0
 8009546:	f000 84d1 	beq.w	8009eec <__ieee754_pow+0x9c4>
 800954a:	497f      	ldr	r1, [pc, #508]	; (8009748 <__ieee754_pow+0x220>)
 800954c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009550:	428c      	cmp	r4, r1
 8009552:	ee10 8a10 	vmov	r8, s0
 8009556:	4699      	mov	r9, r3
 8009558:	dc09      	bgt.n	800956e <__ieee754_pow+0x46>
 800955a:	d103      	bne.n	8009564 <__ieee754_pow+0x3c>
 800955c:	b97a      	cbnz	r2, 800957e <__ieee754_pow+0x56>
 800955e:	42a6      	cmp	r6, r4
 8009560:	dd02      	ble.n	8009568 <__ieee754_pow+0x40>
 8009562:	e00c      	b.n	800957e <__ieee754_pow+0x56>
 8009564:	428e      	cmp	r6, r1
 8009566:	dc02      	bgt.n	800956e <__ieee754_pow+0x46>
 8009568:	428e      	cmp	r6, r1
 800956a:	d110      	bne.n	800958e <__ieee754_pow+0x66>
 800956c:	b178      	cbz	r0, 800958e <__ieee754_pow+0x66>
 800956e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009572:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009576:	ea54 0308 	orrs.w	r3, r4, r8
 800957a:	f000 84b7 	beq.w	8009eec <__ieee754_pow+0x9c4>
 800957e:	4873      	ldr	r0, [pc, #460]	; (800974c <__ieee754_pow+0x224>)
 8009580:	b00d      	add	sp, #52	; 0x34
 8009582:	ecbd 8b06 	vpop	{d8-d10}
 8009586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	f7ff b931 	b.w	80087f0 <nan>
 800958e:	f1b9 0f00 	cmp.w	r9, #0
 8009592:	da36      	bge.n	8009602 <__ieee754_pow+0xda>
 8009594:	496e      	ldr	r1, [pc, #440]	; (8009750 <__ieee754_pow+0x228>)
 8009596:	428e      	cmp	r6, r1
 8009598:	dc51      	bgt.n	800963e <__ieee754_pow+0x116>
 800959a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800959e:	428e      	cmp	r6, r1
 80095a0:	f340 84af 	ble.w	8009f02 <__ieee754_pow+0x9da>
 80095a4:	1531      	asrs	r1, r6, #20
 80095a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80095aa:	2914      	cmp	r1, #20
 80095ac:	dd0f      	ble.n	80095ce <__ieee754_pow+0xa6>
 80095ae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80095b2:	fa20 fc01 	lsr.w	ip, r0, r1
 80095b6:	fa0c f101 	lsl.w	r1, ip, r1
 80095ba:	4281      	cmp	r1, r0
 80095bc:	f040 84a1 	bne.w	8009f02 <__ieee754_pow+0x9da>
 80095c0:	f00c 0c01 	and.w	ip, ip, #1
 80095c4:	f1cc 0102 	rsb	r1, ip, #2
 80095c8:	9100      	str	r1, [sp, #0]
 80095ca:	b180      	cbz	r0, 80095ee <__ieee754_pow+0xc6>
 80095cc:	e059      	b.n	8009682 <__ieee754_pow+0x15a>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d155      	bne.n	800967e <__ieee754_pow+0x156>
 80095d2:	f1c1 0114 	rsb	r1, r1, #20
 80095d6:	fa46 fc01 	asr.w	ip, r6, r1
 80095da:	fa0c f101 	lsl.w	r1, ip, r1
 80095de:	42b1      	cmp	r1, r6
 80095e0:	f040 848c 	bne.w	8009efc <__ieee754_pow+0x9d4>
 80095e4:	f00c 0c01 	and.w	ip, ip, #1
 80095e8:	f1cc 0102 	rsb	r1, ip, #2
 80095ec:	9100      	str	r1, [sp, #0]
 80095ee:	4959      	ldr	r1, [pc, #356]	; (8009754 <__ieee754_pow+0x22c>)
 80095f0:	428e      	cmp	r6, r1
 80095f2:	d12d      	bne.n	8009650 <__ieee754_pow+0x128>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	da79      	bge.n	80096ec <__ieee754_pow+0x1c4>
 80095f8:	4956      	ldr	r1, [pc, #344]	; (8009754 <__ieee754_pow+0x22c>)
 80095fa:	2000      	movs	r0, #0
 80095fc:	f7f7 f946 	bl	800088c <__aeabi_ddiv>
 8009600:	e016      	b.n	8009630 <__ieee754_pow+0x108>
 8009602:	2100      	movs	r1, #0
 8009604:	9100      	str	r1, [sp, #0]
 8009606:	2800      	cmp	r0, #0
 8009608:	d13b      	bne.n	8009682 <__ieee754_pow+0x15a>
 800960a:	494f      	ldr	r1, [pc, #316]	; (8009748 <__ieee754_pow+0x220>)
 800960c:	428e      	cmp	r6, r1
 800960e:	d1ee      	bne.n	80095ee <__ieee754_pow+0xc6>
 8009610:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009614:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009618:	ea53 0308 	orrs.w	r3, r3, r8
 800961c:	f000 8466 	beq.w	8009eec <__ieee754_pow+0x9c4>
 8009620:	4b4d      	ldr	r3, [pc, #308]	; (8009758 <__ieee754_pow+0x230>)
 8009622:	429c      	cmp	r4, r3
 8009624:	dd0d      	ble.n	8009642 <__ieee754_pow+0x11a>
 8009626:	2f00      	cmp	r7, #0
 8009628:	f280 8464 	bge.w	8009ef4 <__ieee754_pow+0x9cc>
 800962c:	2000      	movs	r0, #0
 800962e:	2100      	movs	r1, #0
 8009630:	ec41 0b10 	vmov	d0, r0, r1
 8009634:	b00d      	add	sp, #52	; 0x34
 8009636:	ecbd 8b06 	vpop	{d8-d10}
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	2102      	movs	r1, #2
 8009640:	e7e0      	b.n	8009604 <__ieee754_pow+0xdc>
 8009642:	2f00      	cmp	r7, #0
 8009644:	daf2      	bge.n	800962c <__ieee754_pow+0x104>
 8009646:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800964a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800964e:	e7ef      	b.n	8009630 <__ieee754_pow+0x108>
 8009650:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009654:	d104      	bne.n	8009660 <__ieee754_pow+0x138>
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	f7f6 ffed 	bl	8000638 <__aeabi_dmul>
 800965e:	e7e7      	b.n	8009630 <__ieee754_pow+0x108>
 8009660:	493e      	ldr	r1, [pc, #248]	; (800975c <__ieee754_pow+0x234>)
 8009662:	428f      	cmp	r7, r1
 8009664:	d10d      	bne.n	8009682 <__ieee754_pow+0x15a>
 8009666:	f1b9 0f00 	cmp.w	r9, #0
 800966a:	db0a      	blt.n	8009682 <__ieee754_pow+0x15a>
 800966c:	ec43 2b10 	vmov	d0, r2, r3
 8009670:	b00d      	add	sp, #52	; 0x34
 8009672:	ecbd 8b06 	vpop	{d8-d10}
 8009676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f000 bc77 	b.w	8009f6c <__ieee754_sqrt>
 800967e:	2100      	movs	r1, #0
 8009680:	9100      	str	r1, [sp, #0]
 8009682:	ec43 2b10 	vmov	d0, r2, r3
 8009686:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800968a:	f000 fd23 	bl	800a0d4 <fabs>
 800968e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009692:	ec51 0b10 	vmov	r0, r1, d0
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	d12a      	bne.n	80096f2 <__ieee754_pow+0x1ca>
 800969c:	b12c      	cbz	r4, 80096aa <__ieee754_pow+0x182>
 800969e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009754 <__ieee754_pow+0x22c>
 80096a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80096a6:	45e6      	cmp	lr, ip
 80096a8:	d123      	bne.n	80096f2 <__ieee754_pow+0x1ca>
 80096aa:	2f00      	cmp	r7, #0
 80096ac:	da05      	bge.n	80096ba <__ieee754_pow+0x192>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	2000      	movs	r0, #0
 80096b4:	4927      	ldr	r1, [pc, #156]	; (8009754 <__ieee754_pow+0x22c>)
 80096b6:	f7f7 f8e9 	bl	800088c <__aeabi_ddiv>
 80096ba:	f1b9 0f00 	cmp.w	r9, #0
 80096be:	dab7      	bge.n	8009630 <__ieee754_pow+0x108>
 80096c0:	9b00      	ldr	r3, [sp, #0]
 80096c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80096c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096ca:	4323      	orrs	r3, r4
 80096cc:	d108      	bne.n	80096e0 <__ieee754_pow+0x1b8>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7f6 fdf7 	bl	80002c8 <__aeabi_dsub>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	e78d      	b.n	80095fc <__ieee754_pow+0xd4>
 80096e0:	9b00      	ldr	r3, [sp, #0]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d1a4      	bne.n	8009630 <__ieee754_pow+0x108>
 80096e6:	4602      	mov	r2, r0
 80096e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ec:	4610      	mov	r0, r2
 80096ee:	4619      	mov	r1, r3
 80096f0:	e79e      	b.n	8009630 <__ieee754_pow+0x108>
 80096f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80096f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80096fa:	950a      	str	r5, [sp, #40]	; 0x28
 80096fc:	9d00      	ldr	r5, [sp, #0]
 80096fe:	46ac      	mov	ip, r5
 8009700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009702:	ea5c 0505 	orrs.w	r5, ip, r5
 8009706:	d0e4      	beq.n	80096d2 <__ieee754_pow+0x1aa>
 8009708:	4b15      	ldr	r3, [pc, #84]	; (8009760 <__ieee754_pow+0x238>)
 800970a:	429e      	cmp	r6, r3
 800970c:	f340 80fc 	ble.w	8009908 <__ieee754_pow+0x3e0>
 8009710:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009714:	429e      	cmp	r6, r3
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <__ieee754_pow+0x230>)
 8009718:	dd07      	ble.n	800972a <__ieee754_pow+0x202>
 800971a:	429c      	cmp	r4, r3
 800971c:	dc0a      	bgt.n	8009734 <__ieee754_pow+0x20c>
 800971e:	2f00      	cmp	r7, #0
 8009720:	da84      	bge.n	800962c <__ieee754_pow+0x104>
 8009722:	a307      	add	r3, pc, #28	; (adr r3, 8009740 <__ieee754_pow+0x218>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	e795      	b.n	8009656 <__ieee754_pow+0x12e>
 800972a:	429c      	cmp	r4, r3
 800972c:	dbf7      	blt.n	800971e <__ieee754_pow+0x1f6>
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <__ieee754_pow+0x22c>)
 8009730:	429c      	cmp	r4, r3
 8009732:	dd17      	ble.n	8009764 <__ieee754_pow+0x23c>
 8009734:	2f00      	cmp	r7, #0
 8009736:	dcf4      	bgt.n	8009722 <__ieee754_pow+0x1fa>
 8009738:	e778      	b.n	800962c <__ieee754_pow+0x104>
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w
 8009740:	8800759c 	.word	0x8800759c
 8009744:	7e37e43c 	.word	0x7e37e43c
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	0800a840 	.word	0x0800a840
 8009750:	433fffff 	.word	0x433fffff
 8009754:	3ff00000 	.word	0x3ff00000
 8009758:	3fefffff 	.word	0x3fefffff
 800975c:	3fe00000 	.word	0x3fe00000
 8009760:	41e00000 	.word	0x41e00000
 8009764:	4b64      	ldr	r3, [pc, #400]	; (80098f8 <__ieee754_pow+0x3d0>)
 8009766:	2200      	movs	r2, #0
 8009768:	f7f6 fdae 	bl	80002c8 <__aeabi_dsub>
 800976c:	a356      	add	r3, pc, #344	; (adr r3, 80098c8 <__ieee754_pow+0x3a0>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	4604      	mov	r4, r0
 8009774:	460d      	mov	r5, r1
 8009776:	f7f6 ff5f 	bl	8000638 <__aeabi_dmul>
 800977a:	a355      	add	r3, pc, #340	; (adr r3, 80098d0 <__ieee754_pow+0x3a8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	4606      	mov	r6, r0
 8009782:	460f      	mov	r7, r1
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f6 ff56 	bl	8000638 <__aeabi_dmul>
 800978c:	4b5b      	ldr	r3, [pc, #364]	; (80098fc <__ieee754_pow+0x3d4>)
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	2200      	movs	r2, #0
 8009794:	4620      	mov	r0, r4
 8009796:	4629      	mov	r1, r5
 8009798:	f7f6 ff4e 	bl	8000638 <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	a14d      	add	r1, pc, #308	; (adr r1, 80098d8 <__ieee754_pow+0x3b0>)
 80097a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a6:	f7f6 fd8f 	bl	80002c8 <__aeabi_dsub>
 80097aa:	4622      	mov	r2, r4
 80097ac:	462b      	mov	r3, r5
 80097ae:	f7f6 ff43 	bl	8000638 <__aeabi_dmul>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	2000      	movs	r0, #0
 80097b8:	4951      	ldr	r1, [pc, #324]	; (8009900 <__ieee754_pow+0x3d8>)
 80097ba:	f7f6 fd85 	bl	80002c8 <__aeabi_dsub>
 80097be:	4622      	mov	r2, r4
 80097c0:	4680      	mov	r8, r0
 80097c2:	4689      	mov	r9, r1
 80097c4:	462b      	mov	r3, r5
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f6 ff35 	bl	8000638 <__aeabi_dmul>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f6 ff2f 	bl	8000638 <__aeabi_dmul>
 80097da:	a341      	add	r3, pc, #260	; (adr r3, 80098e0 <__ieee754_pow+0x3b8>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 ff2a 	bl	8000638 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	f7f6 fd6c 	bl	80002c8 <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4680      	mov	r8, r0
 80097f6:	4689      	mov	r9, r1
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	f7f6 fd66 	bl	80002cc <__adddf3>
 8009800:	2400      	movs	r4, #0
 8009802:	4632      	mov	r2, r6
 8009804:	463b      	mov	r3, r7
 8009806:	4620      	mov	r0, r4
 8009808:	460d      	mov	r5, r1
 800980a:	f7f6 fd5d 	bl	80002c8 <__aeabi_dsub>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4640      	mov	r0, r8
 8009814:	4649      	mov	r1, r9
 8009816:	f7f6 fd57 	bl	80002c8 <__aeabi_dsub>
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800981e:	3b01      	subs	r3, #1
 8009820:	4313      	orrs	r3, r2
 8009822:	4682      	mov	sl, r0
 8009824:	468b      	mov	fp, r1
 8009826:	f040 81f1 	bne.w	8009c0c <__ieee754_pow+0x6e4>
 800982a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80098e8 <__ieee754_pow+0x3c0>
 800982e:	eeb0 8a47 	vmov.f32	s16, s14
 8009832:	eef0 8a67 	vmov.f32	s17, s15
 8009836:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800983a:	2600      	movs	r6, #0
 800983c:	4632      	mov	r2, r6
 800983e:	463b      	mov	r3, r7
 8009840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009844:	f7f6 fd40 	bl	80002c8 <__aeabi_dsub>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	f7f6 fef4 	bl	8000638 <__aeabi_dmul>
 8009850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	4650      	mov	r0, sl
 800985a:	4659      	mov	r1, fp
 800985c:	f7f6 feec 	bl	8000638 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4640      	mov	r0, r8
 8009866:	4649      	mov	r1, r9
 8009868:	f7f6 fd30 	bl	80002cc <__adddf3>
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	4680      	mov	r8, r0
 8009872:	4689      	mov	r9, r1
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f6 fede 	bl	8000638 <__aeabi_dmul>
 800987c:	460b      	mov	r3, r1
 800987e:	4604      	mov	r4, r0
 8009880:	460d      	mov	r5, r1
 8009882:	4602      	mov	r2, r0
 8009884:	4649      	mov	r1, r9
 8009886:	4640      	mov	r0, r8
 8009888:	f7f6 fd20 	bl	80002cc <__adddf3>
 800988c:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <__ieee754_pow+0x3dc>)
 800988e:	4299      	cmp	r1, r3
 8009890:	ec45 4b19 	vmov	d9, r4, r5
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	468b      	mov	fp, r1
 800989a:	f340 82fe 	ble.w	8009e9a <__ieee754_pow+0x972>
 800989e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80098a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80098a6:	4303      	orrs	r3, r0
 80098a8:	f000 81f0 	beq.w	8009c8c <__ieee754_pow+0x764>
 80098ac:	a310      	add	r3, pc, #64	; (adr r3, 80098f0 <__ieee754_pow+0x3c8>)
 80098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b2:	ec51 0b18 	vmov	r0, r1, d8
 80098b6:	f7f6 febf 	bl	8000638 <__aeabi_dmul>
 80098ba:	a30d      	add	r3, pc, #52	; (adr r3, 80098f0 <__ieee754_pow+0x3c8>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	e6cb      	b.n	800965a <__ieee754_pow+0x132>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	60000000 	.word	0x60000000
 80098cc:	3ff71547 	.word	0x3ff71547
 80098d0:	f85ddf44 	.word	0xf85ddf44
 80098d4:	3e54ae0b 	.word	0x3e54ae0b
 80098d8:	55555555 	.word	0x55555555
 80098dc:	3fd55555 	.word	0x3fd55555
 80098e0:	652b82fe 	.word	0x652b82fe
 80098e4:	3ff71547 	.word	0x3ff71547
 80098e8:	00000000 	.word	0x00000000
 80098ec:	bff00000 	.word	0xbff00000
 80098f0:	8800759c 	.word	0x8800759c
 80098f4:	7e37e43c 	.word	0x7e37e43c
 80098f8:	3ff00000 	.word	0x3ff00000
 80098fc:	3fd00000 	.word	0x3fd00000
 8009900:	3fe00000 	.word	0x3fe00000
 8009904:	408fffff 	.word	0x408fffff
 8009908:	4bd7      	ldr	r3, [pc, #860]	; (8009c68 <__ieee754_pow+0x740>)
 800990a:	ea03 0309 	and.w	r3, r3, r9
 800990e:	2200      	movs	r2, #0
 8009910:	b92b      	cbnz	r3, 800991e <__ieee754_pow+0x3f6>
 8009912:	4bd6      	ldr	r3, [pc, #856]	; (8009c6c <__ieee754_pow+0x744>)
 8009914:	f7f6 fe90 	bl	8000638 <__aeabi_dmul>
 8009918:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800991c:	460c      	mov	r4, r1
 800991e:	1523      	asrs	r3, r4, #20
 8009920:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009924:	4413      	add	r3, r2
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	4bd1      	ldr	r3, [pc, #836]	; (8009c70 <__ieee754_pow+0x748>)
 800992a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800992e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009932:	429c      	cmp	r4, r3
 8009934:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009938:	dd08      	ble.n	800994c <__ieee754_pow+0x424>
 800993a:	4bce      	ldr	r3, [pc, #824]	; (8009c74 <__ieee754_pow+0x74c>)
 800993c:	429c      	cmp	r4, r3
 800993e:	f340 8163 	ble.w	8009c08 <__ieee754_pow+0x6e0>
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	3301      	adds	r3, #1
 8009946:	9309      	str	r3, [sp, #36]	; 0x24
 8009948:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800994c:	2400      	movs	r4, #0
 800994e:	00e3      	lsls	r3, r4, #3
 8009950:	930b      	str	r3, [sp, #44]	; 0x2c
 8009952:	4bc9      	ldr	r3, [pc, #804]	; (8009c78 <__ieee754_pow+0x750>)
 8009954:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009958:	ed93 7b00 	vldr	d7, [r3]
 800995c:	4629      	mov	r1, r5
 800995e:	ec53 2b17 	vmov	r2, r3, d7
 8009962:	eeb0 8a47 	vmov.f32	s16, s14
 8009966:	eef0 8a67 	vmov.f32	s17, s15
 800996a:	4682      	mov	sl, r0
 800996c:	f7f6 fcac 	bl	80002c8 <__aeabi_dsub>
 8009970:	4652      	mov	r2, sl
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	462b      	mov	r3, r5
 8009978:	ec51 0b18 	vmov	r0, r1, d8
 800997c:	f7f6 fca6 	bl	80002cc <__adddf3>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	2000      	movs	r0, #0
 8009986:	49bd      	ldr	r1, [pc, #756]	; (8009c7c <__ieee754_pow+0x754>)
 8009988:	f7f6 ff80 	bl	800088c <__aeabi_ddiv>
 800998c:	ec41 0b19 	vmov	d9, r0, r1
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 fe4e 	bl	8000638 <__aeabi_dmul>
 800999c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099a8:	2300      	movs	r3, #0
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80099b0:	46ab      	mov	fp, r5
 80099b2:	106d      	asrs	r5, r5, #1
 80099b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80099b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80099bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80099c0:	2200      	movs	r2, #0
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	4614      	mov	r4, r2
 80099c8:	461d      	mov	r5, r3
 80099ca:	f7f6 fe35 	bl	8000638 <__aeabi_dmul>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4630      	mov	r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f6 fc77 	bl	80002c8 <__aeabi_dsub>
 80099da:	ec53 2b18 	vmov	r2, r3, d8
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f6 fc6f 	bl	80002c8 <__aeabi_dsub>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4650      	mov	r0, sl
 80099f0:	4659      	mov	r1, fp
 80099f2:	f7f6 fc69 	bl	80002c8 <__aeabi_dsub>
 80099f6:	4642      	mov	r2, r8
 80099f8:	464b      	mov	r3, r9
 80099fa:	f7f6 fe1d 	bl	8000638 <__aeabi_dmul>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4630      	mov	r0, r6
 8009a04:	4639      	mov	r1, r7
 8009a06:	f7f6 fc5f 	bl	80002c8 <__aeabi_dsub>
 8009a0a:	ec53 2b19 	vmov	r2, r3, d9
 8009a0e:	f7f6 fe13 	bl	8000638 <__aeabi_dmul>
 8009a12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a16:	ec41 0b18 	vmov	d8, r0, r1
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f7f6 fe0b 	bl	8000638 <__aeabi_dmul>
 8009a22:	a37d      	add	r3, pc, #500	; (adr r3, 8009c18 <__ieee754_pow+0x6f0>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	f7f6 fe04 	bl	8000638 <__aeabi_dmul>
 8009a30:	a37b      	add	r3, pc, #492	; (adr r3, 8009c20 <__ieee754_pow+0x6f8>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fc49 	bl	80002cc <__adddf3>
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	f7f6 fdfb 	bl	8000638 <__aeabi_dmul>
 8009a42:	a379      	add	r3, pc, #484	; (adr r3, 8009c28 <__ieee754_pow+0x700>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	f7f6 fc40 	bl	80002cc <__adddf3>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	462b      	mov	r3, r5
 8009a50:	f7f6 fdf2 	bl	8000638 <__aeabi_dmul>
 8009a54:	a376      	add	r3, pc, #472	; (adr r3, 8009c30 <__ieee754_pow+0x708>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fc37 	bl	80002cc <__adddf3>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	a374      	add	r3, pc, #464	; (adr r3, 8009c38 <__ieee754_pow+0x710>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f7f6 fc2e 	bl	80002cc <__adddf3>
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	f7f6 fde0 	bl	8000638 <__aeabi_dmul>
 8009a78:	a371      	add	r3, pc, #452	; (adr r3, 8009c40 <__ieee754_pow+0x718>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fc25 	bl	80002cc <__adddf3>
 8009a82:	4622      	mov	r2, r4
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	462b      	mov	r3, r5
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7f6 fdd3 	bl	8000638 <__aeabi_dmul>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f6 fdcd 	bl	8000638 <__aeabi_dmul>
 8009a9e:	4642      	mov	r2, r8
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	464b      	mov	r3, r9
 8009aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aaa:	f7f6 fc0f 	bl	80002cc <__adddf3>
 8009aae:	ec53 2b18 	vmov	r2, r3, d8
 8009ab2:	f7f6 fdc1 	bl	8000638 <__aeabi_dmul>
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	462b      	mov	r3, r5
 8009aba:	f7f6 fc07 	bl	80002cc <__adddf3>
 8009abe:	4642      	mov	r2, r8
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	468b      	mov	fp, r1
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f6 fdb5 	bl	8000638 <__aeabi_dmul>
 8009ace:	4b6c      	ldr	r3, [pc, #432]	; (8009c80 <__ieee754_pow+0x758>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	f7f6 fbf9 	bl	80002cc <__adddf3>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	f7f6 fbf5 	bl	80002cc <__adddf3>
 8009ae2:	9c04      	ldr	r4, [sp, #16]
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f6 fda3 	bl	8000638 <__aeabi_dmul>
 8009af2:	4b63      	ldr	r3, [pc, #396]	; (8009c80 <__ieee754_pow+0x758>)
 8009af4:	4680      	mov	r8, r0
 8009af6:	4689      	mov	r9, r1
 8009af8:	2200      	movs	r2, #0
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7f6 fbe3 	bl	80002c8 <__aeabi_dsub>
 8009b02:	4632      	mov	r2, r6
 8009b04:	463b      	mov	r3, r7
 8009b06:	f7f6 fbdf 	bl	80002c8 <__aeabi_dsub>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4650      	mov	r0, sl
 8009b10:	4659      	mov	r1, fp
 8009b12:	f7f6 fbd9 	bl	80002c8 <__aeabi_dsub>
 8009b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b1a:	f7f6 fd8d 	bl	8000638 <__aeabi_dmul>
 8009b1e:	4622      	mov	r2, r4
 8009b20:	4606      	mov	r6, r0
 8009b22:	460f      	mov	r7, r1
 8009b24:	462b      	mov	r3, r5
 8009b26:	ec51 0b18 	vmov	r0, r1, d8
 8009b2a:	f7f6 fd85 	bl	8000638 <__aeabi_dmul>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fbc9 	bl	80002cc <__adddf3>
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	f7f6 fbc1 	bl	80002cc <__adddf3>
 8009b4a:	9c04      	ldr	r4, [sp, #16]
 8009b4c:	a33e      	add	r3, pc, #248	; (adr r3, 8009c48 <__ieee754_pow+0x720>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	4620      	mov	r0, r4
 8009b54:	460d      	mov	r5, r1
 8009b56:	f7f6 fd6f 	bl	8000638 <__aeabi_dmul>
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	ec41 0b18 	vmov	d8, r0, r1
 8009b60:	464b      	mov	r3, r9
 8009b62:	4620      	mov	r0, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7f6 fbaf 	bl	80002c8 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4630      	mov	r0, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	f7f6 fba9 	bl	80002c8 <__aeabi_dsub>
 8009b76:	a336      	add	r3, pc, #216	; (adr r3, 8009c50 <__ieee754_pow+0x728>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fd5c 	bl	8000638 <__aeabi_dmul>
 8009b80:	a335      	add	r3, pc, #212	; (adr r3, 8009c58 <__ieee754_pow+0x730>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 fd53 	bl	8000638 <__aeabi_dmul>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4630      	mov	r0, r6
 8009b98:	4639      	mov	r1, r7
 8009b9a:	f7f6 fb97 	bl	80002cc <__adddf3>
 8009b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba0:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <__ieee754_pow+0x75c>)
 8009ba2:	4413      	add	r3, r2
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fb90 	bl	80002cc <__adddf3>
 8009bac:	4682      	mov	sl, r0
 8009bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb0:	468b      	mov	fp, r1
 8009bb2:	f7f6 fcd7 	bl	8000564 <__aeabi_i2d>
 8009bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bb8:	4b33      	ldr	r3, [pc, #204]	; (8009c88 <__ieee754_pow+0x760>)
 8009bba:	4413      	add	r3, r2
 8009bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460f      	mov	r7, r1
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	465b      	mov	r3, fp
 8009bc8:	ec51 0b18 	vmov	r0, r1, d8
 8009bcc:	f7f6 fb7e 	bl	80002cc <__adddf3>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	f7f6 fb7a 	bl	80002cc <__adddf3>
 8009bd8:	4632      	mov	r2, r6
 8009bda:	463b      	mov	r3, r7
 8009bdc:	f7f6 fb76 	bl	80002cc <__adddf3>
 8009be0:	9c04      	ldr	r4, [sp, #16]
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	4620      	mov	r0, r4
 8009be8:	460d      	mov	r5, r1
 8009bea:	f7f6 fb6d 	bl	80002c8 <__aeabi_dsub>
 8009bee:	4642      	mov	r2, r8
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	f7f6 fb69 	bl	80002c8 <__aeabi_dsub>
 8009bf6:	ec53 2b18 	vmov	r2, r3, d8
 8009bfa:	f7f6 fb65 	bl	80002c8 <__aeabi_dsub>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	e606      	b.n	8009816 <__ieee754_pow+0x2ee>
 8009c08:	2401      	movs	r4, #1
 8009c0a:	e6a0      	b.n	800994e <__ieee754_pow+0x426>
 8009c0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009c60 <__ieee754_pow+0x738>
 8009c10:	e60d      	b.n	800982e <__ieee754_pow+0x306>
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	4a454eef 	.word	0x4a454eef
 8009c1c:	3fca7e28 	.word	0x3fca7e28
 8009c20:	93c9db65 	.word	0x93c9db65
 8009c24:	3fcd864a 	.word	0x3fcd864a
 8009c28:	a91d4101 	.word	0xa91d4101
 8009c2c:	3fd17460 	.word	0x3fd17460
 8009c30:	518f264d 	.word	0x518f264d
 8009c34:	3fd55555 	.word	0x3fd55555
 8009c38:	db6fabff 	.word	0xdb6fabff
 8009c3c:	3fdb6db6 	.word	0x3fdb6db6
 8009c40:	33333303 	.word	0x33333303
 8009c44:	3fe33333 	.word	0x3fe33333
 8009c48:	e0000000 	.word	0xe0000000
 8009c4c:	3feec709 	.word	0x3feec709
 8009c50:	dc3a03fd 	.word	0xdc3a03fd
 8009c54:	3feec709 	.word	0x3feec709
 8009c58:	145b01f5 	.word	0x145b01f5
 8009c5c:	be3e2fe0 	.word	0xbe3e2fe0
 8009c60:	00000000 	.word	0x00000000
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	7ff00000 	.word	0x7ff00000
 8009c6c:	43400000 	.word	0x43400000
 8009c70:	0003988e 	.word	0x0003988e
 8009c74:	000bb679 	.word	0x000bb679
 8009c78:	0800a8a8 	.word	0x0800a8a8
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	40080000 	.word	0x40080000
 8009c84:	0800a8c8 	.word	0x0800a8c8
 8009c88:	0800a8b8 	.word	0x0800a8b8
 8009c8c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009f64 <__ieee754_pow+0xa3c>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 fb19 	bl	80002cc <__adddf3>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	ec41 0b1a 	vmov	d10, r0, r1
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	f7f6 fb0f 	bl	80002c8 <__aeabi_dsub>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	ec51 0b1a 	vmov	r0, r1, d10
 8009cb2:	f7f6 ff51 	bl	8000b58 <__aeabi_dcmpgt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f47f adf8 	bne.w	80098ac <__ieee754_pow+0x384>
 8009cbc:	4aa4      	ldr	r2, [pc, #656]	; (8009f50 <__ieee754_pow+0xa28>)
 8009cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f340 810b 	ble.w	8009ede <__ieee754_pow+0x9b6>
 8009cc8:	151b      	asrs	r3, r3, #20
 8009cca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009cce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009cd2:	fa4a f303 	asr.w	r3, sl, r3
 8009cd6:	445b      	add	r3, fp
 8009cd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009cdc:	4e9d      	ldr	r6, [pc, #628]	; (8009f54 <__ieee754_pow+0xa2c>)
 8009cde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ce2:	4116      	asrs	r6, r2
 8009ce4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ce8:	2000      	movs	r0, #0
 8009cea:	ea23 0106 	bic.w	r1, r3, r6
 8009cee:	f1c2 0214 	rsb	r2, r2, #20
 8009cf2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009cf6:	fa4a fa02 	asr.w	sl, sl, r2
 8009cfa:	f1bb 0f00 	cmp.w	fp, #0
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4620      	mov	r0, r4
 8009d04:	4629      	mov	r1, r5
 8009d06:	bfb8      	it	lt
 8009d08:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d0c:	f7f6 fadc 	bl	80002c8 <__aeabi_dsub>
 8009d10:	ec41 0b19 	vmov	d9, r0, r1
 8009d14:	4642      	mov	r2, r8
 8009d16:	464b      	mov	r3, r9
 8009d18:	ec51 0b19 	vmov	r0, r1, d9
 8009d1c:	f7f6 fad6 	bl	80002cc <__adddf3>
 8009d20:	2400      	movs	r4, #0
 8009d22:	a379      	add	r3, pc, #484	; (adr r3, 8009f08 <__ieee754_pow+0x9e0>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	f7f6 fc84 	bl	8000638 <__aeabi_dmul>
 8009d30:	ec53 2b19 	vmov	r2, r3, d9
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	f7f6 fac4 	bl	80002c8 <__aeabi_dsub>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f7f6 fabe 	bl	80002c8 <__aeabi_dsub>
 8009d4c:	a370      	add	r3, pc, #448	; (adr r3, 8009f10 <__ieee754_pow+0x9e8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fc71 	bl	8000638 <__aeabi_dmul>
 8009d56:	a370      	add	r3, pc, #448	; (adr r3, 8009f18 <__ieee754_pow+0x9f0>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4689      	mov	r9, r1
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fc68 	bl	8000638 <__aeabi_dmul>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	4649      	mov	r1, r9
 8009d70:	f7f6 faac 	bl	80002cc <__adddf3>
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 faa4 	bl	80002cc <__adddf3>
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	f7f6 fa9c 	bl	80002c8 <__aeabi_dsub>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa96 	bl	80002c8 <__aeabi_dsub>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460f      	mov	r7, r1
 8009da2:	464b      	mov	r3, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fc46 	bl	8000638 <__aeabi_dmul>
 8009dac:	a35c      	add	r3, pc, #368	; (adr r3, 8009f20 <__ieee754_pow+0x9f8>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	4604      	mov	r4, r0
 8009db4:	460d      	mov	r5, r1
 8009db6:	f7f6 fc3f 	bl	8000638 <__aeabi_dmul>
 8009dba:	a35b      	add	r3, pc, #364	; (adr r3, 8009f28 <__ieee754_pow+0xa00>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f7f6 fa82 	bl	80002c8 <__aeabi_dsub>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f7f6 fc36 	bl	8000638 <__aeabi_dmul>
 8009dcc:	a358      	add	r3, pc, #352	; (adr r3, 8009f30 <__ieee754_pow+0xa08>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fa7b 	bl	80002cc <__adddf3>
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	462b      	mov	r3, r5
 8009dda:	f7f6 fc2d 	bl	8000638 <__aeabi_dmul>
 8009dde:	a356      	add	r3, pc, #344	; (adr r3, 8009f38 <__ieee754_pow+0xa10>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fa70 	bl	80002c8 <__aeabi_dsub>
 8009de8:	4622      	mov	r2, r4
 8009dea:	462b      	mov	r3, r5
 8009dec:	f7f6 fc24 	bl	8000638 <__aeabi_dmul>
 8009df0:	a353      	add	r3, pc, #332	; (adr r3, 8009f40 <__ieee754_pow+0xa18>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fa69 	bl	80002cc <__adddf3>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	f7f6 fc1b 	bl	8000638 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 fa5d 	bl	80002c8 <__aeabi_dsub>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4640      	mov	r0, r8
 8009e18:	4649      	mov	r1, r9
 8009e1a:	f7f6 fc0d 	bl	8000638 <__aeabi_dmul>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	ec41 0b19 	vmov	d9, r0, r1
 8009e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fa4c 	bl	80002c8 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	ec51 0b19 	vmov	r0, r1, d9
 8009e38:	f7f6 fd28 	bl	800088c <__aeabi_ddiv>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	463b      	mov	r3, r7
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fbf6 	bl	8000638 <__aeabi_dmul>
 8009e4c:	4632      	mov	r2, r6
 8009e4e:	463b      	mov	r3, r7
 8009e50:	f7f6 fa3c 	bl	80002cc <__adddf3>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fa34 	bl	80002c8 <__aeabi_dsub>
 8009e60:	4642      	mov	r2, r8
 8009e62:	464b      	mov	r3, r9
 8009e64:	f7f6 fa30 	bl	80002c8 <__aeabi_dsub>
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	493a      	ldr	r1, [pc, #232]	; (8009f58 <__ieee754_pow+0xa30>)
 8009e6e:	2000      	movs	r0, #0
 8009e70:	f7f6 fa2a 	bl	80002c8 <__aeabi_dsub>
 8009e74:	e9cd 0100 	strd	r0, r1, [sp]
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e82:	da2f      	bge.n	8009ee4 <__ieee754_pow+0x9bc>
 8009e84:	4650      	mov	r0, sl
 8009e86:	ed9d 0b00 	vldr	d0, [sp]
 8009e8a:	f000 f9c1 	bl	800a210 <scalbn>
 8009e8e:	ec51 0b10 	vmov	r0, r1, d0
 8009e92:	ec53 2b18 	vmov	r2, r3, d8
 8009e96:	f7ff bbe0 	b.w	800965a <__ieee754_pow+0x132>
 8009e9a:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <__ieee754_pow+0xa34>)
 8009e9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	f77f af0b 	ble.w	8009cbc <__ieee754_pow+0x794>
 8009ea6:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <__ieee754_pow+0xa38>)
 8009ea8:	440b      	add	r3, r1
 8009eaa:	4303      	orrs	r3, r0
 8009eac:	d00b      	beq.n	8009ec6 <__ieee754_pow+0x99e>
 8009eae:	a326      	add	r3, pc, #152	; (adr r3, 8009f48 <__ieee754_pow+0xa20>)
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	ec51 0b18 	vmov	r0, r1, d8
 8009eb8:	f7f6 fbbe 	bl	8000638 <__aeabi_dmul>
 8009ebc:	a322      	add	r3, pc, #136	; (adr r3, 8009f48 <__ieee754_pow+0xa20>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7ff bbca 	b.w	800965a <__ieee754_pow+0x132>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	462b      	mov	r3, r5
 8009eca:	f7f6 f9fd 	bl	80002c8 <__aeabi_dsub>
 8009ece:	4642      	mov	r2, r8
 8009ed0:	464b      	mov	r3, r9
 8009ed2:	f7f6 fe37 	bl	8000b44 <__aeabi_dcmpge>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f43f aef0 	beq.w	8009cbc <__ieee754_pow+0x794>
 8009edc:	e7e7      	b.n	8009eae <__ieee754_pow+0x986>
 8009ede:	f04f 0a00 	mov.w	sl, #0
 8009ee2:	e717      	b.n	8009d14 <__ieee754_pow+0x7ec>
 8009ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	e7d2      	b.n	8009e92 <__ieee754_pow+0x96a>
 8009eec:	491a      	ldr	r1, [pc, #104]	; (8009f58 <__ieee754_pow+0xa30>)
 8009eee:	2000      	movs	r0, #0
 8009ef0:	f7ff bb9e 	b.w	8009630 <__ieee754_pow+0x108>
 8009ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ef8:	f7ff bb9a 	b.w	8009630 <__ieee754_pow+0x108>
 8009efc:	9000      	str	r0, [sp, #0]
 8009efe:	f7ff bb76 	b.w	80095ee <__ieee754_pow+0xc6>
 8009f02:	2100      	movs	r1, #0
 8009f04:	f7ff bb60 	b.w	80095c8 <__ieee754_pow+0xa0>
 8009f08:	00000000 	.word	0x00000000
 8009f0c:	3fe62e43 	.word	0x3fe62e43
 8009f10:	fefa39ef 	.word	0xfefa39ef
 8009f14:	3fe62e42 	.word	0x3fe62e42
 8009f18:	0ca86c39 	.word	0x0ca86c39
 8009f1c:	be205c61 	.word	0xbe205c61
 8009f20:	72bea4d0 	.word	0x72bea4d0
 8009f24:	3e663769 	.word	0x3e663769
 8009f28:	c5d26bf1 	.word	0xc5d26bf1
 8009f2c:	3ebbbd41 	.word	0x3ebbbd41
 8009f30:	af25de2c 	.word	0xaf25de2c
 8009f34:	3f11566a 	.word	0x3f11566a
 8009f38:	16bebd93 	.word	0x16bebd93
 8009f3c:	3f66c16c 	.word	0x3f66c16c
 8009f40:	5555553e 	.word	0x5555553e
 8009f44:	3fc55555 	.word	0x3fc55555
 8009f48:	c2f8f359 	.word	0xc2f8f359
 8009f4c:	01a56e1f 	.word	0x01a56e1f
 8009f50:	3fe00000 	.word	0x3fe00000
 8009f54:	000fffff 	.word	0x000fffff
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	4090cbff 	.word	0x4090cbff
 8009f60:	3f6f3400 	.word	0x3f6f3400
 8009f64:	652b82fe 	.word	0x652b82fe
 8009f68:	3c971547 	.word	0x3c971547

08009f6c <__ieee754_sqrt>:
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	ec55 4b10 	vmov	r4, r5, d0
 8009f74:	4e56      	ldr	r6, [pc, #344]	; (800a0d0 <__ieee754_sqrt+0x164>)
 8009f76:	43ae      	bics	r6, r5
 8009f78:	ee10 0a10 	vmov	r0, s0
 8009f7c:	ee10 3a10 	vmov	r3, s0
 8009f80:	4629      	mov	r1, r5
 8009f82:	462a      	mov	r2, r5
 8009f84:	d110      	bne.n	8009fa8 <__ieee754_sqrt+0x3c>
 8009f86:	ee10 2a10 	vmov	r2, s0
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 fb54 	bl	8000638 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4620      	mov	r0, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	f7f6 f998 	bl	80002cc <__adddf3>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	ec45 4b10 	vmov	d0, r4, r5
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	dc10      	bgt.n	8009fce <__ieee754_sqrt+0x62>
 8009fac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009fb0:	4330      	orrs	r0, r6
 8009fb2:	d0f5      	beq.n	8009fa0 <__ieee754_sqrt+0x34>
 8009fb4:	b15d      	cbz	r5, 8009fce <__ieee754_sqrt+0x62>
 8009fb6:	ee10 2a10 	vmov	r2, s0
 8009fba:	462b      	mov	r3, r5
 8009fbc:	ee10 0a10 	vmov	r0, s0
 8009fc0:	f7f6 f982 	bl	80002c8 <__aeabi_dsub>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	f7f6 fc60 	bl	800088c <__aeabi_ddiv>
 8009fcc:	e7e6      	b.n	8009f9c <__ieee754_sqrt+0x30>
 8009fce:	1509      	asrs	r1, r1, #20
 8009fd0:	d076      	beq.n	800a0c0 <__ieee754_sqrt+0x154>
 8009fd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009fd6:	07ce      	lsls	r6, r1, #31
 8009fd8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009fdc:	bf5e      	ittt	pl
 8009fde:	0fda      	lsrpl	r2, r3, #31
 8009fe0:	005b      	lslpl	r3, r3, #1
 8009fe2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009fe6:	0fda      	lsrs	r2, r3, #31
 8009fe8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009fec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	106d      	asrs	r5, r5, #1
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	f04f 0e16 	mov.w	lr, #22
 8009ffa:	4684      	mov	ip, r0
 8009ffc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a000:	eb0c 0401 	add.w	r4, ip, r1
 800a004:	4294      	cmp	r4, r2
 800a006:	bfde      	ittt	le
 800a008:	1b12      	suble	r2, r2, r4
 800a00a:	eb04 0c01 	addle.w	ip, r4, r1
 800a00e:	1840      	addle	r0, r0, r1
 800a010:	0052      	lsls	r2, r2, #1
 800a012:	f1be 0e01 	subs.w	lr, lr, #1
 800a016:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a01a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a01e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a022:	d1ed      	bne.n	800a000 <__ieee754_sqrt+0x94>
 800a024:	4671      	mov	r1, lr
 800a026:	2720      	movs	r7, #32
 800a028:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a02c:	4562      	cmp	r2, ip
 800a02e:	eb04 060e 	add.w	r6, r4, lr
 800a032:	dc02      	bgt.n	800a03a <__ieee754_sqrt+0xce>
 800a034:	d113      	bne.n	800a05e <__ieee754_sqrt+0xf2>
 800a036:	429e      	cmp	r6, r3
 800a038:	d811      	bhi.n	800a05e <__ieee754_sqrt+0xf2>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	eb06 0e04 	add.w	lr, r6, r4
 800a040:	da43      	bge.n	800a0ca <__ieee754_sqrt+0x15e>
 800a042:	f1be 0f00 	cmp.w	lr, #0
 800a046:	db40      	blt.n	800a0ca <__ieee754_sqrt+0x15e>
 800a048:	f10c 0801 	add.w	r8, ip, #1
 800a04c:	eba2 020c 	sub.w	r2, r2, ip
 800a050:	429e      	cmp	r6, r3
 800a052:	bf88      	it	hi
 800a054:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a058:	1b9b      	subs	r3, r3, r6
 800a05a:	4421      	add	r1, r4
 800a05c:	46c4      	mov	ip, r8
 800a05e:	0052      	lsls	r2, r2, #1
 800a060:	3f01      	subs	r7, #1
 800a062:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a066:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a06a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a06e:	d1dd      	bne.n	800a02c <__ieee754_sqrt+0xc0>
 800a070:	4313      	orrs	r3, r2
 800a072:	d006      	beq.n	800a082 <__ieee754_sqrt+0x116>
 800a074:	1c4c      	adds	r4, r1, #1
 800a076:	bf13      	iteet	ne
 800a078:	3101      	addne	r1, #1
 800a07a:	3001      	addeq	r0, #1
 800a07c:	4639      	moveq	r1, r7
 800a07e:	f021 0101 	bicne.w	r1, r1, #1
 800a082:	1043      	asrs	r3, r0, #1
 800a084:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a088:	0849      	lsrs	r1, r1, #1
 800a08a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a08e:	07c2      	lsls	r2, r0, #31
 800a090:	bf48      	it	mi
 800a092:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a096:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a09a:	460c      	mov	r4, r1
 800a09c:	463d      	mov	r5, r7
 800a09e:	e77f      	b.n	8009fa0 <__ieee754_sqrt+0x34>
 800a0a0:	0ada      	lsrs	r2, r3, #11
 800a0a2:	3815      	subs	r0, #21
 800a0a4:	055b      	lsls	r3, r3, #21
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	d0fa      	beq.n	800a0a0 <__ieee754_sqrt+0x134>
 800a0aa:	02d7      	lsls	r7, r2, #11
 800a0ac:	d50a      	bpl.n	800a0c4 <__ieee754_sqrt+0x158>
 800a0ae:	f1c1 0420 	rsb	r4, r1, #32
 800a0b2:	fa23 f404 	lsr.w	r4, r3, r4
 800a0b6:	1e4d      	subs	r5, r1, #1
 800a0b8:	408b      	lsls	r3, r1
 800a0ba:	4322      	orrs	r2, r4
 800a0bc:	1b41      	subs	r1, r0, r5
 800a0be:	e788      	b.n	8009fd2 <__ieee754_sqrt+0x66>
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	e7f0      	b.n	800a0a6 <__ieee754_sqrt+0x13a>
 800a0c4:	0052      	lsls	r2, r2, #1
 800a0c6:	3101      	adds	r1, #1
 800a0c8:	e7ef      	b.n	800a0aa <__ieee754_sqrt+0x13e>
 800a0ca:	46e0      	mov	r8, ip
 800a0cc:	e7be      	b.n	800a04c <__ieee754_sqrt+0xe0>
 800a0ce:	bf00      	nop
 800a0d0:	7ff00000 	.word	0x7ff00000

0800a0d4 <fabs>:
 800a0d4:	ec51 0b10 	vmov	r0, r1, d0
 800a0d8:	ee10 2a10 	vmov	r2, s0
 800a0dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0e0:	ec43 2b10 	vmov	d0, r2, r3
 800a0e4:	4770      	bx	lr

0800a0e6 <finite>:
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	ed8d 0b00 	vstr	d0, [sp]
 800a0ec:	9801      	ldr	r0, [sp, #4]
 800a0ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a0f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a0f6:	0fc0      	lsrs	r0, r0, #31
 800a0f8:	b002      	add	sp, #8
 800a0fa:	4770      	bx	lr

0800a0fc <rint>:
 800a0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0fe:	ec51 0b10 	vmov	r0, r1, d0
 800a102:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a106:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a10a:	2e13      	cmp	r6, #19
 800a10c:	ee10 4a10 	vmov	r4, s0
 800a110:	460b      	mov	r3, r1
 800a112:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a116:	dc58      	bgt.n	800a1ca <rint+0xce>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	da2b      	bge.n	800a174 <rint+0x78>
 800a11c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a120:	4302      	orrs	r2, r0
 800a122:	d023      	beq.n	800a16c <rint+0x70>
 800a124:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a128:	4302      	orrs	r2, r0
 800a12a:	4254      	negs	r4, r2
 800a12c:	4314      	orrs	r4, r2
 800a12e:	0c4b      	lsrs	r3, r1, #17
 800a130:	0b24      	lsrs	r4, r4, #12
 800a132:	045b      	lsls	r3, r3, #17
 800a134:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a138:	ea44 0103 	orr.w	r1, r4, r3
 800a13c:	4b32      	ldr	r3, [pc, #200]	; (800a208 <rint+0x10c>)
 800a13e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a142:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 f8bd 	bl	80002cc <__adddf3>
 800a152:	e9cd 0100 	strd	r0, r1, [sp]
 800a156:	463b      	mov	r3, r7
 800a158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15c:	4632      	mov	r2, r6
 800a15e:	f7f6 f8b3 	bl	80002c8 <__aeabi_dsub>
 800a162:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a166:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a16a:	4639      	mov	r1, r7
 800a16c:	ec41 0b10 	vmov	d0, r0, r1
 800a170:	b003      	add	sp, #12
 800a172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a174:	4a25      	ldr	r2, [pc, #148]	; (800a20c <rint+0x110>)
 800a176:	4132      	asrs	r2, r6
 800a178:	ea01 0702 	and.w	r7, r1, r2
 800a17c:	4307      	orrs	r7, r0
 800a17e:	d0f5      	beq.n	800a16c <rint+0x70>
 800a180:	0851      	lsrs	r1, r2, #1
 800a182:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a186:	4314      	orrs	r4, r2
 800a188:	d00c      	beq.n	800a1a4 <rint+0xa8>
 800a18a:	ea23 0201 	bic.w	r2, r3, r1
 800a18e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a192:	2e13      	cmp	r6, #19
 800a194:	fa43 f606 	asr.w	r6, r3, r6
 800a198:	bf0c      	ite	eq
 800a19a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a19e:	2400      	movne	r4, #0
 800a1a0:	ea42 0306 	orr.w	r3, r2, r6
 800a1a4:	4918      	ldr	r1, [pc, #96]	; (800a208 <rint+0x10c>)
 800a1a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 f88a 	bl	80002cc <__adddf3>
 800a1b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	f7f6 f880 	bl	80002c8 <__aeabi_dsub>
 800a1c8:	e7d0      	b.n	800a16c <rint+0x70>
 800a1ca:	2e33      	cmp	r6, #51	; 0x33
 800a1cc:	dd07      	ble.n	800a1de <rint+0xe2>
 800a1ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a1d2:	d1cb      	bne.n	800a16c <rint+0x70>
 800a1d4:	ee10 2a10 	vmov	r2, s0
 800a1d8:	f7f6 f878 	bl	80002cc <__adddf3>
 800a1dc:	e7c6      	b.n	800a16c <rint+0x70>
 800a1de:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a1e2:	f04f 36ff 	mov.w	r6, #4294967295
 800a1e6:	40d6      	lsrs	r6, r2
 800a1e8:	4230      	tst	r0, r6
 800a1ea:	d0bf      	beq.n	800a16c <rint+0x70>
 800a1ec:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a1f0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a1f4:	bf1f      	itttt	ne
 800a1f6:	ea24 0101 	bicne.w	r1, r4, r1
 800a1fa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a1fe:	fa44 f202 	asrne.w	r2, r4, r2
 800a202:	ea41 0402 	orrne.w	r4, r1, r2
 800a206:	e7cd      	b.n	800a1a4 <rint+0xa8>
 800a208:	0800a8d8 	.word	0x0800a8d8
 800a20c:	000fffff 	.word	0x000fffff

0800a210 <scalbn>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	ec55 4b10 	vmov	r4, r5, d0
 800a216:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a21a:	4606      	mov	r6, r0
 800a21c:	462b      	mov	r3, r5
 800a21e:	b99a      	cbnz	r2, 800a248 <scalbn+0x38>
 800a220:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a224:	4323      	orrs	r3, r4
 800a226:	d036      	beq.n	800a296 <scalbn+0x86>
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <scalbn+0x100>)
 800a22a:	4629      	mov	r1, r5
 800a22c:	ee10 0a10 	vmov	r0, s0
 800a230:	2200      	movs	r2, #0
 800a232:	f7f6 fa01 	bl	8000638 <__aeabi_dmul>
 800a236:	4b37      	ldr	r3, [pc, #220]	; (800a314 <scalbn+0x104>)
 800a238:	429e      	cmp	r6, r3
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	da10      	bge.n	800a262 <scalbn+0x52>
 800a240:	a32b      	add	r3, pc, #172	; (adr r3, 800a2f0 <scalbn+0xe0>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	e03a      	b.n	800a2be <scalbn+0xae>
 800a248:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a24c:	428a      	cmp	r2, r1
 800a24e:	d10c      	bne.n	800a26a <scalbn+0x5a>
 800a250:	ee10 2a10 	vmov	r2, s0
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	f7f6 f838 	bl	80002cc <__adddf3>
 800a25c:	4604      	mov	r4, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	e019      	b.n	800a296 <scalbn+0x86>
 800a262:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a266:	460b      	mov	r3, r1
 800a268:	3a36      	subs	r2, #54	; 0x36
 800a26a:	4432      	add	r2, r6
 800a26c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a270:	428a      	cmp	r2, r1
 800a272:	dd08      	ble.n	800a286 <scalbn+0x76>
 800a274:	2d00      	cmp	r5, #0
 800a276:	a120      	add	r1, pc, #128	; (adr r1, 800a2f8 <scalbn+0xe8>)
 800a278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27c:	da1c      	bge.n	800a2b8 <scalbn+0xa8>
 800a27e:	a120      	add	r1, pc, #128	; (adr r1, 800a300 <scalbn+0xf0>)
 800a280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a284:	e018      	b.n	800a2b8 <scalbn+0xa8>
 800a286:	2a00      	cmp	r2, #0
 800a288:	dd08      	ble.n	800a29c <scalbn+0x8c>
 800a28a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a28e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a292:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a296:	ec45 4b10 	vmov	d0, r4, r5
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a2a0:	da19      	bge.n	800a2d6 <scalbn+0xc6>
 800a2a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a2a6:	429e      	cmp	r6, r3
 800a2a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a2ac:	dd0a      	ble.n	800a2c4 <scalbn+0xb4>
 800a2ae:	a112      	add	r1, pc, #72	; (adr r1, 800a2f8 <scalbn+0xe8>)
 800a2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e2      	bne.n	800a27e <scalbn+0x6e>
 800a2b8:	a30f      	add	r3, pc, #60	; (adr r3, 800a2f8 <scalbn+0xe8>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	e7cb      	b.n	800a25c <scalbn+0x4c>
 800a2c4:	a10a      	add	r1, pc, #40	; (adr r1, 800a2f0 <scalbn+0xe0>)
 800a2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0b8      	beq.n	800a240 <scalbn+0x30>
 800a2ce:	a10e      	add	r1, pc, #56	; (adr r1, 800a308 <scalbn+0xf8>)
 800a2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d4:	e7b4      	b.n	800a240 <scalbn+0x30>
 800a2d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2da:	3236      	adds	r2, #54	; 0x36
 800a2dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <scalbn+0x108>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	e7e8      	b.n	800a2be <scalbn+0xae>
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	c2f8f359 	.word	0xc2f8f359
 800a2f4:	01a56e1f 	.word	0x01a56e1f
 800a2f8:	8800759c 	.word	0x8800759c
 800a2fc:	7e37e43c 	.word	0x7e37e43c
 800a300:	8800759c 	.word	0x8800759c
 800a304:	fe37e43c 	.word	0xfe37e43c
 800a308:	c2f8f359 	.word	0xc2f8f359
 800a30c:	81a56e1f 	.word	0x81a56e1f
 800a310:	43500000 	.word	0x43500000
 800a314:	ffff3cb0 	.word	0xffff3cb0
 800a318:	3c900000 	.word	0x3c900000

0800a31c <_init>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	bf00      	nop
 800a320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a322:	bc08      	pop	{r3}
 800a324:	469e      	mov	lr, r3
 800a326:	4770      	bx	lr

0800a328 <_fini>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr
