
STM32F446RE_SDCARD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e3c  08005e3c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e44  08005e44  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ddc  20000024  08005e70  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  08005e70  00020e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122eb  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002673  00000000  00000000  0003233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228ab  00000000  00000000  00036110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010de5  00000000  00000000  000589bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad9a  00000000  00000000  000697a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013453a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000310c  00000000  00000000  00134590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005c98 	.word	0x08005c98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08005c98 	.word	0x08005c98

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <SELECT+0x14>)
 8000516:	f001 fac9 	bl	8001aac <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <DESELECT+0x14>)
 800052e:	f001 fabd 	bl	8001aac <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020400 	.word	0x40020400

0800053c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000546:	bf00      	nop
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <SPI_TxByte+0x30>)
 800054a:	f002 fb44 	bl	8002bd6 <HAL_SPI_GetState>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d1f9      	bne.n	8000548 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	2201      	movs	r2, #1
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <SPI_TxByte+0x30>)
 800055e:	f002 f85c 	bl	800261a <HAL_SPI_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000704 	.word	0x20000704

08000570 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800057e:	bf00      	nop
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <SPI_RxByte+0x38>)
 8000582:	f002 fb28 	bl	8002bd6 <HAL_SPI_GetState>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1f9      	bne.n	8000580 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800058c:	1dba      	adds	r2, r7, #6
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x38>)
 800059a:	f002 f97a 	bl	8002892 <HAL_SPI_TransmitReceive>

  return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000704 	.word	0x20000704

080005ac <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80005b4:	f7ff ffdc 	bl	8000570 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SD_ReadyWait+0x34>)
 80005d0:	2232      	movs	r2, #50	; 0x32
 80005d2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80005d4:	f7ff ffcc 	bl	8000570 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80005d8:	f7ff ffca 	bl	8000570 <SPI_RxByte>
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d004      	beq.n	80005f0 <SD_ReadyWait+0x28>
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SD_ReadyWait+0x34>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f3      	bne.n	80005d8 <SD_ReadyWait+0x10>

  return res;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000990 	.word	0x20000990

08000600 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000606:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800060a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800060c:	f7ff ff8a 	bl	8000524 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	e005      	b.n	8000622 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	f7ff ff90 	bl	800053c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	3301      	adds	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	2b09      	cmp	r3, #9
 8000626:	ddf6      	ble.n	8000616 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000628:	f7ff ff70 	bl	800050c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000640:	2395      	movs	r3, #149	; 0x95
 8000642:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e009      	b.n	800065e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff72 	bl	800053c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b05      	cmp	r3, #5
 8000662:	ddf2      	ble.n	800064a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000664:	e002      	b.n	800066c <SD_PowerOn+0x6c>
  {
    Count--;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3b01      	subs	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800066c:	f7ff ff80 	bl	8000570 <SPI_RxByte>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d002      	beq.n	800067c <SD_PowerOn+0x7c>
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f4      	bne.n	8000666 <SD_PowerOn+0x66>
  }

  DESELECT();
 800067c:	f7ff ff52 	bl	8000524 <DESELECT>
  SPI_TxByte(0XFF);
 8000680:	20ff      	movs	r0, #255	; 0xff
 8000682:	f7ff ff5b 	bl	800053c <SPI_TxByte>

  PowerFlag = 1;
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOn+0x94>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000041 	.word	0x20000041

08000698 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_PowerOff+0x14>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000041 	.word	0x20000041

080006b0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <SD_CheckPower+0x14>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000041 	.word	0x20000041

080006c8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <SD_RxDataBlock+0x68>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80006d8:	f7ff ff4a 	bl	8000570 <SPI_RxByte>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2bff      	cmp	r3, #255	; 0xff
 80006e4:	d104      	bne.n	80006f0 <SD_RxDataBlock+0x28>
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <SD_RxDataBlock+0x68>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f3      	bne.n	80006d8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2bfe      	cmp	r3, #254	; 0xfe
 80006f4:	d001      	beq.n	80006fa <SD_RxDataBlock+0x32>
    return FALSE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e016      	b.n	8000728 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff53 	bl	80005ac <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff4d 	bl	80005ac <SPI_RxBytePtr>
  } while(btr -= 2);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	3b02      	subs	r3, #2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ed      	bne.n	80006fa <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800071e:	f7ff ff27 	bl	8000570 <SPI_RxByte>
  SPI_RxByte();
 8000722:	f7ff ff25 	bl	8000570 <SPI_RxByte>

  return TRUE;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000991 	.word	0x20000991

08000734 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000744:	f7ff ff40 	bl	80005c8 <SD_ReadyWait>
 8000748:	4603      	mov	r3, r0
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d001      	beq.n	8000752 <SD_TxDataBlock+0x1e>
    return FALSE;
 800074e:	2300      	movs	r3, #0
 8000750:	e040      	b.n	80007d4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fef1 	bl	800053c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2bfd      	cmp	r3, #253	; 0xfd
 800075e:	d031      	beq.n	80007c4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fee5 	bl	800053c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fede 	bl	800053c <SPI_TxByte>
    } while (--wc);
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	3b01      	subs	r3, #1
 8000784:	73bb      	strb	r3, [r7, #14]
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1eb      	bne.n	8000764 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800078c:	f7ff fef0 	bl	8000570 <SPI_RxByte>
    SPI_RxByte();
 8000790:	f7ff feee 	bl	8000570 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000794:	e00b      	b.n	80007ae <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000796:	f7ff feeb 	bl	8000570 <SPI_RxByte>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	d006      	beq.n	80007b6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	3301      	adds	r3, #1
 80007ac:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	2b40      	cmp	r3, #64	; 0x40
 80007b2:	d9f0      	bls.n	8000796 <SD_TxDataBlock+0x62>
 80007b4:	e000      	b.n	80007b8 <SD_TxDataBlock+0x84>
        break;
 80007b6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80007b8:	bf00      	nop
 80007ba:	f7ff fed9 	bl	8000570 <SPI_RxByte>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0fa      	beq.n	80007ba <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	d101      	bne.n	80007d2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007e8:	f7ff feee 	bl	80005c8 <SD_ReadyWait>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	d001      	beq.n	80007f6 <SD_SendCmd+0x1a>
    return 0xFF;
 80007f2:	23ff      	movs	r3, #255	; 0xff
 80007f4:	e040      	b.n	8000878 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fe9f 	bl	800053c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	0e1b      	lsrs	r3, r3, #24
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe99 	bl	800053c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fe93 	bl	800053c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe8d 	bl	800053c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe88 	bl	800053c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b40      	cmp	r3, #64	; 0x40
 8000834:	d101      	bne.n	800083a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000836:	2395      	movs	r3, #149	; 0x95
 8000838:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b48      	cmp	r3, #72	; 0x48
 800083e:	d101      	bne.n	8000844 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000840:	2387      	movs	r3, #135	; 0x87
 8000842:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe78 	bl	800053c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b4c      	cmp	r3, #76	; 0x4c
 8000850:	d101      	bne.n	8000856 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000852:	f7ff fe8d 	bl	8000570 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000856:	230a      	movs	r3, #10
 8000858:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800085a:	f7ff fe89 	bl	8000570 <SPI_RxByte>
 800085e:	4603      	mov	r3, r0
 8000860:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000862:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da05      	bge.n	8000876 <SD_SendCmd+0x9a>
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	3b01      	subs	r3, #1
 800086e:	73bb      	strb	r3, [r7, #14]
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f1      	bne.n	800085a <SD_SendCmd+0x7e>

  return res;
 8000876:	7b7b      	ldrb	r3, [r7, #13]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000890:	2301      	movs	r3, #1
 8000892:	e0d5      	b.n	8000a40 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000894:	4b6c      	ldr	r3, [pc, #432]	; (8000a48 <SD_disk_initialize+0x1c8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <SD_disk_initialize+0x2a>
    return Stat;
 80008a2:	4b69      	ldr	r3, [pc, #420]	; (8000a48 <SD_disk_initialize+0x1c8>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e0ca      	b.n	8000a40 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80008aa:	f7ff fea9 	bl	8000600 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80008ae:	f7ff fe2d 	bl	800050c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80008b6:	2100      	movs	r1, #0
 80008b8:	2040      	movs	r0, #64	; 0x40
 80008ba:	f7ff ff8f 	bl	80007dc <SD_SendCmd>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 80a5 	bne.w	8000a10 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80008c6:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <SD_disk_initialize+0x1cc>)
 80008c8:	2264      	movs	r2, #100	; 0x64
 80008ca:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80008d0:	2048      	movs	r0, #72	; 0x48
 80008d2:	f7ff ff83 	bl	80007dc <SD_SendCmd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d158      	bne.n	800098e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e00c      	b.n	80008fc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80008e2:	7bfc      	ldrb	r4, [r7, #15]
 80008e4:	f7ff fe44 	bl	8000570 <SPI_RxByte>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4423      	add	r3, r4
 80008f2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	3301      	adds	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d9ef      	bls.n	80008e2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000902:	7abb      	ldrb	r3, [r7, #10]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8083 	bne.w	8000a10 <SD_disk_initialize+0x190>
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2baa      	cmp	r3, #170	; 0xaa
 800090e:	d17f      	bne.n	8000a10 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000910:	2100      	movs	r1, #0
 8000912:	2077      	movs	r0, #119	; 0x77
 8000914:	f7ff ff62 	bl	80007dc <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d807      	bhi.n	800092e <SD_disk_initialize+0xae>
 800091e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000922:	2069      	movs	r0, #105	; 0x69
 8000924:	f7ff ff5a 	bl	80007dc <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d005      	beq.n	800093a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800092e:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <SD_disk_initialize+0x1cc>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1eb      	bne.n	8000910 <SD_disk_initialize+0x90>
 8000938:	e000      	b.n	800093c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800093a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <SD_disk_initialize+0x1cc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d064      	beq.n	8000a10 <SD_disk_initialize+0x190>
 8000946:	2100      	movs	r1, #0
 8000948:	207a      	movs	r0, #122	; 0x7a
 800094a:	f7ff ff47 	bl	80007dc <SD_SendCmd>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d15d      	bne.n	8000a10 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e00c      	b.n	8000974 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800095a:	7bfc      	ldrb	r4, [r7, #15]
 800095c:	f7ff fe08 	bl	8000570 <SPI_RxByte>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4423      	add	r3, r4
 800096a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3301      	adds	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d9ef      	bls.n	800095a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800097a:	7a3b      	ldrb	r3, [r7, #8]
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SD_disk_initialize+0x108>
 8000984:	2306      	movs	r3, #6
 8000986:	e000      	b.n	800098a <SD_disk_initialize+0x10a>
 8000988:	2302      	movs	r3, #2
 800098a:	73bb      	strb	r3, [r7, #14]
 800098c:	e040      	b.n	8000a10 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800098e:	2100      	movs	r1, #0
 8000990:	2077      	movs	r0, #119	; 0x77
 8000992:	f7ff ff23 	bl	80007dc <SD_SendCmd>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d808      	bhi.n	80009ae <SD_disk_initialize+0x12e>
 800099c:	2100      	movs	r1, #0
 800099e:	2069      	movs	r0, #105	; 0x69
 80009a0:	f7ff ff1c 	bl	80007dc <SD_SendCmd>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d801      	bhi.n	80009ae <SD_disk_initialize+0x12e>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e000      	b.n	80009b0 <SD_disk_initialize+0x130>
 80009ae:	2301      	movs	r3, #1
 80009b0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d10e      	bne.n	80009d6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80009b8:	2100      	movs	r1, #0
 80009ba:	2077      	movs	r0, #119	; 0x77
 80009bc:	f7ff ff0e 	bl	80007dc <SD_SendCmd>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d80e      	bhi.n	80009e4 <SD_disk_initialize+0x164>
 80009c6:	2100      	movs	r1, #0
 80009c8:	2069      	movs	r0, #105	; 0x69
 80009ca:	f7ff ff07 	bl	80007dc <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80009d4:	e00d      	b.n	80009f2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80009d6:	2100      	movs	r1, #0
 80009d8:	2041      	movs	r0, #65	; 0x41
 80009da:	f7ff feff 	bl	80007dc <SD_SendCmd>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d005      	beq.n	80009f0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <SD_disk_initialize+0x1cc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1e1      	bne.n	80009b2 <SD_disk_initialize+0x132>
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80009f0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <SD_disk_initialize+0x1cc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <SD_disk_initialize+0x18c>
 80009fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a00:	2050      	movs	r0, #80	; 0x50
 8000a02:	f7ff feeb 	bl	80007dc <SD_SendCmd>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <SD_disk_initialize+0x1d0>)
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a16:	f7ff fd85 	bl	8000524 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a1a:	f7ff fda9 	bl	8000570 <SPI_RxByte>

  if (type)
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d008      	beq.n	8000a36 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <SD_disk_initialize+0x1c8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SD_disk_initialize+0x1c8>)
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e001      	b.n	8000a3a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a36:	f7ff fe2f 	bl	8000698 <SD_PowerOff>
  }

  return Stat;
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <SD_disk_initialize+0x1c8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000991 	.word	0x20000991
 8000a50:	20000040 	.word	0x20000040

08000a54 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e002      	b.n	8000a6e <SD_disk_status+0x1a>

  return Stat;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SD_disk_status+0x28>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000000 	.word	0x20000000

08000a80 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <SD_disk_read+0x1c>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <SD_disk_read+0x20>
    return RES_PARERR;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	e051      	b.n	8000b44 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <SD_disk_read+0xcc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e048      	b.n	8000b44 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <SD_disk_read+0xd0>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	025b      	lsls	r3, r3, #9
 8000ac2:	607b      	str	r3, [r7, #4]

  SELECT();
 8000ac4:	f7ff fd22 	bl	800050c <SELECT>

  if (count == 1)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d111      	bne.n	8000af2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2051      	movs	r0, #81	; 0x51
 8000ad2:	f7ff fe83 	bl	80007dc <SD_SendCmd>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d129      	bne.n	8000b30 <SD_disk_read+0xb0>
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	68b8      	ldr	r0, [r7, #8]
 8000ae2:	f7ff fdf1 	bl	80006c8 <SD_RxDataBlock>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <SD_disk_read+0xb0>
      count = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	e01e      	b.n	8000b30 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2052      	movs	r0, #82	; 0x52
 8000af6:	f7ff fe71 	bl	80007dc <SD_SendCmd>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d117      	bne.n	8000b30 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f7ff fddf 	bl	80006c8 <SD_RxDataBlock>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00a      	beq.n	8000b26 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b16:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1ed      	bne.n	8000b00 <SD_disk_read+0x80>
 8000b24:	e000      	b.n	8000b28 <SD_disk_read+0xa8>
          break;
 8000b26:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	204c      	movs	r0, #76	; 0x4c
 8000b2c:	f7ff fe56 	bl	80007dc <SD_SendCmd>
    }
  }

  DESELECT();
 8000b30:	f7ff fcf8 	bl	8000524 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b34:	f7ff fd1c 	bl	8000570 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000040 	.word	0x20000040

08000b54 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <SD_disk_write+0x1c>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <SD_disk_write+0x20>
    return RES_PARERR;
 8000b70:	2304      	movs	r3, #4
 8000b72:	e06b      	b.n	8000c4c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <SD_disk_write+0x100>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e062      	b.n	8000c4c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <SD_disk_write+0x100>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e059      	b.n	8000c4c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <SD_disk_write+0x104>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	025b      	lsls	r3, r3, #9
 8000ba8:	607b      	str	r3, [r7, #4]

  SELECT();
 8000baa:	f7ff fcaf 	bl	800050c <SELECT>

  if (count == 1)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d110      	bne.n	8000bd6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	2058      	movs	r0, #88	; 0x58
 8000bb8:	f7ff fe10 	bl	80007dc <SD_SendCmd>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d13a      	bne.n	8000c38 <SD_disk_write+0xe4>
 8000bc2:	21fe      	movs	r1, #254	; 0xfe
 8000bc4:	68b8      	ldr	r0, [r7, #8]
 8000bc6:	f7ff fdb5 	bl	8000734 <SD_TxDataBlock>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d033      	beq.n	8000c38 <SD_disk_write+0xe4>
      count = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	e030      	b.n	8000c38 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <SD_disk_write+0x104>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2077      	movs	r0, #119	; 0x77
 8000be6:	f7ff fdf9 	bl	80007dc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	2057      	movs	r0, #87	; 0x57
 8000bee:	f7ff fdf5 	bl	80007dc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2059      	movs	r0, #89	; 0x59
 8000bf6:	f7ff fdf1 	bl	80007dc <SD_SendCmd>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d11b      	bne.n	8000c38 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c00:	21fc      	movs	r1, #252	; 0xfc
 8000c02:	68b8      	ldr	r0, [r7, #8]
 8000c04:	f7ff fd96 	bl	8000734 <SD_TxDataBlock>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00a      	beq.n	8000c24 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c14:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1ee      	bne.n	8000c00 <SD_disk_write+0xac>
 8000c22:	e000      	b.n	8000c26 <SD_disk_write+0xd2>
          break;
 8000c24:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c26:	21fd      	movs	r1, #253	; 0xfd
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fd83 	bl	8000734 <SD_TxDataBlock>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000c38:	f7ff fc74 	bl	8000524 <DESELECT>
  SPI_RxByte();
 8000c3c:	f7ff fc98 	bl	8000570 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000040 	.word	0x20000040

08000c5c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b08b      	sub	sp, #44	; 0x2c
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	603a      	str	r2, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000c76:	2304      	movs	r3, #4
 8000c78:	e11b      	b.n	8000eb2 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d129      	bne.n	8000cda <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d017      	beq.n	8000cbe <SD_disk_ioctl+0x62>
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	dc1f      	bgt.n	8000cd2 <SD_disk_ioctl+0x76>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <SD_disk_ioctl+0x40>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00b      	beq.n	8000cb2 <SD_disk_ioctl+0x56>
 8000c9a:	e01a      	b.n	8000cd2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000c9c:	f7ff fd08 	bl	80006b0 <SD_CheckPower>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000ca6:	f7ff fcf7 	bl	8000698 <SD_PowerOff>
      res = RES_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cb0:	e0fd      	b.n	8000eae <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000cb2:	f7ff fca5 	bl	8000600 <SD_PowerOn>
      res = RES_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cbc:	e0f7      	b.n	8000eae <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	1c5c      	adds	r4, r3, #1
 8000cc2:	f7ff fcf5 	bl	80006b0 <SD_CheckPower>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cd0:	e0ed      	b.n	8000eae <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cd8:	e0e9      	b.n	8000eae <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000cda:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <SD_disk_ioctl+0x260>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e0e2      	b.n	8000eb2 <SD_disk_ioctl+0x256>

    SELECT();
 8000cec:	f7ff fc0e 	bl	800050c <SELECT>

    switch (ctrl)
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b0d      	cmp	r3, #13
 8000cf4:	f200 80cc 	bhi.w	8000e90 <SD_disk_ioctl+0x234>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <SD_disk_ioctl+0xa4>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000dfb 	.word	0x08000dfb
 8000d04:	08000d39 	.word	0x08000d39
 8000d08:	08000deb 	.word	0x08000deb
 8000d0c:	08000e91 	.word	0x08000e91
 8000d10:	08000e91 	.word	0x08000e91
 8000d14:	08000e91 	.word	0x08000e91
 8000d18:	08000e91 	.word	0x08000e91
 8000d1c:	08000e91 	.word	0x08000e91
 8000d20:	08000e91 	.word	0x08000e91
 8000d24:	08000e91 	.word	0x08000e91
 8000d28:	08000e91 	.word	0x08000e91
 8000d2c:	08000e0d 	.word	0x08000e0d
 8000d30:	08000e31 	.word	0x08000e31
 8000d34:	08000e55 	.word	0x08000e55
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2049      	movs	r0, #73	; 0x49
 8000d3c:	f7ff fd4e 	bl	80007dc <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80a8 	bne.w	8000e98 <SD_disk_ioctl+0x23c>
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fcba 	bl	80006c8 <SD_RxDataBlock>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 809e 	beq.w	8000e98 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000d5c:	7b3b      	ldrb	r3, [r7, #12]
 8000d5e:	099b      	lsrs	r3, r3, #6
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d10e      	bne.n	8000d84 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d66:	7d7b      	ldrb	r3, [r7, #21]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	7d3b      	ldrb	r3, [r7, #20]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d7a:	8bfb      	ldrh	r3, [r7, #30]
 8000d7c:	029a      	lsls	r2, r3, #10
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e02e      	b.n	8000de2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d84:	7c7b      	ldrb	r3, [r7, #17]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	7dbb      	ldrb	r3, [r7, #22]
 8000d8e:	09db      	lsrs	r3, r3, #7
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0306 	and.w	r3, r3, #6
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	3302      	adds	r3, #2
 8000da8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000dac:	7d3b      	ldrb	r3, [r7, #20]
 8000dae:	099b      	lsrs	r3, r3, #6
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	7cfb      	ldrb	r3, [r7, #19]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	7cbb      	ldrb	r3, [r7, #18]
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000dd4:	8bfa      	ldrh	r2, [r7, #30]
 8000dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dda:	3b09      	subs	r3, #9
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000de8:	e056      	b.n	8000e98 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000df8:	e055      	b.n	8000ea6 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000dfa:	f7ff fbe5 	bl	80005c8 <SD_ReadyWait>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	d14b      	bne.n	8000e9c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e0a:	e047      	b.n	8000e9c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2049      	movs	r0, #73	; 0x49
 8000e10:	f7ff fce4 	bl	80007dc <SD_SendCmd>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d142      	bne.n	8000ea0 <SD_disk_ioctl+0x244>
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	6a38      	ldr	r0, [r7, #32]
 8000e1e:	f7ff fc53 	bl	80006c8 <SD_RxDataBlock>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d03b      	beq.n	8000ea0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e2e:	e037      	b.n	8000ea0 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e30:	2100      	movs	r1, #0
 8000e32:	204a      	movs	r0, #74	; 0x4a
 8000e34:	f7ff fcd2 	bl	80007dc <SD_SendCmd>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d132      	bne.n	8000ea4 <SD_disk_ioctl+0x248>
 8000e3e:	2110      	movs	r1, #16
 8000e40:	6a38      	ldr	r0, [r7, #32]
 8000e42:	f7ff fc41 	bl	80006c8 <SD_RxDataBlock>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02b      	beq.n	8000ea4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e52:	e027      	b.n	8000ea4 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e54:	2100      	movs	r1, #0
 8000e56:	207a      	movs	r0, #122	; 0x7a
 8000e58:	f7ff fcc0 	bl	80007dc <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d116      	bne.n	8000e90 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e68:	e00b      	b.n	8000e82 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000e6a:	6a3c      	ldr	r4, [r7, #32]
 8000e6c:	1c63      	adds	r3, r4, #1
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	f7ff fb7e 	bl	8000570 <SPI_RxByte>
 8000e74:	4603      	mov	r3, r0
 8000e76:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9ef      	bls.n	8000e6a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000e90:	2304      	movs	r3, #4
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e96:	e006      	b.n	8000ea6 <SD_disk_ioctl+0x24a>
      break;
 8000e98:	bf00      	nop
 8000e9a:	e004      	b.n	8000ea6 <SD_disk_ioctl+0x24a>
      break;
 8000e9c:	bf00      	nop
 8000e9e:	e002      	b.n	8000ea6 <SD_disk_ioctl+0x24a>
      break;
 8000ea0:	bf00      	nop
 8000ea2:	e000      	b.n	8000ea6 <SD_disk_ioctl+0x24a>
      break;
 8000ea4:	bf00      	nop
    }

    DESELECT();
 8000ea6:	f7ff fb3d 	bl	8000524 <DESELECT>
    SPI_RxByte();
 8000eaa:	f7ff fb61 	bl	8000570 <SPI_RxByte>
  }

  return res;
 8000eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	372c      	adds	r7, #44	; 0x2c
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to uart */
void send_uart (char *string)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
uint8_t len = strlen (string);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff f99b 	bl	8000204 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 2000); // transmit in blocking mode
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <send_uart+0x2c>)
 8000ede:	f001 ffa0 	bl	8002e22 <HAL_UART_Transmit>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002b4 	.word	0x200002b4

08000ef0 <bufclear>:
while (*buf++ != '/0') i++;
return i;
}

void bufclear (void) // clear buffer
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
    for (int i=0; i<1024; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	e007      	b.n	8000f0c <bufclear+0x1c>
    {
    buffer[i] = '\0';
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <bufclear+0x34>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<1024; i++)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f12:	dbf3      	blt.n	8000efc <bufclear+0xc>
    }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002f8 	.word	0x200002f8

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fad2 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f864 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f922 	bl	800117c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f38:	f000 f8c0 	bl	80010bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f3c:	f000 f8f4 	bl	8001128 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f40:	f002 fa38 	bl	80033b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "/", 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	4923      	ldr	r1, [pc, #140]	; (8000fd4 <main+0xac>)
 8000f48:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <main+0xb0>)
 8000f4a:	f003 ffe5 	bl	8004f18 <f_mount>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <main+0xb4>)
 8000f54:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) send_uart ("ERROR!!! in initializing SD CARD...\n\n");
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0xb4>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <main+0x3e>
 8000f5e:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <main+0xb8>)
 8000f60:	f7ff ffae 	bl	8000ec0 <send_uart>
 8000f64:	e002      	b.n	8000f6c <main+0x44>
    else send_uart("SD CARD initialized successfully...\n\n");
 8000f66:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <main+0xbc>)
 8000f68:	f7ff ffaa 	bl	8000ec0 <send_uart>

    /* open file to write/create a file if it is does not exist */
    fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000f6c:	2213      	movs	r2, #19
 8000f6e:	491e      	ldr	r1, [pc, #120]	; (8000fe8 <main+0xc0>)
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <main+0xc4>)
 8000f72:	f004 f817 	bl	8004fa4 <f_open>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <main+0xb4>)
 8000f7c:	701a      	strb	r2, [r3, #0]

    /* writing text */
    fresult = f_puts("This data is from the FIRST FILE\n\n", &fil);
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <main+0xc4>)
 8000f80:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <main+0xc8>)
 8000f82:	f004 fddd 	bl	8005b40 <f_puts>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <main+0xb4>)
 8000f8c:	701a      	strb	r2, [r3, #0]

    /*close file */
    fresult = f_close(&fil);
 8000f8e:	4817      	ldr	r0, [pc, #92]	; (8000fec <main+0xc4>)
 8000f90:	f004 fcf8 	bl	8005984 <f_close>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <main+0xb4>)
 8000f9a:	701a      	strb	r2, [r3, #0]

    send_uart ("file1.txt created and the data is written\n");
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <main+0xcc>)
 8000f9e:	f7ff ff8f 	bl	8000ec0 <send_uart>

    /* open file to read */
    fresult = f_open(&fil, "file1.txt", FA_READ);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4910      	ldr	r1, [pc, #64]	; (8000fe8 <main+0xc0>)
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <main+0xc4>)
 8000fa8:	f003 fffc 	bl	8004fa4 <f_open>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <main+0xb4>)
 8000fb2:	701a      	strb	r2, [r3, #0]

    /* read string from the file*/
    f_gets(buffer, sizeof(buffer), &fil);
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <main+0xc4>)
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <main+0xd0>)
 8000fbc:	f004 fd0c 	bl	80059d8 <f_gets>

    send_uart(buffer);
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <main+0xd0>)
 8000fc2:	f7ff ff7d 	bl	8000ec0 <send_uart>

    /*close file*/
    f_close(&fil);
 8000fc6:	4809      	ldr	r0, [pc, #36]	; (8000fec <main+0xc4>)
 8000fc8:	f004 fcdc 	bl	8005984 <f_close>

    bufclear();
 8000fcc:	f7ff ff90 	bl	8000ef0 <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0xa8>
 8000fd2:	bf00      	nop
 8000fd4:	08005cb0 	.word	0x08005cb0
 8000fd8:	2000007c 	.word	0x2000007c
 8000fdc:	20000700 	.word	0x20000700
 8000fe0:	08005cb4 	.word	0x08005cb4
 8000fe4:	08005cdc 	.word	0x08005cdc
 8000fe8:	08005d04 	.word	0x08005d04
 8000fec:	20000760 	.word	0x20000760
 8000ff0:	08005d10 	.word	0x08005d10
 8000ff4:	08005d34 	.word	0x08005d34
 8000ff8:	200002f8 	.word	0x200002f8

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2234      	movs	r2, #52	; 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f004 fe3c 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <SystemClock_Config+0xb8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <SystemClock_Config+0xb8>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <SystemClock_Config+0xb8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <SystemClock_Config+0xbc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <SystemClock_Config+0xbc>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <SystemClock_Config+0xbc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f000 ffab 	bl	8001fcc <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800107c:	f000 f8ce 	bl	800121c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fd20 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010a6:	f000 f8b9 	bl	800121c <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <MX_SPI1_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI1_Init+0x64>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_SPI1_Init+0x64>)
 800110e:	f001 f9fb 	bl	8002508 <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001118:	f000 f880 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000704 	.word	0x20000704
 8001124:	40013000 	.word	0x40013000

08001128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_USART1_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001160:	f001 fe12 	bl	8002d88 <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f857 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002b4 	.word	0x200002b4
 8001178:	40011000 	.word	0x40011000

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_GPIO_Init+0x98>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_GPIO_Init+0x98>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_GPIO_Init+0x98>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_GPIO_Init+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_GPIO_Init+0x98>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_GPIO_Init+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_GPIO_Init+0x98>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <MX_GPIO_Init+0x98>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_GPIO_Init+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2140      	movs	r1, #64	; 0x40
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <MX_GPIO_Init+0x9c>)
 80011ec:	f000 fc5e 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0x9c>)
 8001208:	f000 fabc 	bl	8001784 <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <Error_Handler+0x8>
	...

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23e0      	movs	r3, #224	; 0xe0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012ee:	f000 fa49 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40013000 	.word	0x40013000
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_UART_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12c      	bne.n	8001384 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_UART_MspInit+0x88>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001362:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001374:	2307      	movs	r3, #7
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0x8c>)
 8001380:	f000 fa00 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40011000 	.word	0x40011000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <SDTimer_Handler+0x40>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <SDTimer_Handler+0x1c>
    Timer1--;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <SDTimer_Handler+0x40>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <SDTimer_Handler+0x40>)
 80013b2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <SDTimer_Handler+0x44>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <SDTimer_Handler+0x34>
    Timer2--;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <SDTimer_Handler+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SDTimer_Handler+0x44>)
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000991 	.word	0x20000991
 80013dc:	20000990 	.word	0x20000990

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

		  FatFsCnt++;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <SysTick_Handler+0x30>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3301      	adds	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SysTick_Handler+0x30>)
 8001438:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <SysTick_Handler+0x30>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b09      	cmp	r3, #9
 8001442:	d904      	bls.n	800144e <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Handler+0x30>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 800144a:	f7ff ffa5 	bl	8001398 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f893 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000042 	.word	0x20000042

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ffd7 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f004 fbc7 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fd39 	bl	8000f28 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80014c4:	08005e4c 	.word	0x08005e4c
  ldr r2, =_sbss
 80014c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80014cc:	20000e00 	.word	0x20000e00

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f90d 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fe8e 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f917 	bl	800176a <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f8ed 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000004 	.word	0x20000004
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000008 	.word	0x20000008

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000000c 	.word	0x2000000c
 800159c:	20000994 	.word	0x20000994

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000994 	.word	0x20000994

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff47 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff5c 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb0 	bl	80016d8 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e165      	b.n	8001a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8154 	bne.w	8001a66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80ae 	beq.w	8001a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a5c      	ldr	r2, [pc, #368]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <HAL_GPIO_Init+0x308>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d025      	beq.n	800199e <HAL_GPIO_Init+0x21a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_GPIO_Init+0x30c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01f      	beq.n	800199a <HAL_GPIO_Init+0x216>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_GPIO_Init+0x310>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x212>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_GPIO_Init+0x314>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_GPIO_Init+0x318>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x20a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x31c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x206>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x320>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x202>
 8001982:	2306      	movs	r3, #6
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001986:	2307      	movs	r3, #7
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae96 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fce6 	bl	80015a0 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fce2 	bl	80015a0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f855 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc46 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08005da4 	.word	0x08005da4
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	20000008 	.word	0x20000008

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08005db4 	.word	0x08005db4

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0b5b      	lsrs	r3, r3, #13
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08005db4 	.word	0x08005db4

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001d20:	2600      	movs	r6, #0
 8001d22:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001d24:	2600      	movs	r6, #0
 8001d26:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001d28:	2600      	movs	r6, #0
 8001d2a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d30:	4ea3      	ldr	r6, [pc, #652]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d32:	68b6      	ldr	r6, [r6, #8]
 8001d34:	f006 060c 	and.w	r6, r6, #12
 8001d38:	2e0c      	cmp	r6, #12
 8001d3a:	f200 8137 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x298>
 8001d3e:	f20f 0c08 	addw	ip, pc, #8
 8001d42:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001fad 	.word	0x08001fad
 8001d50:	08001fad 	.word	0x08001fad
 8001d54:	08001fad 	.word	0x08001fad
 8001d58:	08001d83 	.word	0x08001d83
 8001d5c:	08001fad 	.word	0x08001fad
 8001d60:	08001fad 	.word	0x08001fad
 8001d64:	08001fad 	.word	0x08001fad
 8001d68:	08001d89 	.word	0x08001d89
 8001d6c:	08001fad 	.word	0x08001fad
 8001d70:	08001fad 	.word	0x08001fad
 8001d74:	08001fad 	.word	0x08001fad
 8001d78:	08001e9f 	.word	0x08001e9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d7e:	613b      	str	r3, [r7, #16]
       break;
 8001d80:	e117      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	4b91      	ldr	r3, [pc, #580]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d84:	613b      	str	r3, [r7, #16]
      break;
 8001d86:	e114      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d88:	4b8d      	ldr	r3, [pc, #564]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d90:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d024      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001dae:	f04f 0500 	mov.w	r5, #0
 8001db2:	ea02 0004 	and.w	r0, r2, r4
 8001db6:	ea03 0105 	and.w	r1, r3, r5
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dbc:	fb03 f201 	mul.w	r2, r3, r1
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	fb03 f300 	mul.w	r3, r3, r0
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a7f      	ldr	r2, [pc, #508]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dca:	fba0 0102 	umull	r0, r1, r0, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f7fe fa1b 	bl	8000214 <__aeabi_uldivmod>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4613      	mov	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e04c      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de8:	4b75      	ldr	r3, [pc, #468]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	461a      	mov	r2, r3
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	ea02 0800 	and.w	r8, r2, r0
 8001e00:	ea03 0901 	and.w	r9, r3, r1
 8001e04:	4640      	mov	r0, r8
 8001e06:	4649      	mov	r1, r9
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	014b      	lsls	r3, r1, #5
 8001e12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e16:	0142      	lsls	r2, r0, #5
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	ebb0 0008 	subs.w	r0, r0, r8
 8001e20:	eb61 0109 	sbc.w	r1, r1, r9
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	018b      	lsls	r3, r1, #6
 8001e2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e32:	0182      	lsls	r2, r0, #6
 8001e34:	1a12      	subs	r2, r2, r0
 8001e36:	eb63 0301 	sbc.w	r3, r3, r1
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	00d9      	lsls	r1, r3, #3
 8001e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e48:	00d0      	lsls	r0, r2, #3
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	eb12 0208 	adds.w	r2, r2, r8
 8001e52:	eb43 0309 	adc.w	r3, r3, r9
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0299      	lsls	r1, r3, #10
 8001e60:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e64:	0290      	lsls	r0, r2, #10
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f7fe f9cd 	bl	8000214 <__aeabi_uldivmod>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	613b      	str	r3, [r7, #16]
      break;
 8001e9c:	e089      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9e:	4948      	ldr	r1, [pc, #288]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ea0:	6849      	ldr	r1, [r1, #4]
 8001ea2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ea6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea8:	4945      	ldr	r1, [pc, #276]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001eaa:	6849      	ldr	r1, [r1, #4]
 8001eac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d024      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb4:	4942      	ldr	r1, [pc, #264]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001eb6:	6849      	ldr	r1, [r1, #4]
 8001eb8:	0989      	lsrs	r1, r1, #6
 8001eba:	4608      	mov	r0, r1
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ec4:	f04f 0500 	mov.w	r5, #0
 8001ec8:	ea00 0204 	and.w	r2, r0, r4
 8001ecc:	ea01 0305 	and.w	r3, r1, r5
 8001ed0:	493d      	ldr	r1, [pc, #244]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001ed2:	fb01 f003 	mul.w	r0, r1, r3
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	fb01 f102 	mul.w	r1, r1, r2
 8001edc:	1844      	adds	r4, r0, r1
 8001ede:	493a      	ldr	r1, [pc, #232]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001ee0:	fba2 0101 	umull	r0, r1, r2, r1
 8001ee4:	1863      	adds	r3, r4, r1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	f7fe f990 	bl	8000214 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e04a      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	461a      	mov	r2, r3
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	ea02 0400 	and.w	r4, r2, r0
 8001f16:	ea03 0501 	and.w	r5, r3, r1
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	014b      	lsls	r3, r1, #5
 8001f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f2c:	0142      	lsls	r2, r0, #5
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	1b00      	subs	r0, r0, r4
 8001f34:	eb61 0105 	sbc.w	r1, r1, r5
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	018b      	lsls	r3, r1, #6
 8001f42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f46:	0182      	lsls	r2, r0, #6
 8001f48:	1a12      	subs	r2, r2, r0
 8001f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	00d9      	lsls	r1, r3, #3
 8001f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f5c:	00d0      	lsls	r0, r2, #3
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	1912      	adds	r2, r2, r4
 8001f64:	eb45 0303 	adc.w	r3, r5, r3
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0299      	lsls	r1, r3, #10
 8001f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f76:	0290      	lsls	r0, r2, #10
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	f7fe f944 	bl	8000214 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0f1b      	lsrs	r3, r3, #28
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	693b      	ldr	r3, [r7, #16]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	017d7840 	.word	0x017d7840

08001fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e28d      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8083 	beq.w	80020f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fec:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d019      	beq.n	800202c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ff8:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002000:	2b08      	cmp	r3, #8
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002004:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x124>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e25a      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x90>
 800204e:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7b      	ldr	r2, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xcc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xb4>
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a72      	ldr	r2, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xcc>
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6b      	ldr	r2, [pc, #428]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fa7e 	bl	80015a0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fa7a 	bl	80015a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e21f      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xdc>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fa6a 	bl	80015a0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fa66 	bl	80015a0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e20b      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x104>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06f      	beq.n	80021de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d017      	beq.n	800213a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x186>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1d3      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x278>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fa13 	bl	80015a0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fa0f 	bl	80015a0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1b4      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_OscConfig+0x278>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f9f2 	bl	80015a0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff f9ee 	bl	80015a0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e193      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f9d2 	bl	80015a0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff f9ce 	bl	80015a0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e173      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x234>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x27c>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7ff f9bb 	bl	80015a0 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7ff f9b7 	bl	80015a0 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e15c      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b8a      	ldr	r3, [pc, #552]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b79      	ldr	r3, [pc, #484]	; (800247c <HAL_RCC_OscConfig+0x4b0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7ff f977 	bl	80015a0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7ff f973 	bl	80015a0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e118      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x4b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x31e>
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x358>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x340>
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a60      	ldr	r2, [pc, #384]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b5e      	ldr	r3, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x358>
 800230c:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a59      	ldr	r2, [pc, #356]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a56      	ldr	r2, [pc, #344]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff f938 	bl	80015a0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7ff f934 	bl	80015a0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0d7      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x368>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff f922 	bl	80015a0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7ff f91e 	bl	80015a0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0c1      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b40      	ldr	r3, [pc, #256]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ad 	beq.w	80024f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d060      	beq.n	800246c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d145      	bne.n	800243e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_RCC_OscConfig+0x4b4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f8f2 	bl	80015a0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f8ee 	bl	80015a0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e093      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x4b4>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff f8c3 	bl	80015a0 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff f8bf 	bl	80015a0 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e064      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x452>
 800243c:	e05c      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x4b4>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f8ac 	bl	80015a0 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f8a8 	bl	80015a0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04d      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x480>
 800246a:	e045      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e040      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_RCC_OscConfig+0x538>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d030      	beq.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d129      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d122      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	4293      	cmp	r3, r2
 80024be:	d119      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10f      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07b      	b.n	8002612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	d108      	bne.n	8002534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800252a:	d009      	beq.n	8002540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
 8002532:	e005      	b.n	8002540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fe8c 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	ea42 0103 	orr.w	r1, r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0104 	and.w	r1, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f003 0210 	and.w	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_SPI_Transmit+0x22>
 8002638:	2302      	movs	r3, #2
 800263a:	e126      	b.n	800288a <HAL_SPI_Transmit+0x270>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002644:	f7fe ffac 	bl	80015a0 <HAL_GetTick>
 8002648:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800265e:	e10b      	b.n	8002878 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_SPI_Transmit+0x52>
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002670:	e102      	b.n	8002878 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	d10f      	bne.n	80026da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d007      	beq.n	80026f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002700:	d14b      	bne.n	800279a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_SPI_Transmit+0xf6>
 800270a:	8afb      	ldrh	r3, [r7, #22]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d13e      	bne.n	800278e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002734:	e02b      	b.n	800278e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d112      	bne.n	800276a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	86da      	strh	r2, [r3, #54]	; 0x36
 8002768:	e011      	b.n	800278e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276a:	f7fe ff19 	bl	80015a0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d803      	bhi.n	8002782 <HAL_SPI_Transmit+0x168>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d102      	bne.n	8002788 <HAL_SPI_Transmit+0x16e>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800278c:	e074      	b.n	8002878 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ce      	bne.n	8002736 <HAL_SPI_Transmit+0x11c>
 8002798:	e04c      	b.n	8002834 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Transmit+0x18e>
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d140      	bne.n	800282a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027ce:	e02c      	b.n	800282a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d113      	bne.n	8002806 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36
 8002804:	e011      	b.n	800282a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002806:	f7fe fecb 	bl	80015a0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d803      	bhi.n	800281e <HAL_SPI_Transmit+0x204>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d102      	bne.n	8002824 <HAL_SPI_Transmit+0x20a>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002828:	e026      	b.n	8002878 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1cd      	bne.n	80027d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	6839      	ldr	r1, [r7, #0]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fa63 	bl	8002d04 <SPI_EndRxTxTransaction>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e000      	b.n	8002878 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002888:	7ffb      	ldrb	r3, [r7, #31]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b08c      	sub	sp, #48	; 0x30
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x26>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e18a      	b.n	8002bce <HAL_SPI_TransmitReceive+0x33c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028c0:	f7fe fe6e 	bl	80015a0 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00f      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x70>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e8:	d107      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x68>
 80028f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d003      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002900:	e15b      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_SPI_TransmitReceive+0x82>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_TransmitReceive+0x82>
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800291a:	e14e      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b04      	cmp	r3, #4
 8002926:	d003      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2205      	movs	r2, #5
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d007      	beq.n	8002984 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298c:	d178      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_SPI_TransmitReceive+0x10a>
 8002996:	8b7b      	ldrh	r3, [r7, #26]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d166      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c0:	e053      	b.n	8002a6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d11b      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x176>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x176>
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d113      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d119      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x1b8>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d014      	beq.n	8002a4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a46:	2301      	movs	r3, #1
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a4a:	f7fe fda9 	bl	80015a0 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d807      	bhi.n	8002a6a <HAL_SPI_TransmitReceive+0x1d8>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d003      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a68:	e0a7      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1a6      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x130>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1a1      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x130>
 8002a7e:	e07c      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x1fc>
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d16b      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab4:	e057      	b.n	8002b66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11c      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x26c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x26c>
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d119      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x2ae>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b40:	f7fe fd2e 	bl	80015a0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d803      	bhi.n	8002b58 <HAL_SPI_TransmitReceive+0x2c6>
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x2cc>
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b64:	e029      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1a2      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x224>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d19d      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8c0 	bl	8002d04 <SPI_EndRxTxTransaction>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b96:	e010      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	e000      	b.n	8002bba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002bb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3730      	adds	r7, #48	; 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be4:	b2db      	uxtb	r3, r3
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c04:	f7fe fccc 	bl	80015a0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c14:	f7fe fcc4 	bl	80015a0 <HAL_GetTick>
 8002c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	015b      	lsls	r3, r3, #5
 8002c20:	0d1b      	lsrs	r3, r3, #20
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2a:	e054      	b.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d050      	beq.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c34:	f7fe fcb4 	bl	80015a0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d902      	bls.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d13d      	bne.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c62:	d111      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6c:	d004      	beq.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d107      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d10f      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e017      	b.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d19b      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000004 	.word	0x20000004

08002d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <SPI_EndRxTxTransaction+0x7c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <SPI_EndRxTxTransaction+0x80>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0d5b      	lsrs	r3, r3, #21
 8002d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d112      	bne.n	8002d56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ff5a 	bl	8002bf4 <SPI_WaitFlagStateUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e00f      	b.n	8002d76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d0f2      	beq.n	8002d56 <SPI_EndRxTxTransaction+0x52>
 8002d70:	e000      	b.n	8002d74 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d72:	bf00      	nop
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000004 	.word	0x20000004
 8002d84:	165e9f81 	.word	0x165e9f81

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e03f      	b.n	8002e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe faaa 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f929 	bl	8003024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	; 0x28
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d17c      	bne.n	8002f3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_UART_Transmit+0x2c>
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e075      	b.n	8002f3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Transmit+0x3e>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e06e      	b.n	8002f3e <HAL_UART_Transmit+0x11c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fb93 	bl	80015a0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Transmit+0x82>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002eb4:	e02a      	b.n	8002f0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f840 	bl	8002f46 <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e036      	b.n	8002f3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e007      	b.n	8002efe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cf      	bne.n	8002eb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f810 	bl	8002f46 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e006      	b.n	8002f3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b090      	sub	sp, #64	; 0x40
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	e050      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d04c      	beq.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f66:	f7fe fb1b 	bl	80015a0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d241      	bcs.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f96:	637a      	str	r2, [r7, #52]	; 0x34
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fca:	623a      	str	r2, [r7, #32]
 8002fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	69f9      	ldr	r1, [r7, #28]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e00f      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4013      	ands	r3, r2
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	429a      	cmp	r2, r3
 8003016:	d09f      	beq.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3740      	adds	r7, #64	; 0x40
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	b09f      	sub	sp, #124	; 0x7c
 800302a:	af00      	add	r7, sp, #0
 800302c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	68d9      	ldr	r1, [r3, #12]
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	ea40 0301 	orr.w	r3, r0, r1
 8003044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	431a      	orrs	r2, r3
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4313      	orrs	r3, r2
 800305c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003068:	f021 010c 	bic.w	r1, r1, #12
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003072:	430b      	orrs	r3, r1
 8003074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4bc5      	ldr	r3, [pc, #788]	; (80033a8 <UART_SetConfig+0x384>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d004      	beq.n	80030a2 <UART_SetConfig+0x7e>
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4bc3      	ldr	r3, [pc, #780]	; (80033ac <UART_SetConfig+0x388>)
 800309e:	429a      	cmp	r2, r3
 80030a0:	d103      	bne.n	80030aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a2:	f7fe fe23 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80030a6:	6778      	str	r0, [r7, #116]	; 0x74
 80030a8:	e002      	b.n	80030b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7fe fe0b 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 80030ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	f040 80b6 	bne.w	8003228 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030be:	461c      	mov	r4, r3
 80030c0:	f04f 0500 	mov.w	r5, #0
 80030c4:	4622      	mov	r2, r4
 80030c6:	462b      	mov	r3, r5
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	6439      	str	r1, [r7, #64]	; 0x40
 80030cc:	415b      	adcs	r3, r3
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030d4:	1912      	adds	r2, r2, r4
 80030d6:	eb45 0303 	adc.w	r3, r5, r3
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e8:	00d0      	lsls	r0, r2, #3
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	1911      	adds	r1, r2, r4
 80030f0:	6639      	str	r1, [r7, #96]	; 0x60
 80030f2:	416b      	adcs	r3, r5
 80030f4:	667b      	str	r3, [r7, #100]	; 0x64
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	1891      	adds	r1, r2, r2
 8003102:	63b9      	str	r1, [r7, #56]	; 0x38
 8003104:	415b      	adcs	r3, r3
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800310c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003110:	f7fd f880 	bl	8000214 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4ba5      	ldr	r3, [pc, #660]	; (80033b0 <UART_SetConfig+0x38c>)
 800311a:	fba3 2302 	umull	r2, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	011e      	lsls	r6, r3, #4
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	461c      	mov	r4, r3
 8003126:	f04f 0500 	mov.w	r5, #0
 800312a:	4622      	mov	r2, r4
 800312c:	462b      	mov	r3, r5
 800312e:	1891      	adds	r1, r2, r2
 8003130:	6339      	str	r1, [r7, #48]	; 0x30
 8003132:	415b      	adcs	r3, r3
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800313a:	1912      	adds	r2, r2, r4
 800313c:	eb45 0303 	adc.w	r3, r5, r3
 8003140:	f04f 0000 	mov.w	r0, #0
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	00d9      	lsls	r1, r3, #3
 800314a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314e:	00d0      	lsls	r0, r2, #3
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	1911      	adds	r1, r2, r4
 8003156:	65b9      	str	r1, [r7, #88]	; 0x58
 8003158:	416b      	adcs	r3, r5
 800315a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	461a      	mov	r2, r3
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	1891      	adds	r1, r2, r2
 8003168:	62b9      	str	r1, [r7, #40]	; 0x28
 800316a:	415b      	adcs	r3, r3
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003172:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003176:	f7fd f84d 	bl	8000214 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <UART_SetConfig+0x38c>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <UART_SetConfig+0x38c>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a0:	441e      	add	r6, r3
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	623c      	str	r4, [r7, #32]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	653c      	str	r4, [r7, #80]	; 0x50
 80031d8:	414b      	adcs	r3, r1
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	61b9      	str	r1, [r7, #24]
 80031ea:	415b      	adcs	r3, r3
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031f6:	f7fd f80d 	bl	8000214 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <UART_SetConfig+0x38c>)
 8003200:	fba3 1302 	umull	r1, r3, r3, r2
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	2164      	movs	r1, #100	; 0x64
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3332      	adds	r3, #50	; 0x32
 8003212:	4a67      	ldr	r2, [pc, #412]	; (80033b0 <UART_SetConfig+0x38c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4432      	add	r2, r6
 8003224:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003226:	e0b9      	b.n	800339c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	461c      	mov	r4, r3
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	1891      	adds	r1, r2, r2
 8003236:	6139      	str	r1, [r7, #16]
 8003238:	415b      	adcs	r3, r3
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003240:	1912      	adds	r2, r2, r4
 8003242:	eb45 0303 	adc.w	r3, r5, r3
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003254:	00d0      	lsls	r0, r2, #3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	eb12 0804 	adds.w	r8, r2, r4
 800325e:	eb43 0905 	adc.w	r9, r3, r5
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	008b      	lsls	r3, r1, #2
 8003276:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800327a:	0082      	lsls	r2, r0, #2
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fc ffc8 	bl	8000214 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <UART_SetConfig+0x38c>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	011e      	lsls	r6, r3, #4
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	4618      	mov	r0, r3
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	1894      	adds	r4, r2, r2
 80032a0:	60bc      	str	r4, [r7, #8]
 80032a2:	415b      	adcs	r3, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032aa:	1812      	adds	r2, r2, r0
 80032ac:	eb41 0303 	adc.w	r3, r1, r3
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	f04f 0500 	mov.w	r5, #0
 80032b8:	00dd      	lsls	r5, r3, #3
 80032ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032be:	00d4      	lsls	r4, r2, #3
 80032c0:	4622      	mov	r2, r4
 80032c2:	462b      	mov	r3, r5
 80032c4:	1814      	adds	r4, r2, r0
 80032c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80032c8:	414b      	adcs	r3, r1
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	008b      	lsls	r3, r1, #2
 80032e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e4:	0082      	lsls	r2, r0, #2
 80032e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ea:	f7fc ff93 	bl	8000214 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <UART_SetConfig+0x38c>)
 80032f4:	fba3 1302 	umull	r1, r3, r3, r2
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2164      	movs	r1, #100	; 0x64
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <UART_SetConfig+0x38c>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003312:	441e      	add	r6, r3
 8003314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003316:	4618      	mov	r0, r3
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	1894      	adds	r4, r2, r2
 8003322:	603c      	str	r4, [r7, #0]
 8003324:	415b      	adcs	r3, r3
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332c:	1812      	adds	r2, r2, r0
 800332e:	eb41 0303 	adc.w	r3, r1, r3
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	f04f 0500 	mov.w	r5, #0
 800333a:	00dd      	lsls	r5, r3, #3
 800333c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003340:	00d4      	lsls	r4, r2, #3
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	eb12 0a00 	adds.w	sl, r2, r0
 800334a:	eb43 0b01 	adc.w	fp, r3, r1
 800334e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4618      	mov	r0, r3
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	008b      	lsls	r3, r1, #2
 8003362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003366:	0082      	lsls	r2, r0, #2
 8003368:	4650      	mov	r0, sl
 800336a:	4659      	mov	r1, fp
 800336c:	f7fc ff52 	bl	8000214 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <UART_SetConfig+0x38c>)
 8003376:	fba3 1302 	umull	r1, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2164      	movs	r1, #100	; 0x64
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	; 0x32
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <UART_SetConfig+0x38c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4432      	add	r2, r6
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	377c      	adds	r7, #124	; 0x7c
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40011400 	.word	0x40011400
 80033b0:	51eb851f 	.word	0x51eb851f

080033b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80033b8:	4904      	ldr	r1, [pc, #16]	; (80033cc <MX_FATFS_Init+0x18>)
 80033ba:	4805      	ldr	r0, [pc, #20]	; (80033d0 <MX_FATFS_Init+0x1c>)
 80033bc:	f002 fc30 	bl	8005c20 <FATFS_LinkDriver>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <MX_FATFS_Init+0x20>)
 80033c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000998 	.word	0x20000998
 80033d0:	20000010 	.word	0x20000010
 80033d4:	2000099c 	.word	0x2000099c

080033d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80033dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fa43 	bl	8000880 <SD_disk_initialize>
 80033fa:	4603      	mov	r3, r0
 80033fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fb1e 	bl	8000a54 <SD_disk_status>
 8003418:	4603      	mov	r3, r0
 800341a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8003434:	7bf8      	ldrb	r0, [r7, #15]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	f7fd fb20 	bl	8000a80 <SD_disk_read>
 8003440:	4603      	mov	r3, r0
 8003442:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800345c:	7bf8      	ldrb	r0, [r7, #15]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	f7fd fb76 	bl	8000b54 <SD_disk_write>
 8003468:	4603      	mov	r3, r0
 800346a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	603a      	str	r2, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
 8003480:	460b      	mov	r3, r1
 8003482:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	79b9      	ldrb	r1, [r7, #6]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fbe6 	bl	8000c5c <SD_disk_ioctl>
 8003490:	4603      	mov	r3, r0
 8003492:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	4a08      	ldr	r2, [pc, #32]	; (80034cc <disk_status+0x30>)
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	79fa      	ldrb	r2, [r7, #7]
 80034b4:	4905      	ldr	r1, [pc, #20]	; (80034cc <disk_status+0x30>)
 80034b6:	440a      	add	r2, r1
 80034b8:	7a12      	ldrb	r2, [r2, #8]
 80034ba:	4610      	mov	r0, r2
 80034bc:	4798      	blx	r3
 80034be:	4603      	mov	r3, r0
 80034c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000006c 	.word	0x2000006c

080034d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <disk_initialize+0x48>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <disk_initialize+0x48>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <disk_initialize+0x48>)
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	79fa      	ldrb	r2, [r7, #7]
 80034fe:	4906      	ldr	r1, [pc, #24]	; (8003518 <disk_initialize+0x48>)
 8003500:	440a      	add	r2, r1
 8003502:	7a12      	ldrb	r2, [r2, #8]
 8003504:	4610      	mov	r0, r2
 8003506:	4798      	blx	r3
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2000006c 	.word	0x2000006c

0800351c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <disk_read+0x3c>)
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	689c      	ldr	r4, [r3, #8]
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <disk_read+0x3c>)
 800353c:	4413      	add	r3, r2
 800353e:	7a18      	ldrb	r0, [r3, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	47a0      	blx	r4
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]
  return res;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
}
 800354e:	4618      	mov	r0, r3
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	bf00      	nop
 8003558:	2000006c 	.word	0x2000006c

0800355c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <disk_write+0x3c>)
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68dc      	ldr	r4, [r3, #12]
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <disk_write+0x3c>)
 800357c:	4413      	add	r3, r2
 800357e:	7a18      	ldrb	r0, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	47a0      	blx	r4
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]
  return res;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}
 8003596:	bf00      	nop
 8003598:	2000006c 	.word	0x2000006c

0800359c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	603a      	str	r2, [r7, #0]
 80035a6:	71fb      	strb	r3, [r7, #7]
 80035a8:	460b      	mov	r3, r1
 80035aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <disk_ioctl+0x38>)
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	4906      	ldr	r1, [pc, #24]	; (80035d4 <disk_ioctl+0x38>)
 80035bc:	440a      	add	r2, r1
 80035be:	7a10      	ldrb	r0, [r2, #8]
 80035c0:	79b9      	ldrb	r1, [r7, #6]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4798      	blx	r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000006c 	.word	0x2000006c

080035d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80035fa:	89fb      	ldrh	r3, [r7, #14]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3303      	adds	r3, #3
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	3202      	adds	r2, #2
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	3201      	adds	r2, #1
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003640:	68fb      	ldr	r3, [r7, #12]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	1c53      	adds	r3, r2, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	6179      	str	r1, [r7, #20]
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3b01      	subs	r3, #1
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f1      	bne.n	80036f6 <mem_cpy+0x1a>
	}
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800371e:	b480      	push	{r7}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	617a      	str	r2, [r7, #20]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3b01      	subs	r3, #1
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f3      	bne.n	800372e <mem_set+0x10>
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	61fa      	str	r2, [r7, #28]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	61ba      	str	r2, [r7, #24]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3b01      	subs	r3, #1
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <mem_cmp+0x40>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0eb      	beq.n	800376c <mem_cmp+0x18>

	return r;
 8003794:	697b      	ldr	r3, [r7, #20]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80037ac:	e002      	b.n	80037b4 <chk_chr+0x12>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <chk_chr+0x26>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d1f2      	bne.n	80037ae <chk_chr+0xc>
	return *str;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	781b      	ldrb	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e029      	b.n	8003840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <chk_lock+0xb4>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	4413      	add	r3, r2
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01d      	beq.n	8003836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <chk_lock+0xb4>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d116      	bne.n	800383a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <chk_lock+0xb4>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800381c:	429a      	cmp	r2, r3
 800381e:	d10c      	bne.n	800383a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <chk_lock+0xb4>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	3308      	adds	r3, #8
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003830:	429a      	cmp	r2, r3
 8003832:	d102      	bne.n	800383a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003834:	e007      	b.n	8003846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d9d2      	bls.n	80037ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d109      	bne.n	8003860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <chk_lock+0x80>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d101      	bne.n	800385c <chk_lock+0x84>
 8003858:	2300      	movs	r3, #0
 800385a:	e010      	b.n	800387e <chk_lock+0xa6>
 800385c:	2312      	movs	r3, #18
 800385e:	e00e      	b.n	800387e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <chk_lock+0xa0>
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <chk_lock+0xb4>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	330c      	adds	r3, #12
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003876:	d101      	bne.n	800387c <chk_lock+0xa4>
 8003878:	2310      	movs	r3, #16
 800387a:	e000      	b.n	800387e <chk_lock+0xa6>
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000004c 	.word	0x2000004c

08003890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e002      	b.n	80038a2 <enq_lock+0x12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d806      	bhi.n	80038b6 <enq_lock+0x26>
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <enq_lock+0x40>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4413      	add	r3, r2
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f2      	bne.n	800389c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	2000004c 	.word	0x2000004c

080038d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e01f      	b.n	8003924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80038e4:	4a41      	ldr	r2, [pc, #260]	; (80039ec <inc_lock+0x118>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d113      	bne.n	800391e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <inc_lock+0x118>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003906:	429a      	cmp	r2, r3
 8003908:	d109      	bne.n	800391e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <inc_lock+0x118>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	3308      	adds	r3, #8
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800391a:	429a      	cmp	r2, r3
 800391c:	d006      	beq.n	800392c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d9dc      	bls.n	80038e4 <inc_lock+0x10>
 800392a:	e000      	b.n	800392e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800392c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d132      	bne.n	800399a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e002      	b.n	8003940 <inc_lock+0x6c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d806      	bhi.n	8003954 <inc_lock+0x80>
 8003946:	4a29      	ldr	r2, [pc, #164]	; (80039ec <inc_lock+0x118>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f2      	bne.n	800393a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d101      	bne.n	800395e <inc_lock+0x8a>
 800395a:	2300      	movs	r3, #0
 800395c:	e040      	b.n	80039e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4922      	ldr	r1, [pc, #136]	; (80039ec <inc_lock+0x118>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	440b      	add	r3, r1
 800396a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	491e      	ldr	r1, [pc, #120]	; (80039ec <inc_lock+0x118>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	440b      	add	r3, r1
 8003978:	3304      	adds	r3, #4
 800397a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	491a      	ldr	r1, [pc, #104]	; (80039ec <inc_lock+0x118>)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <inc_lock+0x118>)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4413      	add	r3, r2
 8003994:	330c      	adds	r3, #12
 8003996:	2200      	movs	r2, #0
 8003998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <inc_lock+0xe0>
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <inc_lock+0x118>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4413      	add	r3, r2
 80039a8:	330c      	adds	r3, #12
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <inc_lock+0xe0>
 80039b0:	2300      	movs	r3, #0
 80039b2:	e015      	b.n	80039e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <inc_lock+0xf8>
 80039ba:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <inc_lock+0x118>)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	4413      	add	r3, r2
 80039c2:	330c      	adds	r3, #12
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	e001      	b.n	80039d0 <inc_lock+0xfc>
 80039cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d0:	4906      	ldr	r1, [pc, #24]	; (80039ec <inc_lock+0x118>)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	440b      	add	r3, r1
 80039d8:	330c      	adds	r3, #12
 80039da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	2000004c 	.word	0x2000004c

080039f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d825      	bhi.n	8003a50 <dec_lock+0x60>
		n = Files[i].ctr;
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <dec_lock+0x74>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a12:	89fb      	ldrh	r3, [r7, #14]
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d101      	bne.n	8003a1e <dec_lock+0x2e>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <dec_lock+0x3a>
 8003a24:	89fb      	ldrh	r3, [r7, #14]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <dec_lock+0x74>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	4413      	add	r3, r2
 8003a32:	330c      	adds	r3, #12
 8003a34:	89fa      	ldrh	r2, [r7, #14]
 8003a36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <dec_lock+0x5a>
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <dec_lock+0x74>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	737b      	strb	r3, [r7, #13]
 8003a4e:	e001      	b.n	8003a54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003a50:	2302      	movs	r3, #2
 8003a52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000004c 	.word	0x2000004c

08003a68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e010      	b.n	8003a98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <clear_lock+0x44>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	4413      	add	r3, r2
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d105      	bne.n	8003a92 <clear_lock+0x2a>
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <clear_lock+0x44>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d9eb      	bls.n	8003a76 <clear_lock+0xe>
	}
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	2000004c 	.word	0x2000004c

08003ab0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d034      	beq.n	8003b2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7858      	ldrb	r0, [r3, #1]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	f7ff fd40 	bl	800355c <disk_write>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	e022      	b.n	8003b2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	1ad2      	subs	r2, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d217      	bcs.n	8003b2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	789b      	ldrb	r3, [r3, #2]
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e010      	b.n	8003b28 <sync_window+0x78>
					wsect += fs->fsize;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7858      	ldrb	r0, [r3, #1]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	f7ff fd1d 	bl	800355c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d8eb      	bhi.n	8003b06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d01b      	beq.n	8003b88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ffad 	bl	8003ab0 <sync_window>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d113      	bne.n	8003b88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7858      	ldrb	r0, [r3, #1]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	f7ff fcd5 	bl	800351c <disk_read>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff87 	bl	8003ab0 <sync_window>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d158      	bne.n	8003c5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d148      	bne.n	8003c46 <sync_fs+0xb2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	791b      	ldrb	r3, [r3, #4]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d144      	bne.n	8003c46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3330      	adds	r3, #48	; 0x30
 8003bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fda9 	bl	800371e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3330      	adds	r3, #48	; 0x30
 8003bd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003bd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fd38 	bl	800364e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3330      	adds	r3, #48	; 0x30
 8003be2:	4921      	ldr	r1, [pc, #132]	; (8003c68 <sync_fs+0xd4>)
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fd4d 	bl	8003684 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3330      	adds	r3, #48	; 0x30
 8003bee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003bf2:	491e      	ldr	r1, [pc, #120]	; (8003c6c <sync_fs+0xd8>)
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fd45 	bl	8003684 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3330      	adds	r3, #48	; 0x30
 8003bfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7ff fd3b 	bl	8003684 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3330      	adds	r3, #48	; 0x30
 8003c12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7ff fd31 	bl	8003684 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7858      	ldrb	r0, [r3, #1]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f7ff fc8e 	bl	800355c <disk_write>
			fs->fsi_flag = 0;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fca4 	bl	800359c <disk_ioctl>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <sync_fs+0xca>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	41615252 	.word	0x41615252
 8003c6c:	61417272 	.word	0x61417272

08003c70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	3b02      	subs	r3, #2
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d301      	bcc.n	8003c90 <clust2sect+0x20>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e008      	b.n	8003ca2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	895b      	ldrh	r3, [r3, #10]
 8003c94:	461a      	mov	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	fb03 f202 	mul.w	r2, r3, r2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d904      	bls.n	8003cce <get_fat+0x20>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003cce:	2301      	movs	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	e08f      	b.n	8003df4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d062      	beq.n	8003da8 <get_fat+0xfa>
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	dc7c      	bgt.n	8003de0 <get_fat+0x132>
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d002      	beq.n	8003cf0 <get_fat+0x42>
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d042      	beq.n	8003d74 <get_fat+0xc6>
 8003cee:	e077      	b.n	8003de0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	4413      	add	r3, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	f7ff ff14 	bl	8003b38 <move_window>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d167      	bne.n	8003de6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0a5b      	lsrs	r3, r3, #9
 8003d32:	4413      	add	r3, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	6938      	ldr	r0, [r7, #16]
 8003d38:	f7ff fefe 	bl	8003b38 <move_window>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d153      	bne.n	8003dea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <get_fat+0xbc>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	e002      	b.n	8003d70 <get_fat+0xc2>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	617b      	str	r3, [r7, #20]
			break;
 8003d72:	e03f      	b.n	8003df4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6938      	ldr	r0, [r7, #16]
 8003d82:	f7ff fed9 	bl	8003b38 <move_window>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d130      	bne.n	8003dee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fc1b 	bl	80035d8 <ld_word>
 8003da2:	4603      	mov	r3, r0
 8003da4:	617b      	str	r3, [r7, #20]
			break;
 8003da6:	e025      	b.n	8003df4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	09db      	lsrs	r3, r3, #7
 8003db0:	4413      	add	r3, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	6938      	ldr	r0, [r7, #16]
 8003db6:	f7ff febf 	bl	8003b38 <move_window>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d118      	bne.n	8003df2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003dce:	4413      	add	r3, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fc19 	bl	8003608 <ld_dword>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ddc:	617b      	str	r3, [r7, #20]
			break;
 8003dde:	e009      	b.n	8003df4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e006      	b.n	8003df4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003de6:	bf00      	nop
 8003de8:	e004      	b.n	8003df4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003df2:	bf00      	nop
		}
	}

	return val;
 8003df4:	697b      	ldr	r3, [r7, #20]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003dfe:	b590      	push	{r4, r7, lr}
 8003e00:	b089      	sub	sp, #36	; 0x24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f240 80d2 	bls.w	8003fba <put_fat+0x1bc>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f080 80cc 	bcs.w	8003fba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	f000 8096 	beq.w	8003f58 <put_fat+0x15a>
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	f300 80cd 	bgt.w	8003fcc <put_fat+0x1ce>
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d002      	beq.n	8003e3c <put_fat+0x3e>
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d06e      	beq.n	8003f18 <put_fat+0x11a>
 8003e3a:	e0c7      	b.n	8003fcc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4413      	add	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	4413      	add	r3, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff fe6e 	bl	8003b38 <move_window>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 80ab 	bne.w	8003fbe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	61b9      	str	r1, [r7, #24]
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <put_fat+0xa4>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	b25a      	sxtb	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e001      	b.n	8003ea6 <put_fat+0xa8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	0a5b      	lsrs	r3, r3, #9
 8003eb8:	4413      	add	r3, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fe3b 	bl	8003b38 <move_window>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ec6:	7ffb      	ldrb	r3, [r7, #31]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d17a      	bne.n	8003fc2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <put_fat+0xf0>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e00e      	b.n	8003f0c <put_fat+0x10e>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	f023 030f 	bic.w	r3, r3, #15
 8003ef8:	b25a      	sxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	b25b      	sxtb	r3, r3
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b25b      	sxtb	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	70da      	strb	r2, [r3, #3]
			break;
 8003f16:	e059      	b.n	8003fcc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	4413      	add	r3, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fe07 	bl	8003b38 <move_window>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d148      	bne.n	8003fc6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003f42:	4413      	add	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	b292      	uxth	r2, r2
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fb7f 	bl	800364e <st_word>
			fs->wflag = 1;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	70da      	strb	r2, [r3, #3]
			break;
 8003f56:	e039      	b.n	8003fcc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	09db      	lsrs	r3, r3, #7
 8003f60:	4413      	add	r3, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff fde7 	bl	8003b38 <move_window>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d12a      	bne.n	8003fca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f88:	4413      	add	r3, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fb3c 	bl	8003608 <ld_dword>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f96:	4323      	orrs	r3, r4
 8003f98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003fa8:	4413      	add	r3, r2
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fb69 	bl	8003684 <st_dword>
			fs->wflag = 1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	70da      	strb	r2, [r3, #3]
			break;
 8003fb8:	e008      	b.n	8003fcc <put_fat+0x1ce>
		}
	}
 8003fba:	bf00      	nop
 8003fbc:	e006      	b.n	8003fcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fbe:	bf00      	nop
 8003fc0:	e004      	b.n	8003fcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fc2:	bf00      	nop
 8003fc4:	e002      	b.n	8003fcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003fca:	bf00      	nop
	return res;
 8003fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}

08003fd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b088      	sub	sp, #32
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d904      	bls.n	8003ffc <remove_chain+0x26>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d301      	bcc.n	8004000 <remove_chain+0x2a>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e04b      	b.n	8004098 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	69b8      	ldr	r0, [r7, #24]
 800400e:	f7ff fef6 	bl	8003dfe <put_fat>
 8004012:	4603      	mov	r3, r0
 8004014:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <remove_chain+0x4a>
 800401c:	7ffb      	ldrb	r3, [r7, #31]
 800401e:	e03b      	b.n	8004098 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fe43 	bl	8003cae <get_fat>
 8004028:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d031      	beq.n	8004094 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <remove_chain+0x64>
 8004036:	2302      	movs	r3, #2
 8004038:	e02e      	b.n	8004098 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d101      	bne.n	8004046 <remove_chain+0x70>
 8004042:	2301      	movs	r3, #1
 8004044:	e028      	b.n	8004098 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004046:	2200      	movs	r2, #0
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	69b8      	ldr	r0, [r7, #24]
 800404c:	f7ff fed7 	bl	8003dfe <put_fat>
 8004050:	4603      	mov	r3, r0
 8004052:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004054:	7ffb      	ldrb	r3, [r7, #31]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <remove_chain+0x88>
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	e01c      	b.n	8004098 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	3b02      	subs	r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d20b      	bcs.n	8004084 <remove_chain+0xae>
			fs->free_clst++;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3c6      	bcc.n	8004020 <remove_chain+0x4a>
 8004092:	e000      	b.n	8004096 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004094:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10d      	bne.n	80040d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <create_chain+0x2c>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d31b      	bcc.n	8004104 <create_chain+0x64>
 80040cc:	2301      	movs	r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e018      	b.n	8004104 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fdea 	bl	8003cae <get_fat>
 80040da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d801      	bhi.n	80040e6 <create_chain+0x46>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e070      	b.n	80041c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d101      	bne.n	80040f2 <create_chain+0x52>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	e06a      	b.n	80041c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d201      	bcs.n	8004100 <create_chain+0x60>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	e063      	b.n	80041c8 <create_chain+0x128>
		scl = clst;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	429a      	cmp	r2, r3
 8004116:	d307      	bcc.n	8004128 <create_chain+0x88>
				ncl = 2;
 8004118:	2302      	movs	r3, #2
 800411a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	429a      	cmp	r2, r3
 8004122:	d901      	bls.n	8004128 <create_chain+0x88>
 8004124:	2300      	movs	r3, #0
 8004126:	e04f      	b.n	80041c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004128:	69f9      	ldr	r1, [r7, #28]
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fdbf 	bl	8003cae <get_fat>
 8004130:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d003      	beq.n	8004146 <create_chain+0xa6>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d101      	bne.n	800414a <create_chain+0xaa>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	e03e      	b.n	80041c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	429a      	cmp	r2, r3
 8004150:	d1da      	bne.n	8004108 <create_chain+0x68>
 8004152:	2300      	movs	r3, #0
 8004154:	e038      	b.n	80041c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004156:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	6938      	ldr	r0, [r7, #16]
 8004160:	f7ff fe4d 	bl	8003dfe <put_fat>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <create_chain+0xe2>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	6938      	ldr	r0, [r7, #16]
 800417a:	f7ff fe40 	bl	8003dfe <put_fat>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	3b02      	subs	r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d804      	bhi.n	80041a6 <create_chain+0x106>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	791b      	ldrb	r3, [r3, #4]
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	711a      	strb	r2, [r3, #4]
 80041b4:	e007      	b.n	80041c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <create_chain+0x122>
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295
 80041c0:	e000      	b.n	80041c4 <create_chain+0x124>
 80041c2:	2301      	movs	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80041c6:	69fb      	ldr	r3, [r7, #28]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	3304      	adds	r3, #4
 80041e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	0a5b      	lsrs	r3, r3, #9
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	8952      	ldrh	r2, [r2, #10]
 80041f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1d1a      	adds	r2, r3, #4
 80041fa:	613a      	str	r2, [r7, #16]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <clmt_clust+0x3a>
 8004206:	2300      	movs	r3, #0
 8004208:	e010      	b.n	800422c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	d307      	bcc.n	8004222 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3304      	adds	r3, #4
 800421e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004220:	e7e9      	b.n	80041f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004222:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424e:	d204      	bcs.n	800425a <dir_sdi+0x22>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <dir_sdi+0x26>
		return FR_INT_ERR;
 800425a:	2302      	movs	r3, #2
 800425c:	e063      	b.n	8004326 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <dir_sdi+0x46>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d902      	bls.n	800427e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10c      	bne.n	800429e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	8912      	ldrh	r2, [r2, #8]
 800428c:	4293      	cmp	r3, r2
 800428e:	d301      	bcc.n	8004294 <dir_sdi+0x5c>
 8004290:	2302      	movs	r3, #2
 8004292:	e048      	b.n	8004326 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	61da      	str	r2, [r3, #28]
 800429c:	e029      	b.n	80042f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	895b      	ldrh	r3, [r3, #10]
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80042a6:	e019      	b.n	80042dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fcfe 	bl	8003cae <get_fat>
 80042b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d101      	bne.n	80042c0 <dir_sdi+0x88>
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d904      	bls.n	80042d0 <dir_sdi+0x98>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d301      	bcc.n	80042d4 <dir_sdi+0x9c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e028      	b.n	8004326 <dir_sdi+0xee>
			ofs -= csz;
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d2e1      	bcs.n	80042a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	6938      	ldr	r0, [r7, #16]
 80042e8:	f7ff fcc2 	bl	8003c70 <clust2sect>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <dir_sdi+0xcc>
 8004300:	2302      	movs	r3, #2
 8004302:	e010      	b.n	8004326 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	0a5b      	lsrs	r3, r3, #9
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	441a      	add	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	3320      	adds	r3, #32
 8004344:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <dir_next+0x28>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004354:	d301      	bcc.n	800435a <dir_next+0x2c>
 8004356:	2304      	movs	r3, #4
 8004358:	e0aa      	b.n	80044b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8098 	bne.w	8004496 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	8912      	ldrh	r2, [r2, #8]
 8004380:	4293      	cmp	r3, r2
 8004382:	f0c0 8088 	bcc.w	8004496 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	61da      	str	r2, [r3, #28]
 800438c:	2304      	movs	r3, #4
 800438e:	e08f      	b.n	80044b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	8952      	ldrh	r2, [r2, #10]
 8004398:	3a01      	subs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d17a      	bne.n	8004496 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7ff fc80 	bl	8003cae <get_fat>
 80043ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d801      	bhi.n	80043ba <dir_next+0x8c>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e07a      	b.n	80044b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d101      	bne.n	80043c6 <dir_next+0x98>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e074      	b.n	80044b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d358      	bcc.n	8004482 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	61da      	str	r2, [r3, #28]
 80043dc:	2304      	movs	r3, #4
 80043de:	e067      	b.n	80044b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7ff fe59 	bl	80040a0 <create_chain>
 80043ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <dir_next+0xcc>
 80043f6:	2307      	movs	r3, #7
 80043f8:	e05a      	b.n	80044b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <dir_next+0xd6>
 8004400:	2302      	movs	r3, #2
 8004402:	e055      	b.n	80044b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d101      	bne.n	8004410 <dir_next+0xe2>
 800440c:	2301      	movs	r3, #1
 800440e:	e04f      	b.n	80044b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fb4d 	bl	8003ab0 <sync_window>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <dir_next+0xf2>
 800441c:	2301      	movs	r3, #1
 800441e:	e047      	b.n	80044b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3330      	adds	r3, #48	; 0x30
 8004424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f977 	bl	800371e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff fc1a 	bl	8003c70 <clust2sect>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c
 8004442:	e012      	b.n	800446a <dir_next+0x13c>
						fs->wflag = 1;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fb30 	bl	8003ab0 <sync_window>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <dir_next+0x12c>
 8004456:	2301      	movs	r3, #1
 8004458:	e02a      	b.n	80044b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	895b      	ldrh	r3, [r3, #10]
 800446e:	461a      	mov	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4293      	cmp	r3, r2
 8004474:	d3e6      	bcc.n	8004444 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff fbf0 	bl	8003c70 <clust2sect>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80044c8:	2100      	movs	r1, #0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff feb4 	bl	8004238 <dir_sdi>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12b      	bne.n	8004532 <dir_alloc+0x7a>
		n = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fb27 	bl	8003b38 <move_window>
 80044ea:	4603      	mov	r3, r0
 80044ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2be5      	cmp	r3, #229	; 0xe5
 80044fc:	d004      	beq.n	8004508 <dir_alloc+0x50>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d102      	bne.n	800451c <dir_alloc+0x64>
 8004516:	e00c      	b.n	8004532 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800451c:	2101      	movs	r1, #1
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ff05 	bl	800432e <dir_next>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0d7      	beq.n	80044de <dir_alloc+0x26>
 800452e:	e000      	b.n	8004532 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004530:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d101      	bne.n	800453c <dir_alloc+0x84>
 8004538:	2307      	movs	r3, #7
 800453a:	75fb      	strb	r3, [r7, #23]
	return res;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	331a      	adds	r3, #26
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f83f 	bl	80035d8 <ld_word>
 800455a:	4603      	mov	r3, r0
 800455c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d109      	bne.n	800457a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f834 	bl	80035d8 <ld_word>
 8004570:	4603      	mov	r3, r0
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	331a      	adds	r3, #26
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	b292      	uxth	r2, r2
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff f857 	bl	800364e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d109      	bne.n	80045bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f103 0214 	add.w	r2, r3, #20
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff f849 	bl	800364e <st_word>
	}
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80045d2:	2100      	movs	r1, #0
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fe2f 	bl	8004238 <dir_sdi>
 80045da:	4603      	mov	r3, r0
 80045dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <dir_find+0x24>
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	e03e      	b.n	8004666 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4619      	mov	r1, r3
 80045ee:	6938      	ldr	r0, [r7, #16]
 80045f0:	f7ff faa2 	bl	8003b38 <move_window>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12f      	bne.n	800465e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <dir_find+0x4e>
 800460c:	2304      	movs	r3, #4
 800460e:	75fb      	strb	r3, [r7, #23]
 8004610:	e028      	b.n	8004664 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	330b      	adds	r3, #11
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461e:	b2da      	uxtb	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	330b      	adds	r3, #11
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <dir_find+0x86>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a18      	ldr	r0, [r3, #32]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	220b      	movs	r2, #11
 800463e:	4619      	mov	r1, r3
 8004640:	f7ff f888 	bl	8003754 <mem_cmp>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800464a:	2100      	movs	r1, #0
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fe6e 	bl	800432e <dir_next>
 8004652:	4603      	mov	r3, r0
 8004654:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0c5      	beq.n	80045e8 <dir_find+0x24>
 800465c:	e002      	b.n	8004664 <dir_find+0xa0>
		if (res != FR_OK) break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004662:	bf00      	nop

	return res;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800467c:	2101      	movs	r1, #1
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff1a 	bl	80044b8 <dir_alloc>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11c      	bne.n	80046c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4619      	mov	r1, r3
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f7ff fa4f 	bl	8003b38 <move_window>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	2220      	movs	r2, #32
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f836 	bl	800371e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a18      	ldr	r0, [r3, #32]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3324      	adds	r3, #36	; 0x24
 80046ba:	220b      	movs	r2, #11
 80046bc:	4619      	mov	r1, r3
 80046be:	f7ff f80d 	bl	80036dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2201      	movs	r2, #1
 80046c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3324      	adds	r3, #36	; 0x24
 80046e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80046ea:	220b      	movs	r2, #11
 80046ec:	2120      	movs	r1, #32
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f7ff f815 	bl	800371e <mem_set>
	si = i = 0; ni = 8;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	2308      	movs	r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	61fa      	str	r2, [r7, #28]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800470e:	7efb      	ldrb	r3, [r7, #27]
 8004710:	2b20      	cmp	r3, #32
 8004712:	d94e      	bls.n	80047b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004714:	7efb      	ldrb	r3, [r7, #27]
 8004716:	2b2f      	cmp	r3, #47	; 0x2f
 8004718:	d006      	beq.n	8004728 <create_name+0x54>
 800471a:	7efb      	ldrb	r3, [r7, #27]
 800471c:	2b5c      	cmp	r3, #92	; 0x5c
 800471e:	d110      	bne.n	8004742 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004720:	e002      	b.n	8004728 <create_name+0x54>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3301      	adds	r3, #1
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b2f      	cmp	r3, #47	; 0x2f
 8004732:	d0f6      	beq.n	8004722 <create_name+0x4e>
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b5c      	cmp	r3, #92	; 0x5c
 800473e:	d0f0      	beq.n	8004722 <create_name+0x4e>
			break;
 8004740:	e038      	b.n	80047b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b2e      	cmp	r3, #46	; 0x2e
 8004746:	d003      	beq.n	8004750 <create_name+0x7c>
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	d30c      	bcc.n	800476a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b0b      	cmp	r3, #11
 8004754:	d002      	beq.n	800475c <create_name+0x88>
 8004756:	7efb      	ldrb	r3, [r7, #27]
 8004758:	2b2e      	cmp	r3, #46	; 0x2e
 800475a:	d001      	beq.n	8004760 <create_name+0x8c>
 800475c:	2306      	movs	r3, #6
 800475e:	e044      	b.n	80047ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004760:	2308      	movs	r3, #8
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	230b      	movs	r3, #11
 8004766:	617b      	str	r3, [r7, #20]
			continue;
 8004768:	e022      	b.n	80047b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800476a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da04      	bge.n	800477c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004772:	7efb      	ldrb	r3, [r7, #27]
 8004774:	3b80      	subs	r3, #128	; 0x80
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <create_name+0x120>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800477c:	7efb      	ldrb	r3, [r7, #27]
 800477e:	4619      	mov	r1, r3
 8004780:	481d      	ldr	r0, [pc, #116]	; (80047f8 <create_name+0x124>)
 8004782:	f7ff f80e 	bl	80037a2 <chk_chr>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <create_name+0xbc>
 800478c:	2306      	movs	r3, #6
 800478e:	e02c      	b.n	80047ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004790:	7efb      	ldrb	r3, [r7, #27]
 8004792:	2b60      	cmp	r3, #96	; 0x60
 8004794:	d905      	bls.n	80047a2 <create_name+0xce>
 8004796:	7efb      	ldrb	r3, [r7, #27]
 8004798:	2b7a      	cmp	r3, #122	; 0x7a
 800479a:	d802      	bhi.n	80047a2 <create_name+0xce>
 800479c:	7efb      	ldrb	r3, [r7, #27]
 800479e:	3b20      	subs	r3, #32
 80047a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	613a      	str	r2, [r7, #16]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4413      	add	r3, r2
 80047ac:	7efa      	ldrb	r2, [r7, #27]
 80047ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80047b0:	e7a6      	b.n	8004700 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80047b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	441a      	add	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <create_name+0xf4>
 80047c4:	2306      	movs	r3, #6
 80047c6:	e010      	b.n	80047ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2be5      	cmp	r3, #229	; 0xe5
 80047ce:	d102      	bne.n	80047d6 <create_name+0x102>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2205      	movs	r2, #5
 80047d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80047d6:	7efb      	ldrb	r3, [r7, #27]
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d801      	bhi.n	80047e0 <create_name+0x10c>
 80047dc:	2204      	movs	r2, #4
 80047de:	e000      	b.n	80047e2 <create_name+0x10e>
 80047e0:	2200      	movs	r2, #0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	330b      	adds	r3, #11
 80047e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80047e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	08005dbc 	.word	0x08005dbc
 80047f8:	08005d60 	.word	0x08005d60

080047fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004810:	e002      	b.n	8004818 <follow_path+0x1c>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b2f      	cmp	r3, #47	; 0x2f
 800481e:	d0f8      	beq.n	8004812 <follow_path+0x16>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b5c      	cmp	r3, #92	; 0x5c
 8004826:	d0f4      	beq.n	8004812 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b1f      	cmp	r3, #31
 8004834:	d80a      	bhi.n	800484c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800483e:	2100      	movs	r1, #0
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fcf9 	bl	8004238 <dir_sdi>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
 800484a:	e043      	b.n	80048d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800484c:	463b      	mov	r3, r7
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff3f 	bl	80046d4 <create_name>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d134      	bne.n	80048ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff feaf 	bl	80045c4 <dir_find>
 8004866:	4603      	mov	r3, r0
 8004868:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004870:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d127      	bne.n	80048ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800487e:	7afb      	ldrb	r3, [r7, #11]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d122      	bne.n	80048ce <follow_path+0xd2>
 8004888:	2305      	movs	r3, #5
 800488a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800488c:	e01f      	b.n	80048ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11c      	bne.n	80048d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	799b      	ldrb	r3, [r3, #6]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80048a4:	2305      	movs	r3, #5
 80048a6:	75fb      	strb	r3, [r7, #23]
 80048a8:	e014      	b.n	80048d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	4413      	add	r3, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fe42 	bl	8004546 <ld_clust>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048c8:	e7c0      	b.n	800484c <follow_path+0x50>
			if (res != FR_OK) break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <follow_path+0xd8>
				break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048d2:	bf00      	nop
			}
		}
	}

	return res;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e002      	b.n	8004902 <get_ldnumber+0x24>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3301      	adds	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d903      	bls.n	8004912 <get_ldnumber+0x34>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b3a      	cmp	r3, #58	; 0x3a
 8004910:	d1f4      	bne.n	80048fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b3a      	cmp	r3, #58	; 0x3a
 8004918:	d11c      	bne.n	8004954 <get_ldnumber+0x76>
			tp = *path;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	60fa      	str	r2, [r7, #12]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3b30      	subs	r3, #48	; 0x30
 800492a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d80e      	bhi.n	8004950 <get_ldnumber+0x72>
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	429a      	cmp	r2, r3
 8004938:	d10a      	bne.n	8004950 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <get_ldnumber+0x72>
					vol = (int)i;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e002      	b.n	800495a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004958:	693b      	ldr	r3, [r7, #16]
}
 800495a:	4618      	mov	r0, r3
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	70da      	strb	r2, [r3, #3]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f04f 32ff 	mov.w	r2, #4294967295
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff f8d8 	bl	8003b38 <move_window>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <check_fs+0x2a>
 800498e:	2304      	movs	r3, #4
 8004990:	e038      	b.n	8004a04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3330      	adds	r3, #48	; 0x30
 8004996:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fe1c 	bl	80035d8 <ld_word>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <check_fs+0x48>
 80049ac:	2303      	movs	r3, #3
 80049ae:	e029      	b.n	8004a04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049b6:	2be9      	cmp	r3, #233	; 0xe9
 80049b8:	d009      	beq.n	80049ce <check_fs+0x66>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049c0:	2beb      	cmp	r3, #235	; 0xeb
 80049c2:	d11e      	bne.n	8004a02 <check_fs+0x9a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049ca:	2b90      	cmp	r3, #144	; 0x90
 80049cc:	d119      	bne.n	8004a02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3330      	adds	r3, #48	; 0x30
 80049d2:	3336      	adds	r3, #54	; 0x36
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fe17 	bl	8003608 <ld_dword>
 80049da:	4603      	mov	r3, r0
 80049dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <check_fs+0xa4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <check_fs+0x82>
 80049e6:	2300      	movs	r3, #0
 80049e8:	e00c      	b.n	8004a04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3330      	adds	r3, #48	; 0x30
 80049ee:	3352      	adds	r3, #82	; 0x52
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fe09 	bl	8003608 <ld_dword>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <check_fs+0xa8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <check_fs+0x9a>
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004a02:	2302      	movs	r3, #2
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	00544146 	.word	0x00544146
 8004a10:	33544146 	.word	0x33544146

08004a14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b096      	sub	sp, #88	; 0x58
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ff58 	bl	80048de <get_ldnumber>
 8004a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da01      	bge.n	8004a3a <find_volume+0x26>
 8004a36:	230b      	movs	r3, #11
 8004a38:	e22e      	b.n	8004e98 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a3a:	4aa8      	ldr	r2, [pc, #672]	; (8004cdc <find_volume+0x2c8>)
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <find_volume+0x3a>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	e224      	b.n	8004e98 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01a      	beq.n	8004a9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fd17 	bl	800349c <disk_status>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <find_volume+0x82>
 8004a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004a92:	230a      	movs	r3, #10
 8004a94:	e200      	b.n	8004e98 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004a96:	2300      	movs	r3, #0
 8004a98:	e1fe      	b.n	8004e98 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fd0f 	bl	80034d0 <disk_initialize>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e1e7      	b.n	8004e98 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <find_volume+0xca>
 8004ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004ada:	230a      	movs	r3, #10
 8004adc:	e1dc      	b.n	8004e98 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ae6:	f7ff ff3f 	bl	8004968 <check_fs>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d14b      	bne.n	8004b90 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004af8:	2300      	movs	r3, #0
 8004afa:	643b      	str	r3, [r7, #64]	; 0x40
 8004afc:	e01f      	b.n	8004b3e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004b0c:	4413      	add	r3, r2
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	3304      	adds	r3, #4
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <find_volume+0x114>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fd72 	bl	8003608 <ld_dword>
 8004b24:	4602      	mov	r2, r0
 8004b26:	e000      	b.n	8004b2a <find_volume+0x116>
 8004b28:	2200      	movs	r2, #0
 8004b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004b32:	440b      	add	r3, r1
 8004b34:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d9dc      	bls.n	8004afe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004b44:	2300      	movs	r3, #0
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <find_volume+0x140>
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	3b01      	subs	r3, #1
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <find_volume+0x162>
 8004b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b6e:	f7ff fefb 	bl	8004968 <check_fs>
 8004b72:	4603      	mov	r3, r0
 8004b74:	e000      	b.n	8004b78 <find_volume+0x164>
 8004b76:	2303      	movs	r3, #3
 8004b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d905      	bls.n	8004b90 <find_volume+0x17c>
 8004b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b86:	3301      	adds	r3, #1
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d9e1      	bls.n	8004b54 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d101      	bne.n	8004b9c <find_volume+0x188>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e17d      	b.n	8004e98 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d901      	bls.n	8004ba8 <find_volume+0x194>
 8004ba4:	230d      	movs	r3, #13
 8004ba6:	e177      	b.n	8004e98 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	3330      	adds	r3, #48	; 0x30
 8004bac:	330b      	adds	r3, #11
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fd12 	bl	80035d8 <ld_word>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d001      	beq.n	8004bc0 <find_volume+0x1ac>
 8004bbc:	230d      	movs	r3, #13
 8004bbe:	e16b      	b.n	8004e98 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	3330      	adds	r3, #48	; 0x30
 8004bc4:	3316      	adds	r3, #22
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fd06 	bl	80035d8 <ld_word>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <find_volume+0x1d0>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	3330      	adds	r3, #48	; 0x30
 8004bda:	3324      	adds	r3, #36	; 0x24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fd13 	bl	8003608 <ld_dword>
 8004be2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	789b      	ldrb	r3, [r3, #2]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d005      	beq.n	8004c08 <find_volume+0x1f4>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	789b      	ldrb	r3, [r3, #2]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d001      	beq.n	8004c08 <find_volume+0x1f4>
 8004c04:	230d      	movs	r3, #13
 8004c06:	e147      	b.n	8004e98 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	789b      	ldrb	r3, [r3, #2]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	895b      	ldrh	r3, [r3, #10]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <find_volume+0x228>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	895b      	ldrh	r3, [r3, #10]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	895b      	ldrh	r3, [r3, #10]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <find_volume+0x22c>
 8004c3c:	230d      	movs	r3, #13
 8004c3e:	e12b      	b.n	8004e98 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	3330      	adds	r3, #48	; 0x30
 8004c44:	3311      	adds	r3, #17
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fcc6 	bl	80035d8 <ld_word>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	891b      	ldrh	r3, [r3, #8]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <find_volume+0x252>
 8004c62:	230d      	movs	r3, #13
 8004c64:	e118      	b.n	8004e98 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	3330      	adds	r3, #48	; 0x30
 8004c6a:	3313      	adds	r3, #19
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fcb3 	bl	80035d8 <ld_word>
 8004c72:	4603      	mov	r3, r0
 8004c74:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <find_volume+0x276>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	3330      	adds	r3, #48	; 0x30
 8004c80:	3320      	adds	r3, #32
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fcc0 	bl	8003608 <ld_dword>
 8004c88:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	3330      	adds	r3, #48	; 0x30
 8004c8e:	330e      	adds	r3, #14
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fca1 	bl	80035d8 <ld_word>
 8004c96:	4603      	mov	r3, r0
 8004c98:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004c9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <find_volume+0x290>
 8004ca0:	230d      	movs	r3, #13
 8004ca2:	e0f9      	b.n	8004e98 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004ca4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	4413      	add	r3, r2
 8004caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cac:	8912      	ldrh	r2, [r2, #8]
 8004cae:	0912      	lsrs	r2, r2, #4
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d201      	bcs.n	8004cc2 <find_volume+0x2ae>
 8004cbe:	230d      	movs	r3, #13
 8004cc0:	e0ea      	b.n	8004e98 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cca:	8952      	ldrh	r2, [r2, #10]
 8004ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <find_volume+0x2cc>
 8004cd8:	230d      	movs	r3, #13
 8004cda:	e0dd      	b.n	8004e98 <find_volume+0x484>
 8004cdc:	20000044 	.word	0x20000044
		fmt = FS_FAT32;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d802      	bhi.n	8004cf6 <find_volume+0x2e2>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d802      	bhi.n	8004d06 <find_volume+0x2f2>
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d12:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004d14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d18:	441a      	add	r2, r3
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004d1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	441a      	add	r2, r3
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d11e      	bne.n	8004d6e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	3330      	adds	r3, #48	; 0x30
 8004d34:	332a      	adds	r3, #42	; 0x2a
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fc4e 	bl	80035d8 <ld_word>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <find_volume+0x332>
 8004d42:	230d      	movs	r3, #13
 8004d44:	e0a8      	b.n	8004e98 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	891b      	ldrh	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <find_volume+0x33e>
 8004d4e:	230d      	movs	r3, #13
 8004d50:	e0a2      	b.n	8004e98 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	332c      	adds	r3, #44	; 0x2c
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fc55 	bl	8003608 <ld_dword>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6c:	e01f      	b.n	8004dae <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	891b      	ldrh	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <find_volume+0x366>
 8004d76:	230d      	movs	r3, #13
 8004d78:	e08e      	b.n	8004e98 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d80:	441a      	add	r2, r3
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <find_volume+0x382>
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	e00a      	b.n	8004dac <find_volume+0x398>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	085a      	lsrs	r2, r3, #1
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004db8:	0a5b      	lsrs	r3, r3, #9
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d201      	bcs.n	8004dc2 <find_volume+0x3ae>
 8004dbe:	230d      	movs	r3, #13
 8004dc0:	e06a      	b.n	8004e98 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d149      	bne.n	8004e74 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	3330      	adds	r3, #48	; 0x30
 8004de4:	3330      	adds	r3, #48	; 0x30
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fbf6 	bl	80035d8 <ld_word>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d140      	bne.n	8004e74 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df4:	3301      	adds	r3, #1
 8004df6:	4619      	mov	r1, r3
 8004df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dfa:	f7fe fe9d 	bl	8003b38 <move_window>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d137      	bne.n	8004e74 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	2200      	movs	r2, #0
 8004e08:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	3330      	adds	r3, #48	; 0x30
 8004e0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fbe0 	bl	80035d8 <ld_word>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d127      	bne.n	8004e74 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	3330      	adds	r3, #48	; 0x30
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fbed 	bl	8003608 <ld_dword>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <find_volume+0x48c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d11e      	bne.n	8004e74 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	3330      	adds	r3, #48	; 0x30
 8004e3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fbe2 	bl	8003608 <ld_dword>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <find_volume+0x490>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d113      	bne.n	8004e74 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	3330      	adds	r3, #48	; 0x30
 8004e50:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fbd7 	bl	8003608 <ld_dword>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	3330      	adds	r3, #48	; 0x30
 8004e64:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fbcd 	bl	8003608 <ld_dword>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e7a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <find_volume+0x494>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <find_volume+0x494>)
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <find_volume+0x494>)
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004e90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e92:	f7fe fde9 	bl	8003a68 <clear_lock>
#endif
	return FR_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3758      	adds	r7, #88	; 0x58
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	41615252 	.word	0x41615252
 8004ea4:	61417272 	.word	0x61417272
 8004ea8:	20000048 	.word	0x20000048

08004eac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004eb6:	2309      	movs	r3, #9
 8004eb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <validate+0x4e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d018      	beq.n	8004efa <validate+0x4e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <validate+0x4e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	889a      	ldrh	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	88db      	ldrh	r3, [r3, #6]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10c      	bne.n	8004efa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fad8 	bl	800349c <disk_status>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <validate+0x4e>
			res = FR_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <validate+0x5a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <validate+0x5c>
 8004f06:	2300      	movs	r3, #0
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	6013      	str	r3, [r2, #0]
	return res;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fcd5 	bl	80048de <get_ldnumber>
 8004f34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da01      	bge.n	8004f40 <f_mount+0x28>
 8004f3c:	230b      	movs	r3, #11
 8004f3e:	e02b      	b.n	8004f98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <f_mount+0x88>)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004f50:	69b8      	ldr	r0, [r7, #24]
 8004f52:	f7fe fd89 	bl	8003a68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	490d      	ldr	r1, [pc, #52]	; (8004fa0 <f_mount+0x88>)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <f_mount+0x66>
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <f_mount+0x6a>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e00a      	b.n	8004f98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004f82:	f107 010c 	add.w	r1, r7, #12
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fd41 	bl	8004a14 <find_volume>
 8004f92:	4603      	mov	r3, r0
 8004f94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000044 	.word	0x20000044

08004fa4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b098      	sub	sp, #96	; 0x60
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <f_open+0x18>
 8004fb8:	2309      	movs	r3, #9
 8004fba:	e1ad      	b.n	8005318 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004fc4:	79fa      	ldrb	r2, [r7, #7]
 8004fc6:	f107 0110 	add.w	r1, r7, #16
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fd20 	bl	8004a14 <find_volume>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 8191 	bne.w	8005306 <f_open+0x362>
		dj.obj.fs = fs;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	f107 0314 	add.w	r3, r7, #20
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fc03 	bl	80047fc <follow_path>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005004:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005008:	b25b      	sxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	da03      	bge.n	8005016 <f_open+0x72>
				res = FR_INVALID_NAME;
 800500e:	2306      	movs	r3, #6
 8005010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005014:	e011      	b.n	800503a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fbd2 	bl	80037d8 <chk_lock>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 031c 	and.w	r3, r3, #28
 8005040:	2b00      	cmp	r3, #0
 8005042:	d07f      	beq.n	8005144 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800504c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005050:	2b04      	cmp	r3, #4
 8005052:	d10e      	bne.n	8005072 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005054:	f7fe fc1c 	bl	8003890 <enq_lock>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d006      	beq.n	800506c <f_open+0xc8>
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fb03 	bl	800466e <dir_register>
 8005068:	4603      	mov	r3, r0
 800506a:	e000      	b.n	800506e <f_open+0xca>
 800506c:	2312      	movs	r3, #18
 800506e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	f043 0308 	orr.w	r3, r3, #8
 8005078:	71fb      	strb	r3, [r7, #7]
 800507a:	e010      	b.n	800509e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800507c:	7ebb      	ldrb	r3, [r7, #26]
 800507e:	f003 0311 	and.w	r3, r3, #17
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <f_open+0xea>
					res = FR_DENIED;
 8005086:	2307      	movs	r3, #7
 8005088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800508c:	e007      	b.n	800509e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <f_open+0xfa>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800509e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d168      	bne.n	8005178 <f_open+0x1d4>
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d063      	beq.n	8005178 <f_open+0x1d4>
				dw = GET_FATTIME();
 80050b0:	f7fe f992 	bl	80033d8 <get_fattime>
 80050b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	330e      	adds	r3, #14
 80050ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe fae1 	bl	8003684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	3316      	adds	r3, #22
 80050c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fadb 	bl	8003684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	330b      	adds	r3, #11
 80050d2:	2220      	movs	r2, #32
 80050d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fa32 	bl	8004546 <ld_clust>
 80050e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050e8:	2200      	movs	r2, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fa4a 	bl	8004584 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	331c      	adds	r3, #28
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fac4 	bl	8003684 <st_dword>
					fs->wflag = 1;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2201      	movs	r2, #1
 8005100:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d037      	beq.n	8005178 <f_open+0x1d4>
						dw = fs->winsect;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	2200      	movs	r2, #0
 8005114:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe ff5d 	bl	8003fd6 <remove_chain>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005126:	2b00      	cmp	r3, #0
 8005128:	d126      	bne.n	8005178 <f_open+0x1d4>
							res = move_window(fs, dw);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fd02 	bl	8003b38 <move_window>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800513e:	3a01      	subs	r2, #1
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	e019      	b.n	8005178 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800514c:	7ebb      	ldrb	r3, [r7, #26]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005156:	2304      	movs	r3, #4
 8005158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800515c:	e00c      	b.n	8005178 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <f_open+0x1d4>
 8005168:	7ebb      	ldrb	r3, [r7, #26]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <f_open+0x1d4>
						res = FR_DENIED;
 8005172:	2307      	movs	r3, #7
 8005174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800517c:	2b00      	cmp	r3, #0
 800517e:	d128      	bne.n	80051d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005190:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800519a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fb8b 	bl	80038d4 <inc_lock>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <f_open+0x22e>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80051d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 8095 	bne.w	8005306 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f9af 	bl	8004546 <ld_clust>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	331c      	adds	r3, #28
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fa08 	bl	8003608 <ld_dword>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	88da      	ldrh	r2, [r3, #6]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3330      	adds	r3, #48	; 0x30
 800522e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fa72 	bl	800371e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d060      	beq.n	8005306 <f_open+0x362>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	895b      	ldrh	r3, [r3, #10]
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	657b      	str	r3, [r7, #84]	; 0x54
 8005268:	e016      	b.n	8005298 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fd1d 	bl	8003cae <get_fat>
 8005274:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005278:	2b01      	cmp	r3, #1
 800527a:	d802      	bhi.n	8005282 <f_open+0x2de>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d102      	bne.n	8005290 <f_open+0x2ec>
 800528a:	2301      	movs	r3, #1
 800528c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	657b      	str	r3, [r7, #84]	; 0x54
 8005298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <f_open+0x304>
 80052a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d8e0      	bhi.n	800526a <f_open+0x2c6>
				}
				fp->clust = clst;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80052ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d127      	bne.n	8005306 <f_open+0x362>
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d022      	beq.n	8005306 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fcd3 	bl	8003c70 <clust2sect>
 80052ca:	6478      	str	r0, [r7, #68]	; 0x44
 80052cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <f_open+0x336>
						res = FR_INT_ERR;
 80052d2:	2302      	movs	r3, #2
 80052d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80052d8:	e015      	b.n	8005306 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	0a5a      	lsrs	r2, r3, #9
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	7858      	ldrb	r0, [r3, #1]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	2301      	movs	r3, #1
 80052f6:	f7fe f911 	bl	800351c <disk_read>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <f_open+0x362>
 8005300:	2301      	movs	r3, #1
 8005302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <f_open+0x370>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005318:	4618      	mov	r0, r3
 800531a:	3760      	adds	r7, #96	; 0x60
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f107 0214 	add.w	r2, r7, #20
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fdb3 	bl	8004eac <validate>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800534c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <f_read+0x44>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	7d5b      	ldrb	r3, [r3, #21]
 8005358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800535c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <f_read+0x4a>
 8005364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005368:	e115      	b.n	8005596 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	7d1b      	ldrb	r3, [r3, #20]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <f_read+0x5a>
 8005376:	2307      	movs	r3, #7
 8005378:	e10d      	b.n	8005596 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	429a      	cmp	r2, r3
 800538c:	f240 80fe 	bls.w	800558c <f_read+0x26c>
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005394:	e0fa      	b.n	800558c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 80c6 	bne.w	8005530 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	8952      	ldrh	r2, [r2, #10]
 80053ae:	3a01      	subs	r2, #1
 80053b0:	4013      	ands	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d12f      	bne.n	800541a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
 80053c8:	e013      	b.n	80053f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	4619      	mov	r1, r3
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7fe fef9 	bl	80041d0 <clmt_clust>
 80053de:	6338      	str	r0, [r7, #48]	; 0x30
 80053e0:	e007      	b.n	80053f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fe fc5f 	bl	8003cae <get_fat>
 80053f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d804      	bhi.n	8005402 <f_read+0xe2>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2202      	movs	r2, #2
 80053fc:	755a      	strb	r2, [r3, #21]
 80053fe:	2302      	movs	r3, #2
 8005400:	e0c9      	b.n	8005596 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d104      	bne.n	8005414 <f_read+0xf4>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	755a      	strb	r2, [r3, #21]
 8005410:	2301      	movs	r3, #1
 8005412:	e0c0      	b.n	8005596 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005418:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fc24 	bl	8003c70 <clust2sect>
 8005428:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <f_read+0x11a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	755a      	strb	r2, [r3, #21]
 8005436:	2302      	movs	r3, #2
 8005438:	e0ad      	b.n	8005596 <f_read+0x276>
			sect += csect;
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0a5b      	lsrs	r3, r3, #9
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d039      	beq.n	80054c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	4413      	add	r3, r2
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	8952      	ldrh	r2, [r2, #10]
 8005458:	4293      	cmp	r3, r2
 800545a:	d905      	bls.n	8005468 <f_read+0x148>
					cc = fs->csize - csect;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	895b      	ldrh	r3, [r3, #10]
 8005460:	461a      	mov	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	7858      	ldrb	r0, [r3, #1]
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005472:	f7fe f853 	bl	800351c <disk_read>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <f_read+0x166>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	755a      	strb	r2, [r3, #21]
 8005482:	2301      	movs	r3, #1
 8005484:	e087      	b.n	8005596 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	7d1b      	ldrb	r3, [r3, #20]
 800548a:	b25b      	sxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	da14      	bge.n	80054ba <f_read+0x19a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549a:	429a      	cmp	r2, r3
 800549c:	d90d      	bls.n	80054ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	025b      	lsls	r3, r3, #9
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	18d0      	adds	r0, r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3330      	adds	r3, #48	; 0x30
 80054b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b4:	4619      	mov	r1, r3
 80054b6:	f7fe f911 	bl	80036dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80054c0:	e050      	b.n	8005564 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d02e      	beq.n	800552a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	7d1b      	ldrb	r3, [r3, #20]
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da18      	bge.n	8005508 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	7858      	ldrb	r0, [r3, #1]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	2301      	movs	r3, #1
 80054e6:	f7fe f839 	bl	800355c <disk_write>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <f_read+0x1da>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	755a      	strb	r2, [r3, #21]
 80054f6:	2301      	movs	r3, #1
 80054f8:	e04d      	b.n	8005596 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	7d1b      	ldrb	r3, [r3, #20]
 80054fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	7858      	ldrb	r0, [r3, #1]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005512:	2301      	movs	r3, #1
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f7fe f801 	bl	800351c <disk_read>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <f_read+0x20a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	755a      	strb	r2, [r3, #21]
 8005526:	2301      	movs	r3, #1
 8005528:	e035      	b.n	8005596 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005538:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800553e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d901      	bls.n	800554a <f_read+0x22a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005558:	4413      	add	r3, r2
 800555a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555c:	4619      	mov	r1, r3
 800555e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005560:	f7fe f8bc 	bl	80036dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	4413      	add	r3, r2
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	441a      	add	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f47f af01 	bne.w	8005396 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3738      	adds	r7, #56	; 0x38
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b08c      	sub	sp, #48	; 0x30
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f107 0210 	add.w	r2, r7, #16
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff fc74 	bl	8004eac <validate>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80055ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <f_write+0x44>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	7d5b      	ldrb	r3, [r3, #21]
 80055d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80055da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <f_write+0x4a>
 80055e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055e6:	e14b      	b.n	8005880 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	7d1b      	ldrb	r3, [r3, #20]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <f_write+0x5a>
 80055f4:	2307      	movs	r3, #7
 80055f6:	e143      	b.n	8005880 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	f080 812d 	bcs.w	8005864 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	43db      	mvns	r3, r3
 8005610:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005612:	e127      	b.n	8005864 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 80e3 	bne.w	80057e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	8952      	ldrh	r2, [r2, #10]
 800562c:	3a01      	subs	r2, #1
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d143      	bne.n	80056c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10c      	bne.n	800565a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11a      	bne.n	8005682 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fd25 	bl	80040a0 <create_chain>
 8005656:	62b8      	str	r0, [r7, #40]	; 0x28
 8005658:	e013      	b.n	8005682 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7fe fdb1 	bl	80041d0 <clmt_clust>
 800566e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005670:	e007      	b.n	8005682 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f7fe fd10 	bl	80040a0 <create_chain>
 8005680:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80f2 	beq.w	800586e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	2b01      	cmp	r3, #1
 800568e:	d104      	bne.n	800569a <f_write+0xfc>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2202      	movs	r2, #2
 8005694:	755a      	strb	r2, [r3, #21]
 8005696:	2302      	movs	r3, #2
 8005698:	e0f2      	b.n	8005880 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d104      	bne.n	80056ac <f_write+0x10e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	755a      	strb	r2, [r3, #21]
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0e9      	b.n	8005880 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <f_write+0x122>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	7d1b      	ldrb	r3, [r3, #20]
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da18      	bge.n	80056fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	7858      	ldrb	r0, [r3, #1]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	2301      	movs	r3, #1
 80056da:	f7fd ff3f 	bl	800355c <disk_write>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <f_write+0x150>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	755a      	strb	r2, [r3, #21]
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0c8      	b.n	8005880 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	7d1b      	ldrb	r3, [r3, #20]
 80056f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f7fe fab3 	bl	8003c70 <clust2sect>
 800570a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <f_write+0x17e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2202      	movs	r2, #2
 8005716:	755a      	strb	r2, [r3, #21]
 8005718:	2302      	movs	r3, #2
 800571a:	e0b1      	b.n	8005880 <f_write+0x2e2>
			sect += csect;
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4413      	add	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0a5b      	lsrs	r3, r3, #9
 8005728:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03c      	beq.n	80057aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	4413      	add	r3, r2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	8952      	ldrh	r2, [r2, #10]
 800573a:	4293      	cmp	r3, r2
 800573c:	d905      	bls.n	800574a <f_write+0x1ac>
					cc = fs->csize - csect;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	461a      	mov	r2, r3
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	7858      	ldrb	r0, [r3, #1]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	f7fd ff02 	bl	800355c <disk_write>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <f_write+0x1ca>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	755a      	strb	r2, [r3, #21]
 8005764:	2301      	movs	r3, #1
 8005766:	e08b      	b.n	8005880 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	429a      	cmp	r2, r3
 8005774:	d915      	bls.n	80057a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	025b      	lsls	r3, r3, #9
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578e:	4619      	mov	r1, r3
 8005790:	f7fd ffa4 	bl	80036dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	7d1b      	ldrb	r3, [r3, #20]
 8005798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80057a8:	e03f      	b.n	800582a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d016      	beq.n	80057e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057bc:	429a      	cmp	r2, r3
 80057be:	d210      	bcs.n	80057e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	7858      	ldrb	r0, [r3, #1]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057ca:	2301      	movs	r3, #1
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	f7fd fea5 	bl	800351c <disk_read>
 80057d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	755a      	strb	r2, [r3, #21]
 80057de:	2301      	movs	r3, #1
 80057e0:	e04e      	b.n	8005880 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d901      	bls.n	8005802 <f_write+0x264>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005810:	4413      	add	r3, r2
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd ff60 	bl	80036dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7d1b      	ldrb	r3, [r3, #20]
 8005820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	4413      	add	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	441a      	add	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	619a      	str	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	429a      	cmp	r2, r3
 8005848:	bf38      	it	cc
 800584a:	461a      	movcc	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	441a      	add	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f47f aed4 	bne.w	8005614 <f_write+0x76>
 800586c:	e000      	b.n	8005870 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800586e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7d1b      	ldrb	r3, [r3, #20]
 8005874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3730      	adds	r7, #48	; 0x30
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f107 0208 	add.w	r2, r7, #8
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fb07 	bl	8004eac <validate>
 800589e:	4603      	mov	r3, r0
 80058a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d168      	bne.n	800597a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	7d1b      	ldrb	r3, [r3, #20]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d062      	beq.n	800597a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7d1b      	ldrb	r3, [r3, #20]
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da15      	bge.n	80058ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	7858      	ldrb	r0, [r3, #1]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1a      	ldr	r2, [r3, #32]
 80058cc:	2301      	movs	r3, #1
 80058ce:	f7fd fe45 	bl	800355c <disk_write>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <f_sync+0x54>
 80058d8:	2301      	movs	r3, #1
 80058da:	e04f      	b.n	800597c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7d1b      	ldrb	r3, [r3, #20]
 80058e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80058ea:	f7fd fd75 	bl	80033d8 <get_fattime>
 80058ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe f91d 	bl	8003b38 <move_window>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d138      	bne.n	800597a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	330b      	adds	r3, #11
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	330b      	adds	r3, #11
 8005918:	f042 0220 	orr.w	r2, r2, #32
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	461a      	mov	r2, r3
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f7fe fe2a 	bl	8004584 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f103 021c 	add.w	r2, r3, #28
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fd fea1 	bl	8003684 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3316      	adds	r3, #22
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fe9b 	bl	8003684 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3312      	adds	r3, #18
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f7fd fe7a 	bl	800364e <st_word>
					fs->wflag = 1;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2201      	movs	r2, #1
 800595e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe f916 	bl	8003b94 <sync_fs>
 8005968:	4603      	mov	r3, r0
 800596a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	7d1b      	ldrb	r3, [r3, #20]
 8005970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005974:	b2da      	uxtb	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff7b 	bl	8005888 <f_sync>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d118      	bne.n	80059ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f107 0208 	add.w	r2, r7, #8
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fa81 	bl	8004eac <validate>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10c      	bne.n	80059ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe f819 	bl	80039f0 <dec_lock>
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80059ec:	e01b      	b.n	8005a26 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80059ee:	f107 0310 	add.w	r3, r7, #16
 80059f2:	f107 0114 	add.w	r1, r7, #20
 80059f6:	2201      	movs	r2, #1
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fc91 	bl	8005320 <f_read>
		if (rc != 1) break;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d116      	bne.n	8005a32 <f_gets+0x5a>
		c = s[0];
 8005a04:	7d3b      	ldrb	r3, [r7, #20]
 8005a06:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b0d      	cmp	r3, #13
 8005a0c:	d100      	bne.n	8005a10 <f_gets+0x38>
 8005a0e:	e00a      	b.n	8005a26 <f_gets+0x4e>
		*p++ = c;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	61ba      	str	r2, [r7, #24]
 8005a16:	7dfa      	ldrb	r2, [r7, #23]
 8005a18:	701a      	strb	r2, [r3, #0]
		n++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	2b0a      	cmp	r3, #10
 8005a24:	d007      	beq.n	8005a36 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	dbde      	blt.n	80059ee <f_gets+0x16>
 8005a30:	e002      	b.n	8005a38 <f_gets+0x60>
		if (rc != 1) break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005a36:	bf00      	nop
	}
	*p = 0;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <f_gets+0x70>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	e000      	b.n	8005a4a <f_gets+0x72>
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	2b0a      	cmp	r3, #10
 8005a62:	d103      	bne.n	8005a6c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005a64:	210d      	movs	r1, #13
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fff3 	bl	8005a52 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db25      	blt.n	8005ac4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	60fa      	str	r2, [r7, #12]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b3c      	cmp	r3, #60	; 0x3c
 8005a8a:	dd12      	ble.n	8005ab2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f103 010c 	add.w	r1, r3, #12
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f107 0308 	add.w	r3, r7, #8
 8005a9c:	f7ff fd7f 	bl	800559e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d101      	bne.n	8005aac <putc_bfd+0x5a>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e001      	b.n	8005ab0 <putc_bfd+0x5e>
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	609a      	str	r2, [r3, #8]
 8005ac2:	e000      	b.n	8005ac6 <putc_bfd+0x74>
	if (i < 0) return;
 8005ac4:	bf00      	nop
}
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db16      	blt.n	8005b0a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f103 010c 	add.w	r1, r3, #12
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f107 030c 	add.w	r3, r7, #12
 8005af0:	f7ff fd55 	bl	800559e <f_write>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d102      	bne.n	8005b0a <putc_flush+0x3e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	e001      	b.n	8005b0e <putc_flush+0x42>
	return EOF;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b096      	sub	sp, #88	; 0x58
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff ffe0 	bl	8005b16 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005b56:	e009      	b.n	8005b6c <f_puts+0x2c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff ff73 	bl	8005a52 <putc_bfd>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f1      	bne.n	8005b58 <f_puts+0x18>
	return putc_flush(&pb);
 8005b74:	f107 030c 	add.w	r3, r7, #12
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ffa7 	bl	8005acc <putc_flush>
 8005b7e:	4603      	mov	r3, r0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3758      	adds	r7, #88	; 0x58
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005ba0:	7a5b      	ldrb	r3, [r3, #9]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d131      	bne.n	8005c0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005baa:	7a5b      	ldrb	r3, [r3, #9]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bb8:	7a5b      	ldrb	r3, [r3, #9]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bc8:	7a5b      	ldrb	r3, [r3, #9]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bd0:	4413      	add	r3, r2
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005bd8:	7a5b      	ldrb	r3, [r3, #9]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	b2d1      	uxtb	r1, r2
 8005be0:	4a0e      	ldr	r2, [pc, #56]	; (8005c1c <FATFS_LinkDriverEx+0x94>)
 8005be2:	7251      	strb	r1, [r2, #9]
 8005be4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
 8005be8:	3330      	adds	r3, #48	; 0x30
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	223a      	movs	r2, #58	; 0x3a
 8005bf6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	222f      	movs	r2, #47	; 0x2f
 8005bfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3303      	adds	r3, #3
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000006c 	.word	0x2000006c

08005c20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffaa 	bl	8005b88 <FATFS_LinkDriverEx>
 8005c34:	4603      	mov	r3, r0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	; (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	; (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	; (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	; (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 f820 	bl	8005c98 <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	08005e44 	.word	0x08005e44
 8005c7c:	08005e44 	.word	0x08005e44
 8005c80:	08005e44 	.word	0x08005e44
 8005c84:	08005e48 	.word	0x08005e48

08005c88 <memset>:
 8005c88:	4402      	add	r2, r0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
