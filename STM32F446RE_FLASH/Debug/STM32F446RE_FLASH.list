
STM32F446RE_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006840  08006840  00016840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cac  08006cac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200001e0  08006e94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08006e94  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a41  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4f  00000000  00000000  00029c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022480  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a85e  00000000  00000000  0004eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9694  00000000  00000000  00059736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  00122e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006828 	.word	0x08006828

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08006828 	.word	0x08006828

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b9a4 	b.w	8000fd8 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8083 	bne.w	8000e2a <__udivmoddi4+0x116>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4617      	mov	r7, r2
 8000d28:	d947      	bls.n	8000dba <__udivmoddi4+0xa6>
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	b142      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	f1c2 0020 	rsb	r0, r2, #32
 8000d34:	fa24 f000 	lsr.w	r0, r4, r0
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4097      	lsls	r7, r2
 8000d3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d40:	4094      	lsls	r4, r2
 8000d42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d46:	0c23      	lsrs	r3, r4, #16
 8000d48:	fbbc f6f8 	udiv	r6, ip, r8
 8000d4c:	fa1f fe87 	uxth.w	lr, r7
 8000d50:	fb08 c116 	mls	r1, r8, r6, ip
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f10e 	mul.w	r1, r6, lr
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x60>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d66:	f080 8119 	bcs.w	8000f9c <__udivmoddi4+0x288>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 8116 	bls.w	8000f9c <__udivmoddi4+0x288>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x8c>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d92:	f080 8105 	bcs.w	8000fa0 <__udivmoddi4+0x28c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f240 8102 	bls.w	8000fa0 <__udivmoddi4+0x28c>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	443c      	add	r4, r7
 8000da0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da4:	eba4 040e 	sub.w	r4, r4, lr
 8000da8:	2600      	movs	r6, #0
 8000daa:	b11d      	cbz	r5, 8000db4 <__udivmoddi4+0xa0>
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	2300      	movs	r3, #0
 8000db0:	e9c5 4300 	strd	r4, r3, [r5]
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xaa>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d150      	bne.n	8000e68 <__udivmoddi4+0x154>
 8000dc6:	1bcb      	subs	r3, r1, r7
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb08 f30c 	mul.w	r3, r8, ip
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0xe4>
 8000de8:	1879      	adds	r1, r7, r1
 8000dea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0xe2>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	f200 80e9 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000df6:	4684      	mov	ip, r0
 8000df8:	1ac9      	subs	r1, r1, r3
 8000dfa:	b2a3      	uxth	r3, r4
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e08:	fb08 f800 	mul.w	r8, r8, r0
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x10c>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x10a>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	f200 80d9 	bhi.w	8000fd0 <__udivmoddi4+0x2bc>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	eba4 0408 	sub.w	r4, r4, r8
 8000e24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e28:	e7bf      	b.n	8000daa <__udivmoddi4+0x96>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d909      	bls.n	8000e42 <__udivmoddi4+0x12e>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	f000 80b1 	beq.w	8000f96 <__udivmoddi4+0x282>
 8000e34:	2600      	movs	r6, #0
 8000e36:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	fab3 f683 	clz	r6, r3
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d14a      	bne.n	8000ee0 <__udivmoddi4+0x1cc>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d302      	bcc.n	8000e54 <__udivmoddi4+0x140>
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	f200 80b8 	bhi.w	8000fc4 <__udivmoddi4+0x2b0>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d0a8      	beq.n	8000db4 <__udivmoddi4+0xa0>
 8000e62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e70:	4097      	lsls	r7, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7a:	40d9      	lsrs	r1, r3
 8000e7c:	4330      	orrs	r0, r6
 8000e7e:	0c03      	lsrs	r3, r0, #16
 8000e80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e84:	fa1f f887 	uxth.w	r8, r7
 8000e88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e90:	fb06 f108 	mul.w	r1, r6, r8
 8000e94:	4299      	cmp	r1, r3
 8000e96:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9a:	d909      	bls.n	8000eb0 <__udivmoddi4+0x19c>
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ea2:	f080 808d 	bcs.w	8000fc0 <__udivmoddi4+0x2ac>
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	f240 808a 	bls.w	8000fc0 <__udivmoddi4+0x2ac>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	443b      	add	r3, r7
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	b281      	uxth	r1, r0
 8000eb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb00 f308 	mul.w	r3, r0, r8
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x1c4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ece:	d273      	bcs.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d971      	bls.n	8000fb8 <__udivmoddi4+0x2a4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4439      	add	r1, r7
 8000ed8:	1acb      	subs	r3, r1, r3
 8000eda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ede:	e778      	b.n	8000dd2 <__udivmoddi4+0xbe>
 8000ee0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ee8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eec:	431c      	orrs	r4, r3
 8000eee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ef6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000efe:	431f      	orrs	r7, r3
 8000f00:	0c3b      	lsrs	r3, r7, #16
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fa1f f884 	uxth.w	r8, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f12:	fb09 fa08 	mul.w	sl, r9, r8
 8000f16:	458a      	cmp	sl, r1
 8000f18:	fa02 f206 	lsl.w	r2, r2, r6
 8000f1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x220>
 8000f22:	1861      	adds	r1, r4, r1
 8000f24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f28:	d248      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	d946      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f32:	4421      	add	r1, r4
 8000f34:	eba1 010a 	sub.w	r1, r1, sl
 8000f38:	b2bf      	uxth	r7, r7
 8000f3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f46:	fb00 f808 	mul.w	r8, r0, r8
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x24a>
 8000f4e:	19e7      	adds	r7, r4, r7
 8000f50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f54:	d22e      	bcs.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f56:	45b8      	cmp	r8, r7
 8000f58:	d92c      	bls.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	4427      	add	r7, r4
 8000f5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f62:	eba7 0708 	sub.w	r7, r7, r8
 8000f66:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6a:	454f      	cmp	r7, r9
 8000f6c:	46c6      	mov	lr, r8
 8000f6e:	4649      	mov	r1, r9
 8000f70:	d31a      	bcc.n	8000fa8 <__udivmoddi4+0x294>
 8000f72:	d017      	beq.n	8000fa4 <__udivmoddi4+0x290>
 8000f74:	b15d      	cbz	r5, 8000f8e <__udivmoddi4+0x27a>
 8000f76:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f82:	40f2      	lsrs	r2, r6
 8000f84:	ea4c 0202 	orr.w	r2, ip, r2
 8000f88:	40f7      	lsrs	r7, r6
 8000f8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f8e:	2600      	movs	r6, #0
 8000f90:	4631      	mov	r1, r6
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	462e      	mov	r6, r5
 8000f98:	4628      	mov	r0, r5
 8000f9a:	e70b      	b.n	8000db4 <__udivmoddi4+0xa0>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	e6e9      	b.n	8000d74 <__udivmoddi4+0x60>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	e6fd      	b.n	8000da0 <__udivmoddi4+0x8c>
 8000fa4:	4543      	cmp	r3, r8
 8000fa6:	d2e5      	bcs.n	8000f74 <__udivmoddi4+0x260>
 8000fa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fac:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	e7df      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e7d2      	b.n	8000f5e <__udivmoddi4+0x24a>
 8000fb8:	4660      	mov	r0, ip
 8000fba:	e78d      	b.n	8000ed8 <__udivmoddi4+0x1c4>
 8000fbc:	4681      	mov	r9, r0
 8000fbe:	e7b9      	b.n	8000f34 <__udivmoddi4+0x220>
 8000fc0:	4666      	mov	r6, ip
 8000fc2:	e775      	b.n	8000eb0 <__udivmoddi4+0x19c>
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e74a      	b.n	8000e5e <__udivmoddi4+0x14a>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	4439      	add	r1, r7
 8000fce:	e713      	b.n	8000df8 <__udivmoddi4+0xe4>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	443c      	add	r4, r7
 8000fd4:	e724      	b.n	8000e20 <__udivmoddi4+0x10c>
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f804 	bl	8000ff4 <ee_read>
 8000fec:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800100a:	d901      	bls.n	8001010 <ee_read+0x1c>
    return false;
 800100c:	2300      	movs	r3, #0
 800100e:	e02b      	b.n	8001068 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e021      	b.n	800105a <ee_read+0x66>
  {
    if (data != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001022:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	701a      	strb	r2, [r3, #0]
      data++;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d20b      	bcs.n	8001054 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001042:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2d9      	uxtb	r1, r3
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <ee_read+0x80>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4413      	add	r3, r2
 8001050:	460a      	mov	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3d7      	bcc.n	8001016 <ee_read+0x22>
#endif
  }
  return true;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000210 	.word	0x20000210

08001078 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8001078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107c:	b093      	sub	sp, #76	; 0x4c
 800107e:	af00      	add	r7, sp, #0
 8001080:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001082:	62b9      	str	r1, [r7, #40]	; 0x28
 8001084:	627a      	str	r2, [r7, #36]	; 0x24
  if ((startVirtualAddress + len) > _EE_SIZE)
 8001086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	4413      	add	r3, r2
 800108c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001090:	d901      	bls.n	8001096 <ee_write+0x1e>
    return false;
 8001092:	2300      	movs	r3, #0
 8001094:	e10e      	b.n	80012b4 <ee_write+0x23c>
  if (data == NULL)
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <ee_write+0x28>
    return false;
 800109c:	2300      	movs	r3, #0
 800109e:	e109      	b.n	80012b4 <ee_write+0x23c>
  HAL_FLASH_Unlock();
 80010a0:	f000 fd78 	bl	8001b94 <HAL_FLASH_Unlock>
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
 80010a8:	e01a      	b.n	80010e0 <ee_write+0x68>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 80010aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	4413      	add	r3, r2
 80010b0:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80010b4:	f501 21c0 	add.w	r1, r1, #393216	; 0x60000
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fd10 	bl	8001aec <HAL_FLASH_Program>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <ee_write+0x62>
    {
      HAL_FLASH_Lock();
 80010d2:	f000 fd81 	bl	8001bd8 <HAL_FLASH_Lock>
      return false;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e0ec      	b.n	80012b4 <ee_write+0x23c>
  for (uint32_t i = 0; i < len ; i++)
 80010da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010dc:	3301      	adds	r3, #1
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
 80010e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3e0      	bcc.n	80010aa <ee_write+0x32>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 80010e8:	2300      	movs	r3, #0
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
 80010ec:	e022      	b.n	8001134 <ee_write+0xbc>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 80010ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	4413      	add	r3, r2
 80010f4:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80010f8:	f501 21c0 	add.w	r1, r1, #393216	; 0x60000
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4303      	orrs	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fce6 	bl	8001aec <HAL_FLASH_Program>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <ee_write+0xb6>
    {
      HAL_FLASH_Lock();
 8001126:	f000 fd57 	bl	8001bd8 <HAL_FLASH_Lock>
      return false;
 800112a:	2300      	movs	r3, #0
 800112c:	e0c2      	b.n	80012b4 <ee_write+0x23c>
  for (uint32_t i = 0; i < len ; i+=2)
 800112e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001130:	3302      	adds	r3, #2
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
 8001134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	429a      	cmp	r2, r3
 800113a:	d3d8      	bcc.n	80010ee <ee_write+0x76>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001140:	e0b0      	b.n	80012a4 <ee_write+0x22c>
  {
    uint64_t data64 = data[i];
 8001142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 1] * 0x100;
 8001154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	4618      	mov	r0, r3
 8001162:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001166:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800116a:	1814      	adds	r4, r2, r0
 800116c:	eb43 0501 	adc.w	r5, r3, r1
 8001170:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    data64 += data[i + 2] * 0x10000;
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	1c9a      	adds	r2, r3, #2
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	4618      	mov	r0, r3
 8001182:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800118a:	eb12 0800 	adds.w	r8, r2, r0
 800118e:	eb43 0901 	adc.w	r9, r3, r1
 8001192:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    data64 += data[i + 3] * 0x1000000;
 8001196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001198:	1cda      	adds	r2, r3, #3
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4618      	mov	r0, r3
 80011a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011ac:	eb12 0a00 	adds.w	sl, r2, r0
 80011b0:	eb43 0b01 	adc.w	fp, r3, r1
 80011b4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    data64 += data[i + 4] * 0x100000000;
 80011b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	f04f 0100 	mov.w	r1, #0
 80011d0:	0011      	movs	r1, r2
 80011d2:	2000      	movs	r0, #0
 80011d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011d8:	1816      	adds	r6, r2, r0
 80011da:	61be      	str	r6, [r7, #24]
 80011dc:	414b      	adcs	r3, r1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 5] * 0x10000000000;
 80011e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ea:	1d5a      	adds	r2, r3, #5
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	0211      	lsls	r1, r2, #8
 8001202:	2000      	movs	r0, #0
 8001204:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001208:	1816      	adds	r6, r2, r0
 800120a:	613e      	str	r6, [r7, #16]
 800120c:	414b      	adcs	r3, r1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001214:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 6] * 0x1000000000000;
 8001218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121a:	1d9a      	adds	r2, r3, #6
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	f04f 0000 	mov.w	r0, #0
 800122c:	f04f 0100 	mov.w	r1, #0
 8001230:	0411      	lsls	r1, r2, #16
 8001232:	2000      	movs	r0, #0
 8001234:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001238:	1816      	adds	r6, r2, r0
 800123a:	60be      	str	r6, [r7, #8]
 800123c:	414b      	adcs	r3, r1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001244:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 7] * 0x100000000000000;
 8001248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124a:	1dda      	adds	r2, r3, #7
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f04f 0000 	mov.w	r0, #0
 800125c:	f04f 0100 	mov.w	r1, #0
 8001260:	0611      	lsls	r1, r2, #24
 8001262:	2000      	movs	r0, #0
 8001264:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001268:	1816      	adds	r6, r2, r0
 800126a:	603e      	str	r6, [r7, #0]
 800126c:	414b      	adcs	r3, r1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001274:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8001278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127c:	4413      	add	r3, r2
 800127e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001282:	f501 21c0 	add.w	r1, r1, #393216	; 0x60000
 8001286:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800128a:	2003      	movs	r0, #3
 800128c:	f000 fc2e 	bl	8001aec <HAL_FLASH_Program>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <ee_write+0x226>
    {
      HAL_FLASH_Lock();
 8001296:	f000 fc9f 	bl	8001bd8 <HAL_FLASH_Lock>
      return false;
 800129a:	2300      	movs	r3, #0
 800129c:	e00a      	b.n	80012b4 <ee_write+0x23c>
  for (uint32_t i = 0; i < len; i += 8)
 800129e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a0:	3308      	adds	r3, #8
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f4ff af4a 	bcc.w	8001142 <ee_write+0xca>
    }
  }
#endif
  HAL_FLASH_Lock();
 80012ae:	f000 fc93 	bl	8001bd8 <HAL_FLASH_Lock>
  return true;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	374c      	adds	r7, #76	; 0x4c
 80012b8:	46bd      	mov	sp, r7
 80012ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_GPIO_Init+0x4c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <MX_GPIO_Init+0x4c>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_GPIO_Init+0x4c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_GPIO_Init+0x4c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <MX_GPIO_Init+0x4c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_GPIO_Init+0x4c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b09d      	sub	sp, #116	; 0x74
 8001314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fa6d 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f83d 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f7ff ffcf 	bl	80012c0 <MX_GPIO_Init>
  MX_USART2_Init();
 8001322:	f000 f9c9 	bl	80016b8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 8001326:	f7ff fe59 	bl	8000fdc <ee_init>
  static uint8_t dataToWrite[4];
  static uint8_t dataRead[4];
  ee_write(0, 4, dataToWrite);
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <main+0x78>)
 800132c:	2104      	movs	r1, #4
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fea2 	bl	8001078 <ee_write>
  ee_read(0, 4, dataRead);
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <main+0x7c>)
 8001336:	2104      	movs	r1, #4
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe5b 	bl	8000ff4 <ee_read>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char buffer[100];
		sprintf(buffer, "%d, %d, %d, %d", dataRead[0], dataRead[1], dataRead[2], dataRead[3]);
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <main+0x7c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <main+0x7c>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	461c      	mov	r4, r3
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <main+0x7c>)
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	461a      	mov	r2, r3
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <main+0x7c>)
 8001352:	78db      	ldrb	r3, [r3, #3]
 8001354:	1d38      	adds	r0, r7, #4
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	4623      	mov	r3, r4
 800135c:	460a      	mov	r2, r1
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <main+0x80>)
 8001360:	f002 f9b6 	bl	80036d0 <siprintf>
		HAL_USART_Transmit(&husart2, buffer, strlen(buffer), 1000);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff52 	bl	8000210 <strlen>
 800136c:	4603      	mov	r3, r0
 800136e:	b29a      	uxth	r2, r3
 8001370:	1d39      	adds	r1, r7, #4
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <main+0x84>)
 8001378:	f001 fc67 	bl	8002c4a <HAL_USART_Transmit>
		HAL_Delay(1000);
 800137c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001380:	f000 faaa 	bl	80018d8 <HAL_Delay>
  {
 8001384:	e7db      	b.n	800133e <main+0x2e>
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc
 800138c:	20000200 	.word	0x20000200
 8001390:	08006840 	.word	0x08006840
 8001394:	20000610 	.word	0x20000610

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b094      	sub	sp, #80	; 0x50
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2234      	movs	r2, #52	; 0x34
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 ff74 	bl	8003294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <SystemClock_Config+0xb8>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <SystemClock_Config+0xb8>)
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <SystemClock_Config+0xb8>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <SystemClock_Config+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <SystemClock_Config+0xbc>)
 80013e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <SystemClock_Config+0xbc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2310      	movs	r3, #16
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4618      	mov	r0, r3
 800140e:	f001 f93d 	bl	800268c <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001418:	f000 f81e 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f000 feb2 	bl	80021a0 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001442:	f000 f809 	bl	8001458 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	; 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_MspInit+0x4c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f9ca 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_kill>:

int _kill(int pid, int sig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001522:	f001 fe7f 	bl	8003224 <__errno>
 8001526:	4603      	mov	r3, r0
 8001528:	2216      	movs	r2, #22
 800152a:	601a      	str	r2, [r3, #0]
	return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_exit>:

void _exit (int status)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe7 	bl	8001518 <_kill>
	while (1) {}		/* Make sure we hang here */
 800154a:	e7fe      	b.n	800154a <_exit+0x12>

0800154c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e00a      	b.n	8001574 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800155e:	f3af 8000 	nop.w
 8001562:	4601      	mov	r1, r0
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf0      	blt.n	800155e <_read+0x12>
	}

return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e009      	b.n	80015ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf1      	blt.n	8001598 <_write+0x12>
	}
	return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_isatty>:

int _isatty(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f001 fde4 	bl	8003224 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20020000 	.word	0x20020000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000204 	.word	0x20000204
 8001690:	20000688 	.word	0x20000688

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <MX_USART2_Init>:

USART_HandleTypeDef husart2;

/* USART2 init function */
void MX_USART2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_USART2_Init+0x50>)
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_USART2_Init+0x54>)
 80016c0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_Init+0x50>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_USART2_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_USART2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_USART2_Init+0x50>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_USART2_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_USART2_Init+0x50>)
 80016f6:	f001 fa67 	bl	8002bc8 <HAL_USART_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001700:	f7ff feaa 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000610 	.word	0x20000610
 800170c:	40004400 	.word	0x40004400

08001710 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_USART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_USART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_USART_MspInit+0x88>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_USART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_USART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_USART_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_USART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800176a:	231c      	movs	r3, #28
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_USART_MspInit+0x8c>)
 8001786:	f000 fb77 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004400 	.word	0x40004400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a6:	490e      	ldr	r1, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017bc:	4c0b      	ldr	r4, [pc, #44]	; (80017ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ca:	f7ff ff63 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f001 fd2f 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fd9d 	bl	8001310 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017e4:	08006cb4 	.word	0x08006cb4
  ldr r2, =_sbss
 80017e8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017ec:	20000688 	.word	0x20000688

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_Init+0x40>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_Init+0x40>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x40>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f931 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fe1c 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f93b 	bl	8001ad2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001874:	f000 f911 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000654 	.word	0x20000654

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000654 	.word	0x20000654

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff ffee 	bl	80018c0 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f0:	d005      	beq.n	80018fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_Delay+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fe:	bf00      	nop
 8001900:	f7ff ffde 	bl	80018c0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d8f7      	bhi.n	8001900 <HAL_Delay+0x28>
  {
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff47 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff5c 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffb0 	bl	8001a40 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_FLASH_Program+0xa0>)
 8001b00:	7e1b      	ldrb	r3, [r3, #24]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_FLASH_Program+0x1e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e03b      	b.n	8001b82 <HAL_FLASH_Program+0x96>
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_FLASH_Program+0xa0>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b14:	f000 f870 	bl	8001bf8 <FLASH_WaitForLastOperation>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d12b      	bne.n	8001b7a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b28:	783b      	ldrb	r3, [r7, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f000 f91b 	bl	8001d68 <FLASH_Program_Byte>
 8001b32:	e016      	b.n	8001b62 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b3a:	883b      	ldrh	r3, [r7, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	68b8      	ldr	r0, [r7, #8]
 8001b40:	f000 f8ee 	bl	8001d20 <FLASH_Program_HalfWord>
 8001b44:	e00d      	b.n	8001b62 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d105      	bne.n	8001b58 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f000 f8c3 	bl	8001cdc <FLASH_Program_Word>
 8001b56:	e004      	b.n	8001b62 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b5c:	68b8      	ldr	r0, [r7, #8]
 8001b5e:	f000 f88b 	bl	8001c78 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b66:	f000 f847 	bl	8001bf8 <FLASH_WaitForLastOperation>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_FLASH_Program+0xa4>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_FLASH_Program+0xa4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_FLASH_Program+0xa0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000658 	.word	0x20000658
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_FLASH_Unlock+0x38>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da0b      	bge.n	8001bbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_FLASH_Unlock+0x38>)
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_FLASH_Unlock+0x3c>)
 8001baa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_FLASH_Unlock+0x38>)
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_FLASH_Unlock+0x40>)
 8001bb0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_FLASH_Unlock+0x38>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da01      	bge.n	8001bbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	45670123 	.word	0x45670123
 8001bd4:	cdef89ab 	.word	0xcdef89ab

08001bd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_FLASH_Lock+0x1c>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_FLASH_Lock+0x1c>)
 8001be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001be6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <FLASH_WaitForLastOperation+0x78>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c0a:	f7ff fe59 	bl	80018c0 <HAL_GetTick>
 8001c0e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c10:	e010      	b.n	8001c34 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c18:	d00c      	beq.n	8001c34 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <FLASH_WaitForLastOperation+0x38>
 8001c20:	f7ff fe4e 	bl	80018c0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d201      	bcs.n	8001c34 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e019      	b.n	8001c68 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <FLASH_WaitForLastOperation+0x7c>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e8      	bne.n	8001c12 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <FLASH_WaitForLastOperation+0x7c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <FLASH_WaitForLastOperation+0x7c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <FLASH_WaitForLastOperation+0x7c>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c5e:	f000 f8a5 	bl	8001dac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
  
}  
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000658 	.word	0x20000658
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001c96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <FLASH_Program_DoubleWord+0x60>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001cae:	f3bf 8f6f 	isb	sy
}
 8001cb2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	000a      	movs	r2, r1
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	3104      	adds	r1, #4
 8001cc8:	4613      	mov	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <FLASH_Program_Word+0x40>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <FLASH_Program_HalfWord+0x44>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	801a      	strh	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <FLASH_Program_Byte+0x40>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	701a      	strb	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001dc6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001dca:	2210      	movs	r2, #16
 8001dcc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001de4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001de8:	2220      	movs	r2, #32
 8001dea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <FLASH_SetErrorCode+0xc8>)
 8001e5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <FLASH_SetErrorCode+0xc4>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	60da      	str	r2, [r3, #12]
  }
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	20000658 	.word	0x20000658

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e165      	b.n	8002160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8154 	bne.w	800215a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ae 	beq.w	800215a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b5a      	ldr	r3, [pc, #360]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_GPIO_Init+0x304>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_GPIO_Init+0x308>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x21a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_GPIO_Init+0x30c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x216>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <HAL_GPIO_Init+0x310>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x212>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4c      	ldr	r2, [pc, #304]	; (800218c <HAL_GPIO_Init+0x314>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x20e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <HAL_GPIO_Init+0x318>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x20a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4a      	ldr	r2, [pc, #296]	; (8002194 <HAL_GPIO_Init+0x31c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x206>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_GPIO_Init+0x320>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x202>
 8002076:	2306      	movs	r3, #6
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800207a:	2307      	movs	r3, #7
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x21c>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x304>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_GPIO_Init+0x324>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d6:	4a31      	ldr	r2, [pc, #196]	; (800219c <HAL_GPIO_Init+0x324>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_GPIO_Init+0x324>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <HAL_GPIO_Init+0x324>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_GPIO_Init+0x324>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_GPIO_Init+0x324>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_GPIO_Init+0x324>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_GPIO_Init+0x324>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae96 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0cc      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d90c      	bls.n	80021dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b8      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a52      	ldr	r2, [pc, #328]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	494d      	ldr	r1, [pc, #308]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d044      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d119      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225a:	2b03      	cmp	r3, #3
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e067      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4934      	ldr	r1, [pc, #208]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7ff fb16 	bl	80018c0 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff fb12 	bl	80018c0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e04f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20c      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e032      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4916      	ldr	r1, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002326:	f000 f855 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800232a:	4602      	mov	r2, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	490a      	ldr	r1, [pc, #40]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	5ccb      	ldrb	r3, [r1, r3]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fa76 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00
 800235c:	40023800 	.word	0x40023800
 8002360:	08006850 	.word	0x08006850
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_GetHCLKFreq+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002388:	f7ff fff0 	bl	800236c <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4903      	ldr	r1, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08006860 	.word	0x08006860

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b0:	f7ff ffdc 	bl	800236c <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0b5b      	lsrs	r3, r3, #13
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08006860 	.word	0x08006860

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023d8:	b087      	sub	sp, #28
 80023da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023dc:	2600      	movs	r6, #0
 80023de:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80023e0:	2600      	movs	r6, #0
 80023e2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80023e4:	2600      	movs	r6, #0
 80023e6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80023e8:	2600      	movs	r6, #0
 80023ea:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ec:	2600      	movs	r6, #0
 80023ee:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f0:	4ea3      	ldr	r6, [pc, #652]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80023f2:	68b6      	ldr	r6, [r6, #8]
 80023f4:	f006 060c 	and.w	r6, r6, #12
 80023f8:	2e0c      	cmp	r6, #12
 80023fa:	f200 8137 	bhi.w	800266c <HAL_RCC_GetSysClockFreq+0x298>
 80023fe:	f20f 0c08 	addw	ip, pc, #8
 8002402:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002406:	bf00      	nop
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800266d 	.word	0x0800266d
 8002410:	0800266d 	.word	0x0800266d
 8002414:	0800266d 	.word	0x0800266d
 8002418:	08002443 	.word	0x08002443
 800241c:	0800266d 	.word	0x0800266d
 8002420:	0800266d 	.word	0x0800266d
 8002424:	0800266d 	.word	0x0800266d
 8002428:	08002449 	.word	0x08002449
 800242c:	0800266d 	.word	0x0800266d
 8002430:	0800266d 	.word	0x0800266d
 8002434:	0800266d 	.word	0x0800266d
 8002438:	0800255f 	.word	0x0800255f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b91      	ldr	r3, [pc, #580]	; (8002684 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800243e:	613b      	str	r3, [r7, #16]
       break;
 8002440:	e117      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002444:	613b      	str	r3, [r7, #16]
      break;
 8002446:	e114      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002448:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002450:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	461a      	mov	r2, r3
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800246e:	f04f 0500 	mov.w	r5, #0
 8002472:	ea02 0004 	and.w	r0, r2, r4
 8002476:	ea03 0105 	and.w	r1, r3, r5
 800247a:	4b83      	ldr	r3, [pc, #524]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800247c:	fb03 f201 	mul.w	r2, r3, r1
 8002480:	2300      	movs	r3, #0
 8002482:	fb03 f300 	mul.w	r3, r3, r0
 8002486:	4413      	add	r3, r2
 8002488:	4a7f      	ldr	r2, [pc, #508]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800248a:	fba0 0102 	umull	r0, r1, r0, r2
 800248e:	440b      	add	r3, r1
 8002490:	4619      	mov	r1, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	461a      	mov	r2, r3
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f7fe fbed 	bl	8000c78 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4613      	mov	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e04c      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	461a      	mov	r2, r3
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	ea02 0800 	and.w	r8, r2, r0
 80024c0:	ea03 0901 	and.w	r9, r3, r1
 80024c4:	4640      	mov	r0, r8
 80024c6:	4649      	mov	r1, r9
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	014b      	lsls	r3, r1, #5
 80024d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024d6:	0142      	lsls	r2, r0, #5
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	ebb0 0008 	subs.w	r0, r0, r8
 80024e0:	eb61 0109 	sbc.w	r1, r1, r9
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	018b      	lsls	r3, r1, #6
 80024ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024f2:	0182      	lsls	r2, r0, #6
 80024f4:	1a12      	subs	r2, r2, r0
 80024f6:	eb63 0301 	sbc.w	r3, r3, r1
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	00d9      	lsls	r1, r3, #3
 8002504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002508:	00d0      	lsls	r0, r2, #3
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	eb12 0208 	adds.w	r2, r2, r8
 8002512:	eb43 0309 	adc.w	r3, r3, r9
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0299      	lsls	r1, r3, #10
 8002520:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002524:	0290      	lsls	r0, r2, #10
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	461a      	mov	r2, r3
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f7fe fb9f 	bl	8000c78 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4613      	mov	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	3301      	adds	r3, #1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	613b      	str	r3, [r7, #16]
      break;
 800255c:	e089      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255e:	4948      	ldr	r1, [pc, #288]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002560:	6849      	ldr	r1, [r1, #4]
 8002562:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002566:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002568:	4945      	ldr	r1, [pc, #276]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800256a:	6849      	ldr	r1, [r1, #4]
 800256c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002570:	2900      	cmp	r1, #0
 8002572:	d024      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002574:	4942      	ldr	r1, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002576:	6849      	ldr	r1, [r1, #4]
 8002578:	0989      	lsrs	r1, r1, #6
 800257a:	4608      	mov	r0, r1
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002584:	f04f 0500 	mov.w	r5, #0
 8002588:	ea00 0204 	and.w	r2, r0, r4
 800258c:	ea01 0305 	and.w	r3, r1, r5
 8002590:	493d      	ldr	r1, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002592:	fb01 f003 	mul.w	r0, r1, r3
 8002596:	2100      	movs	r1, #0
 8002598:	fb01 f102 	mul.w	r1, r1, r2
 800259c:	1844      	adds	r4, r0, r1
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80025a0:	fba2 0101 	umull	r0, r1, r2, r1
 80025a4:	1863      	adds	r3, r4, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	f7fe fb62 	bl	8000c78 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e04a      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	461a      	mov	r2, r3
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	ea02 0400 	and.w	r4, r2, r0
 80025d6:	ea03 0501 	and.w	r5, r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	014b      	lsls	r3, r1, #5
 80025e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025ec:	0142      	lsls	r2, r0, #5
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	1b00      	subs	r0, r0, r4
 80025f4:	eb61 0105 	sbc.w	r1, r1, r5
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002606:	0182      	lsls	r2, r0, #6
 8002608:	1a12      	subs	r2, r2, r0
 800260a:	eb63 0301 	sbc.w	r3, r3, r1
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	00d9      	lsls	r1, r3, #3
 8002618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800261c:	00d0      	lsls	r0, r2, #3
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	1912      	adds	r2, r2, r4
 8002624:	eb45 0303 	adc.w	r3, r5, r3
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0299      	lsls	r1, r3, #10
 8002632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002636:	0290      	lsls	r0, r2, #10
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	f7fe fb16 	bl	8000c78 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4613      	mov	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	0f1b      	lsrs	r3, r3, #28
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	693b      	ldr	r3, [r7, #16]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e28d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8083 	beq.w	80027b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c4:	4b8e      	ldr	r3, [pc, #568]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x124>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e25a      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x90>
 800270e:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7b      	ldr	r2, [pc, #492]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0xb4>
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a75      	ldr	r2, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a72      	ldr	r2, [pc, #456]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6e      	ldr	r2, [pc, #440]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f8ae 	bl	80018c0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f8aa 	bl	80018c0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e21f      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b61      	ldr	r3, [pc, #388]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xdc>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f89a 	bl	80018c0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f896 	bl	80018c0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e20b      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x104>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d06f      	beq.n	800289e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d11c      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1d3      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4937      	ldr	r1, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	e03a      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x278>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff f843 	bl	80018c0 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff f83f 	bl	80018c0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1b4      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4925      	ldr	r1, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x278>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f822 	bl	80018c0 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002880:	f7ff f81e 	bl	80018c0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e193      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff f802 	bl	80018c0 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe fffe 	bl	80018c0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e173      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x234>
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe ffeb 	bl	80018c0 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	e00e      	b.n	800290c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe ffe7 	bl	80018c0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d907      	bls.n	800290c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e15c      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002900:	40023800 	.word	0x40023800
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b8a      	ldr	r3, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ea      	bne.n	80028ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8097 	beq.w	8002a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a7e      	ldr	r2, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a75      	ldr	r2, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7fe ffa7 	bl	80018c0 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7fe ffa3 	bl	80018c0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e118      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x31e>
 800299c:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x340>
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a60      	ldr	r2, [pc, #384]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029cc:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe ff68 	bl	80018c0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe ff64 	bl	80018c0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0d7      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCC_OscConfig+0x368>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe ff52 	bl	80018c0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe ff4e 	bl	80018c0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0c1      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80ad 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d145      	bne.n	8002afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ff22 	bl	80018c0 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe ff1e 	bl	80018c0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e093      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	071b      	lsls	r3, r3, #28
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fef3 	bl	80018c0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe feef 	bl	80018c0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e064      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x452>
 8002afc:	e05c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fedc 	bl	80018c0 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fed8 	bl	80018c0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x480>
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e040      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <HAL_RCC_OscConfig+0x538>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d129      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d122      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d119      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10f      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e033      	b.n	8002c42 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fd8e 	bl	8001710 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f90b 	bl	8002e18 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c20:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c30:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08a      	sub	sp, #40	; 0x28
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d17c      	bne.n	8002d60 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_USART_Transmit+0x28>
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e075      	b.n	8002d62 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_USART_Transmit+0x3a>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e06e      	b.n	8002d62 <HAL_USART_Transmit+0x118>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2212      	movs	r2, #18
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe fe11 	bl	80018c0 <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_USART_Transmit+0x7e>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e003      	b.n	8002cd0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002cd0:	e02a      	b.n	8002d28 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f844 	bl	8002d6a <USART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e03a      	b.n	8002d62 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cf      	bne.n	8002cd2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f814 	bl	8002d6a <USART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e00a      	b.n	8002d62 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002d7a:	e038      	b.n	8002dee <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d82:	d034      	beq.n	8002dee <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <USART_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	f7fe fd99 	bl	80018c0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d229      	bcs.n	8002dee <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da8:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0220 	bic.w	r2, r2, #32
 8002db8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e00f      	b.n	8002e0e <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d0b7      	beq.n	8002d7c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1c:	b0a5      	sub	sp, #148	; 0x94
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  uint32_t tmpreg = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f021 030c 	bic.w	r3, r1, #12
 8002e3c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e5a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e60:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002e62:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002e72:	431a      	orrs	r2, r3
 8002e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e8c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6959      	ldr	r1, [r3, #20]
 8002ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8002eec:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8002eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4bc8      	ldr	r3, [pc, #800]	; (8003218 <USART_SetConfig+0x400>)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d006      	beq.n	8002f08 <USART_SetConfig+0xf0>
 8002efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4bc6      	ldr	r3, [pc, #792]	; (800321c <USART_SetConfig+0x404>)
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f040 80c1 	bne.w	800308a <USART_SetConfig+0x272>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fa50 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8002f0c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f14:	461c      	mov	r4, r3
 8002f16:	f04f 0500 	mov.w	r5, #0
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f22:	415b      	adcs	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f2a:	1912      	adds	r2, r2, r4
 8002f2c:	eb45 0303 	adc.w	r3, r5, r3
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	00d9      	lsls	r1, r3, #3
 8002f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f3e:	00d0      	lsls	r0, r2, #3
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	eb12 0a04 	adds.w	sl, r2, r4
 8002f48:	eb43 0b05 	adc.w	fp, r3, r5
 8002f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	6539      	str	r1, [r7, #80]	; 0x50
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f64:	4650      	mov	r0, sl
 8002f66:	4659      	mov	r1, fp
 8002f68:	f7fd fe86 	bl	8000c78 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4bab      	ldr	r3, [pc, #684]	; (8003220 <USART_SetConfig+0x408>)
 8002f72:	fba3 2302 	umull	r2, r3, r3, r2
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	011e      	lsls	r6, r3, #4
 8002f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f7e:	461c      	mov	r4, r3
 8002f80:	f04f 0500 	mov.w	r5, #0
 8002f84:	4622      	mov	r2, r4
 8002f86:	462b      	mov	r3, r5
 8002f88:	1891      	adds	r1, r2, r2
 8002f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f8c:	415b      	adcs	r3, r3
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f94:	1912      	adds	r2, r2, r4
 8002f96:	eb45 0303 	adc.w	r3, r5, r3
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa8:	00d0      	lsls	r0, r2, #3
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	1911      	adds	r1, r2, r4
 8002fb0:	67b9      	str	r1, [r7, #120]	; 0x78
 8002fb2:	416b      	adcs	r3, r5
 8002fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	6439      	str	r1, [r7, #64]	; 0x40
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002fd2:	f7fd fe51 	bl	8000c78 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4b91      	ldr	r3, [pc, #580]	; (8003220 <USART_SetConfig+0x408>)
 8002fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a8c      	ldr	r2, [pc, #560]	; (8003220 <USART_SetConfig+0x408>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ffc:	441e      	add	r6, r3
 8002ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003002:	4618      	mov	r0, r3
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	1894      	adds	r4, r2, r2
 800300e:	63bc      	str	r4, [r7, #56]	; 0x38
 8003010:	415b      	adcs	r3, r3
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003018:	1812      	adds	r2, r2, r0
 800301a:	eb41 0303 	adc.w	r3, r1, r3
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	f04f 0500 	mov.w	r5, #0
 8003026:	00dd      	lsls	r5, r3, #3
 8003028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800302c:	00d4      	lsls	r4, r2, #3
 800302e:	4622      	mov	r2, r4
 8003030:	462b      	mov	r3, r5
 8003032:	1814      	adds	r4, r2, r0
 8003034:	673c      	str	r4, [r7, #112]	; 0x70
 8003036:	414b      	adcs	r3, r1
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
 800303a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	461a      	mov	r2, r3
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	1891      	adds	r1, r2, r2
 8003048:	6339      	str	r1, [r7, #48]	; 0x30
 800304a:	415b      	adcs	r3, r3
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
 800304e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003052:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003056:	f7fd fe0f 	bl	8000c78 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <USART_SetConfig+0x408>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a6b      	ldr	r2, [pc, #428]	; (8003220 <USART_SetConfig+0x408>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4432      	add	r2, r6
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	e0c0      	b.n	800320c <USART_SetConfig+0x3f4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800308a:	f7ff f97b 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 800308e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003096:	461c      	mov	r4, r3
 8003098:	f04f 0500 	mov.w	r5, #0
 800309c:	4622      	mov	r2, r4
 800309e:	462b      	mov	r3, r5
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80030a4:	415b      	adcs	r3, r3
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ac:	1912      	adds	r2, r2, r4
 80030ae:	eb45 0303 	adc.w	r3, r5, r3
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	00d9      	lsls	r1, r3, #3
 80030bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c0:	00d0      	lsls	r0, r2, #3
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	eb12 0804 	adds.w	r8, r2, r4
 80030ca:	eb43 0905 	adc.w	r9, r3, r5
 80030ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	6239      	str	r1, [r7, #32]
 80030de:	415b      	adcs	r3, r3
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030e6:	4640      	mov	r0, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	f7fd fdc5 	bl	8000c78 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4b4b      	ldr	r3, [pc, #300]	; (8003220 <USART_SetConfig+0x408>)
 80030f4:	fba3 2302 	umull	r2, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	011e      	lsls	r6, r3, #4
 80030fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003100:	461c      	mov	r4, r3
 8003102:	f04f 0500 	mov.w	r5, #0
 8003106:	4622      	mov	r2, r4
 8003108:	462b      	mov	r3, r5
 800310a:	1891      	adds	r1, r2, r2
 800310c:	61b9      	str	r1, [r7, #24]
 800310e:	415b      	adcs	r3, r3
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003116:	1912      	adds	r2, r2, r4
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	00d9      	lsls	r1, r3, #3
 8003126:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800312a:	00d0      	lsls	r0, r2, #3
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	1911      	adds	r1, r2, r4
 8003132:	66b9      	str	r1, [r7, #104]	; 0x68
 8003134:	416b      	adcs	r3, r5
 8003136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	415b      	adcs	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003154:	f7fd fd90 	bl	8000c78 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4b30      	ldr	r3, [pc, #192]	; (8003220 <USART_SetConfig+0x408>)
 800315e:	fba3 1302 	umull	r1, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2164      	movs	r1, #100	; 0x64
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	3332      	adds	r3, #50	; 0x32
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <USART_SetConfig+0x408>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800317e:	441e      	add	r6, r3
 8003180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003184:	4618      	mov	r0, r3
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	1894      	adds	r4, r2, r2
 8003190:	60bc      	str	r4, [r7, #8]
 8003192:	415b      	adcs	r3, r3
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800319a:	1812      	adds	r2, r2, r0
 800319c:	eb41 0303 	adc.w	r3, r1, r3
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	f04f 0500 	mov.w	r5, #0
 80031a8:	00dd      	lsls	r5, r3, #3
 80031aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ae:	00d4      	lsls	r4, r2, #3
 80031b0:	4622      	mov	r2, r4
 80031b2:	462b      	mov	r3, r5
 80031b4:	1814      	adds	r4, r2, r0
 80031b6:	663c      	str	r4, [r7, #96]	; 0x60
 80031b8:	414b      	adcs	r3, r1
 80031ba:	667b      	str	r3, [r7, #100]	; 0x64
 80031bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	6039      	str	r1, [r7, #0]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80031d8:	f7fd fd4e 	bl	8000c78 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <USART_SetConfig+0x408>)
 80031e2:	fba3 1302 	umull	r1, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <USART_SetConfig+0x408>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 0207 	and.w	r2, r3, #7
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4432      	add	r2, r6
 8003208:	609a      	str	r2, [r3, #8]
  }
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	3794      	adds	r7, #148	; 0x94
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003216:	bf00      	nop
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	51eb851f 	.word	0x51eb851f

08003224 <__errno>:
 8003224:	4b01      	ldr	r3, [pc, #4]	; (800322c <__errno+0x8>)
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	2000000c 	.word	0x2000000c

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4d0d      	ldr	r5, [pc, #52]	; (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2600      	movs	r6, #0
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4d0b      	ldr	r5, [pc, #44]	; (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	; (8003274 <__libc_init_array+0x44>)
 8003244:	f003 faf0 	bl	8006828 <_init>
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2600      	movs	r6, #0
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	08006cac 	.word	0x08006cac
 800326c:	08006cac 	.word	0x08006cac
 8003270:	08006cac 	.word	0x08006cac
 8003274:	08006cb0 	.word	0x08006cb0

08003278 <memcpy>:
 8003278:	440a      	add	r2, r1
 800327a:	4291      	cmp	r1, r2
 800327c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003280:	d100      	bne.n	8003284 <memcpy+0xc>
 8003282:	4770      	bx	lr
 8003284:	b510      	push	{r4, lr}
 8003286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800328a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800328e:	4291      	cmp	r1, r2
 8003290:	d1f9      	bne.n	8003286 <memcpy+0xe>
 8003292:	bd10      	pop	{r4, pc}

08003294 <memset>:
 8003294:	4402      	add	r2, r0
 8003296:	4603      	mov	r3, r0
 8003298:	4293      	cmp	r3, r2
 800329a:	d100      	bne.n	800329e <memset+0xa>
 800329c:	4770      	bx	lr
 800329e:	f803 1b01 	strb.w	r1, [r3], #1
 80032a2:	e7f9      	b.n	8003298 <memset+0x4>

080032a4 <_scanf_float>:
 80032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a8:	b087      	sub	sp, #28
 80032aa:	4617      	mov	r7, r2
 80032ac:	9303      	str	r3, [sp, #12]
 80032ae:	688b      	ldr	r3, [r1, #8]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80032b6:	bf83      	ittte	hi
 80032b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80032bc:	195b      	addhi	r3, r3, r5
 80032be:	9302      	strhi	r3, [sp, #8]
 80032c0:	2300      	movls	r3, #0
 80032c2:	bf86      	itte	hi
 80032c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80032c8:	608b      	strhi	r3, [r1, #8]
 80032ca:	9302      	strls	r3, [sp, #8]
 80032cc:	680b      	ldr	r3, [r1, #0]
 80032ce:	468b      	mov	fp, r1
 80032d0:	2500      	movs	r5, #0
 80032d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80032d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80032da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80032de:	4680      	mov	r8, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	465e      	mov	r6, fp
 80032e4:	46aa      	mov	sl, r5
 80032e6:	46a9      	mov	r9, r5
 80032e8:	9501      	str	r5, [sp, #4]
 80032ea:	68a2      	ldr	r2, [r4, #8]
 80032ec:	b152      	cbz	r2, 8003304 <_scanf_float+0x60>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b4e      	cmp	r3, #78	; 0x4e
 80032f4:	d864      	bhi.n	80033c0 <_scanf_float+0x11c>
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d83c      	bhi.n	8003374 <_scanf_float+0xd0>
 80032fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80032fe:	b2c8      	uxtb	r0, r1
 8003300:	280e      	cmp	r0, #14
 8003302:	d93a      	bls.n	800337a <_scanf_float+0xd6>
 8003304:	f1b9 0f00 	cmp.w	r9, #0
 8003308:	d003      	beq.n	8003312 <_scanf_float+0x6e>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003316:	f1ba 0f01 	cmp.w	sl, #1
 800331a:	f200 8113 	bhi.w	8003544 <_scanf_float+0x2a0>
 800331e:	455e      	cmp	r6, fp
 8003320:	f200 8105 	bhi.w	800352e <_scanf_float+0x28a>
 8003324:	2501      	movs	r5, #1
 8003326:	4628      	mov	r0, r5
 8003328:	b007      	add	sp, #28
 800332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003332:	2a0d      	cmp	r2, #13
 8003334:	d8e6      	bhi.n	8003304 <_scanf_float+0x60>
 8003336:	a101      	add	r1, pc, #4	; (adr r1, 800333c <_scanf_float+0x98>)
 8003338:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800333c:	0800347b 	.word	0x0800347b
 8003340:	08003305 	.word	0x08003305
 8003344:	08003305 	.word	0x08003305
 8003348:	08003305 	.word	0x08003305
 800334c:	080034db 	.word	0x080034db
 8003350:	080034b3 	.word	0x080034b3
 8003354:	08003305 	.word	0x08003305
 8003358:	08003305 	.word	0x08003305
 800335c:	08003489 	.word	0x08003489
 8003360:	08003305 	.word	0x08003305
 8003364:	08003305 	.word	0x08003305
 8003368:	08003305 	.word	0x08003305
 800336c:	08003305 	.word	0x08003305
 8003370:	08003441 	.word	0x08003441
 8003374:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003378:	e7db      	b.n	8003332 <_scanf_float+0x8e>
 800337a:	290e      	cmp	r1, #14
 800337c:	d8c2      	bhi.n	8003304 <_scanf_float+0x60>
 800337e:	a001      	add	r0, pc, #4	; (adr r0, 8003384 <_scanf_float+0xe0>)
 8003380:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003384:	08003433 	.word	0x08003433
 8003388:	08003305 	.word	0x08003305
 800338c:	08003433 	.word	0x08003433
 8003390:	080034c7 	.word	0x080034c7
 8003394:	08003305 	.word	0x08003305
 8003398:	080033e1 	.word	0x080033e1
 800339c:	0800341d 	.word	0x0800341d
 80033a0:	0800341d 	.word	0x0800341d
 80033a4:	0800341d 	.word	0x0800341d
 80033a8:	0800341d 	.word	0x0800341d
 80033ac:	0800341d 	.word	0x0800341d
 80033b0:	0800341d 	.word	0x0800341d
 80033b4:	0800341d 	.word	0x0800341d
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	0800341d 	.word	0x0800341d
 80033c0:	2b6e      	cmp	r3, #110	; 0x6e
 80033c2:	d809      	bhi.n	80033d8 <_scanf_float+0x134>
 80033c4:	2b60      	cmp	r3, #96	; 0x60
 80033c6:	d8b2      	bhi.n	800332e <_scanf_float+0x8a>
 80033c8:	2b54      	cmp	r3, #84	; 0x54
 80033ca:	d077      	beq.n	80034bc <_scanf_float+0x218>
 80033cc:	2b59      	cmp	r3, #89	; 0x59
 80033ce:	d199      	bne.n	8003304 <_scanf_float+0x60>
 80033d0:	2d07      	cmp	r5, #7
 80033d2:	d197      	bne.n	8003304 <_scanf_float+0x60>
 80033d4:	2508      	movs	r5, #8
 80033d6:	e029      	b.n	800342c <_scanf_float+0x188>
 80033d8:	2b74      	cmp	r3, #116	; 0x74
 80033da:	d06f      	beq.n	80034bc <_scanf_float+0x218>
 80033dc:	2b79      	cmp	r3, #121	; 0x79
 80033de:	e7f6      	b.n	80033ce <_scanf_float+0x12a>
 80033e0:	6821      	ldr	r1, [r4, #0]
 80033e2:	05c8      	lsls	r0, r1, #23
 80033e4:	d51a      	bpl.n	800341c <_scanf_float+0x178>
 80033e6:	9b02      	ldr	r3, [sp, #8]
 80033e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80033ec:	6021      	str	r1, [r4, #0]
 80033ee:	f109 0901 	add.w	r9, r9, #1
 80033f2:	b11b      	cbz	r3, 80033fc <_scanf_float+0x158>
 80033f4:	3b01      	subs	r3, #1
 80033f6:	3201      	adds	r2, #1
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	60a2      	str	r2, [r4, #8]
 80033fc:	68a3      	ldr	r3, [r4, #8]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60a3      	str	r3, [r4, #8]
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	3301      	adds	r3, #1
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	f340 8084 	ble.w	800351c <_scanf_float+0x278>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	e766      	b.n	80032ea <_scanf_float+0x46>
 800341c:	eb1a 0f05 	cmn.w	sl, r5
 8003420:	f47f af70 	bne.w	8003304 <_scanf_float+0x60>
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800342a:	6022      	str	r2, [r4, #0]
 800342c:	f806 3b01 	strb.w	r3, [r6], #1
 8003430:	e7e4      	b.n	80033fc <_scanf_float+0x158>
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	0610      	lsls	r0, r2, #24
 8003436:	f57f af65 	bpl.w	8003304 <_scanf_float+0x60>
 800343a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343e:	e7f4      	b.n	800342a <_scanf_float+0x186>
 8003440:	f1ba 0f00 	cmp.w	sl, #0
 8003444:	d10e      	bne.n	8003464 <_scanf_float+0x1c0>
 8003446:	f1b9 0f00 	cmp.w	r9, #0
 800344a:	d10e      	bne.n	800346a <_scanf_float+0x1c6>
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003452:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003456:	d108      	bne.n	800346a <_scanf_float+0x1c6>
 8003458:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800345c:	6022      	str	r2, [r4, #0]
 800345e:	f04f 0a01 	mov.w	sl, #1
 8003462:	e7e3      	b.n	800342c <_scanf_float+0x188>
 8003464:	f1ba 0f02 	cmp.w	sl, #2
 8003468:	d055      	beq.n	8003516 <_scanf_float+0x272>
 800346a:	2d01      	cmp	r5, #1
 800346c:	d002      	beq.n	8003474 <_scanf_float+0x1d0>
 800346e:	2d04      	cmp	r5, #4
 8003470:	f47f af48 	bne.w	8003304 <_scanf_float+0x60>
 8003474:	3501      	adds	r5, #1
 8003476:	b2ed      	uxtb	r5, r5
 8003478:	e7d8      	b.n	800342c <_scanf_float+0x188>
 800347a:	f1ba 0f01 	cmp.w	sl, #1
 800347e:	f47f af41 	bne.w	8003304 <_scanf_float+0x60>
 8003482:	f04f 0a02 	mov.w	sl, #2
 8003486:	e7d1      	b.n	800342c <_scanf_float+0x188>
 8003488:	b97d      	cbnz	r5, 80034aa <_scanf_float+0x206>
 800348a:	f1b9 0f00 	cmp.w	r9, #0
 800348e:	f47f af3c 	bne.w	800330a <_scanf_float+0x66>
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003498:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800349c:	f47f af39 	bne.w	8003312 <_scanf_float+0x6e>
 80034a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	2501      	movs	r5, #1
 80034a8:	e7c0      	b.n	800342c <_scanf_float+0x188>
 80034aa:	2d03      	cmp	r5, #3
 80034ac:	d0e2      	beq.n	8003474 <_scanf_float+0x1d0>
 80034ae:	2d05      	cmp	r5, #5
 80034b0:	e7de      	b.n	8003470 <_scanf_float+0x1cc>
 80034b2:	2d02      	cmp	r5, #2
 80034b4:	f47f af26 	bne.w	8003304 <_scanf_float+0x60>
 80034b8:	2503      	movs	r5, #3
 80034ba:	e7b7      	b.n	800342c <_scanf_float+0x188>
 80034bc:	2d06      	cmp	r5, #6
 80034be:	f47f af21 	bne.w	8003304 <_scanf_float+0x60>
 80034c2:	2507      	movs	r5, #7
 80034c4:	e7b2      	b.n	800342c <_scanf_float+0x188>
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	0591      	lsls	r1, r2, #22
 80034ca:	f57f af1b 	bpl.w	8003304 <_scanf_float+0x60>
 80034ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80034d8:	e7a8      	b.n	800342c <_scanf_float+0x188>
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80034e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80034e4:	d006      	beq.n	80034f4 <_scanf_float+0x250>
 80034e6:	0550      	lsls	r0, r2, #21
 80034e8:	f57f af0c 	bpl.w	8003304 <_scanf_float+0x60>
 80034ec:	f1b9 0f00 	cmp.w	r9, #0
 80034f0:	f43f af0f 	beq.w	8003312 <_scanf_float+0x6e>
 80034f4:	0591      	lsls	r1, r2, #22
 80034f6:	bf58      	it	pl
 80034f8:	9901      	ldrpl	r1, [sp, #4]
 80034fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80034fe:	bf58      	it	pl
 8003500:	eba9 0101 	subpl.w	r1, r9, r1
 8003504:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003508:	bf58      	it	pl
 800350a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	f04f 0900 	mov.w	r9, #0
 8003514:	e78a      	b.n	800342c <_scanf_float+0x188>
 8003516:	f04f 0a03 	mov.w	sl, #3
 800351a:	e787      	b.n	800342c <_scanf_float+0x188>
 800351c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003520:	4639      	mov	r1, r7
 8003522:	4640      	mov	r0, r8
 8003524:	4798      	blx	r3
 8003526:	2800      	cmp	r0, #0
 8003528:	f43f aedf 	beq.w	80032ea <_scanf_float+0x46>
 800352c:	e6ea      	b.n	8003304 <_scanf_float+0x60>
 800352e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003536:	463a      	mov	r2, r7
 8003538:	4640      	mov	r0, r8
 800353a:	4798      	blx	r3
 800353c:	6923      	ldr	r3, [r4, #16]
 800353e:	3b01      	subs	r3, #1
 8003540:	6123      	str	r3, [r4, #16]
 8003542:	e6ec      	b.n	800331e <_scanf_float+0x7a>
 8003544:	1e6b      	subs	r3, r5, #1
 8003546:	2b06      	cmp	r3, #6
 8003548:	d825      	bhi.n	8003596 <_scanf_float+0x2f2>
 800354a:	2d02      	cmp	r5, #2
 800354c:	d836      	bhi.n	80035bc <_scanf_float+0x318>
 800354e:	455e      	cmp	r6, fp
 8003550:	f67f aee8 	bls.w	8003324 <_scanf_float+0x80>
 8003554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003558:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800355c:	463a      	mov	r2, r7
 800355e:	4640      	mov	r0, r8
 8003560:	4798      	blx	r3
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	3b01      	subs	r3, #1
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	e7f1      	b.n	800354e <_scanf_float+0x2aa>
 800356a:	9802      	ldr	r0, [sp, #8]
 800356c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003570:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003574:	9002      	str	r0, [sp, #8]
 8003576:	463a      	mov	r2, r7
 8003578:	4640      	mov	r0, r8
 800357a:	4798      	blx	r3
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	3b01      	subs	r3, #1
 8003580:	6123      	str	r3, [r4, #16]
 8003582:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003586:	fa5f fa8a 	uxtb.w	sl, sl
 800358a:	f1ba 0f02 	cmp.w	sl, #2
 800358e:	d1ec      	bne.n	800356a <_scanf_float+0x2c6>
 8003590:	3d03      	subs	r5, #3
 8003592:	b2ed      	uxtb	r5, r5
 8003594:	1b76      	subs	r6, r6, r5
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	05da      	lsls	r2, r3, #23
 800359a:	d52f      	bpl.n	80035fc <_scanf_float+0x358>
 800359c:	055b      	lsls	r3, r3, #21
 800359e:	d510      	bpl.n	80035c2 <_scanf_float+0x31e>
 80035a0:	455e      	cmp	r6, fp
 80035a2:	f67f aebf 	bls.w	8003324 <_scanf_float+0x80>
 80035a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035ae:	463a      	mov	r2, r7
 80035b0:	4640      	mov	r0, r8
 80035b2:	4798      	blx	r3
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	e7f1      	b.n	80035a0 <_scanf_float+0x2fc>
 80035bc:	46aa      	mov	sl, r5
 80035be:	9602      	str	r6, [sp, #8]
 80035c0:	e7df      	b.n	8003582 <_scanf_float+0x2de>
 80035c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	2965      	cmp	r1, #101	; 0x65
 80035ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80035ce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80035d2:	6123      	str	r3, [r4, #16]
 80035d4:	d00c      	beq.n	80035f0 <_scanf_float+0x34c>
 80035d6:	2945      	cmp	r1, #69	; 0x45
 80035d8:	d00a      	beq.n	80035f0 <_scanf_float+0x34c>
 80035da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035de:	463a      	mov	r2, r7
 80035e0:	4640      	mov	r0, r8
 80035e2:	4798      	blx	r3
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	1eb5      	subs	r5, r6, #2
 80035ee:	6123      	str	r3, [r4, #16]
 80035f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035f4:	463a      	mov	r2, r7
 80035f6:	4640      	mov	r0, r8
 80035f8:	4798      	blx	r3
 80035fa:	462e      	mov	r6, r5
 80035fc:	6825      	ldr	r5, [r4, #0]
 80035fe:	f015 0510 	ands.w	r5, r5, #16
 8003602:	d158      	bne.n	80036b6 <_scanf_float+0x412>
 8003604:	7035      	strb	r5, [r6, #0]
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800360c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003610:	d11c      	bne.n	800364c <_scanf_float+0x3a8>
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	454b      	cmp	r3, r9
 8003616:	eba3 0209 	sub.w	r2, r3, r9
 800361a:	d124      	bne.n	8003666 <_scanf_float+0x3c2>
 800361c:	2200      	movs	r2, #0
 800361e:	4659      	mov	r1, fp
 8003620:	4640      	mov	r0, r8
 8003622:	f000 fe9b 	bl	800435c <_strtod_r>
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	6821      	ldr	r1, [r4, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f011 0f02 	tst.w	r1, #2
 8003630:	ec57 6b10 	vmov	r6, r7, d0
 8003634:	f103 0204 	add.w	r2, r3, #4
 8003638:	d020      	beq.n	800367c <_scanf_float+0x3d8>
 800363a:	9903      	ldr	r1, [sp, #12]
 800363c:	600a      	str	r2, [r1, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e9c3 6700 	strd	r6, r7, [r3]
 8003644:	68e3      	ldr	r3, [r4, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60e3      	str	r3, [r4, #12]
 800364a:	e66c      	b.n	8003326 <_scanf_float+0x82>
 800364c:	9b04      	ldr	r3, [sp, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0e4      	beq.n	800361c <_scanf_float+0x378>
 8003652:	9905      	ldr	r1, [sp, #20]
 8003654:	230a      	movs	r3, #10
 8003656:	462a      	mov	r2, r5
 8003658:	3101      	adds	r1, #1
 800365a:	4640      	mov	r0, r8
 800365c:	f000 ff08 	bl	8004470 <_strtol_r>
 8003660:	9b04      	ldr	r3, [sp, #16]
 8003662:	9e05      	ldr	r6, [sp, #20]
 8003664:	1ac2      	subs	r2, r0, r3
 8003666:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800366a:	429e      	cmp	r6, r3
 800366c:	bf28      	it	cs
 800366e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003672:	4912      	ldr	r1, [pc, #72]	; (80036bc <_scanf_float+0x418>)
 8003674:	4630      	mov	r0, r6
 8003676:	f000 f82b 	bl	80036d0 <siprintf>
 800367a:	e7cf      	b.n	800361c <_scanf_float+0x378>
 800367c:	f011 0f04 	tst.w	r1, #4
 8003680:	9903      	ldr	r1, [sp, #12]
 8003682:	600a      	str	r2, [r1, #0]
 8003684:	d1db      	bne.n	800363e <_scanf_float+0x39a>
 8003686:	f8d3 8000 	ldr.w	r8, [r3]
 800368a:	ee10 2a10 	vmov	r2, s0
 800368e:	ee10 0a10 	vmov	r0, s0
 8003692:	463b      	mov	r3, r7
 8003694:	4639      	mov	r1, r7
 8003696:	f7fd fa69 	bl	8000b6c <__aeabi_dcmpun>
 800369a:	b128      	cbz	r0, 80036a8 <_scanf_float+0x404>
 800369c:	4808      	ldr	r0, [pc, #32]	; (80036c0 <_scanf_float+0x41c>)
 800369e:	f000 f811 	bl	80036c4 <nanf>
 80036a2:	ed88 0a00 	vstr	s0, [r8]
 80036a6:	e7cd      	b.n	8003644 <_scanf_float+0x3a0>
 80036a8:	4630      	mov	r0, r6
 80036aa:	4639      	mov	r1, r7
 80036ac:	f7fd fa94 	bl	8000bd8 <__aeabi_d2f>
 80036b0:	f8c8 0000 	str.w	r0, [r8]
 80036b4:	e7c6      	b.n	8003644 <_scanf_float+0x3a0>
 80036b6:	2500      	movs	r5, #0
 80036b8:	e635      	b.n	8003326 <_scanf_float+0x82>
 80036ba:	bf00      	nop
 80036bc:	0800686c 	.word	0x0800686c
 80036c0:	08006c42 	.word	0x08006c42

080036c4 <nanf>:
 80036c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80036cc <nanf+0x8>
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	7fc00000 	.word	0x7fc00000

080036d0 <siprintf>:
 80036d0:	b40e      	push	{r1, r2, r3}
 80036d2:	b500      	push	{lr}
 80036d4:	b09c      	sub	sp, #112	; 0x70
 80036d6:	ab1d      	add	r3, sp, #116	; 0x74
 80036d8:	9002      	str	r0, [sp, #8]
 80036da:	9006      	str	r0, [sp, #24]
 80036dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036e0:	4809      	ldr	r0, [pc, #36]	; (8003708 <siprintf+0x38>)
 80036e2:	9107      	str	r1, [sp, #28]
 80036e4:	9104      	str	r1, [sp, #16]
 80036e6:	4909      	ldr	r1, [pc, #36]	; (800370c <siprintf+0x3c>)
 80036e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ec:	9105      	str	r1, [sp, #20]
 80036ee:	6800      	ldr	r0, [r0, #0]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	a902      	add	r1, sp, #8
 80036f4:	f001 ffc0 	bl	8005678 <_svfiprintf_r>
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	b01c      	add	sp, #112	; 0x70
 8003700:	f85d eb04 	ldr.w	lr, [sp], #4
 8003704:	b003      	add	sp, #12
 8003706:	4770      	bx	lr
 8003708:	2000000c 	.word	0x2000000c
 800370c:	ffff0208 	.word	0xffff0208

08003710 <sulp>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4604      	mov	r4, r0
 8003714:	460d      	mov	r5, r1
 8003716:	ec45 4b10 	vmov	d0, r4, r5
 800371a:	4616      	mov	r6, r2
 800371c:	f001 fd98 	bl	8005250 <__ulp>
 8003720:	ec51 0b10 	vmov	r0, r1, d0
 8003724:	b17e      	cbz	r6, 8003746 <sulp+0x36>
 8003726:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800372a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800372e:	2b00      	cmp	r3, #0
 8003730:	dd09      	ble.n	8003746 <sulp+0x36>
 8003732:	051b      	lsls	r3, r3, #20
 8003734:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003738:	2400      	movs	r4, #0
 800373a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800373e:	4622      	mov	r2, r4
 8003740:	462b      	mov	r3, r5
 8003742:	f7fc ff79 	bl	8000638 <__aeabi_dmul>
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <_strtod_l>:
 8003748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	b0a3      	sub	sp, #140	; 0x8c
 800374e:	461f      	mov	r7, r3
 8003750:	2300      	movs	r3, #0
 8003752:	931e      	str	r3, [sp, #120]	; 0x78
 8003754:	4ba4      	ldr	r3, [pc, #656]	; (80039e8 <_strtod_l+0x2a0>)
 8003756:	9219      	str	r2, [sp, #100]	; 0x64
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9307      	str	r3, [sp, #28]
 800375c:	4604      	mov	r4, r0
 800375e:	4618      	mov	r0, r3
 8003760:	4688      	mov	r8, r1
 8003762:	f7fc fd55 	bl	8000210 <strlen>
 8003766:	f04f 0a00 	mov.w	sl, #0
 800376a:	4605      	mov	r5, r0
 800376c:	f04f 0b00 	mov.w	fp, #0
 8003770:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	2a2b      	cmp	r2, #43	; 0x2b
 800377a:	d04c      	beq.n	8003816 <_strtod_l+0xce>
 800377c:	d839      	bhi.n	80037f2 <_strtod_l+0xaa>
 800377e:	2a0d      	cmp	r2, #13
 8003780:	d832      	bhi.n	80037e8 <_strtod_l+0xa0>
 8003782:	2a08      	cmp	r2, #8
 8003784:	d832      	bhi.n	80037ec <_strtod_l+0xa4>
 8003786:	2a00      	cmp	r2, #0
 8003788:	d03c      	beq.n	8003804 <_strtod_l+0xbc>
 800378a:	2300      	movs	r3, #0
 800378c:	930e      	str	r3, [sp, #56]	; 0x38
 800378e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003790:	7833      	ldrb	r3, [r6, #0]
 8003792:	2b30      	cmp	r3, #48	; 0x30
 8003794:	f040 80b4 	bne.w	8003900 <_strtod_l+0x1b8>
 8003798:	7873      	ldrb	r3, [r6, #1]
 800379a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800379e:	2b58      	cmp	r3, #88	; 0x58
 80037a0:	d16c      	bne.n	800387c <_strtod_l+0x134>
 80037a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	ab1e      	add	r3, sp, #120	; 0x78
 80037a8:	9702      	str	r7, [sp, #8]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4a8f      	ldr	r2, [pc, #572]	; (80039ec <_strtod_l+0x2a4>)
 80037ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80037b0:	a91d      	add	r1, sp, #116	; 0x74
 80037b2:	4620      	mov	r0, r4
 80037b4:	f000 fec6 	bl	8004544 <__gethex>
 80037b8:	f010 0707 	ands.w	r7, r0, #7
 80037bc:	4605      	mov	r5, r0
 80037be:	d005      	beq.n	80037cc <_strtod_l+0x84>
 80037c0:	2f06      	cmp	r7, #6
 80037c2:	d12a      	bne.n	800381a <_strtod_l+0xd2>
 80037c4:	3601      	adds	r6, #1
 80037c6:	2300      	movs	r3, #0
 80037c8:	961d      	str	r6, [sp, #116]	; 0x74
 80037ca:	930e      	str	r3, [sp, #56]	; 0x38
 80037cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 8596 	bne.w	8004300 <_strtod_l+0xbb8>
 80037d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037d6:	b1db      	cbz	r3, 8003810 <_strtod_l+0xc8>
 80037d8:	4652      	mov	r2, sl
 80037da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80037de:	ec43 2b10 	vmov	d0, r2, r3
 80037e2:	b023      	add	sp, #140	; 0x8c
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	2a20      	cmp	r2, #32
 80037ea:	d1ce      	bne.n	800378a <_strtod_l+0x42>
 80037ec:	3301      	adds	r3, #1
 80037ee:	931d      	str	r3, [sp, #116]	; 0x74
 80037f0:	e7c0      	b.n	8003774 <_strtod_l+0x2c>
 80037f2:	2a2d      	cmp	r2, #45	; 0x2d
 80037f4:	d1c9      	bne.n	800378a <_strtod_l+0x42>
 80037f6:	2201      	movs	r2, #1
 80037f8:	920e      	str	r2, [sp, #56]	; 0x38
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	921d      	str	r2, [sp, #116]	; 0x74
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1c4      	bne.n	800378e <_strtod_l+0x46>
 8003804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003806:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8576 	bne.w	80042fc <_strtod_l+0xbb4>
 8003810:	4652      	mov	r2, sl
 8003812:	465b      	mov	r3, fp
 8003814:	e7e3      	b.n	80037de <_strtod_l+0x96>
 8003816:	2200      	movs	r2, #0
 8003818:	e7ee      	b.n	80037f8 <_strtod_l+0xb0>
 800381a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800381c:	b13a      	cbz	r2, 800382e <_strtod_l+0xe6>
 800381e:	2135      	movs	r1, #53	; 0x35
 8003820:	a820      	add	r0, sp, #128	; 0x80
 8003822:	f001 fe20 	bl	8005466 <__copybits>
 8003826:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003828:	4620      	mov	r0, r4
 800382a:	f001 f9e5 	bl	8004bf8 <_Bfree>
 800382e:	3f01      	subs	r7, #1
 8003830:	2f05      	cmp	r7, #5
 8003832:	d807      	bhi.n	8003844 <_strtod_l+0xfc>
 8003834:	e8df f007 	tbb	[pc, r7]
 8003838:	1d180b0e 	.word	0x1d180b0e
 800383c:	030e      	.short	0x030e
 800383e:	f04f 0b00 	mov.w	fp, #0
 8003842:	46da      	mov	sl, fp
 8003844:	0728      	lsls	r0, r5, #28
 8003846:	d5c1      	bpl.n	80037cc <_strtod_l+0x84>
 8003848:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800384c:	e7be      	b.n	80037cc <_strtod_l+0x84>
 800384e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8003852:	e7f7      	b.n	8003844 <_strtod_l+0xfc>
 8003854:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003858:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800385a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800385e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003866:	e7ed      	b.n	8003844 <_strtod_l+0xfc>
 8003868:	f8df b184 	ldr.w	fp, [pc, #388]	; 80039f0 <_strtod_l+0x2a8>
 800386c:	f04f 0a00 	mov.w	sl, #0
 8003870:	e7e8      	b.n	8003844 <_strtod_l+0xfc>
 8003872:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003876:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800387a:	e7e3      	b.n	8003844 <_strtod_l+0xfc>
 800387c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	921d      	str	r2, [sp, #116]	; 0x74
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d0f9      	beq.n	800387c <_strtod_l+0x134>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d09f      	beq.n	80037cc <_strtod_l+0x84>
 800388c:	2301      	movs	r3, #1
 800388e:	f04f 0900 	mov.w	r9, #0
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003896:	930a      	str	r3, [sp, #40]	; 0x28
 8003898:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800389c:	464f      	mov	r7, r9
 800389e:	220a      	movs	r2, #10
 80038a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80038a2:	7806      	ldrb	r6, [r0, #0]
 80038a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	2909      	cmp	r1, #9
 80038ac:	d92a      	bls.n	8003904 <_strtod_l+0x1bc>
 80038ae:	9907      	ldr	r1, [sp, #28]
 80038b0:	462a      	mov	r2, r5
 80038b2:	f002 f98d 	bl	8005bd0 <strncmp>
 80038b6:	b398      	cbz	r0, 8003920 <_strtod_l+0x1d8>
 80038b8:	2000      	movs	r0, #0
 80038ba:	4633      	mov	r3, r6
 80038bc:	463d      	mov	r5, r7
 80038be:	9007      	str	r0, [sp, #28]
 80038c0:	4602      	mov	r2, r0
 80038c2:	2b65      	cmp	r3, #101	; 0x65
 80038c4:	d001      	beq.n	80038ca <_strtod_l+0x182>
 80038c6:	2b45      	cmp	r3, #69	; 0x45
 80038c8:	d118      	bne.n	80038fc <_strtod_l+0x1b4>
 80038ca:	b91d      	cbnz	r5, 80038d4 <_strtod_l+0x18c>
 80038cc:	9b04      	ldr	r3, [sp, #16]
 80038ce:	4303      	orrs	r3, r0
 80038d0:	d098      	beq.n	8003804 <_strtod_l+0xbc>
 80038d2:	2500      	movs	r5, #0
 80038d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80038d8:	f108 0301 	add.w	r3, r8, #1
 80038dc:	931d      	str	r3, [sp, #116]	; 0x74
 80038de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80038e2:	2b2b      	cmp	r3, #43	; 0x2b
 80038e4:	d075      	beq.n	80039d2 <_strtod_l+0x28a>
 80038e6:	2b2d      	cmp	r3, #45	; 0x2d
 80038e8:	d07b      	beq.n	80039e2 <_strtod_l+0x29a>
 80038ea:	f04f 0c00 	mov.w	ip, #0
 80038ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80038f2:	2909      	cmp	r1, #9
 80038f4:	f240 8082 	bls.w	80039fc <_strtod_l+0x2b4>
 80038f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80038fc:	2600      	movs	r6, #0
 80038fe:	e09d      	b.n	8003a3c <_strtod_l+0x2f4>
 8003900:	2300      	movs	r3, #0
 8003902:	e7c4      	b.n	800388e <_strtod_l+0x146>
 8003904:	2f08      	cmp	r7, #8
 8003906:	bfd8      	it	le
 8003908:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800390a:	f100 0001 	add.w	r0, r0, #1
 800390e:	bfda      	itte	le
 8003910:	fb02 3301 	mlale	r3, r2, r1, r3
 8003914:	9309      	strle	r3, [sp, #36]	; 0x24
 8003916:	fb02 3909 	mlagt	r9, r2, r9, r3
 800391a:	3701      	adds	r7, #1
 800391c:	901d      	str	r0, [sp, #116]	; 0x74
 800391e:	e7bf      	b.n	80038a0 <_strtod_l+0x158>
 8003920:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003922:	195a      	adds	r2, r3, r5
 8003924:	921d      	str	r2, [sp, #116]	; 0x74
 8003926:	5d5b      	ldrb	r3, [r3, r5]
 8003928:	2f00      	cmp	r7, #0
 800392a:	d037      	beq.n	800399c <_strtod_l+0x254>
 800392c:	9007      	str	r0, [sp, #28]
 800392e:	463d      	mov	r5, r7
 8003930:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003934:	2a09      	cmp	r2, #9
 8003936:	d912      	bls.n	800395e <_strtod_l+0x216>
 8003938:	2201      	movs	r2, #1
 800393a:	e7c2      	b.n	80038c2 <_strtod_l+0x17a>
 800393c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	921d      	str	r2, [sp, #116]	; 0x74
 8003942:	785b      	ldrb	r3, [r3, #1]
 8003944:	3001      	adds	r0, #1
 8003946:	2b30      	cmp	r3, #48	; 0x30
 8003948:	d0f8      	beq.n	800393c <_strtod_l+0x1f4>
 800394a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800394e:	2a08      	cmp	r2, #8
 8003950:	f200 84db 	bhi.w	800430a <_strtod_l+0xbc2>
 8003954:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003956:	9007      	str	r0, [sp, #28]
 8003958:	2000      	movs	r0, #0
 800395a:	920a      	str	r2, [sp, #40]	; 0x28
 800395c:	4605      	mov	r5, r0
 800395e:	3b30      	subs	r3, #48	; 0x30
 8003960:	f100 0201 	add.w	r2, r0, #1
 8003964:	d014      	beq.n	8003990 <_strtod_l+0x248>
 8003966:	9907      	ldr	r1, [sp, #28]
 8003968:	4411      	add	r1, r2
 800396a:	9107      	str	r1, [sp, #28]
 800396c:	462a      	mov	r2, r5
 800396e:	eb00 0e05 	add.w	lr, r0, r5
 8003972:	210a      	movs	r1, #10
 8003974:	4572      	cmp	r2, lr
 8003976:	d113      	bne.n	80039a0 <_strtod_l+0x258>
 8003978:	182a      	adds	r2, r5, r0
 800397a:	2a08      	cmp	r2, #8
 800397c:	f105 0501 	add.w	r5, r5, #1
 8003980:	4405      	add	r5, r0
 8003982:	dc1c      	bgt.n	80039be <_strtod_l+0x276>
 8003984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003986:	220a      	movs	r2, #10
 8003988:	fb02 3301 	mla	r3, r2, r1, r3
 800398c:	9309      	str	r3, [sp, #36]	; 0x24
 800398e:	2200      	movs	r2, #0
 8003990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	911d      	str	r1, [sp, #116]	; 0x74
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	4610      	mov	r0, r2
 800399a:	e7c9      	b.n	8003930 <_strtod_l+0x1e8>
 800399c:	4638      	mov	r0, r7
 800399e:	e7d2      	b.n	8003946 <_strtod_l+0x1fe>
 80039a0:	2a08      	cmp	r2, #8
 80039a2:	dc04      	bgt.n	80039ae <_strtod_l+0x266>
 80039a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80039a6:	434e      	muls	r6, r1
 80039a8:	9609      	str	r6, [sp, #36]	; 0x24
 80039aa:	3201      	adds	r2, #1
 80039ac:	e7e2      	b.n	8003974 <_strtod_l+0x22c>
 80039ae:	f102 0c01 	add.w	ip, r2, #1
 80039b2:	f1bc 0f10 	cmp.w	ip, #16
 80039b6:	bfd8      	it	le
 80039b8:	fb01 f909 	mulle.w	r9, r1, r9
 80039bc:	e7f5      	b.n	80039aa <_strtod_l+0x262>
 80039be:	2d10      	cmp	r5, #16
 80039c0:	bfdc      	itt	le
 80039c2:	220a      	movle	r2, #10
 80039c4:	fb02 3909 	mlale	r9, r2, r9, r3
 80039c8:	e7e1      	b.n	800398e <_strtod_l+0x246>
 80039ca:	2300      	movs	r3, #0
 80039cc:	9307      	str	r3, [sp, #28]
 80039ce:	2201      	movs	r2, #1
 80039d0:	e77c      	b.n	80038cc <_strtod_l+0x184>
 80039d2:	f04f 0c00 	mov.w	ip, #0
 80039d6:	f108 0302 	add.w	r3, r8, #2
 80039da:	931d      	str	r3, [sp, #116]	; 0x74
 80039dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80039e0:	e785      	b.n	80038ee <_strtod_l+0x1a6>
 80039e2:	f04f 0c01 	mov.w	ip, #1
 80039e6:	e7f6      	b.n	80039d6 <_strtod_l+0x28e>
 80039e8:	08006a4c 	.word	0x08006a4c
 80039ec:	08006880 	.word	0x08006880
 80039f0:	7ff00000 	.word	0x7ff00000
 80039f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	911d      	str	r1, [sp, #116]	; 0x74
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	2b30      	cmp	r3, #48	; 0x30
 80039fe:	d0f9      	beq.n	80039f4 <_strtod_l+0x2ac>
 8003a00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003a04:	2908      	cmp	r1, #8
 8003a06:	f63f af79 	bhi.w	80038fc <_strtod_l+0x1b4>
 8003a0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003a0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a10:	9308      	str	r3, [sp, #32]
 8003a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	911d      	str	r1, [sp, #116]	; 0x74
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003a1e:	2e09      	cmp	r6, #9
 8003a20:	d937      	bls.n	8003a92 <_strtod_l+0x34a>
 8003a22:	9e08      	ldr	r6, [sp, #32]
 8003a24:	1b89      	subs	r1, r1, r6
 8003a26:	2908      	cmp	r1, #8
 8003a28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003a2c:	dc02      	bgt.n	8003a34 <_strtod_l+0x2ec>
 8003a2e:	4576      	cmp	r6, lr
 8003a30:	bfa8      	it	ge
 8003a32:	4676      	movge	r6, lr
 8003a34:	f1bc 0f00 	cmp.w	ip, #0
 8003a38:	d000      	beq.n	8003a3c <_strtod_l+0x2f4>
 8003a3a:	4276      	negs	r6, r6
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	d14f      	bne.n	8003ae0 <_strtod_l+0x398>
 8003a40:	9904      	ldr	r1, [sp, #16]
 8003a42:	4301      	orrs	r1, r0
 8003a44:	f47f aec2 	bne.w	80037cc <_strtod_l+0x84>
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	f47f aedb 	bne.w	8003804 <_strtod_l+0xbc>
 8003a4e:	2b69      	cmp	r3, #105	; 0x69
 8003a50:	d027      	beq.n	8003aa2 <_strtod_l+0x35a>
 8003a52:	dc24      	bgt.n	8003a9e <_strtod_l+0x356>
 8003a54:	2b49      	cmp	r3, #73	; 0x49
 8003a56:	d024      	beq.n	8003aa2 <_strtod_l+0x35a>
 8003a58:	2b4e      	cmp	r3, #78	; 0x4e
 8003a5a:	f47f aed3 	bne.w	8003804 <_strtod_l+0xbc>
 8003a5e:	499e      	ldr	r1, [pc, #632]	; (8003cd8 <_strtod_l+0x590>)
 8003a60:	a81d      	add	r0, sp, #116	; 0x74
 8003a62:	f000 ffc7 	bl	80049f4 <__match>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f43f aecc 	beq.w	8003804 <_strtod_l+0xbc>
 8003a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b28      	cmp	r3, #40	; 0x28
 8003a72:	d12d      	bne.n	8003ad0 <_strtod_l+0x388>
 8003a74:	4999      	ldr	r1, [pc, #612]	; (8003cdc <_strtod_l+0x594>)
 8003a76:	aa20      	add	r2, sp, #128	; 0x80
 8003a78:	a81d      	add	r0, sp, #116	; 0x74
 8003a7a:	f000 ffcf 	bl	8004a1c <__hexnan>
 8003a7e:	2805      	cmp	r0, #5
 8003a80:	d126      	bne.n	8003ad0 <_strtod_l+0x388>
 8003a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003a88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003a8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003a90:	e69c      	b.n	80037cc <_strtod_l+0x84>
 8003a92:	210a      	movs	r1, #10
 8003a94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003a98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003a9c:	e7b9      	b.n	8003a12 <_strtod_l+0x2ca>
 8003a9e:	2b6e      	cmp	r3, #110	; 0x6e
 8003aa0:	e7db      	b.n	8003a5a <_strtod_l+0x312>
 8003aa2:	498f      	ldr	r1, [pc, #572]	; (8003ce0 <_strtod_l+0x598>)
 8003aa4:	a81d      	add	r0, sp, #116	; 0x74
 8003aa6:	f000 ffa5 	bl	80049f4 <__match>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	f43f aeaa 	beq.w	8003804 <_strtod_l+0xbc>
 8003ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ab2:	498c      	ldr	r1, [pc, #560]	; (8003ce4 <_strtod_l+0x59c>)
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	a81d      	add	r0, sp, #116	; 0x74
 8003ab8:	931d      	str	r3, [sp, #116]	; 0x74
 8003aba:	f000 ff9b 	bl	80049f4 <__match>
 8003abe:	b910      	cbnz	r0, 8003ac6 <_strtod_l+0x37e>
 8003ac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	931d      	str	r3, [sp, #116]	; 0x74
 8003ac6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8003cf4 <_strtod_l+0x5ac>
 8003aca:	f04f 0a00 	mov.w	sl, #0
 8003ace:	e67d      	b.n	80037cc <_strtod_l+0x84>
 8003ad0:	4885      	ldr	r0, [pc, #532]	; (8003ce8 <_strtod_l+0x5a0>)
 8003ad2:	f002 f865 	bl	8005ba0 <nan>
 8003ad6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003ada:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003ade:	e675      	b.n	80037cc <_strtod_l+0x84>
 8003ae0:	9b07      	ldr	r3, [sp, #28]
 8003ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae4:	1af3      	subs	r3, r6, r3
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	bf08      	it	eq
 8003aea:	462f      	moveq	r7, r5
 8003aec:	2d10      	cmp	r5, #16
 8003aee:	9308      	str	r3, [sp, #32]
 8003af0:	46a8      	mov	r8, r5
 8003af2:	bfa8      	it	ge
 8003af4:	f04f 0810 	movge.w	r8, #16
 8003af8:	f7fc fd24 	bl	8000544 <__aeabi_ui2d>
 8003afc:	2d09      	cmp	r5, #9
 8003afe:	4682      	mov	sl, r0
 8003b00:	468b      	mov	fp, r1
 8003b02:	dd13      	ble.n	8003b2c <_strtod_l+0x3e4>
 8003b04:	4b79      	ldr	r3, [pc, #484]	; (8003cec <_strtod_l+0x5a4>)
 8003b06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003b0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003b0e:	f7fc fd93 	bl	8000638 <__aeabi_dmul>
 8003b12:	4682      	mov	sl, r0
 8003b14:	4648      	mov	r0, r9
 8003b16:	468b      	mov	fp, r1
 8003b18:	f7fc fd14 	bl	8000544 <__aeabi_ui2d>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4650      	mov	r0, sl
 8003b22:	4659      	mov	r1, fp
 8003b24:	f7fc fbd2 	bl	80002cc <__adddf3>
 8003b28:	4682      	mov	sl, r0
 8003b2a:	468b      	mov	fp, r1
 8003b2c:	2d0f      	cmp	r5, #15
 8003b2e:	dc38      	bgt.n	8003ba2 <_strtod_l+0x45a>
 8003b30:	9b08      	ldr	r3, [sp, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f43f ae4a 	beq.w	80037cc <_strtod_l+0x84>
 8003b38:	dd24      	ble.n	8003b84 <_strtod_l+0x43c>
 8003b3a:	2b16      	cmp	r3, #22
 8003b3c:	dc0b      	bgt.n	8003b56 <_strtod_l+0x40e>
 8003b3e:	4d6b      	ldr	r5, [pc, #428]	; (8003cec <_strtod_l+0x5a4>)
 8003b40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003b44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003b48:	4652      	mov	r2, sl
 8003b4a:	465b      	mov	r3, fp
 8003b4c:	f7fc fd74 	bl	8000638 <__aeabi_dmul>
 8003b50:	4682      	mov	sl, r0
 8003b52:	468b      	mov	fp, r1
 8003b54:	e63a      	b.n	80037cc <_strtod_l+0x84>
 8003b56:	9a08      	ldr	r2, [sp, #32]
 8003b58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	db20      	blt.n	8003ba2 <_strtod_l+0x45a>
 8003b60:	4c62      	ldr	r4, [pc, #392]	; (8003cec <_strtod_l+0x5a4>)
 8003b62:	f1c5 050f 	rsb	r5, r5, #15
 8003b66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	465b      	mov	r3, fp
 8003b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b72:	f7fc fd61 	bl	8000638 <__aeabi_dmul>
 8003b76:	9b08      	ldr	r3, [sp, #32]
 8003b78:	1b5d      	subs	r5, r3, r5
 8003b7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003b7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003b82:	e7e3      	b.n	8003b4c <_strtod_l+0x404>
 8003b84:	9b08      	ldr	r3, [sp, #32]
 8003b86:	3316      	adds	r3, #22
 8003b88:	db0b      	blt.n	8003ba2 <_strtod_l+0x45a>
 8003b8a:	9b07      	ldr	r3, [sp, #28]
 8003b8c:	4a57      	ldr	r2, [pc, #348]	; (8003cec <_strtod_l+0x5a4>)
 8003b8e:	1b9e      	subs	r6, r3, r6
 8003b90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003b94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b98:	4650      	mov	r0, sl
 8003b9a:	4659      	mov	r1, fp
 8003b9c:	f7fc fe76 	bl	800088c <__aeabi_ddiv>
 8003ba0:	e7d6      	b.n	8003b50 <_strtod_l+0x408>
 8003ba2:	9b08      	ldr	r3, [sp, #32]
 8003ba4:	eba5 0808 	sub.w	r8, r5, r8
 8003ba8:	4498      	add	r8, r3
 8003baa:	f1b8 0f00 	cmp.w	r8, #0
 8003bae:	dd71      	ble.n	8003c94 <_strtod_l+0x54c>
 8003bb0:	f018 030f 	ands.w	r3, r8, #15
 8003bb4:	d00a      	beq.n	8003bcc <_strtod_l+0x484>
 8003bb6:	494d      	ldr	r1, [pc, #308]	; (8003cec <_strtod_l+0x5a4>)
 8003bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc4:	f7fc fd38 	bl	8000638 <__aeabi_dmul>
 8003bc8:	4682      	mov	sl, r0
 8003bca:	468b      	mov	fp, r1
 8003bcc:	f038 080f 	bics.w	r8, r8, #15
 8003bd0:	d04d      	beq.n	8003c6e <_strtod_l+0x526>
 8003bd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003bd6:	dd22      	ble.n	8003c1e <_strtod_l+0x4d6>
 8003bd8:	2500      	movs	r5, #0
 8003bda:	462e      	mov	r6, r5
 8003bdc:	9509      	str	r5, [sp, #36]	; 0x24
 8003bde:	9507      	str	r5, [sp, #28]
 8003be0:	2322      	movs	r3, #34	; 0x22
 8003be2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003cf4 <_strtod_l+0x5ac>
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	f04f 0a00 	mov.w	sl, #0
 8003bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f43f adec 	beq.w	80037cc <_strtod_l+0x84>
 8003bf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 fffe 	bl	8004bf8 <_Bfree>
 8003bfc:	9907      	ldr	r1, [sp, #28]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 fffa 	bl	8004bf8 <_Bfree>
 8003c04:	4631      	mov	r1, r6
 8003c06:	4620      	mov	r0, r4
 8003c08:	f000 fff6 	bl	8004bf8 <_Bfree>
 8003c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 fff2 	bl	8004bf8 <_Bfree>
 8003c14:	4629      	mov	r1, r5
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 ffee 	bl	8004bf8 <_Bfree>
 8003c1c:	e5d6      	b.n	80037cc <_strtod_l+0x84>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003c24:	4650      	mov	r0, sl
 8003c26:	4659      	mov	r1, fp
 8003c28:	4699      	mov	r9, r3
 8003c2a:	f1b8 0f01 	cmp.w	r8, #1
 8003c2e:	dc21      	bgt.n	8003c74 <_strtod_l+0x52c>
 8003c30:	b10b      	cbz	r3, 8003c36 <_strtod_l+0x4ee>
 8003c32:	4682      	mov	sl, r0
 8003c34:	468b      	mov	fp, r1
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <_strtod_l+0x5a8>)
 8003c38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003c3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003c40:	4652      	mov	r2, sl
 8003c42:	465b      	mov	r3, fp
 8003c44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003c48:	f7fc fcf6 	bl	8000638 <__aeabi_dmul>
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <_strtod_l+0x5ac>)
 8003c4e:	460a      	mov	r2, r1
 8003c50:	400b      	ands	r3, r1
 8003c52:	4929      	ldr	r1, [pc, #164]	; (8003cf8 <_strtod_l+0x5b0>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	4682      	mov	sl, r0
 8003c58:	d8be      	bhi.n	8003bd8 <_strtod_l+0x490>
 8003c5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	bf86      	itte	hi
 8003c62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003cfc <_strtod_l+0x5b4>
 8003c66:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8003c6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	e081      	b.n	8003d78 <_strtod_l+0x630>
 8003c74:	f018 0f01 	tst.w	r8, #1
 8003c78:	d007      	beq.n	8003c8a <_strtod_l+0x542>
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <_strtod_l+0x5a8>)
 8003c7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fcd8 	bl	8000638 <__aeabi_dmul>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f109 0901 	add.w	r9, r9, #1
 8003c8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003c92:	e7ca      	b.n	8003c2a <_strtod_l+0x4e2>
 8003c94:	d0eb      	beq.n	8003c6e <_strtod_l+0x526>
 8003c96:	f1c8 0800 	rsb	r8, r8, #0
 8003c9a:	f018 020f 	ands.w	r2, r8, #15
 8003c9e:	d00a      	beq.n	8003cb6 <_strtod_l+0x56e>
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <_strtod_l+0x5a4>)
 8003ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	4659      	mov	r1, fp
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fded 	bl	800088c <__aeabi_ddiv>
 8003cb2:	4682      	mov	sl, r0
 8003cb4:	468b      	mov	fp, r1
 8003cb6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003cba:	d0d8      	beq.n	8003c6e <_strtod_l+0x526>
 8003cbc:	f1b8 0f1f 	cmp.w	r8, #31
 8003cc0:	dd1e      	ble.n	8003d00 <_strtod_l+0x5b8>
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	462e      	mov	r6, r5
 8003cc6:	9509      	str	r5, [sp, #36]	; 0x24
 8003cc8:	9507      	str	r5, [sp, #28]
 8003cca:	2322      	movs	r3, #34	; 0x22
 8003ccc:	f04f 0a00 	mov.w	sl, #0
 8003cd0:	f04f 0b00 	mov.w	fp, #0
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	e789      	b.n	8003bec <_strtod_l+0x4a4>
 8003cd8:	0800687a 	.word	0x0800687a
 8003cdc:	08006894 	.word	0x08006894
 8003ce0:	08006871 	.word	0x08006871
 8003ce4:	08006874 	.word	0x08006874
 8003ce8:	08006c42 	.word	0x08006c42
 8003cec:	08006b00 	.word	0x08006b00
 8003cf0:	08006ad8 	.word	0x08006ad8
 8003cf4:	7ff00000 	.word	0x7ff00000
 8003cf8:	7ca00000 	.word	0x7ca00000
 8003cfc:	7fefffff 	.word	0x7fefffff
 8003d00:	f018 0310 	ands.w	r3, r8, #16
 8003d04:	bf18      	it	ne
 8003d06:	236a      	movne	r3, #106	; 0x6a
 8003d08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80040c0 <_strtod_l+0x978>
 8003d0c:	9304      	str	r3, [sp, #16]
 8003d0e:	4650      	mov	r0, sl
 8003d10:	4659      	mov	r1, fp
 8003d12:	2300      	movs	r3, #0
 8003d14:	f018 0f01 	tst.w	r8, #1
 8003d18:	d004      	beq.n	8003d24 <_strtod_l+0x5dc>
 8003d1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003d1e:	f7fc fc8b 	bl	8000638 <__aeabi_dmul>
 8003d22:	2301      	movs	r3, #1
 8003d24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003d28:	f109 0908 	add.w	r9, r9, #8
 8003d2c:	d1f2      	bne.n	8003d14 <_strtod_l+0x5cc>
 8003d2e:	b10b      	cbz	r3, 8003d34 <_strtod_l+0x5ec>
 8003d30:	4682      	mov	sl, r0
 8003d32:	468b      	mov	fp, r1
 8003d34:	9b04      	ldr	r3, [sp, #16]
 8003d36:	b1bb      	cbz	r3, 8003d68 <_strtod_l+0x620>
 8003d38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003d3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	4659      	mov	r1, fp
 8003d44:	dd10      	ble.n	8003d68 <_strtod_l+0x620>
 8003d46:	2b1f      	cmp	r3, #31
 8003d48:	f340 8128 	ble.w	8003f9c <_strtod_l+0x854>
 8003d4c:	2b34      	cmp	r3, #52	; 0x34
 8003d4e:	bfde      	ittt	le
 8003d50:	3b20      	suble	r3, #32
 8003d52:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8003d56:	fa02 f303 	lslle.w	r3, r2, r3
 8003d5a:	f04f 0a00 	mov.w	sl, #0
 8003d5e:	bfcc      	ite	gt
 8003d60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003d64:	ea03 0b01 	andle.w	fp, r3, r1
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	4659      	mov	r1, fp
 8003d70:	f7fc feca 	bl	8000b08 <__aeabi_dcmpeq>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d1a4      	bne.n	8003cc2 <_strtod_l+0x57a>
 8003d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d7e:	462b      	mov	r3, r5
 8003d80:	463a      	mov	r2, r7
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 ffa4 	bl	8004cd0 <__s2b>
 8003d88:	9009      	str	r0, [sp, #36]	; 0x24
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	f43f af24 	beq.w	8003bd8 <_strtod_l+0x490>
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	1b9e      	subs	r6, r3, r6
 8003d94:	9b08      	ldr	r3, [sp, #32]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfb4      	ite	lt
 8003d9a:	4633      	movlt	r3, r6
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8003da0:	9b08      	ldr	r3, [sp, #32]
 8003da2:	2500      	movs	r5, #0
 8003da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003da8:	9318      	str	r3, [sp, #96]	; 0x60
 8003daa:	462e      	mov	r6, r5
 8003dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dae:	4620      	mov	r0, r4
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	f000 fee1 	bl	8004b78 <_Balloc>
 8003db6:	9007      	str	r0, [sp, #28]
 8003db8:	2800      	cmp	r0, #0
 8003dba:	f43f af11 	beq.w	8003be0 <_strtod_l+0x498>
 8003dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	3202      	adds	r2, #2
 8003dc4:	f103 010c 	add.w	r1, r3, #12
 8003dc8:	0092      	lsls	r2, r2, #2
 8003dca:	300c      	adds	r0, #12
 8003dcc:	f7ff fa54 	bl	8003278 <memcpy>
 8003dd0:	ec4b ab10 	vmov	d0, sl, fp
 8003dd4:	aa20      	add	r2, sp, #128	; 0x80
 8003dd6:	a91f      	add	r1, sp, #124	; 0x7c
 8003dd8:	4620      	mov	r0, r4
 8003dda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003dde:	f001 fab3 	bl	8005348 <__d2b>
 8003de2:	901e      	str	r0, [sp, #120]	; 0x78
 8003de4:	2800      	cmp	r0, #0
 8003de6:	f43f aefb 	beq.w	8003be0 <_strtod_l+0x498>
 8003dea:	2101      	movs	r1, #1
 8003dec:	4620      	mov	r0, r4
 8003dee:	f001 f809 	bl	8004e04 <__i2b>
 8003df2:	4606      	mov	r6, r0
 8003df4:	2800      	cmp	r0, #0
 8003df6:	f43f aef3 	beq.w	8003be0 <_strtod_l+0x498>
 8003dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003dfc:	9904      	ldr	r1, [sp, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfab      	itete	ge
 8003e02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8003e04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8003e06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8003e08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8003e0c:	bfac      	ite	ge
 8003e0e:	eb03 0902 	addge.w	r9, r3, r2
 8003e12:	1ad7      	sublt	r7, r2, r3
 8003e14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e16:	eba3 0801 	sub.w	r8, r3, r1
 8003e1a:	4490      	add	r8, r2
 8003e1c:	4ba3      	ldr	r3, [pc, #652]	; (80040ac <_strtod_l+0x964>)
 8003e1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003e22:	4598      	cmp	r8, r3
 8003e24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003e28:	f280 80cc 	bge.w	8003fc4 <_strtod_l+0x87c>
 8003e2c:	eba3 0308 	sub.w	r3, r3, r8
 8003e30:	2b1f      	cmp	r3, #31
 8003e32:	eba2 0203 	sub.w	r2, r2, r3
 8003e36:	f04f 0101 	mov.w	r1, #1
 8003e3a:	f300 80b6 	bgt.w	8003faa <_strtod_l+0x862>
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	9311      	str	r3, [sp, #68]	; 0x44
 8003e44:	2300      	movs	r3, #0
 8003e46:	930c      	str	r3, [sp, #48]	; 0x30
 8003e48:	eb09 0802 	add.w	r8, r9, r2
 8003e4c:	9b04      	ldr	r3, [sp, #16]
 8003e4e:	45c1      	cmp	r9, r8
 8003e50:	4417      	add	r7, r2
 8003e52:	441f      	add	r7, r3
 8003e54:	464b      	mov	r3, r9
 8003e56:	bfa8      	it	ge
 8003e58:	4643      	movge	r3, r8
 8003e5a:	42bb      	cmp	r3, r7
 8003e5c:	bfa8      	it	ge
 8003e5e:	463b      	movge	r3, r7
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bfc2      	ittt	gt
 8003e64:	eba8 0803 	subgt.w	r8, r8, r3
 8003e68:	1aff      	subgt	r7, r7, r3
 8003e6a:	eba9 0903 	subgt.w	r9, r9, r3
 8003e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dd17      	ble.n	8003ea4 <_strtod_l+0x75c>
 8003e74:	4631      	mov	r1, r6
 8003e76:	461a      	mov	r2, r3
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f001 f87f 	bl	8004f7c <__pow5mult>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f43f aead 	beq.w	8003be0 <_strtod_l+0x498>
 8003e86:	4601      	mov	r1, r0
 8003e88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 ffd0 	bl	8004e30 <__multiply>
 8003e90:	900f      	str	r0, [sp, #60]	; 0x3c
 8003e92:	2800      	cmp	r0, #0
 8003e94:	f43f aea4 	beq.w	8003be0 <_strtod_l+0x498>
 8003e98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 feac 	bl	8004bf8 <_Bfree>
 8003ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ea2:	931e      	str	r3, [sp, #120]	; 0x78
 8003ea4:	f1b8 0f00 	cmp.w	r8, #0
 8003ea8:	f300 8091 	bgt.w	8003fce <_strtod_l+0x886>
 8003eac:	9b08      	ldr	r3, [sp, #32]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd08      	ble.n	8003ec4 <_strtod_l+0x77c>
 8003eb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003eb4:	9907      	ldr	r1, [sp, #28]
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f001 f860 	bl	8004f7c <__pow5mult>
 8003ebc:	9007      	str	r0, [sp, #28]
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	f43f ae8e 	beq.w	8003be0 <_strtod_l+0x498>
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	dd08      	ble.n	8003eda <_strtod_l+0x792>
 8003ec8:	9907      	ldr	r1, [sp, #28]
 8003eca:	463a      	mov	r2, r7
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f001 f8af 	bl	8005030 <__lshift>
 8003ed2:	9007      	str	r0, [sp, #28]
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	f43f ae83 	beq.w	8003be0 <_strtod_l+0x498>
 8003eda:	f1b9 0f00 	cmp.w	r9, #0
 8003ede:	dd08      	ble.n	8003ef2 <_strtod_l+0x7aa>
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	464a      	mov	r2, r9
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f001 f8a3 	bl	8005030 <__lshift>
 8003eea:	4606      	mov	r6, r0
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f43f ae77 	beq.w	8003be0 <_strtod_l+0x498>
 8003ef2:	9a07      	ldr	r2, [sp, #28]
 8003ef4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f001 f922 	bl	8005140 <__mdiff>
 8003efc:	4605      	mov	r5, r0
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f43f ae6e 	beq.w	8003be0 <_strtod_l+0x498>
 8003f04:	68c3      	ldr	r3, [r0, #12]
 8003f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60c3      	str	r3, [r0, #12]
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	f001 f8fb 	bl	8005108 <__mcmp>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	da65      	bge.n	8003fe2 <_strtod_l+0x89a>
 8003f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f18:	ea53 030a 	orrs.w	r3, r3, sl
 8003f1c:	f040 8087 	bne.w	800402e <_strtod_l+0x8e6>
 8003f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 8082 	bne.w	800402e <_strtod_l+0x8e6>
 8003f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003f2e:	0d1b      	lsrs	r3, r3, #20
 8003f30:	051b      	lsls	r3, r3, #20
 8003f32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003f36:	d97a      	bls.n	800402e <_strtod_l+0x8e6>
 8003f38:	696b      	ldr	r3, [r5, #20]
 8003f3a:	b913      	cbnz	r3, 8003f42 <_strtod_l+0x7fa>
 8003f3c:	692b      	ldr	r3, [r5, #16]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	dd75      	ble.n	800402e <_strtod_l+0x8e6>
 8003f42:	4629      	mov	r1, r5
 8003f44:	2201      	movs	r2, #1
 8003f46:	4620      	mov	r0, r4
 8003f48:	f001 f872 	bl	8005030 <__lshift>
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	4605      	mov	r5, r0
 8003f50:	f001 f8da 	bl	8005108 <__mcmp>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	dd6a      	ble.n	800402e <_strtod_l+0x8e6>
 8003f58:	9904      	ldr	r1, [sp, #16]
 8003f5a:	4a55      	ldr	r2, [pc, #340]	; (80040b0 <_strtod_l+0x968>)
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	f000 8085 	beq.w	800406e <_strtod_l+0x926>
 8003f64:	ea02 010b 	and.w	r1, r2, fp
 8003f68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003f6c:	dc7f      	bgt.n	800406e <_strtod_l+0x926>
 8003f6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003f72:	f77f aeaa 	ble.w	8003cca <_strtod_l+0x582>
 8003f76:	4a4f      	ldr	r2, [pc, #316]	; (80040b4 <_strtod_l+0x96c>)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8003f7e:	4650      	mov	r0, sl
 8003f80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003f84:	4659      	mov	r1, fp
 8003f86:	f7fc fb57 	bl	8000638 <__aeabi_dmul>
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4303      	orrs	r3, r0
 8003f8e:	bf08      	it	eq
 8003f90:	2322      	moveq	r3, #34	; 0x22
 8003f92:	4682      	mov	sl, r0
 8003f94:	468b      	mov	fp, r1
 8003f96:	bf08      	it	eq
 8003f98:	6023      	streq	r3, [r4, #0]
 8003f9a:	e62b      	b.n	8003bf4 <_strtod_l+0x4ac>
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	ea03 0a0a 	and.w	sl, r3, sl
 8003fa8:	e6de      	b.n	8003d68 <_strtod_l+0x620>
 8003faa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003fae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003fb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003fb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003fba:	fa01 f308 	lsl.w	r3, r1, r8
 8003fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8003fc0:	9111      	str	r1, [sp, #68]	; 0x44
 8003fc2:	e741      	b.n	8003e48 <_strtod_l+0x700>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9311      	str	r3, [sp, #68]	; 0x44
 8003fcc:	e73c      	b.n	8003e48 <_strtod_l+0x700>
 8003fce:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f001 f82c 	bl	8005030 <__lshift>
 8003fd8:	901e      	str	r0, [sp, #120]	; 0x78
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f47f af66 	bne.w	8003eac <_strtod_l+0x764>
 8003fe0:	e5fe      	b.n	8003be0 <_strtod_l+0x498>
 8003fe2:	465f      	mov	r7, fp
 8003fe4:	d16e      	bne.n	80040c4 <_strtod_l+0x97c>
 8003fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003fec:	b342      	cbz	r2, 8004040 <_strtod_l+0x8f8>
 8003fee:	4a32      	ldr	r2, [pc, #200]	; (80040b8 <_strtod_l+0x970>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d128      	bne.n	8004046 <_strtod_l+0x8fe>
 8003ff4:	9b04      	ldr	r3, [sp, #16]
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	b1eb      	cbz	r3, 8004036 <_strtod_l+0x8ee>
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <_strtod_l+0x968>)
 8003ffc:	403a      	ands	r2, r7
 8003ffe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004006:	d819      	bhi.n	800403c <_strtod_l+0x8f4>
 8004008:	0d12      	lsrs	r2, r2, #20
 800400a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	4298      	cmp	r0, r3
 8004014:	d117      	bne.n	8004046 <_strtod_l+0x8fe>
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <_strtod_l+0x974>)
 8004018:	429f      	cmp	r7, r3
 800401a:	d102      	bne.n	8004022 <_strtod_l+0x8da>
 800401c:	3001      	adds	r0, #1
 800401e:	f43f addf 	beq.w	8003be0 <_strtod_l+0x498>
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <_strtod_l+0x968>)
 8004024:	403b      	ands	r3, r7
 8004026:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800402a:	f04f 0a00 	mov.w	sl, #0
 800402e:	9b04      	ldr	r3, [sp, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1a0      	bne.n	8003f76 <_strtod_l+0x82e>
 8004034:	e5de      	b.n	8003bf4 <_strtod_l+0x4ac>
 8004036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403a:	e7ea      	b.n	8004012 <_strtod_l+0x8ca>
 800403c:	460b      	mov	r3, r1
 800403e:	e7e8      	b.n	8004012 <_strtod_l+0x8ca>
 8004040:	ea53 030a 	orrs.w	r3, r3, sl
 8004044:	d088      	beq.n	8003f58 <_strtod_l+0x810>
 8004046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004048:	b1db      	cbz	r3, 8004082 <_strtod_l+0x93a>
 800404a:	423b      	tst	r3, r7
 800404c:	d0ef      	beq.n	800402e <_strtod_l+0x8e6>
 800404e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004050:	9a04      	ldr	r2, [sp, #16]
 8004052:	4650      	mov	r0, sl
 8004054:	4659      	mov	r1, fp
 8004056:	b1c3      	cbz	r3, 800408a <_strtod_l+0x942>
 8004058:	f7ff fb5a 	bl	8003710 <sulp>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004064:	f7fc f932 	bl	80002cc <__adddf3>
 8004068:	4682      	mov	sl, r0
 800406a:	468b      	mov	fp, r1
 800406c:	e7df      	b.n	800402e <_strtod_l+0x8e6>
 800406e:	4013      	ands	r3, r2
 8004070:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004074:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004078:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800407c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004080:	e7d5      	b.n	800402e <_strtod_l+0x8e6>
 8004082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004084:	ea13 0f0a 	tst.w	r3, sl
 8004088:	e7e0      	b.n	800404c <_strtod_l+0x904>
 800408a:	f7ff fb41 	bl	8003710 <sulp>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004096:	f7fc f917 	bl	80002c8 <__aeabi_dsub>
 800409a:	2200      	movs	r2, #0
 800409c:	2300      	movs	r3, #0
 800409e:	4682      	mov	sl, r0
 80040a0:	468b      	mov	fp, r1
 80040a2:	f7fc fd31 	bl	8000b08 <__aeabi_dcmpeq>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d0c1      	beq.n	800402e <_strtod_l+0x8e6>
 80040aa:	e60e      	b.n	8003cca <_strtod_l+0x582>
 80040ac:	fffffc02 	.word	0xfffffc02
 80040b0:	7ff00000 	.word	0x7ff00000
 80040b4:	39500000 	.word	0x39500000
 80040b8:	000fffff 	.word	0x000fffff
 80040bc:	7fefffff 	.word	0x7fefffff
 80040c0:	080068a8 	.word	0x080068a8
 80040c4:	4631      	mov	r1, r6
 80040c6:	4628      	mov	r0, r5
 80040c8:	f001 f99a 	bl	8005400 <__ratio>
 80040cc:	ec59 8b10 	vmov	r8, r9, d0
 80040d0:	ee10 0a10 	vmov	r0, s0
 80040d4:	2200      	movs	r2, #0
 80040d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fd28 	bl	8000b30 <__aeabi_dcmple>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d07c      	beq.n	80041de <_strtod_l+0xa96>
 80040e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d04c      	beq.n	8004184 <_strtod_l+0xa3c>
 80040ea:	4b95      	ldr	r3, [pc, #596]	; (8004340 <_strtod_l+0xbf8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80040f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004340 <_strtod_l+0xbf8>
 80040f6:	f04f 0800 	mov.w	r8, #0
 80040fa:	4b92      	ldr	r3, [pc, #584]	; (8004344 <_strtod_l+0xbfc>)
 80040fc:	403b      	ands	r3, r7
 80040fe:	9311      	str	r3, [sp, #68]	; 0x44
 8004100:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004102:	4b91      	ldr	r3, [pc, #580]	; (8004348 <_strtod_l+0xc00>)
 8004104:	429a      	cmp	r2, r3
 8004106:	f040 80b2 	bne.w	800426e <_strtod_l+0xb26>
 800410a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800410e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004112:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004116:	ec4b ab10 	vmov	d0, sl, fp
 800411a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800411e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004122:	f001 f895 	bl	8005250 <__ulp>
 8004126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800412a:	ec53 2b10 	vmov	r2, r3, d0
 800412e:	f7fc fa83 	bl	8000638 <__aeabi_dmul>
 8004132:	4652      	mov	r2, sl
 8004134:	465b      	mov	r3, fp
 8004136:	f7fc f8c9 	bl	80002cc <__adddf3>
 800413a:	460b      	mov	r3, r1
 800413c:	4981      	ldr	r1, [pc, #516]	; (8004344 <_strtod_l+0xbfc>)
 800413e:	4a83      	ldr	r2, [pc, #524]	; (800434c <_strtod_l+0xc04>)
 8004140:	4019      	ands	r1, r3
 8004142:	4291      	cmp	r1, r2
 8004144:	4682      	mov	sl, r0
 8004146:	d95e      	bls.n	8004206 <_strtod_l+0xabe>
 8004148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800414a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800414e:	4293      	cmp	r3, r2
 8004150:	d103      	bne.n	800415a <_strtod_l+0xa12>
 8004152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004154:	3301      	adds	r3, #1
 8004156:	f43f ad43 	beq.w	8003be0 <_strtod_l+0x498>
 800415a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004358 <_strtod_l+0xc10>
 800415e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004162:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004164:	4620      	mov	r0, r4
 8004166:	f000 fd47 	bl	8004bf8 <_Bfree>
 800416a:	9907      	ldr	r1, [sp, #28]
 800416c:	4620      	mov	r0, r4
 800416e:	f000 fd43 	bl	8004bf8 <_Bfree>
 8004172:	4631      	mov	r1, r6
 8004174:	4620      	mov	r0, r4
 8004176:	f000 fd3f 	bl	8004bf8 <_Bfree>
 800417a:	4629      	mov	r1, r5
 800417c:	4620      	mov	r0, r4
 800417e:	f000 fd3b 	bl	8004bf8 <_Bfree>
 8004182:	e613      	b.n	8003dac <_strtod_l+0x664>
 8004184:	f1ba 0f00 	cmp.w	sl, #0
 8004188:	d11b      	bne.n	80041c2 <_strtod_l+0xa7a>
 800418a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800418e:	b9f3      	cbnz	r3, 80041ce <_strtod_l+0xa86>
 8004190:	4b6b      	ldr	r3, [pc, #428]	; (8004340 <_strtod_l+0xbf8>)
 8004192:	2200      	movs	r2, #0
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800419c:	b9d0      	cbnz	r0, 80041d4 <_strtod_l+0xa8c>
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	4b6b      	ldr	r3, [pc, #428]	; (8004350 <_strtod_l+0xc08>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	f7fc fa47 	bl	8000638 <__aeabi_dmul>
 80041aa:	4680      	mov	r8, r0
 80041ac:	4689      	mov	r9, r1
 80041ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80041b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80041b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80041b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80041bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80041c0:	e79b      	b.n	80040fa <_strtod_l+0x9b2>
 80041c2:	f1ba 0f01 	cmp.w	sl, #1
 80041c6:	d102      	bne.n	80041ce <_strtod_l+0xa86>
 80041c8:	2f00      	cmp	r7, #0
 80041ca:	f43f ad7e 	beq.w	8003cca <_strtod_l+0x582>
 80041ce:	4b61      	ldr	r3, [pc, #388]	; (8004354 <_strtod_l+0xc0c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	e78c      	b.n	80040ee <_strtod_l+0x9a6>
 80041d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004350 <_strtod_l+0xc08>
 80041d8:	f04f 0800 	mov.w	r8, #0
 80041dc:	e7e7      	b.n	80041ae <_strtod_l+0xa66>
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <_strtod_l+0xc08>)
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	2200      	movs	r2, #0
 80041e6:	f7fc fa27 	bl	8000638 <__aeabi_dmul>
 80041ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ec:	4680      	mov	r8, r0
 80041ee:	4689      	mov	r9, r1
 80041f0:	b933      	cbnz	r3, 8004200 <_strtod_l+0xab8>
 80041f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041f6:	9012      	str	r0, [sp, #72]	; 0x48
 80041f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80041fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80041fe:	e7dd      	b.n	80041bc <_strtod_l+0xa74>
 8004200:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004204:	e7f9      	b.n	80041fa <_strtod_l+0xab2>
 8004206:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800420a:	9b04      	ldr	r3, [sp, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1a8      	bne.n	8004162 <_strtod_l+0xa1a>
 8004210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004216:	0d1b      	lsrs	r3, r3, #20
 8004218:	051b      	lsls	r3, r3, #20
 800421a:	429a      	cmp	r2, r3
 800421c:	d1a1      	bne.n	8004162 <_strtod_l+0xa1a>
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	f7fc fd41 	bl	8000ca8 <__aeabi_d2lz>
 8004226:	f7fc f9d9 	bl	80005dc <__aeabi_l2d>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4640      	mov	r0, r8
 8004230:	4649      	mov	r1, r9
 8004232:	f7fc f849 	bl	80002c8 <__aeabi_dsub>
 8004236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800423c:	ea43 030a 	orr.w	r3, r3, sl
 8004240:	4313      	orrs	r3, r2
 8004242:	4680      	mov	r8, r0
 8004244:	4689      	mov	r9, r1
 8004246:	d053      	beq.n	80042f0 <_strtod_l+0xba8>
 8004248:	a335      	add	r3, pc, #212	; (adr r3, 8004320 <_strtod_l+0xbd8>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fc fc65 	bl	8000b1c <__aeabi_dcmplt>
 8004252:	2800      	cmp	r0, #0
 8004254:	f47f acce 	bne.w	8003bf4 <_strtod_l+0x4ac>
 8004258:	a333      	add	r3, pc, #204	; (adr r3, 8004328 <_strtod_l+0xbe0>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	4640      	mov	r0, r8
 8004260:	4649      	mov	r1, r9
 8004262:	f7fc fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8004266:	2800      	cmp	r0, #0
 8004268:	f43f af7b 	beq.w	8004162 <_strtod_l+0xa1a>
 800426c:	e4c2      	b.n	8003bf4 <_strtod_l+0x4ac>
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	b333      	cbz	r3, 80042c0 <_strtod_l+0xb78>
 8004272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004274:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004278:	d822      	bhi.n	80042c0 <_strtod_l+0xb78>
 800427a:	a32d      	add	r3, pc, #180	; (adr r3, 8004330 <_strtod_l+0xbe8>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	4640      	mov	r0, r8
 8004282:	4649      	mov	r1, r9
 8004284:	f7fc fc54 	bl	8000b30 <__aeabi_dcmple>
 8004288:	b1a0      	cbz	r0, 80042b4 <_strtod_l+0xb6c>
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	f7fc fc83 	bl	8000b98 <__aeabi_d2uiz>
 8004292:	2801      	cmp	r0, #1
 8004294:	bf38      	it	cc
 8004296:	2001      	movcc	r0, #1
 8004298:	f7fc f954 	bl	8000544 <__aeabi_ui2d>
 800429c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800429e:	4680      	mov	r8, r0
 80042a0:	4689      	mov	r9, r1
 80042a2:	bb13      	cbnz	r3, 80042ea <_strtod_l+0xba2>
 80042a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042a8:	9014      	str	r0, [sp, #80]	; 0x50
 80042aa:	9315      	str	r3, [sp, #84]	; 0x54
 80042ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80042b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80042b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	930d      	str	r3, [sp, #52]	; 0x34
 80042c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80042c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80042cc:	f000 ffc0 	bl	8005250 <__ulp>
 80042d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042d4:	ec53 2b10 	vmov	r2, r3, d0
 80042d8:	f7fc f9ae 	bl	8000638 <__aeabi_dmul>
 80042dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042e0:	f7fb fff4 	bl	80002cc <__adddf3>
 80042e4:	4682      	mov	sl, r0
 80042e6:	468b      	mov	fp, r1
 80042e8:	e78f      	b.n	800420a <_strtod_l+0xac2>
 80042ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80042ee:	e7dd      	b.n	80042ac <_strtod_l+0xb64>
 80042f0:	a311      	add	r3, pc, #68	; (adr r3, 8004338 <_strtod_l+0xbf0>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc fc11 	bl	8000b1c <__aeabi_dcmplt>
 80042fa:	e7b4      	b.n	8004266 <_strtod_l+0xb1e>
 80042fc:	2300      	movs	r3, #0
 80042fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	f7ff ba65 	b.w	80037d4 <_strtod_l+0x8c>
 800430a:	2b65      	cmp	r3, #101	; 0x65
 800430c:	f43f ab5d 	beq.w	80039ca <_strtod_l+0x282>
 8004310:	2b45      	cmp	r3, #69	; 0x45
 8004312:	f43f ab5a 	beq.w	80039ca <_strtod_l+0x282>
 8004316:	2201      	movs	r2, #1
 8004318:	f7ff bb92 	b.w	8003a40 <_strtod_l+0x2f8>
 800431c:	f3af 8000 	nop.w
 8004320:	94a03595 	.word	0x94a03595
 8004324:	3fdfffff 	.word	0x3fdfffff
 8004328:	35afe535 	.word	0x35afe535
 800432c:	3fe00000 	.word	0x3fe00000
 8004330:	ffc00000 	.word	0xffc00000
 8004334:	41dfffff 	.word	0x41dfffff
 8004338:	94a03595 	.word	0x94a03595
 800433c:	3fcfffff 	.word	0x3fcfffff
 8004340:	3ff00000 	.word	0x3ff00000
 8004344:	7ff00000 	.word	0x7ff00000
 8004348:	7fe00000 	.word	0x7fe00000
 800434c:	7c9fffff 	.word	0x7c9fffff
 8004350:	3fe00000 	.word	0x3fe00000
 8004354:	bff00000 	.word	0xbff00000
 8004358:	7fefffff 	.word	0x7fefffff

0800435c <_strtod_r>:
 800435c:	4b01      	ldr	r3, [pc, #4]	; (8004364 <_strtod_r+0x8>)
 800435e:	f7ff b9f3 	b.w	8003748 <_strtod_l>
 8004362:	bf00      	nop
 8004364:	20000074 	.word	0x20000074

08004368 <_strtol_l.isra.0>:
 8004368:	2b01      	cmp	r3, #1
 800436a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436e:	d001      	beq.n	8004374 <_strtol_l.isra.0+0xc>
 8004370:	2b24      	cmp	r3, #36	; 0x24
 8004372:	d906      	bls.n	8004382 <_strtol_l.isra.0+0x1a>
 8004374:	f7fe ff56 	bl	8003224 <__errno>
 8004378:	2316      	movs	r3, #22
 800437a:	6003      	str	r3, [r0, #0]
 800437c:	2000      	movs	r0, #0
 800437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004382:	4f3a      	ldr	r7, [pc, #232]	; (800446c <_strtol_l.isra.0+0x104>)
 8004384:	468e      	mov	lr, r1
 8004386:	4676      	mov	r6, lr
 8004388:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800438c:	5de5      	ldrb	r5, [r4, r7]
 800438e:	f015 0508 	ands.w	r5, r5, #8
 8004392:	d1f8      	bne.n	8004386 <_strtol_l.isra.0+0x1e>
 8004394:	2c2d      	cmp	r4, #45	; 0x2d
 8004396:	d134      	bne.n	8004402 <_strtol_l.isra.0+0x9a>
 8004398:	f89e 4000 	ldrb.w	r4, [lr]
 800439c:	f04f 0801 	mov.w	r8, #1
 80043a0:	f106 0e02 	add.w	lr, r6, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05c      	beq.n	8004462 <_strtol_l.isra.0+0xfa>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10c      	bne.n	80043c6 <_strtol_l.isra.0+0x5e>
 80043ac:	2c30      	cmp	r4, #48	; 0x30
 80043ae:	d10a      	bne.n	80043c6 <_strtol_l.isra.0+0x5e>
 80043b0:	f89e 4000 	ldrb.w	r4, [lr]
 80043b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043b8:	2c58      	cmp	r4, #88	; 0x58
 80043ba:	d14d      	bne.n	8004458 <_strtol_l.isra.0+0xf0>
 80043bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80043c0:	2310      	movs	r3, #16
 80043c2:	f10e 0e02 	add.w	lr, lr, #2
 80043c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80043ca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80043ce:	2600      	movs	r6, #0
 80043d0:	fbbc f9f3 	udiv	r9, ip, r3
 80043d4:	4635      	mov	r5, r6
 80043d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80043da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80043de:	2f09      	cmp	r7, #9
 80043e0:	d818      	bhi.n	8004414 <_strtol_l.isra.0+0xac>
 80043e2:	463c      	mov	r4, r7
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	dd24      	ble.n	8004432 <_strtol_l.isra.0+0xca>
 80043e8:	2e00      	cmp	r6, #0
 80043ea:	db1f      	blt.n	800442c <_strtol_l.isra.0+0xc4>
 80043ec:	45a9      	cmp	r9, r5
 80043ee:	d31d      	bcc.n	800442c <_strtol_l.isra.0+0xc4>
 80043f0:	d101      	bne.n	80043f6 <_strtol_l.isra.0+0x8e>
 80043f2:	45a2      	cmp	sl, r4
 80043f4:	db1a      	blt.n	800442c <_strtol_l.isra.0+0xc4>
 80043f6:	fb05 4503 	mla	r5, r5, r3, r4
 80043fa:	2601      	movs	r6, #1
 80043fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004400:	e7eb      	b.n	80043da <_strtol_l.isra.0+0x72>
 8004402:	2c2b      	cmp	r4, #43	; 0x2b
 8004404:	bf08      	it	eq
 8004406:	f89e 4000 	ldrbeq.w	r4, [lr]
 800440a:	46a8      	mov	r8, r5
 800440c:	bf08      	it	eq
 800440e:	f106 0e02 	addeq.w	lr, r6, #2
 8004412:	e7c7      	b.n	80043a4 <_strtol_l.isra.0+0x3c>
 8004414:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004418:	2f19      	cmp	r7, #25
 800441a:	d801      	bhi.n	8004420 <_strtol_l.isra.0+0xb8>
 800441c:	3c37      	subs	r4, #55	; 0x37
 800441e:	e7e1      	b.n	80043e4 <_strtol_l.isra.0+0x7c>
 8004420:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004424:	2f19      	cmp	r7, #25
 8004426:	d804      	bhi.n	8004432 <_strtol_l.isra.0+0xca>
 8004428:	3c57      	subs	r4, #87	; 0x57
 800442a:	e7db      	b.n	80043e4 <_strtol_l.isra.0+0x7c>
 800442c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004430:	e7e4      	b.n	80043fc <_strtol_l.isra.0+0x94>
 8004432:	2e00      	cmp	r6, #0
 8004434:	da05      	bge.n	8004442 <_strtol_l.isra.0+0xda>
 8004436:	2322      	movs	r3, #34	; 0x22
 8004438:	6003      	str	r3, [r0, #0]
 800443a:	4665      	mov	r5, ip
 800443c:	b942      	cbnz	r2, 8004450 <_strtol_l.isra.0+0xe8>
 800443e:	4628      	mov	r0, r5
 8004440:	e79d      	b.n	800437e <_strtol_l.isra.0+0x16>
 8004442:	f1b8 0f00 	cmp.w	r8, #0
 8004446:	d000      	beq.n	800444a <_strtol_l.isra.0+0xe2>
 8004448:	426d      	negs	r5, r5
 800444a:	2a00      	cmp	r2, #0
 800444c:	d0f7      	beq.n	800443e <_strtol_l.isra.0+0xd6>
 800444e:	b10e      	cbz	r6, 8004454 <_strtol_l.isra.0+0xec>
 8004450:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	e7f2      	b.n	800443e <_strtol_l.isra.0+0xd6>
 8004458:	2430      	movs	r4, #48	; 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1b3      	bne.n	80043c6 <_strtol_l.isra.0+0x5e>
 800445e:	2308      	movs	r3, #8
 8004460:	e7b1      	b.n	80043c6 <_strtol_l.isra.0+0x5e>
 8004462:	2c30      	cmp	r4, #48	; 0x30
 8004464:	d0a4      	beq.n	80043b0 <_strtol_l.isra.0+0x48>
 8004466:	230a      	movs	r3, #10
 8004468:	e7ad      	b.n	80043c6 <_strtol_l.isra.0+0x5e>
 800446a:	bf00      	nop
 800446c:	080068d1 	.word	0x080068d1

08004470 <_strtol_r>:
 8004470:	f7ff bf7a 	b.w	8004368 <_strtol_l.isra.0>

08004474 <rshift>:
 8004474:	6903      	ldr	r3, [r0, #16]
 8004476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800447a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800447e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004482:	f100 0414 	add.w	r4, r0, #20
 8004486:	dd45      	ble.n	8004514 <rshift+0xa0>
 8004488:	f011 011f 	ands.w	r1, r1, #31
 800448c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004494:	d10c      	bne.n	80044b0 <rshift+0x3c>
 8004496:	f100 0710 	add.w	r7, r0, #16
 800449a:	4629      	mov	r1, r5
 800449c:	42b1      	cmp	r1, r6
 800449e:	d334      	bcc.n	800450a <rshift+0x96>
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	1eea      	subs	r2, r5, #3
 80044a6:	4296      	cmp	r6, r2
 80044a8:	bf38      	it	cc
 80044aa:	2300      	movcc	r3, #0
 80044ac:	4423      	add	r3, r4
 80044ae:	e015      	b.n	80044dc <rshift+0x68>
 80044b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80044b4:	f1c1 0820 	rsb	r8, r1, #32
 80044b8:	40cf      	lsrs	r7, r1
 80044ba:	f105 0e04 	add.w	lr, r5, #4
 80044be:	46a1      	mov	r9, r4
 80044c0:	4576      	cmp	r6, lr
 80044c2:	46f4      	mov	ip, lr
 80044c4:	d815      	bhi.n	80044f2 <rshift+0x7e>
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009a      	lsls	r2, r3, #2
 80044ca:	3a04      	subs	r2, #4
 80044cc:	3501      	adds	r5, #1
 80044ce:	42ae      	cmp	r6, r5
 80044d0:	bf38      	it	cc
 80044d2:	2200      	movcc	r2, #0
 80044d4:	18a3      	adds	r3, r4, r2
 80044d6:	50a7      	str	r7, [r4, r2]
 80044d8:	b107      	cbz	r7, 80044dc <rshift+0x68>
 80044da:	3304      	adds	r3, #4
 80044dc:	1b1a      	subs	r2, r3, r4
 80044de:	42a3      	cmp	r3, r4
 80044e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80044e4:	bf08      	it	eq
 80044e6:	2300      	moveq	r3, #0
 80044e8:	6102      	str	r2, [r0, #16]
 80044ea:	bf08      	it	eq
 80044ec:	6143      	streq	r3, [r0, #20]
 80044ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044f2:	f8dc c000 	ldr.w	ip, [ip]
 80044f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80044fa:	ea4c 0707 	orr.w	r7, ip, r7
 80044fe:	f849 7b04 	str.w	r7, [r9], #4
 8004502:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004506:	40cf      	lsrs	r7, r1
 8004508:	e7da      	b.n	80044c0 <rshift+0x4c>
 800450a:	f851 cb04 	ldr.w	ip, [r1], #4
 800450e:	f847 cf04 	str.w	ip, [r7, #4]!
 8004512:	e7c3      	b.n	800449c <rshift+0x28>
 8004514:	4623      	mov	r3, r4
 8004516:	e7e1      	b.n	80044dc <rshift+0x68>

08004518 <__hexdig_fun>:
 8004518:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800451c:	2b09      	cmp	r3, #9
 800451e:	d802      	bhi.n	8004526 <__hexdig_fun+0xe>
 8004520:	3820      	subs	r0, #32
 8004522:	b2c0      	uxtb	r0, r0
 8004524:	4770      	bx	lr
 8004526:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800452a:	2b05      	cmp	r3, #5
 800452c:	d801      	bhi.n	8004532 <__hexdig_fun+0x1a>
 800452e:	3847      	subs	r0, #71	; 0x47
 8004530:	e7f7      	b.n	8004522 <__hexdig_fun+0xa>
 8004532:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004536:	2b05      	cmp	r3, #5
 8004538:	d801      	bhi.n	800453e <__hexdig_fun+0x26>
 800453a:	3827      	subs	r0, #39	; 0x27
 800453c:	e7f1      	b.n	8004522 <__hexdig_fun+0xa>
 800453e:	2000      	movs	r0, #0
 8004540:	4770      	bx	lr
	...

08004544 <__gethex>:
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	ed2d 8b02 	vpush	{d8}
 800454c:	b089      	sub	sp, #36	; 0x24
 800454e:	ee08 0a10 	vmov	s16, r0
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	4bbc      	ldr	r3, [pc, #752]	; (8004848 <__gethex+0x304>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	468b      	mov	fp, r1
 800455e:	4690      	mov	r8, r2
 8004560:	f7fb fe56 	bl	8000210 <strlen>
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	f8db 2000 	ldr.w	r2, [fp]
 800456a:	4403      	add	r3, r0
 800456c:	4682      	mov	sl, r0
 800456e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004572:	9305      	str	r3, [sp, #20]
 8004574:	1c93      	adds	r3, r2, #2
 8004576:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800457a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800457e:	32fe      	adds	r2, #254	; 0xfe
 8004580:	18d1      	adds	r1, r2, r3
 8004582:	461f      	mov	r7, r3
 8004584:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004588:	9100      	str	r1, [sp, #0]
 800458a:	2830      	cmp	r0, #48	; 0x30
 800458c:	d0f8      	beq.n	8004580 <__gethex+0x3c>
 800458e:	f7ff ffc3 	bl	8004518 <__hexdig_fun>
 8004592:	4604      	mov	r4, r0
 8004594:	2800      	cmp	r0, #0
 8004596:	d13a      	bne.n	800460e <__gethex+0xca>
 8004598:	9901      	ldr	r1, [sp, #4]
 800459a:	4652      	mov	r2, sl
 800459c:	4638      	mov	r0, r7
 800459e:	f001 fb17 	bl	8005bd0 <strncmp>
 80045a2:	4605      	mov	r5, r0
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d168      	bne.n	800467a <__gethex+0x136>
 80045a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80045ac:	eb07 060a 	add.w	r6, r7, sl
 80045b0:	f7ff ffb2 	bl	8004518 <__hexdig_fun>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d062      	beq.n	800467e <__gethex+0x13a>
 80045b8:	4633      	mov	r3, r6
 80045ba:	7818      	ldrb	r0, [r3, #0]
 80045bc:	2830      	cmp	r0, #48	; 0x30
 80045be:	461f      	mov	r7, r3
 80045c0:	f103 0301 	add.w	r3, r3, #1
 80045c4:	d0f9      	beq.n	80045ba <__gethex+0x76>
 80045c6:	f7ff ffa7 	bl	8004518 <__hexdig_fun>
 80045ca:	2301      	movs	r3, #1
 80045cc:	fab0 f480 	clz	r4, r0
 80045d0:	0964      	lsrs	r4, r4, #5
 80045d2:	4635      	mov	r5, r6
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	463a      	mov	r2, r7
 80045d8:	4616      	mov	r6, r2
 80045da:	3201      	adds	r2, #1
 80045dc:	7830      	ldrb	r0, [r6, #0]
 80045de:	f7ff ff9b 	bl	8004518 <__hexdig_fun>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1f8      	bne.n	80045d8 <__gethex+0x94>
 80045e6:	9901      	ldr	r1, [sp, #4]
 80045e8:	4652      	mov	r2, sl
 80045ea:	4630      	mov	r0, r6
 80045ec:	f001 faf0 	bl	8005bd0 <strncmp>
 80045f0:	b980      	cbnz	r0, 8004614 <__gethex+0xd0>
 80045f2:	b94d      	cbnz	r5, 8004608 <__gethex+0xc4>
 80045f4:	eb06 050a 	add.w	r5, r6, sl
 80045f8:	462a      	mov	r2, r5
 80045fa:	4616      	mov	r6, r2
 80045fc:	3201      	adds	r2, #1
 80045fe:	7830      	ldrb	r0, [r6, #0]
 8004600:	f7ff ff8a 	bl	8004518 <__hexdig_fun>
 8004604:	2800      	cmp	r0, #0
 8004606:	d1f8      	bne.n	80045fa <__gethex+0xb6>
 8004608:	1bad      	subs	r5, r5, r6
 800460a:	00ad      	lsls	r5, r5, #2
 800460c:	e004      	b.n	8004618 <__gethex+0xd4>
 800460e:	2400      	movs	r4, #0
 8004610:	4625      	mov	r5, r4
 8004612:	e7e0      	b.n	80045d6 <__gethex+0x92>
 8004614:	2d00      	cmp	r5, #0
 8004616:	d1f7      	bne.n	8004608 <__gethex+0xc4>
 8004618:	7833      	ldrb	r3, [r6, #0]
 800461a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800461e:	2b50      	cmp	r3, #80	; 0x50
 8004620:	d13b      	bne.n	800469a <__gethex+0x156>
 8004622:	7873      	ldrb	r3, [r6, #1]
 8004624:	2b2b      	cmp	r3, #43	; 0x2b
 8004626:	d02c      	beq.n	8004682 <__gethex+0x13e>
 8004628:	2b2d      	cmp	r3, #45	; 0x2d
 800462a:	d02e      	beq.n	800468a <__gethex+0x146>
 800462c:	1c71      	adds	r1, r6, #1
 800462e:	f04f 0900 	mov.w	r9, #0
 8004632:	7808      	ldrb	r0, [r1, #0]
 8004634:	f7ff ff70 	bl	8004518 <__hexdig_fun>
 8004638:	1e43      	subs	r3, r0, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b18      	cmp	r3, #24
 800463e:	d82c      	bhi.n	800469a <__gethex+0x156>
 8004640:	f1a0 0210 	sub.w	r2, r0, #16
 8004644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004648:	f7ff ff66 	bl	8004518 <__hexdig_fun>
 800464c:	1e43      	subs	r3, r0, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b18      	cmp	r3, #24
 8004652:	d91d      	bls.n	8004690 <__gethex+0x14c>
 8004654:	f1b9 0f00 	cmp.w	r9, #0
 8004658:	d000      	beq.n	800465c <__gethex+0x118>
 800465a:	4252      	negs	r2, r2
 800465c:	4415      	add	r5, r2
 800465e:	f8cb 1000 	str.w	r1, [fp]
 8004662:	b1e4      	cbz	r4, 800469e <__gethex+0x15a>
 8004664:	9b00      	ldr	r3, [sp, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf14      	ite	ne
 800466a:	2700      	movne	r7, #0
 800466c:	2706      	moveq	r7, #6
 800466e:	4638      	mov	r0, r7
 8004670:	b009      	add	sp, #36	; 0x24
 8004672:	ecbd 8b02 	vpop	{d8}
 8004676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467a:	463e      	mov	r6, r7
 800467c:	4625      	mov	r5, r4
 800467e:	2401      	movs	r4, #1
 8004680:	e7ca      	b.n	8004618 <__gethex+0xd4>
 8004682:	f04f 0900 	mov.w	r9, #0
 8004686:	1cb1      	adds	r1, r6, #2
 8004688:	e7d3      	b.n	8004632 <__gethex+0xee>
 800468a:	f04f 0901 	mov.w	r9, #1
 800468e:	e7fa      	b.n	8004686 <__gethex+0x142>
 8004690:	230a      	movs	r3, #10
 8004692:	fb03 0202 	mla	r2, r3, r2, r0
 8004696:	3a10      	subs	r2, #16
 8004698:	e7d4      	b.n	8004644 <__gethex+0x100>
 800469a:	4631      	mov	r1, r6
 800469c:	e7df      	b.n	800465e <__gethex+0x11a>
 800469e:	1bf3      	subs	r3, r6, r7
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4621      	mov	r1, r4
 80046a4:	2b07      	cmp	r3, #7
 80046a6:	dc0b      	bgt.n	80046c0 <__gethex+0x17c>
 80046a8:	ee18 0a10 	vmov	r0, s16
 80046ac:	f000 fa64 	bl	8004b78 <_Balloc>
 80046b0:	4604      	mov	r4, r0
 80046b2:	b940      	cbnz	r0, 80046c6 <__gethex+0x182>
 80046b4:	4b65      	ldr	r3, [pc, #404]	; (800484c <__gethex+0x308>)
 80046b6:	4602      	mov	r2, r0
 80046b8:	21de      	movs	r1, #222	; 0xde
 80046ba:	4865      	ldr	r0, [pc, #404]	; (8004850 <__gethex+0x30c>)
 80046bc:	f001 faa8 	bl	8005c10 <__assert_func>
 80046c0:	3101      	adds	r1, #1
 80046c2:	105b      	asrs	r3, r3, #1
 80046c4:	e7ee      	b.n	80046a4 <__gethex+0x160>
 80046c6:	f100 0914 	add.w	r9, r0, #20
 80046ca:	f04f 0b00 	mov.w	fp, #0
 80046ce:	f1ca 0301 	rsb	r3, sl, #1
 80046d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80046d6:	f8cd b000 	str.w	fp, [sp]
 80046da:	9306      	str	r3, [sp, #24]
 80046dc:	42b7      	cmp	r7, r6
 80046de:	d340      	bcc.n	8004762 <__gethex+0x21e>
 80046e0:	9802      	ldr	r0, [sp, #8]
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	f840 3b04 	str.w	r3, [r0], #4
 80046e8:	eba0 0009 	sub.w	r0, r0, r9
 80046ec:	1080      	asrs	r0, r0, #2
 80046ee:	0146      	lsls	r6, r0, #5
 80046f0:	6120      	str	r0, [r4, #16]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fb36 	bl	8004d64 <__hi0bits>
 80046f8:	1a30      	subs	r0, r6, r0
 80046fa:	f8d8 6000 	ldr.w	r6, [r8]
 80046fe:	42b0      	cmp	r0, r6
 8004700:	dd63      	ble.n	80047ca <__gethex+0x286>
 8004702:	1b87      	subs	r7, r0, r6
 8004704:	4639      	mov	r1, r7
 8004706:	4620      	mov	r0, r4
 8004708:	f000 fed0 	bl	80054ac <__any_on>
 800470c:	4682      	mov	sl, r0
 800470e:	b1a8      	cbz	r0, 800473c <__gethex+0x1f8>
 8004710:	1e7b      	subs	r3, r7, #1
 8004712:	1159      	asrs	r1, r3, #5
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800471c:	f04f 0a01 	mov.w	sl, #1
 8004720:	fa0a f202 	lsl.w	r2, sl, r2
 8004724:	420a      	tst	r2, r1
 8004726:	d009      	beq.n	800473c <__gethex+0x1f8>
 8004728:	4553      	cmp	r3, sl
 800472a:	dd05      	ble.n	8004738 <__gethex+0x1f4>
 800472c:	1eb9      	subs	r1, r7, #2
 800472e:	4620      	mov	r0, r4
 8004730:	f000 febc 	bl	80054ac <__any_on>
 8004734:	2800      	cmp	r0, #0
 8004736:	d145      	bne.n	80047c4 <__gethex+0x280>
 8004738:	f04f 0a02 	mov.w	sl, #2
 800473c:	4639      	mov	r1, r7
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff fe98 	bl	8004474 <rshift>
 8004744:	443d      	add	r5, r7
 8004746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800474a:	42ab      	cmp	r3, r5
 800474c:	da4c      	bge.n	80047e8 <__gethex+0x2a4>
 800474e:	ee18 0a10 	vmov	r0, s16
 8004752:	4621      	mov	r1, r4
 8004754:	f000 fa50 	bl	8004bf8 <_Bfree>
 8004758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800475a:	2300      	movs	r3, #0
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	27a3      	movs	r7, #163	; 0xa3
 8004760:	e785      	b.n	800466e <__gethex+0x12a>
 8004762:	1e73      	subs	r3, r6, #1
 8004764:	9a05      	ldr	r2, [sp, #20]
 8004766:	9303      	str	r3, [sp, #12]
 8004768:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800476c:	4293      	cmp	r3, r2
 800476e:	d019      	beq.n	80047a4 <__gethex+0x260>
 8004770:	f1bb 0f20 	cmp.w	fp, #32
 8004774:	d107      	bne.n	8004786 <__gethex+0x242>
 8004776:	9b02      	ldr	r3, [sp, #8]
 8004778:	9a00      	ldr	r2, [sp, #0]
 800477a:	f843 2b04 	str.w	r2, [r3], #4
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	469b      	mov	fp, r3
 8004786:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800478a:	f7ff fec5 	bl	8004518 <__hexdig_fun>
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	f000 000f 	and.w	r0, r0, #15
 8004794:	fa00 f00b 	lsl.w	r0, r0, fp
 8004798:	4303      	orrs	r3, r0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	f10b 0b04 	add.w	fp, fp, #4
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	e00d      	b.n	80047c0 <__gethex+0x27c>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	9a06      	ldr	r2, [sp, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	42bb      	cmp	r3, r7
 80047ac:	d3e0      	bcc.n	8004770 <__gethex+0x22c>
 80047ae:	4618      	mov	r0, r3
 80047b0:	9901      	ldr	r1, [sp, #4]
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	4652      	mov	r2, sl
 80047b6:	f001 fa0b 	bl	8005bd0 <strncmp>
 80047ba:	9b07      	ldr	r3, [sp, #28]
 80047bc:	2800      	cmp	r0, #0
 80047be:	d1d7      	bne.n	8004770 <__gethex+0x22c>
 80047c0:	461e      	mov	r6, r3
 80047c2:	e78b      	b.n	80046dc <__gethex+0x198>
 80047c4:	f04f 0a03 	mov.w	sl, #3
 80047c8:	e7b8      	b.n	800473c <__gethex+0x1f8>
 80047ca:	da0a      	bge.n	80047e2 <__gethex+0x29e>
 80047cc:	1a37      	subs	r7, r6, r0
 80047ce:	4621      	mov	r1, r4
 80047d0:	ee18 0a10 	vmov	r0, s16
 80047d4:	463a      	mov	r2, r7
 80047d6:	f000 fc2b 	bl	8005030 <__lshift>
 80047da:	1bed      	subs	r5, r5, r7
 80047dc:	4604      	mov	r4, r0
 80047de:	f100 0914 	add.w	r9, r0, #20
 80047e2:	f04f 0a00 	mov.w	sl, #0
 80047e6:	e7ae      	b.n	8004746 <__gethex+0x202>
 80047e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80047ec:	42a8      	cmp	r0, r5
 80047ee:	dd72      	ble.n	80048d6 <__gethex+0x392>
 80047f0:	1b45      	subs	r5, r0, r5
 80047f2:	42ae      	cmp	r6, r5
 80047f4:	dc36      	bgt.n	8004864 <__gethex+0x320>
 80047f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d02a      	beq.n	8004854 <__gethex+0x310>
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d02c      	beq.n	800485c <__gethex+0x318>
 8004802:	2b01      	cmp	r3, #1
 8004804:	d115      	bne.n	8004832 <__gethex+0x2ee>
 8004806:	42ae      	cmp	r6, r5
 8004808:	d113      	bne.n	8004832 <__gethex+0x2ee>
 800480a:	2e01      	cmp	r6, #1
 800480c:	d10b      	bne.n	8004826 <__gethex+0x2e2>
 800480e:	9a04      	ldr	r2, [sp, #16]
 8004810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	2301      	movs	r3, #1
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	f8c9 3000 	str.w	r3, [r9]
 800481e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004820:	2762      	movs	r7, #98	; 0x62
 8004822:	601c      	str	r4, [r3, #0]
 8004824:	e723      	b.n	800466e <__gethex+0x12a>
 8004826:	1e71      	subs	r1, r6, #1
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fe3f 	bl	80054ac <__any_on>
 800482e:	2800      	cmp	r0, #0
 8004830:	d1ed      	bne.n	800480e <__gethex+0x2ca>
 8004832:	ee18 0a10 	vmov	r0, s16
 8004836:	4621      	mov	r1, r4
 8004838:	f000 f9de 	bl	8004bf8 <_Bfree>
 800483c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800483e:	2300      	movs	r3, #0
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	2750      	movs	r7, #80	; 0x50
 8004844:	e713      	b.n	800466e <__gethex+0x12a>
 8004846:	bf00      	nop
 8004848:	08006a4c 	.word	0x08006a4c
 800484c:	080069d1 	.word	0x080069d1
 8004850:	080069e2 	.word	0x080069e2
 8004854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1eb      	bne.n	8004832 <__gethex+0x2ee>
 800485a:	e7d8      	b.n	800480e <__gethex+0x2ca>
 800485c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1d5      	bne.n	800480e <__gethex+0x2ca>
 8004862:	e7e6      	b.n	8004832 <__gethex+0x2ee>
 8004864:	1e6f      	subs	r7, r5, #1
 8004866:	f1ba 0f00 	cmp.w	sl, #0
 800486a:	d131      	bne.n	80048d0 <__gethex+0x38c>
 800486c:	b127      	cbz	r7, 8004878 <__gethex+0x334>
 800486e:	4639      	mov	r1, r7
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fe1b 	bl	80054ac <__any_on>
 8004876:	4682      	mov	sl, r0
 8004878:	117b      	asrs	r3, r7, #5
 800487a:	2101      	movs	r1, #1
 800487c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004880:	f007 071f 	and.w	r7, r7, #31
 8004884:	fa01 f707 	lsl.w	r7, r1, r7
 8004888:	421f      	tst	r7, r3
 800488a:	4629      	mov	r1, r5
 800488c:	4620      	mov	r0, r4
 800488e:	bf18      	it	ne
 8004890:	f04a 0a02 	orrne.w	sl, sl, #2
 8004894:	1b76      	subs	r6, r6, r5
 8004896:	f7ff fded 	bl	8004474 <rshift>
 800489a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800489e:	2702      	movs	r7, #2
 80048a0:	f1ba 0f00 	cmp.w	sl, #0
 80048a4:	d048      	beq.n	8004938 <__gethex+0x3f4>
 80048a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d015      	beq.n	80048da <__gethex+0x396>
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d017      	beq.n	80048e2 <__gethex+0x39e>
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d109      	bne.n	80048ca <__gethex+0x386>
 80048b6:	f01a 0f02 	tst.w	sl, #2
 80048ba:	d006      	beq.n	80048ca <__gethex+0x386>
 80048bc:	f8d9 0000 	ldr.w	r0, [r9]
 80048c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80048c4:	f01a 0f01 	tst.w	sl, #1
 80048c8:	d10e      	bne.n	80048e8 <__gethex+0x3a4>
 80048ca:	f047 0710 	orr.w	r7, r7, #16
 80048ce:	e033      	b.n	8004938 <__gethex+0x3f4>
 80048d0:	f04f 0a01 	mov.w	sl, #1
 80048d4:	e7d0      	b.n	8004878 <__gethex+0x334>
 80048d6:	2701      	movs	r7, #1
 80048d8:	e7e2      	b.n	80048a0 <__gethex+0x35c>
 80048da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048dc:	f1c3 0301 	rsb	r3, r3, #1
 80048e0:	9315      	str	r3, [sp, #84]	; 0x54
 80048e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <__gethex+0x386>
 80048e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80048ec:	f104 0314 	add.w	r3, r4, #20
 80048f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80048f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80048f8:	f04f 0c00 	mov.w	ip, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004902:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004906:	d01c      	beq.n	8004942 <__gethex+0x3fe>
 8004908:	3201      	adds	r2, #1
 800490a:	6002      	str	r2, [r0, #0]
 800490c:	2f02      	cmp	r7, #2
 800490e:	f104 0314 	add.w	r3, r4, #20
 8004912:	d13f      	bne.n	8004994 <__gethex+0x450>
 8004914:	f8d8 2000 	ldr.w	r2, [r8]
 8004918:	3a01      	subs	r2, #1
 800491a:	42b2      	cmp	r2, r6
 800491c:	d10a      	bne.n	8004934 <__gethex+0x3f0>
 800491e:	1171      	asrs	r1, r6, #5
 8004920:	2201      	movs	r2, #1
 8004922:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004926:	f006 061f 	and.w	r6, r6, #31
 800492a:	fa02 f606 	lsl.w	r6, r2, r6
 800492e:	421e      	tst	r6, r3
 8004930:	bf18      	it	ne
 8004932:	4617      	movne	r7, r2
 8004934:	f047 0720 	orr.w	r7, r7, #32
 8004938:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800493a:	601c      	str	r4, [r3, #0]
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	601d      	str	r5, [r3, #0]
 8004940:	e695      	b.n	800466e <__gethex+0x12a>
 8004942:	4299      	cmp	r1, r3
 8004944:	f843 cc04 	str.w	ip, [r3, #-4]
 8004948:	d8d8      	bhi.n	80048fc <__gethex+0x3b8>
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	459b      	cmp	fp, r3
 800494e:	db19      	blt.n	8004984 <__gethex+0x440>
 8004950:	6861      	ldr	r1, [r4, #4]
 8004952:	ee18 0a10 	vmov	r0, s16
 8004956:	3101      	adds	r1, #1
 8004958:	f000 f90e 	bl	8004b78 <_Balloc>
 800495c:	4681      	mov	r9, r0
 800495e:	b918      	cbnz	r0, 8004968 <__gethex+0x424>
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <__gethex+0x488>)
 8004962:	4602      	mov	r2, r0
 8004964:	2184      	movs	r1, #132	; 0x84
 8004966:	e6a8      	b.n	80046ba <__gethex+0x176>
 8004968:	6922      	ldr	r2, [r4, #16]
 800496a:	3202      	adds	r2, #2
 800496c:	f104 010c 	add.w	r1, r4, #12
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	300c      	adds	r0, #12
 8004974:	f7fe fc80 	bl	8003278 <memcpy>
 8004978:	4621      	mov	r1, r4
 800497a:	ee18 0a10 	vmov	r0, s16
 800497e:	f000 f93b 	bl	8004bf8 <_Bfree>
 8004982:	464c      	mov	r4, r9
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800498c:	6122      	str	r2, [r4, #16]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
 8004992:	e7bb      	b.n	800490c <__gethex+0x3c8>
 8004994:	6922      	ldr	r2, [r4, #16]
 8004996:	455a      	cmp	r2, fp
 8004998:	dd0b      	ble.n	80049b2 <__gethex+0x46e>
 800499a:	2101      	movs	r1, #1
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fd69 	bl	8004474 <rshift>
 80049a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80049a6:	3501      	adds	r5, #1
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	f6ff aed0 	blt.w	800474e <__gethex+0x20a>
 80049ae:	2701      	movs	r7, #1
 80049b0:	e7c0      	b.n	8004934 <__gethex+0x3f0>
 80049b2:	f016 061f 	ands.w	r6, r6, #31
 80049b6:	d0fa      	beq.n	80049ae <__gethex+0x46a>
 80049b8:	449a      	add	sl, r3
 80049ba:	f1c6 0620 	rsb	r6, r6, #32
 80049be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80049c2:	f000 f9cf 	bl	8004d64 <__hi0bits>
 80049c6:	42b0      	cmp	r0, r6
 80049c8:	dbe7      	blt.n	800499a <__gethex+0x456>
 80049ca:	e7f0      	b.n	80049ae <__gethex+0x46a>
 80049cc:	080069d1 	.word	0x080069d1

080049d0 <L_shift>:
 80049d0:	f1c2 0208 	rsb	r2, r2, #8
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	b570      	push	{r4, r5, r6, lr}
 80049d8:	f1c2 0620 	rsb	r6, r2, #32
 80049dc:	6843      	ldr	r3, [r0, #4]
 80049de:	6804      	ldr	r4, [r0, #0]
 80049e0:	fa03 f506 	lsl.w	r5, r3, r6
 80049e4:	432c      	orrs	r4, r5
 80049e6:	40d3      	lsrs	r3, r2
 80049e8:	6004      	str	r4, [r0, #0]
 80049ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80049ee:	4288      	cmp	r0, r1
 80049f0:	d3f4      	bcc.n	80049dc <L_shift+0xc>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}

080049f4 <__match>:
 80049f4:	b530      	push	{r4, r5, lr}
 80049f6:	6803      	ldr	r3, [r0, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	b914      	cbnz	r4, 8004a06 <__match+0x12>
 8004a00:	6003      	str	r3, [r0, #0]
 8004a02:	2001      	movs	r0, #1
 8004a04:	bd30      	pop	{r4, r5, pc}
 8004a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004a0e:	2d19      	cmp	r5, #25
 8004a10:	bf98      	it	ls
 8004a12:	3220      	addls	r2, #32
 8004a14:	42a2      	cmp	r2, r4
 8004a16:	d0f0      	beq.n	80049fa <__match+0x6>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e7f3      	b.n	8004a04 <__match+0x10>

08004a1c <__hexnan>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	680b      	ldr	r3, [r1, #0]
 8004a22:	6801      	ldr	r1, [r0, #0]
 8004a24:	115e      	asrs	r6, r3, #5
 8004a26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004a2a:	f013 031f 	ands.w	r3, r3, #31
 8004a2e:	b087      	sub	sp, #28
 8004a30:	bf18      	it	ne
 8004a32:	3604      	addne	r6, #4
 8004a34:	2500      	movs	r5, #0
 8004a36:	1f37      	subs	r7, r6, #4
 8004a38:	4682      	mov	sl, r0
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8004a42:	46b9      	mov	r9, r7
 8004a44:	463c      	mov	r4, r7
 8004a46:	9502      	str	r5, [sp, #8]
 8004a48:	46ab      	mov	fp, r5
 8004a4a:	784a      	ldrb	r2, [r1, #1]
 8004a4c:	1c4b      	adds	r3, r1, #1
 8004a4e:	9303      	str	r3, [sp, #12]
 8004a50:	b342      	cbz	r2, 8004aa4 <__hexnan+0x88>
 8004a52:	4610      	mov	r0, r2
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	9204      	str	r2, [sp, #16]
 8004a58:	f7ff fd5e 	bl	8004518 <__hexdig_fun>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d14f      	bne.n	8004b00 <__hexnan+0xe4>
 8004a60:	9a04      	ldr	r2, [sp, #16]
 8004a62:	9905      	ldr	r1, [sp, #20]
 8004a64:	2a20      	cmp	r2, #32
 8004a66:	d818      	bhi.n	8004a9a <__hexnan+0x7e>
 8004a68:	9b02      	ldr	r3, [sp, #8]
 8004a6a:	459b      	cmp	fp, r3
 8004a6c:	dd13      	ble.n	8004a96 <__hexnan+0x7a>
 8004a6e:	454c      	cmp	r4, r9
 8004a70:	d206      	bcs.n	8004a80 <__hexnan+0x64>
 8004a72:	2d07      	cmp	r5, #7
 8004a74:	dc04      	bgt.n	8004a80 <__hexnan+0x64>
 8004a76:	462a      	mov	r2, r5
 8004a78:	4649      	mov	r1, r9
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7ff ffa8 	bl	80049d0 <L_shift>
 8004a80:	4544      	cmp	r4, r8
 8004a82:	d950      	bls.n	8004b26 <__hexnan+0x10a>
 8004a84:	2300      	movs	r3, #0
 8004a86:	f1a4 0904 	sub.w	r9, r4, #4
 8004a8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8004a8e:	f8cd b008 	str.w	fp, [sp, #8]
 8004a92:	464c      	mov	r4, r9
 8004a94:	461d      	mov	r5, r3
 8004a96:	9903      	ldr	r1, [sp, #12]
 8004a98:	e7d7      	b.n	8004a4a <__hexnan+0x2e>
 8004a9a:	2a29      	cmp	r2, #41	; 0x29
 8004a9c:	d156      	bne.n	8004b4c <__hexnan+0x130>
 8004a9e:	3102      	adds	r1, #2
 8004aa0:	f8ca 1000 	str.w	r1, [sl]
 8004aa4:	f1bb 0f00 	cmp.w	fp, #0
 8004aa8:	d050      	beq.n	8004b4c <__hexnan+0x130>
 8004aaa:	454c      	cmp	r4, r9
 8004aac:	d206      	bcs.n	8004abc <__hexnan+0xa0>
 8004aae:	2d07      	cmp	r5, #7
 8004ab0:	dc04      	bgt.n	8004abc <__hexnan+0xa0>
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff ff8a 	bl	80049d0 <L_shift>
 8004abc:	4544      	cmp	r4, r8
 8004abe:	d934      	bls.n	8004b2a <__hexnan+0x10e>
 8004ac0:	f1a8 0204 	sub.w	r2, r8, #4
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	f853 1b04 	ldr.w	r1, [r3], #4
 8004aca:	f842 1f04 	str.w	r1, [r2, #4]!
 8004ace:	429f      	cmp	r7, r3
 8004ad0:	d2f9      	bcs.n	8004ac6 <__hexnan+0xaa>
 8004ad2:	1b3b      	subs	r3, r7, r4
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	3304      	adds	r3, #4
 8004ada:	3401      	adds	r4, #1
 8004adc:	3e03      	subs	r6, #3
 8004ade:	42b4      	cmp	r4, r6
 8004ae0:	bf88      	it	hi
 8004ae2:	2304      	movhi	r3, #4
 8004ae4:	4443      	add	r3, r8
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f843 2b04 	str.w	r2, [r3], #4
 8004aec:	429f      	cmp	r7, r3
 8004aee:	d2fb      	bcs.n	8004ae8 <__hexnan+0xcc>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	b91b      	cbnz	r3, 8004afc <__hexnan+0xe0>
 8004af4:	4547      	cmp	r7, r8
 8004af6:	d127      	bne.n	8004b48 <__hexnan+0x12c>
 8004af8:	2301      	movs	r3, #1
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	2005      	movs	r0, #5
 8004afe:	e026      	b.n	8004b4e <__hexnan+0x132>
 8004b00:	3501      	adds	r5, #1
 8004b02:	2d08      	cmp	r5, #8
 8004b04:	f10b 0b01 	add.w	fp, fp, #1
 8004b08:	dd06      	ble.n	8004b18 <__hexnan+0xfc>
 8004b0a:	4544      	cmp	r4, r8
 8004b0c:	d9c3      	bls.n	8004a96 <__hexnan+0x7a>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b14:	2501      	movs	r5, #1
 8004b16:	3c04      	subs	r4, #4
 8004b18:	6822      	ldr	r2, [r4, #0]
 8004b1a:	f000 000f 	and.w	r0, r0, #15
 8004b1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	e7b7      	b.n	8004a96 <__hexnan+0x7a>
 8004b26:	2508      	movs	r5, #8
 8004b28:	e7b5      	b.n	8004a96 <__hexnan+0x7a>
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0df      	beq.n	8004af0 <__hexnan+0xd4>
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b34:	f1c3 0320 	rsb	r3, r3, #32
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004b40:	401a      	ands	r2, r3
 8004b42:	f846 2c04 	str.w	r2, [r6, #-4]
 8004b46:	e7d3      	b.n	8004af0 <__hexnan+0xd4>
 8004b48:	3f04      	subs	r7, #4
 8004b4a:	e7d1      	b.n	8004af0 <__hexnan+0xd4>
 8004b4c:	2004      	movs	r0, #4
 8004b4e:	b007      	add	sp, #28
 8004b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b54 <__ascii_mbtowc>:
 8004b54:	b082      	sub	sp, #8
 8004b56:	b901      	cbnz	r1, 8004b5a <__ascii_mbtowc+0x6>
 8004b58:	a901      	add	r1, sp, #4
 8004b5a:	b142      	cbz	r2, 8004b6e <__ascii_mbtowc+0x1a>
 8004b5c:	b14b      	cbz	r3, 8004b72 <__ascii_mbtowc+0x1e>
 8004b5e:	7813      	ldrb	r3, [r2, #0]
 8004b60:	600b      	str	r3, [r1, #0]
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	1e10      	subs	r0, r2, #0
 8004b66:	bf18      	it	ne
 8004b68:	2001      	movne	r0, #1
 8004b6a:	b002      	add	sp, #8
 8004b6c:	4770      	bx	lr
 8004b6e:	4610      	mov	r0, r2
 8004b70:	e7fb      	b.n	8004b6a <__ascii_mbtowc+0x16>
 8004b72:	f06f 0001 	mvn.w	r0, #1
 8004b76:	e7f8      	b.n	8004b6a <__ascii_mbtowc+0x16>

08004b78 <_Balloc>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	b976      	cbnz	r6, 8004ba0 <_Balloc+0x28>
 8004b82:	2010      	movs	r0, #16
 8004b84:	f001 f874 	bl	8005c70 <malloc>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8004b8c:	b920      	cbnz	r0, 8004b98 <_Balloc+0x20>
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <_Balloc+0x78>)
 8004b90:	4818      	ldr	r0, [pc, #96]	; (8004bf4 <_Balloc+0x7c>)
 8004b92:	2166      	movs	r1, #102	; 0x66
 8004b94:	f001 f83c 	bl	8005c10 <__assert_func>
 8004b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b9c:	6006      	str	r6, [r0, #0]
 8004b9e:	60c6      	str	r6, [r0, #12]
 8004ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ba2:	68f3      	ldr	r3, [r6, #12]
 8004ba4:	b183      	cbz	r3, 8004bc8 <_Balloc+0x50>
 8004ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bae:	b9b8      	cbnz	r0, 8004be0 <_Balloc+0x68>
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8004bb6:	1d72      	adds	r2, r6, #5
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fc97 	bl	80054ee <_calloc_r>
 8004bc0:	b160      	cbz	r0, 8004bdc <_Balloc+0x64>
 8004bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bc6:	e00e      	b.n	8004be6 <_Balloc+0x6e>
 8004bc8:	2221      	movs	r2, #33	; 0x21
 8004bca:	2104      	movs	r1, #4
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f000 fc8e 	bl	80054ee <_calloc_r>
 8004bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd4:	60f0      	str	r0, [r6, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e4      	bne.n	8004ba6 <_Balloc+0x2e>
 8004bdc:	2000      	movs	r0, #0
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	6802      	ldr	r2, [r0, #0]
 8004be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004be6:	2300      	movs	r3, #0
 8004be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004bec:	e7f7      	b.n	8004bde <_Balloc+0x66>
 8004bee:	bf00      	nop
 8004bf0:	08006a60 	.word	0x08006a60
 8004bf4:	08006a77 	.word	0x08006a77

08004bf8 <_Bfree>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	b976      	cbnz	r6, 8004c20 <_Bfree+0x28>
 8004c02:	2010      	movs	r0, #16
 8004c04:	f001 f834 	bl	8005c70 <malloc>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8004c0c:	b920      	cbnz	r0, 8004c18 <_Bfree+0x20>
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <_Bfree+0x3c>)
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <_Bfree+0x40>)
 8004c12:	218a      	movs	r1, #138	; 0x8a
 8004c14:	f000 fffc 	bl	8005c10 <__assert_func>
 8004c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c1c:	6006      	str	r6, [r0, #0]
 8004c1e:	60c6      	str	r6, [r0, #12]
 8004c20:	b13c      	cbz	r4, 8004c32 <_Bfree+0x3a>
 8004c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c24:	6862      	ldr	r2, [r4, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c2c:	6021      	str	r1, [r4, #0]
 8004c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	08006a60 	.word	0x08006a60
 8004c38:	08006a77 	.word	0x08006a77

08004c3c <__multadd>:
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	690e      	ldr	r6, [r1, #16]
 8004c42:	4607      	mov	r7, r0
 8004c44:	4698      	mov	r8, r3
 8004c46:	460c      	mov	r4, r1
 8004c48:	f101 0014 	add.w	r0, r1, #20
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6805      	ldr	r5, [r0, #0]
 8004c50:	b2a9      	uxth	r1, r5
 8004c52:	fb02 8101 	mla	r1, r2, r1, r8
 8004c56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004c5a:	0c2d      	lsrs	r5, r5, #16
 8004c5c:	fb02 c505 	mla	r5, r2, r5, ip
 8004c60:	b289      	uxth	r1, r1
 8004c62:	3301      	adds	r3, #1
 8004c64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004c68:	429e      	cmp	r6, r3
 8004c6a:	f840 1b04 	str.w	r1, [r0], #4
 8004c6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004c72:	dcec      	bgt.n	8004c4e <__multadd+0x12>
 8004c74:	f1b8 0f00 	cmp.w	r8, #0
 8004c78:	d022      	beq.n	8004cc0 <__multadd+0x84>
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	42b3      	cmp	r3, r6
 8004c7e:	dc19      	bgt.n	8004cb4 <__multadd+0x78>
 8004c80:	6861      	ldr	r1, [r4, #4]
 8004c82:	4638      	mov	r0, r7
 8004c84:	3101      	adds	r1, #1
 8004c86:	f7ff ff77 	bl	8004b78 <_Balloc>
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	b928      	cbnz	r0, 8004c9a <__multadd+0x5e>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <__multadd+0x8c>)
 8004c92:	480e      	ldr	r0, [pc, #56]	; (8004ccc <__multadd+0x90>)
 8004c94:	21b5      	movs	r1, #181	; 0xb5
 8004c96:	f000 ffbb 	bl	8005c10 <__assert_func>
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	3202      	adds	r2, #2
 8004c9e:	f104 010c 	add.w	r1, r4, #12
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	300c      	adds	r0, #12
 8004ca6:	f7fe fae7 	bl	8003278 <memcpy>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ffa3 	bl	8004bf8 <_Bfree>
 8004cb2:	462c      	mov	r4, r5
 8004cb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004cb8:	3601      	adds	r6, #1
 8004cba:	f8c3 8014 	str.w	r8, [r3, #20]
 8004cbe:	6126      	str	r6, [r4, #16]
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc6:	bf00      	nop
 8004cc8:	080069d1 	.word	0x080069d1
 8004ccc:	08006a77 	.word	0x08006a77

08004cd0 <__s2b>:
 8004cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	4615      	mov	r5, r2
 8004cd8:	461f      	mov	r7, r3
 8004cda:	2209      	movs	r2, #9
 8004cdc:	3308      	adds	r3, #8
 8004cde:	4606      	mov	r6, r0
 8004ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	db09      	blt.n	8004d00 <__s2b+0x30>
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7ff ff43 	bl	8004b78 <_Balloc>
 8004cf2:	b940      	cbnz	r0, 8004d06 <__s2b+0x36>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <__s2b+0x8c>)
 8004cf8:	4819      	ldr	r0, [pc, #100]	; (8004d60 <__s2b+0x90>)
 8004cfa:	21ce      	movs	r1, #206	; 0xce
 8004cfc:	f000 ff88 	bl	8005c10 <__assert_func>
 8004d00:	0052      	lsls	r2, r2, #1
 8004d02:	3101      	adds	r1, #1
 8004d04:	e7f0      	b.n	8004ce8 <__s2b+0x18>
 8004d06:	9b08      	ldr	r3, [sp, #32]
 8004d08:	6143      	str	r3, [r0, #20]
 8004d0a:	2d09      	cmp	r5, #9
 8004d0c:	f04f 0301 	mov.w	r3, #1
 8004d10:	6103      	str	r3, [r0, #16]
 8004d12:	dd16      	ble.n	8004d42 <__s2b+0x72>
 8004d14:	f104 0909 	add.w	r9, r4, #9
 8004d18:	46c8      	mov	r8, r9
 8004d1a:	442c      	add	r4, r5
 8004d1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004d20:	4601      	mov	r1, r0
 8004d22:	3b30      	subs	r3, #48	; 0x30
 8004d24:	220a      	movs	r2, #10
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7ff ff88 	bl	8004c3c <__multadd>
 8004d2c:	45a0      	cmp	r8, r4
 8004d2e:	d1f5      	bne.n	8004d1c <__s2b+0x4c>
 8004d30:	f1a5 0408 	sub.w	r4, r5, #8
 8004d34:	444c      	add	r4, r9
 8004d36:	1b2d      	subs	r5, r5, r4
 8004d38:	1963      	adds	r3, r4, r5
 8004d3a:	42bb      	cmp	r3, r7
 8004d3c:	db04      	blt.n	8004d48 <__s2b+0x78>
 8004d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d42:	340a      	adds	r4, #10
 8004d44:	2509      	movs	r5, #9
 8004d46:	e7f6      	b.n	8004d36 <__s2b+0x66>
 8004d48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d4c:	4601      	mov	r1, r0
 8004d4e:	3b30      	subs	r3, #48	; 0x30
 8004d50:	220a      	movs	r2, #10
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7ff ff72 	bl	8004c3c <__multadd>
 8004d58:	e7ee      	b.n	8004d38 <__s2b+0x68>
 8004d5a:	bf00      	nop
 8004d5c:	080069d1 	.word	0x080069d1
 8004d60:	08006a77 	.word	0x08006a77

08004d64 <__hi0bits>:
 8004d64:	0c03      	lsrs	r3, r0, #16
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	b9d3      	cbnz	r3, 8004da0 <__hi0bits+0x3c>
 8004d6a:	0400      	lsls	r0, r0, #16
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d72:	bf04      	itt	eq
 8004d74:	0200      	lsleq	r0, r0, #8
 8004d76:	3308      	addeq	r3, #8
 8004d78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d7c:	bf04      	itt	eq
 8004d7e:	0100      	lsleq	r0, r0, #4
 8004d80:	3304      	addeq	r3, #4
 8004d82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d86:	bf04      	itt	eq
 8004d88:	0080      	lsleq	r0, r0, #2
 8004d8a:	3302      	addeq	r3, #2
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	db05      	blt.n	8004d9c <__hi0bits+0x38>
 8004d90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d94:	f103 0301 	add.w	r3, r3, #1
 8004d98:	bf08      	it	eq
 8004d9a:	2320      	moveq	r3, #32
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	4770      	bx	lr
 8004da0:	2300      	movs	r3, #0
 8004da2:	e7e4      	b.n	8004d6e <__hi0bits+0xa>

08004da4 <__lo0bits>:
 8004da4:	6803      	ldr	r3, [r0, #0]
 8004da6:	f013 0207 	ands.w	r2, r3, #7
 8004daa:	4601      	mov	r1, r0
 8004dac:	d00b      	beq.n	8004dc6 <__lo0bits+0x22>
 8004dae:	07da      	lsls	r2, r3, #31
 8004db0:	d424      	bmi.n	8004dfc <__lo0bits+0x58>
 8004db2:	0798      	lsls	r0, r3, #30
 8004db4:	bf49      	itett	mi
 8004db6:	085b      	lsrmi	r3, r3, #1
 8004db8:	089b      	lsrpl	r3, r3, #2
 8004dba:	2001      	movmi	r0, #1
 8004dbc:	600b      	strmi	r3, [r1, #0]
 8004dbe:	bf5c      	itt	pl
 8004dc0:	600b      	strpl	r3, [r1, #0]
 8004dc2:	2002      	movpl	r0, #2
 8004dc4:	4770      	bx	lr
 8004dc6:	b298      	uxth	r0, r3
 8004dc8:	b9b0      	cbnz	r0, 8004df8 <__lo0bits+0x54>
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	2010      	movs	r0, #16
 8004dce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004dd2:	bf04      	itt	eq
 8004dd4:	0a1b      	lsreq	r3, r3, #8
 8004dd6:	3008      	addeq	r0, #8
 8004dd8:	071a      	lsls	r2, r3, #28
 8004dda:	bf04      	itt	eq
 8004ddc:	091b      	lsreq	r3, r3, #4
 8004dde:	3004      	addeq	r0, #4
 8004de0:	079a      	lsls	r2, r3, #30
 8004de2:	bf04      	itt	eq
 8004de4:	089b      	lsreq	r3, r3, #2
 8004de6:	3002      	addeq	r0, #2
 8004de8:	07da      	lsls	r2, r3, #31
 8004dea:	d403      	bmi.n	8004df4 <__lo0bits+0x50>
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	f100 0001 	add.w	r0, r0, #1
 8004df2:	d005      	beq.n	8004e00 <__lo0bits+0x5c>
 8004df4:	600b      	str	r3, [r1, #0]
 8004df6:	4770      	bx	lr
 8004df8:	4610      	mov	r0, r2
 8004dfa:	e7e8      	b.n	8004dce <__lo0bits+0x2a>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4770      	bx	lr
 8004e00:	2020      	movs	r0, #32
 8004e02:	4770      	bx	lr

08004e04 <__i2b>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	460c      	mov	r4, r1
 8004e08:	2101      	movs	r1, #1
 8004e0a:	f7ff feb5 	bl	8004b78 <_Balloc>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	b928      	cbnz	r0, 8004e1e <__i2b+0x1a>
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <__i2b+0x24>)
 8004e14:	4805      	ldr	r0, [pc, #20]	; (8004e2c <__i2b+0x28>)
 8004e16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e1a:	f000 fef9 	bl	8005c10 <__assert_func>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	6144      	str	r4, [r0, #20]
 8004e22:	6103      	str	r3, [r0, #16]
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	bf00      	nop
 8004e28:	080069d1 	.word	0x080069d1
 8004e2c:	08006a77 	.word	0x08006a77

08004e30 <__multiply>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	4614      	mov	r4, r2
 8004e36:	690a      	ldr	r2, [r1, #16]
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bfb8      	it	lt
 8004e3e:	460b      	movlt	r3, r1
 8004e40:	460d      	mov	r5, r1
 8004e42:	bfbc      	itt	lt
 8004e44:	4625      	movlt	r5, r4
 8004e46:	461c      	movlt	r4, r3
 8004e48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004e4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004e50:	68ab      	ldr	r3, [r5, #8]
 8004e52:	6869      	ldr	r1, [r5, #4]
 8004e54:	eb0a 0709 	add.w	r7, sl, r9
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	bfb8      	it	lt
 8004e5e:	3101      	addlt	r1, #1
 8004e60:	f7ff fe8a 	bl	8004b78 <_Balloc>
 8004e64:	b930      	cbnz	r0, 8004e74 <__multiply+0x44>
 8004e66:	4602      	mov	r2, r0
 8004e68:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <__multiply+0x144>)
 8004e6a:	4843      	ldr	r0, [pc, #268]	; (8004f78 <__multiply+0x148>)
 8004e6c:	f240 115d 	movw	r1, #349	; 0x15d
 8004e70:	f000 fece 	bl	8005c10 <__assert_func>
 8004e74:	f100 0614 	add.w	r6, r0, #20
 8004e78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004e7c:	4633      	mov	r3, r6
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4543      	cmp	r3, r8
 8004e82:	d31e      	bcc.n	8004ec2 <__multiply+0x92>
 8004e84:	f105 0c14 	add.w	ip, r5, #20
 8004e88:	f104 0314 	add.w	r3, r4, #20
 8004e8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004e90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004e94:	9202      	str	r2, [sp, #8]
 8004e96:	ebac 0205 	sub.w	r2, ip, r5
 8004e9a:	3a15      	subs	r2, #21
 8004e9c:	f022 0203 	bic.w	r2, r2, #3
 8004ea0:	3204      	adds	r2, #4
 8004ea2:	f105 0115 	add.w	r1, r5, #21
 8004ea6:	458c      	cmp	ip, r1
 8004ea8:	bf38      	it	cc
 8004eaa:	2204      	movcc	r2, #4
 8004eac:	9201      	str	r2, [sp, #4]
 8004eae:	9a02      	ldr	r2, [sp, #8]
 8004eb0:	9303      	str	r3, [sp, #12]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d808      	bhi.n	8004ec8 <__multiply+0x98>
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	dc55      	bgt.n	8004f66 <__multiply+0x136>
 8004eba:	6107      	str	r7, [r0, #16]
 8004ebc:	b005      	add	sp, #20
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	f843 2b04 	str.w	r2, [r3], #4
 8004ec6:	e7db      	b.n	8004e80 <__multiply+0x50>
 8004ec8:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ecc:	f1ba 0f00 	cmp.w	sl, #0
 8004ed0:	d020      	beq.n	8004f14 <__multiply+0xe4>
 8004ed2:	f105 0e14 	add.w	lr, r5, #20
 8004ed6:	46b1      	mov	r9, r6
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004ede:	f8d9 b000 	ldr.w	fp, [r9]
 8004ee2:	b2a1      	uxth	r1, r4
 8004ee4:	fa1f fb8b 	uxth.w	fp, fp
 8004ee8:	fb0a b101 	mla	r1, sl, r1, fp
 8004eec:	4411      	add	r1, r2
 8004eee:	f8d9 2000 	ldr.w	r2, [r9]
 8004ef2:	0c24      	lsrs	r4, r4, #16
 8004ef4:	0c12      	lsrs	r2, r2, #16
 8004ef6:	fb0a 2404 	mla	r4, sl, r4, r2
 8004efa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004efe:	b289      	uxth	r1, r1
 8004f00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f04:	45f4      	cmp	ip, lr
 8004f06:	f849 1b04 	str.w	r1, [r9], #4
 8004f0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004f0e:	d8e4      	bhi.n	8004eda <__multiply+0xaa>
 8004f10:	9901      	ldr	r1, [sp, #4]
 8004f12:	5072      	str	r2, [r6, r1]
 8004f14:	9a03      	ldr	r2, [sp, #12]
 8004f16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	f1b9 0f00 	cmp.w	r9, #0
 8004f20:	d01f      	beq.n	8004f62 <__multiply+0x132>
 8004f22:	6834      	ldr	r4, [r6, #0]
 8004f24:	f105 0114 	add.w	r1, r5, #20
 8004f28:	46b6      	mov	lr, r6
 8004f2a:	f04f 0a00 	mov.w	sl, #0
 8004f2e:	880a      	ldrh	r2, [r1, #0]
 8004f30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004f34:	fb09 b202 	mla	r2, r9, r2, fp
 8004f38:	4492      	add	sl, r2
 8004f3a:	b2a4      	uxth	r4, r4
 8004f3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004f40:	f84e 4b04 	str.w	r4, [lr], #4
 8004f44:	f851 4b04 	ldr.w	r4, [r1], #4
 8004f48:	f8be 2000 	ldrh.w	r2, [lr]
 8004f4c:	0c24      	lsrs	r4, r4, #16
 8004f4e:	fb09 2404 	mla	r4, r9, r4, r2
 8004f52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004f56:	458c      	cmp	ip, r1
 8004f58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004f5c:	d8e7      	bhi.n	8004f2e <__multiply+0xfe>
 8004f5e:	9a01      	ldr	r2, [sp, #4]
 8004f60:	50b4      	str	r4, [r6, r2]
 8004f62:	3604      	adds	r6, #4
 8004f64:	e7a3      	b.n	8004eae <__multiply+0x7e>
 8004f66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1a5      	bne.n	8004eba <__multiply+0x8a>
 8004f6e:	3f01      	subs	r7, #1
 8004f70:	e7a1      	b.n	8004eb6 <__multiply+0x86>
 8004f72:	bf00      	nop
 8004f74:	080069d1 	.word	0x080069d1
 8004f78:	08006a77 	.word	0x08006a77

08004f7c <__pow5mult>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4615      	mov	r5, r2
 8004f82:	f012 0203 	ands.w	r2, r2, #3
 8004f86:	4606      	mov	r6, r0
 8004f88:	460f      	mov	r7, r1
 8004f8a:	d007      	beq.n	8004f9c <__pow5mult+0x20>
 8004f8c:	4c25      	ldr	r4, [pc, #148]	; (8005024 <__pow5mult+0xa8>)
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	2300      	movs	r3, #0
 8004f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f96:	f7ff fe51 	bl	8004c3c <__multadd>
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	10ad      	asrs	r5, r5, #2
 8004f9e:	d03d      	beq.n	800501c <__pow5mult+0xa0>
 8004fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004fa2:	b97c      	cbnz	r4, 8004fc4 <__pow5mult+0x48>
 8004fa4:	2010      	movs	r0, #16
 8004fa6:	f000 fe63 	bl	8005c70 <malloc>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6270      	str	r0, [r6, #36]	; 0x24
 8004fae:	b928      	cbnz	r0, 8004fbc <__pow5mult+0x40>
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <__pow5mult+0xac>)
 8004fb2:	481e      	ldr	r0, [pc, #120]	; (800502c <__pow5mult+0xb0>)
 8004fb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004fb8:	f000 fe2a 	bl	8005c10 <__assert_func>
 8004fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fc0:	6004      	str	r4, [r0, #0]
 8004fc2:	60c4      	str	r4, [r0, #12]
 8004fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fcc:	b94c      	cbnz	r4, 8004fe2 <__pow5mult+0x66>
 8004fce:	f240 2171 	movw	r1, #625	; 0x271
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7ff ff16 	bl	8004e04 <__i2b>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8004fde:	4604      	mov	r4, r0
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	f04f 0900 	mov.w	r9, #0
 8004fe6:	07eb      	lsls	r3, r5, #31
 8004fe8:	d50a      	bpl.n	8005000 <__pow5mult+0x84>
 8004fea:	4639      	mov	r1, r7
 8004fec:	4622      	mov	r2, r4
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff ff1e 	bl	8004e30 <__multiply>
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fdfd 	bl	8004bf8 <_Bfree>
 8004ffe:	4647      	mov	r7, r8
 8005000:	106d      	asrs	r5, r5, #1
 8005002:	d00b      	beq.n	800501c <__pow5mult+0xa0>
 8005004:	6820      	ldr	r0, [r4, #0]
 8005006:	b938      	cbnz	r0, 8005018 <__pow5mult+0x9c>
 8005008:	4622      	mov	r2, r4
 800500a:	4621      	mov	r1, r4
 800500c:	4630      	mov	r0, r6
 800500e:	f7ff ff0f 	bl	8004e30 <__multiply>
 8005012:	6020      	str	r0, [r4, #0]
 8005014:	f8c0 9000 	str.w	r9, [r0]
 8005018:	4604      	mov	r4, r0
 800501a:	e7e4      	b.n	8004fe6 <__pow5mult+0x6a>
 800501c:	4638      	mov	r0, r7
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	bf00      	nop
 8005024:	08006bc8 	.word	0x08006bc8
 8005028:	08006a60 	.word	0x08006a60
 800502c:	08006a77 	.word	0x08006a77

08005030 <__lshift>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	6849      	ldr	r1, [r1, #4]
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800503e:	68a3      	ldr	r3, [r4, #8]
 8005040:	4607      	mov	r7, r0
 8005042:	4691      	mov	r9, r2
 8005044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005048:	f108 0601 	add.w	r6, r8, #1
 800504c:	42b3      	cmp	r3, r6
 800504e:	db0b      	blt.n	8005068 <__lshift+0x38>
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff fd91 	bl	8004b78 <_Balloc>
 8005056:	4605      	mov	r5, r0
 8005058:	b948      	cbnz	r0, 800506e <__lshift+0x3e>
 800505a:	4602      	mov	r2, r0
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <__lshift+0xd0>)
 800505e:	4829      	ldr	r0, [pc, #164]	; (8005104 <__lshift+0xd4>)
 8005060:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005064:	f000 fdd4 	bl	8005c10 <__assert_func>
 8005068:	3101      	adds	r1, #1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	e7ee      	b.n	800504c <__lshift+0x1c>
 800506e:	2300      	movs	r3, #0
 8005070:	f100 0114 	add.w	r1, r0, #20
 8005074:	f100 0210 	add.w	r2, r0, #16
 8005078:	4618      	mov	r0, r3
 800507a:	4553      	cmp	r3, sl
 800507c:	db33      	blt.n	80050e6 <__lshift+0xb6>
 800507e:	6920      	ldr	r0, [r4, #16]
 8005080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005084:	f104 0314 	add.w	r3, r4, #20
 8005088:	f019 091f 	ands.w	r9, r9, #31
 800508c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005094:	d02b      	beq.n	80050ee <__lshift+0xbe>
 8005096:	f1c9 0e20 	rsb	lr, r9, #32
 800509a:	468a      	mov	sl, r1
 800509c:	2200      	movs	r2, #0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	fa00 f009 	lsl.w	r0, r0, r9
 80050a4:	4302      	orrs	r2, r0
 80050a6:	f84a 2b04 	str.w	r2, [sl], #4
 80050aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ae:	459c      	cmp	ip, r3
 80050b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80050b4:	d8f3      	bhi.n	800509e <__lshift+0x6e>
 80050b6:	ebac 0304 	sub.w	r3, ip, r4
 80050ba:	3b15      	subs	r3, #21
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	3304      	adds	r3, #4
 80050c2:	f104 0015 	add.w	r0, r4, #21
 80050c6:	4584      	cmp	ip, r0
 80050c8:	bf38      	it	cc
 80050ca:	2304      	movcc	r3, #4
 80050cc:	50ca      	str	r2, [r1, r3]
 80050ce:	b10a      	cbz	r2, 80050d4 <__lshift+0xa4>
 80050d0:	f108 0602 	add.w	r6, r8, #2
 80050d4:	3e01      	subs	r6, #1
 80050d6:	4638      	mov	r0, r7
 80050d8:	612e      	str	r6, [r5, #16]
 80050da:	4621      	mov	r1, r4
 80050dc:	f7ff fd8c 	bl	8004bf8 <_Bfree>
 80050e0:	4628      	mov	r0, r5
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80050ea:	3301      	adds	r3, #1
 80050ec:	e7c5      	b.n	800507a <__lshift+0x4a>
 80050ee:	3904      	subs	r1, #4
 80050f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80050f8:	459c      	cmp	ip, r3
 80050fa:	d8f9      	bhi.n	80050f0 <__lshift+0xc0>
 80050fc:	e7ea      	b.n	80050d4 <__lshift+0xa4>
 80050fe:	bf00      	nop
 8005100:	080069d1 	.word	0x080069d1
 8005104:	08006a77 	.word	0x08006a77

08005108 <__mcmp>:
 8005108:	b530      	push	{r4, r5, lr}
 800510a:	6902      	ldr	r2, [r0, #16]
 800510c:	690c      	ldr	r4, [r1, #16]
 800510e:	1b12      	subs	r2, r2, r4
 8005110:	d10e      	bne.n	8005130 <__mcmp+0x28>
 8005112:	f100 0314 	add.w	r3, r0, #20
 8005116:	3114      	adds	r1, #20
 8005118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800511c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005128:	42a5      	cmp	r5, r4
 800512a:	d003      	beq.n	8005134 <__mcmp+0x2c>
 800512c:	d305      	bcc.n	800513a <__mcmp+0x32>
 800512e:	2201      	movs	r2, #1
 8005130:	4610      	mov	r0, r2
 8005132:	bd30      	pop	{r4, r5, pc}
 8005134:	4283      	cmp	r3, r0
 8005136:	d3f3      	bcc.n	8005120 <__mcmp+0x18>
 8005138:	e7fa      	b.n	8005130 <__mcmp+0x28>
 800513a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800513e:	e7f7      	b.n	8005130 <__mcmp+0x28>

08005140 <__mdiff>:
 8005140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	460c      	mov	r4, r1
 8005146:	4606      	mov	r6, r0
 8005148:	4611      	mov	r1, r2
 800514a:	4620      	mov	r0, r4
 800514c:	4617      	mov	r7, r2
 800514e:	f7ff ffdb 	bl	8005108 <__mcmp>
 8005152:	1e05      	subs	r5, r0, #0
 8005154:	d110      	bne.n	8005178 <__mdiff+0x38>
 8005156:	4629      	mov	r1, r5
 8005158:	4630      	mov	r0, r6
 800515a:	f7ff fd0d 	bl	8004b78 <_Balloc>
 800515e:	b930      	cbnz	r0, 800516e <__mdiff+0x2e>
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <__mdiff+0x108>)
 8005162:	4602      	mov	r2, r0
 8005164:	f240 2132 	movw	r1, #562	; 0x232
 8005168:	4838      	ldr	r0, [pc, #224]	; (800524c <__mdiff+0x10c>)
 800516a:	f000 fd51 	bl	8005c10 <__assert_func>
 800516e:	2301      	movs	r3, #1
 8005170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	bfa4      	itt	ge
 800517a:	463b      	movge	r3, r7
 800517c:	4627      	movge	r7, r4
 800517e:	4630      	mov	r0, r6
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	bfa6      	itte	ge
 8005184:	461c      	movge	r4, r3
 8005186:	2500      	movge	r5, #0
 8005188:	2501      	movlt	r5, #1
 800518a:	f7ff fcf5 	bl	8004b78 <_Balloc>
 800518e:	b920      	cbnz	r0, 800519a <__mdiff+0x5a>
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <__mdiff+0x108>)
 8005192:	4602      	mov	r2, r0
 8005194:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005198:	e7e6      	b.n	8005168 <__mdiff+0x28>
 800519a:	693e      	ldr	r6, [r7, #16]
 800519c:	60c5      	str	r5, [r0, #12]
 800519e:	6925      	ldr	r5, [r4, #16]
 80051a0:	f107 0114 	add.w	r1, r7, #20
 80051a4:	f104 0914 	add.w	r9, r4, #20
 80051a8:	f100 0e14 	add.w	lr, r0, #20
 80051ac:	f107 0210 	add.w	r2, r7, #16
 80051b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80051b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80051b8:	46f2      	mov	sl, lr
 80051ba:	2700      	movs	r7, #0
 80051bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80051c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80051c4:	fa1f f883 	uxth.w	r8, r3
 80051c8:	fa17 f78b 	uxtah	r7, r7, fp
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	eba7 0808 	sub.w	r8, r7, r8
 80051d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80051d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80051da:	fa1f f888 	uxth.w	r8, r8
 80051de:	141f      	asrs	r7, r3, #16
 80051e0:	454d      	cmp	r5, r9
 80051e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80051e6:	f84a 3b04 	str.w	r3, [sl], #4
 80051ea:	d8e7      	bhi.n	80051bc <__mdiff+0x7c>
 80051ec:	1b2b      	subs	r3, r5, r4
 80051ee:	3b15      	subs	r3, #21
 80051f0:	f023 0303 	bic.w	r3, r3, #3
 80051f4:	3304      	adds	r3, #4
 80051f6:	3415      	adds	r4, #21
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	bf38      	it	cc
 80051fc:	2304      	movcc	r3, #4
 80051fe:	4419      	add	r1, r3
 8005200:	4473      	add	r3, lr
 8005202:	469e      	mov	lr, r3
 8005204:	460d      	mov	r5, r1
 8005206:	4565      	cmp	r5, ip
 8005208:	d30e      	bcc.n	8005228 <__mdiff+0xe8>
 800520a:	f10c 0203 	add.w	r2, ip, #3
 800520e:	1a52      	subs	r2, r2, r1
 8005210:	f022 0203 	bic.w	r2, r2, #3
 8005214:	3903      	subs	r1, #3
 8005216:	458c      	cmp	ip, r1
 8005218:	bf38      	it	cc
 800521a:	2200      	movcc	r2, #0
 800521c:	441a      	add	r2, r3
 800521e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005222:	b17b      	cbz	r3, 8005244 <__mdiff+0x104>
 8005224:	6106      	str	r6, [r0, #16]
 8005226:	e7a5      	b.n	8005174 <__mdiff+0x34>
 8005228:	f855 8b04 	ldr.w	r8, [r5], #4
 800522c:	fa17 f488 	uxtah	r4, r7, r8
 8005230:	1422      	asrs	r2, r4, #16
 8005232:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005236:	b2a4      	uxth	r4, r4
 8005238:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800523c:	f84e 4b04 	str.w	r4, [lr], #4
 8005240:	1417      	asrs	r7, r2, #16
 8005242:	e7e0      	b.n	8005206 <__mdiff+0xc6>
 8005244:	3e01      	subs	r6, #1
 8005246:	e7ea      	b.n	800521e <__mdiff+0xde>
 8005248:	080069d1 	.word	0x080069d1
 800524c:	08006a77 	.word	0x08006a77

08005250 <__ulp>:
 8005250:	b082      	sub	sp, #8
 8005252:	ed8d 0b00 	vstr	d0, [sp]
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	4912      	ldr	r1, [pc, #72]	; (80052a4 <__ulp+0x54>)
 800525a:	4019      	ands	r1, r3
 800525c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005260:	2900      	cmp	r1, #0
 8005262:	dd05      	ble.n	8005270 <__ulp+0x20>
 8005264:	2200      	movs	r2, #0
 8005266:	460b      	mov	r3, r1
 8005268:	ec43 2b10 	vmov	d0, r2, r3
 800526c:	b002      	add	sp, #8
 800526e:	4770      	bx	lr
 8005270:	4249      	negs	r1, r1
 8005272:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005276:	ea4f 5021 	mov.w	r0, r1, asr #20
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	da04      	bge.n	800528e <__ulp+0x3e>
 8005284:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005288:	fa41 f300 	asr.w	r3, r1, r0
 800528c:	e7ec      	b.n	8005268 <__ulp+0x18>
 800528e:	f1a0 0114 	sub.w	r1, r0, #20
 8005292:	291e      	cmp	r1, #30
 8005294:	bfda      	itte	le
 8005296:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800529a:	fa20 f101 	lsrle.w	r1, r0, r1
 800529e:	2101      	movgt	r1, #1
 80052a0:	460a      	mov	r2, r1
 80052a2:	e7e1      	b.n	8005268 <__ulp+0x18>
 80052a4:	7ff00000 	.word	0x7ff00000

080052a8 <__b2d>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	6905      	ldr	r5, [r0, #16]
 80052ac:	f100 0714 	add.w	r7, r0, #20
 80052b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80052b4:	1f2e      	subs	r6, r5, #4
 80052b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7ff fd52 	bl	8004d64 <__hi0bits>
 80052c0:	f1c0 0320 	rsb	r3, r0, #32
 80052c4:	280a      	cmp	r0, #10
 80052c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005344 <__b2d+0x9c>
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	dc14      	bgt.n	80052f8 <__b2d+0x50>
 80052ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80052d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80052d6:	42b7      	cmp	r7, r6
 80052d8:	ea41 030c 	orr.w	r3, r1, ip
 80052dc:	bf34      	ite	cc
 80052de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80052e2:	2100      	movcs	r1, #0
 80052e4:	3015      	adds	r0, #21
 80052e6:	fa04 f000 	lsl.w	r0, r4, r0
 80052ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80052ee:	ea40 0201 	orr.w	r2, r0, r1
 80052f2:	ec43 2b10 	vmov	d0, r2, r3
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	42b7      	cmp	r7, r6
 80052fa:	bf3a      	itte	cc
 80052fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005300:	f1a5 0608 	subcc.w	r6, r5, #8
 8005304:	2100      	movcs	r1, #0
 8005306:	380b      	subs	r0, #11
 8005308:	d017      	beq.n	800533a <__b2d+0x92>
 800530a:	f1c0 0c20 	rsb	ip, r0, #32
 800530e:	fa04 f500 	lsl.w	r5, r4, r0
 8005312:	42be      	cmp	r6, r7
 8005314:	fa21 f40c 	lsr.w	r4, r1, ip
 8005318:	ea45 0504 	orr.w	r5, r5, r4
 800531c:	bf8c      	ite	hi
 800531e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005322:	2400      	movls	r4, #0
 8005324:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005328:	fa01 f000 	lsl.w	r0, r1, r0
 800532c:	fa24 f40c 	lsr.w	r4, r4, ip
 8005330:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005334:	ea40 0204 	orr.w	r2, r0, r4
 8005338:	e7db      	b.n	80052f2 <__b2d+0x4a>
 800533a:	ea44 030c 	orr.w	r3, r4, ip
 800533e:	460a      	mov	r2, r1
 8005340:	e7d7      	b.n	80052f2 <__b2d+0x4a>
 8005342:	bf00      	nop
 8005344:	3ff00000 	.word	0x3ff00000

08005348 <__d2b>:
 8005348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4689      	mov	r9, r1
 800534e:	2101      	movs	r1, #1
 8005350:	ec57 6b10 	vmov	r6, r7, d0
 8005354:	4690      	mov	r8, r2
 8005356:	f7ff fc0f 	bl	8004b78 <_Balloc>
 800535a:	4604      	mov	r4, r0
 800535c:	b930      	cbnz	r0, 800536c <__d2b+0x24>
 800535e:	4602      	mov	r2, r0
 8005360:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <__d2b+0xb0>)
 8005362:	4826      	ldr	r0, [pc, #152]	; (80053fc <__d2b+0xb4>)
 8005364:	f240 310a 	movw	r1, #778	; 0x30a
 8005368:	f000 fc52 	bl	8005c10 <__assert_func>
 800536c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005374:	bb35      	cbnz	r5, 80053c4 <__d2b+0x7c>
 8005376:	2e00      	cmp	r6, #0
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	d028      	beq.n	80053ce <__d2b+0x86>
 800537c:	4668      	mov	r0, sp
 800537e:	9600      	str	r6, [sp, #0]
 8005380:	f7ff fd10 	bl	8004da4 <__lo0bits>
 8005384:	9900      	ldr	r1, [sp, #0]
 8005386:	b300      	cbz	r0, 80053ca <__d2b+0x82>
 8005388:	9a01      	ldr	r2, [sp, #4]
 800538a:	f1c0 0320 	rsb	r3, r0, #32
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	430b      	orrs	r3, r1
 8005394:	40c2      	lsrs	r2, r0
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	9201      	str	r2, [sp, #4]
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	61a3      	str	r3, [r4, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2202      	movne	r2, #2
 80053a4:	2201      	moveq	r2, #1
 80053a6:	6122      	str	r2, [r4, #16]
 80053a8:	b1d5      	cbz	r5, 80053e0 <__d2b+0x98>
 80053aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053ae:	4405      	add	r5, r0
 80053b0:	f8c9 5000 	str.w	r5, [r9]
 80053b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053b8:	f8c8 0000 	str.w	r0, [r8]
 80053bc:	4620      	mov	r0, r4
 80053be:	b003      	add	sp, #12
 80053c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c8:	e7d5      	b.n	8005376 <__d2b+0x2e>
 80053ca:	6161      	str	r1, [r4, #20]
 80053cc:	e7e5      	b.n	800539a <__d2b+0x52>
 80053ce:	a801      	add	r0, sp, #4
 80053d0:	f7ff fce8 	bl	8004da4 <__lo0bits>
 80053d4:	9b01      	ldr	r3, [sp, #4]
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	2201      	movs	r2, #1
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	3020      	adds	r0, #32
 80053de:	e7e3      	b.n	80053a8 <__d2b+0x60>
 80053e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053e8:	f8c9 0000 	str.w	r0, [r9]
 80053ec:	6918      	ldr	r0, [r3, #16]
 80053ee:	f7ff fcb9 	bl	8004d64 <__hi0bits>
 80053f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053f6:	e7df      	b.n	80053b8 <__d2b+0x70>
 80053f8:	080069d1 	.word	0x080069d1
 80053fc:	08006a77 	.word	0x08006a77

08005400 <__ratio>:
 8005400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	4688      	mov	r8, r1
 8005406:	4669      	mov	r1, sp
 8005408:	4681      	mov	r9, r0
 800540a:	f7ff ff4d 	bl	80052a8 <__b2d>
 800540e:	a901      	add	r1, sp, #4
 8005410:	4640      	mov	r0, r8
 8005412:	ec55 4b10 	vmov	r4, r5, d0
 8005416:	f7ff ff47 	bl	80052a8 <__b2d>
 800541a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800541e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005422:	eba3 0c02 	sub.w	ip, r3, r2
 8005426:	e9dd 3200 	ldrd	r3, r2, [sp]
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005430:	ec51 0b10 	vmov	r0, r1, d0
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfd6      	itet	le
 8005438:	460a      	movle	r2, r1
 800543a:	462a      	movgt	r2, r5
 800543c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005440:	468b      	mov	fp, r1
 8005442:	462f      	mov	r7, r5
 8005444:	bfd4      	ite	le
 8005446:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800544a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800544e:	4620      	mov	r0, r4
 8005450:	ee10 2a10 	vmov	r2, s0
 8005454:	465b      	mov	r3, fp
 8005456:	4639      	mov	r1, r7
 8005458:	f7fb fa18 	bl	800088c <__aeabi_ddiv>
 800545c:	ec41 0b10 	vmov	d0, r0, r1
 8005460:	b003      	add	sp, #12
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005466 <__copybits>:
 8005466:	3901      	subs	r1, #1
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	1149      	asrs	r1, r1, #5
 800546c:	6914      	ldr	r4, [r2, #16]
 800546e:	3101      	adds	r1, #1
 8005470:	f102 0314 	add.w	r3, r2, #20
 8005474:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005478:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800547c:	1f05      	subs	r5, r0, #4
 800547e:	42a3      	cmp	r3, r4
 8005480:	d30c      	bcc.n	800549c <__copybits+0x36>
 8005482:	1aa3      	subs	r3, r4, r2
 8005484:	3b11      	subs	r3, #17
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	3211      	adds	r2, #17
 800548c:	42a2      	cmp	r2, r4
 800548e:	bf88      	it	hi
 8005490:	2300      	movhi	r3, #0
 8005492:	4418      	add	r0, r3
 8005494:	2300      	movs	r3, #0
 8005496:	4288      	cmp	r0, r1
 8005498:	d305      	bcc.n	80054a6 <__copybits+0x40>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	f853 6b04 	ldr.w	r6, [r3], #4
 80054a0:	f845 6f04 	str.w	r6, [r5, #4]!
 80054a4:	e7eb      	b.n	800547e <__copybits+0x18>
 80054a6:	f840 3b04 	str.w	r3, [r0], #4
 80054aa:	e7f4      	b.n	8005496 <__copybits+0x30>

080054ac <__any_on>:
 80054ac:	f100 0214 	add.w	r2, r0, #20
 80054b0:	6900      	ldr	r0, [r0, #16]
 80054b2:	114b      	asrs	r3, r1, #5
 80054b4:	4298      	cmp	r0, r3
 80054b6:	b510      	push	{r4, lr}
 80054b8:	db11      	blt.n	80054de <__any_on+0x32>
 80054ba:	dd0a      	ble.n	80054d2 <__any_on+0x26>
 80054bc:	f011 011f 	ands.w	r1, r1, #31
 80054c0:	d007      	beq.n	80054d2 <__any_on+0x26>
 80054c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80054c6:	fa24 f001 	lsr.w	r0, r4, r1
 80054ca:	fa00 f101 	lsl.w	r1, r0, r1
 80054ce:	428c      	cmp	r4, r1
 80054d0:	d10b      	bne.n	80054ea <__any_on+0x3e>
 80054d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d803      	bhi.n	80054e2 <__any_on+0x36>
 80054da:	2000      	movs	r0, #0
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	4603      	mov	r3, r0
 80054e0:	e7f7      	b.n	80054d2 <__any_on+0x26>
 80054e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d0f5      	beq.n	80054d6 <__any_on+0x2a>
 80054ea:	2001      	movs	r0, #1
 80054ec:	e7f6      	b.n	80054dc <__any_on+0x30>

080054ee <_calloc_r>:
 80054ee:	b513      	push	{r0, r1, r4, lr}
 80054f0:	434a      	muls	r2, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	9201      	str	r2, [sp, #4]
 80054f6:	f000 f809 	bl	800550c <_malloc_r>
 80054fa:	4604      	mov	r4, r0
 80054fc:	b118      	cbz	r0, 8005506 <_calloc_r+0x18>
 80054fe:	9a01      	ldr	r2, [sp, #4]
 8005500:	2100      	movs	r1, #0
 8005502:	f7fd fec7 	bl	8003294 <memset>
 8005506:	4620      	mov	r0, r4
 8005508:	b002      	add	sp, #8
 800550a:	bd10      	pop	{r4, pc}

0800550c <_malloc_r>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	1ccd      	adds	r5, r1, #3
 8005510:	f025 0503 	bic.w	r5, r5, #3
 8005514:	3508      	adds	r5, #8
 8005516:	2d0c      	cmp	r5, #12
 8005518:	bf38      	it	cc
 800551a:	250c      	movcc	r5, #12
 800551c:	2d00      	cmp	r5, #0
 800551e:	4606      	mov	r6, r0
 8005520:	db01      	blt.n	8005526 <_malloc_r+0x1a>
 8005522:	42a9      	cmp	r1, r5
 8005524:	d903      	bls.n	800552e <_malloc_r+0x22>
 8005526:	230c      	movs	r3, #12
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	2000      	movs	r0, #0
 800552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552e:	f000 fbc1 	bl	8005cb4 <__malloc_lock>
 8005532:	4921      	ldr	r1, [pc, #132]	; (80055b8 <_malloc_r+0xac>)
 8005534:	680a      	ldr	r2, [r1, #0]
 8005536:	4614      	mov	r4, r2
 8005538:	b99c      	cbnz	r4, 8005562 <_malloc_r+0x56>
 800553a:	4f20      	ldr	r7, [pc, #128]	; (80055bc <_malloc_r+0xb0>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	b923      	cbnz	r3, 800554a <_malloc_r+0x3e>
 8005540:	4621      	mov	r1, r4
 8005542:	4630      	mov	r0, r6
 8005544:	f000 fb34 	bl	8005bb0 <_sbrk_r>
 8005548:	6038      	str	r0, [r7, #0]
 800554a:	4629      	mov	r1, r5
 800554c:	4630      	mov	r0, r6
 800554e:	f000 fb2f 	bl	8005bb0 <_sbrk_r>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	d123      	bne.n	800559e <_malloc_r+0x92>
 8005556:	230c      	movs	r3, #12
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	4630      	mov	r0, r6
 800555c:	f000 fbb0 	bl	8005cc0 <__malloc_unlock>
 8005560:	e7e3      	b.n	800552a <_malloc_r+0x1e>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	1b5b      	subs	r3, r3, r5
 8005566:	d417      	bmi.n	8005598 <_malloc_r+0x8c>
 8005568:	2b0b      	cmp	r3, #11
 800556a:	d903      	bls.n	8005574 <_malloc_r+0x68>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	441c      	add	r4, r3
 8005570:	6025      	str	r5, [r4, #0]
 8005572:	e004      	b.n	800557e <_malloc_r+0x72>
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	42a2      	cmp	r2, r4
 8005578:	bf0c      	ite	eq
 800557a:	600b      	streq	r3, [r1, #0]
 800557c:	6053      	strne	r3, [r2, #4]
 800557e:	4630      	mov	r0, r6
 8005580:	f000 fb9e 	bl	8005cc0 <__malloc_unlock>
 8005584:	f104 000b 	add.w	r0, r4, #11
 8005588:	1d23      	adds	r3, r4, #4
 800558a:	f020 0007 	bic.w	r0, r0, #7
 800558e:	1ac2      	subs	r2, r0, r3
 8005590:	d0cc      	beq.n	800552c <_malloc_r+0x20>
 8005592:	1a1b      	subs	r3, r3, r0
 8005594:	50a3      	str	r3, [r4, r2]
 8005596:	e7c9      	b.n	800552c <_malloc_r+0x20>
 8005598:	4622      	mov	r2, r4
 800559a:	6864      	ldr	r4, [r4, #4]
 800559c:	e7cc      	b.n	8005538 <_malloc_r+0x2c>
 800559e:	1cc4      	adds	r4, r0, #3
 80055a0:	f024 0403 	bic.w	r4, r4, #3
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d0e3      	beq.n	8005570 <_malloc_r+0x64>
 80055a8:	1a21      	subs	r1, r4, r0
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 fb00 	bl	8005bb0 <_sbrk_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d1dd      	bne.n	8005570 <_malloc_r+0x64>
 80055b4:	e7cf      	b.n	8005556 <_malloc_r+0x4a>
 80055b6:	bf00      	nop
 80055b8:	20000208 	.word	0x20000208
 80055bc:	2000020c 	.word	0x2000020c

080055c0 <__ssputs_r>:
 80055c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	688e      	ldr	r6, [r1, #8]
 80055c6:	429e      	cmp	r6, r3
 80055c8:	4682      	mov	sl, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4690      	mov	r8, r2
 80055ce:	461f      	mov	r7, r3
 80055d0:	d838      	bhi.n	8005644 <__ssputs_r+0x84>
 80055d2:	898a      	ldrh	r2, [r1, #12]
 80055d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055d8:	d032      	beq.n	8005640 <__ssputs_r+0x80>
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	6909      	ldr	r1, [r1, #16]
 80055de:	eba5 0901 	sub.w	r9, r5, r1
 80055e2:	6965      	ldr	r5, [r4, #20]
 80055e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ec:	3301      	adds	r3, #1
 80055ee:	444b      	add	r3, r9
 80055f0:	106d      	asrs	r5, r5, #1
 80055f2:	429d      	cmp	r5, r3
 80055f4:	bf38      	it	cc
 80055f6:	461d      	movcc	r5, r3
 80055f8:	0553      	lsls	r3, r2, #21
 80055fa:	d531      	bpl.n	8005660 <__ssputs_r+0xa0>
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7ff ff85 	bl	800550c <_malloc_r>
 8005602:	4606      	mov	r6, r0
 8005604:	b950      	cbnz	r0, 800561c <__ssputs_r+0x5c>
 8005606:	230c      	movs	r3, #12
 8005608:	f8ca 3000 	str.w	r3, [sl]
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561c:	6921      	ldr	r1, [r4, #16]
 800561e:	464a      	mov	r2, r9
 8005620:	f7fd fe2a 	bl	8003278 <memcpy>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	6126      	str	r6, [r4, #16]
 8005632:	6165      	str	r5, [r4, #20]
 8005634:	444e      	add	r6, r9
 8005636:	eba5 0509 	sub.w	r5, r5, r9
 800563a:	6026      	str	r6, [r4, #0]
 800563c:	60a5      	str	r5, [r4, #8]
 800563e:	463e      	mov	r6, r7
 8005640:	42be      	cmp	r6, r7
 8005642:	d900      	bls.n	8005646 <__ssputs_r+0x86>
 8005644:	463e      	mov	r6, r7
 8005646:	4632      	mov	r2, r6
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	4641      	mov	r1, r8
 800564c:	f000 fb18 	bl	8005c80 <memmove>
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	1b9b      	subs	r3, r3, r6
 8005656:	4432      	add	r2, r6
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6022      	str	r2, [r4, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	e7db      	b.n	8005618 <__ssputs_r+0x58>
 8005660:	462a      	mov	r2, r5
 8005662:	f000 fb83 	bl	8005d6c <_realloc_r>
 8005666:	4606      	mov	r6, r0
 8005668:	2800      	cmp	r0, #0
 800566a:	d1e1      	bne.n	8005630 <__ssputs_r+0x70>
 800566c:	6921      	ldr	r1, [r4, #16]
 800566e:	4650      	mov	r0, sl
 8005670:	f000 fb2c 	bl	8005ccc <_free_r>
 8005674:	e7c7      	b.n	8005606 <__ssputs_r+0x46>
	...

08005678 <_svfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4698      	mov	r8, r3
 800567e:	898b      	ldrh	r3, [r1, #12]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	b09d      	sub	sp, #116	; 0x74
 8005684:	4607      	mov	r7, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4614      	mov	r4, r2
 800568a:	d50e      	bpl.n	80056aa <_svfiprintf_r+0x32>
 800568c:	690b      	ldr	r3, [r1, #16]
 800568e:	b963      	cbnz	r3, 80056aa <_svfiprintf_r+0x32>
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	f7ff ff3b 	bl	800550c <_malloc_r>
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6128      	str	r0, [r5, #16]
 800569a:	b920      	cbnz	r0, 80056a6 <_svfiprintf_r+0x2e>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a4:	e0d1      	b.n	800584a <_svfiprintf_r+0x1d2>
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	616b      	str	r3, [r5, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	2320      	movs	r3, #32
 80056b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b8:	2330      	movs	r3, #48	; 0x30
 80056ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005864 <_svfiprintf_r+0x1ec>
 80056be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c2:	f04f 0901 	mov.w	r9, #1
 80056c6:	4623      	mov	r3, r4
 80056c8:	469a      	mov	sl, r3
 80056ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ce:	b10a      	cbz	r2, 80056d4 <_svfiprintf_r+0x5c>
 80056d0:	2a25      	cmp	r2, #37	; 0x25
 80056d2:	d1f9      	bne.n	80056c8 <_svfiprintf_r+0x50>
 80056d4:	ebba 0b04 	subs.w	fp, sl, r4
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x7a>
 80056da:	465b      	mov	r3, fp
 80056dc:	4622      	mov	r2, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ff6d 	bl	80055c0 <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80aa 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ee:	445a      	add	r2, fp
 80056f0:	9209      	str	r2, [sp, #36]	; 0x24
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a2 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005706:	f10a 0a01 	add.w	sl, sl, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005712:	931a      	str	r3, [sp, #104]	; 0x68
 8005714:	4654      	mov	r4, sl
 8005716:	2205      	movs	r2, #5
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4851      	ldr	r0, [pc, #324]	; (8005864 <_svfiprintf_r+0x1ec>)
 800571e:	f7fa fd7f 	bl	8000220 <memchr>
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xe6>
 8005726:	06d0      	lsls	r0, r2, #27
 8005728:	bf44      	itt	mi
 800572a:	2320      	movmi	r3, #32
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005730:	0711      	lsls	r1, r2, #28
 8005732:	bf44      	itt	mi
 8005734:	232b      	movmi	r3, #43	; 0x2b
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573a:	f89a 3000 	ldrb.w	r3, [sl]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d015      	beq.n	800576e <_svfiprintf_r+0xf6>
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	4654      	mov	r4, sl
 8005746:	2000      	movs	r0, #0
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4621      	mov	r1, r4
 800574e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005752:	3b30      	subs	r3, #48	; 0x30
 8005754:	2b09      	cmp	r3, #9
 8005756:	d94e      	bls.n	80057f6 <_svfiprintf_r+0x17e>
 8005758:	b1b0      	cbz	r0, 8005788 <_svfiprintf_r+0x110>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e014      	b.n	8005788 <_svfiprintf_r+0x110>
 800575e:	eba0 0308 	sub.w	r3, r0, r8
 8005762:	fa09 f303 	lsl.w	r3, r9, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	46a2      	mov	sl, r4
 800576c:	e7d2      	b.n	8005714 <_svfiprintf_r+0x9c>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbb      	ittet	lt
 800577a:	425b      	neglt	r3, r3
 800577c:	f042 0202 	orrlt.w	r2, r2, #2
 8005780:	9307      	strge	r3, [sp, #28]
 8005782:	9307      	strlt	r3, [sp, #28]
 8005784:	bfb8      	it	lt
 8005786:	9204      	strlt	r2, [sp, #16]
 8005788:	7823      	ldrb	r3, [r4, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d10c      	bne.n	80057a8 <_svfiprintf_r+0x130>
 800578e:	7863      	ldrb	r3, [r4, #1]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	d135      	bne.n	8005800 <_svfiprintf_r+0x188>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb8      	it	lt
 80057a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057a4:	3402      	adds	r4, #2
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005874 <_svfiprintf_r+0x1fc>
 80057ac:	7821      	ldrb	r1, [r4, #0]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4650      	mov	r0, sl
 80057b2:	f7fa fd35 	bl	8000220 <memchr>
 80057b6:	b140      	cbz	r0, 80057ca <_svfiprintf_r+0x152>
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	eba0 000a 	sub.w	r0, r0, sl
 80057be:	fa03 f000 	lsl.w	r0, r3, r0
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	4303      	orrs	r3, r0
 80057c6:	3401      	adds	r4, #1
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ce:	4826      	ldr	r0, [pc, #152]	; (8005868 <_svfiprintf_r+0x1f0>)
 80057d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d4:	2206      	movs	r2, #6
 80057d6:	f7fa fd23 	bl	8000220 <memchr>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d038      	beq.n	8005850 <_svfiprintf_r+0x1d8>
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <_svfiprintf_r+0x1f4>)
 80057e0:	bb1b      	cbnz	r3, 800582a <_svfiprintf_r+0x1b2>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	3307      	adds	r3, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	3308      	adds	r3, #8
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	4433      	add	r3, r6
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	e767      	b.n	80056c6 <_svfiprintf_r+0x4e>
 80057f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fa:	460c      	mov	r4, r1
 80057fc:	2001      	movs	r0, #1
 80057fe:	e7a5      	b.n	800574c <_svfiprintf_r+0xd4>
 8005800:	2300      	movs	r3, #0
 8005802:	3401      	adds	r4, #1
 8005804:	9305      	str	r3, [sp, #20]
 8005806:	4619      	mov	r1, r3
 8005808:	f04f 0c0a 	mov.w	ip, #10
 800580c:	4620      	mov	r0, r4
 800580e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005812:	3a30      	subs	r2, #48	; 0x30
 8005814:	2a09      	cmp	r2, #9
 8005816:	d903      	bls.n	8005820 <_svfiprintf_r+0x1a8>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0c5      	beq.n	80057a8 <_svfiprintf_r+0x130>
 800581c:	9105      	str	r1, [sp, #20]
 800581e:	e7c3      	b.n	80057a8 <_svfiprintf_r+0x130>
 8005820:	fb0c 2101 	mla	r1, ip, r1, r2
 8005824:	4604      	mov	r4, r0
 8005826:	2301      	movs	r3, #1
 8005828:	e7f0      	b.n	800580c <_svfiprintf_r+0x194>
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462a      	mov	r2, r5
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <_svfiprintf_r+0x1f8>)
 8005832:	a904      	add	r1, sp, #16
 8005834:	4638      	mov	r0, r7
 8005836:	f3af 8000 	nop.w
 800583a:	1c42      	adds	r2, r0, #1
 800583c:	4606      	mov	r6, r0
 800583e:	d1d6      	bne.n	80057ee <_svfiprintf_r+0x176>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	065b      	lsls	r3, r3, #25
 8005844:	f53f af2c 	bmi.w	80056a0 <_svfiprintf_r+0x28>
 8005848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584a:	b01d      	add	sp, #116	; 0x74
 800584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005850:	ab03      	add	r3, sp, #12
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462a      	mov	r2, r5
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <_svfiprintf_r+0x1f8>)
 8005858:	a904      	add	r1, sp, #16
 800585a:	4638      	mov	r0, r7
 800585c:	f000 f87a 	bl	8005954 <_printf_i>
 8005860:	e7eb      	b.n	800583a <_svfiprintf_r+0x1c2>
 8005862:	bf00      	nop
 8005864:	08006bd4 	.word	0x08006bd4
 8005868:	08006bde 	.word	0x08006bde
 800586c:	00000000 	.word	0x00000000
 8005870:	080055c1 	.word	0x080055c1
 8005874:	08006bda 	.word	0x08006bda

08005878 <_printf_common>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	4616      	mov	r6, r2
 800587e:	4699      	mov	r9, r3
 8005880:	688a      	ldr	r2, [r1, #8]
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005888:	4293      	cmp	r3, r2
 800588a:	bfb8      	it	lt
 800588c:	4613      	movlt	r3, r2
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005894:	4607      	mov	r7, r0
 8005896:	460c      	mov	r4, r1
 8005898:	b10a      	cbz	r2, 800589e <_printf_common+0x26>
 800589a:	3301      	adds	r3, #1
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	0699      	lsls	r1, r3, #26
 80058a2:	bf42      	ittt	mi
 80058a4:	6833      	ldrmi	r3, [r6, #0]
 80058a6:	3302      	addmi	r3, #2
 80058a8:	6033      	strmi	r3, [r6, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d106      	bne.n	80058c0 <_printf_common+0x48>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	42ab      	cmp	r3, r5
 80058be:	dc26      	bgt.n	800590e <_printf_common+0x96>
 80058c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c4:	1e13      	subs	r3, r2, #0
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	0692      	lsls	r2, r2, #26
 80058ce:	d42b      	bmi.n	8005928 <_printf_common+0xb0>
 80058d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d01e      	beq.n	800591c <_printf_common+0xa4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	68e5      	ldr	r5, [r4, #12]
 80058e2:	6832      	ldr	r2, [r6, #0]
 80058e4:	f003 0306 	and.w	r3, r3, #6
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	bf08      	it	eq
 80058ec:	1aad      	subeq	r5, r5, r2
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	bf0c      	ite	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	2500      	movne	r5, #0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfc4      	itt	gt
 80058fe:	1a9b      	subgt	r3, r3, r2
 8005900:	18ed      	addgt	r5, r5, r3
 8005902:	2600      	movs	r6, #0
 8005904:	341a      	adds	r4, #26
 8005906:	42b5      	cmp	r5, r6
 8005908:	d11a      	bne.n	8005940 <_printf_common+0xc8>
 800590a:	2000      	movs	r0, #0
 800590c:	e008      	b.n	8005920 <_printf_common+0xa8>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4649      	mov	r1, r9
 8005914:	4638      	mov	r0, r7
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d103      	bne.n	8005924 <_printf_common+0xac>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	3501      	adds	r5, #1
 8005926:	e7c6      	b.n	80058b6 <_printf_common+0x3e>
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	2030      	movs	r0, #48	; 0x30
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005932:	4422      	add	r2, r4
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593c:	3302      	adds	r3, #2
 800593e:	e7c7      	b.n	80058d0 <_printf_common+0x58>
 8005940:	2301      	movs	r3, #1
 8005942:	4622      	mov	r2, r4
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	3001      	adds	r0, #1
 800594c:	d0e6      	beq.n	800591c <_printf_common+0xa4>
 800594e:	3601      	adds	r6, #1
 8005950:	e7d9      	b.n	8005906 <_printf_common+0x8e>
	...

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	460c      	mov	r4, r1
 800595a:	4691      	mov	r9, r2
 800595c:	7e27      	ldrb	r7, [r4, #24]
 800595e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005960:	2f78      	cmp	r7, #120	; 0x78
 8005962:	4680      	mov	r8, r0
 8005964:	469a      	mov	sl, r3
 8005966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	; 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d8 	beq.w	8005b26 <_printf_i+0x1d2>
 8005976:	2f58      	cmp	r7, #88	; 0x58
 8005978:	f000 80a3 	beq.w	8005ac2 <_printf_i+0x16e>
 800597c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a001      	add	r0, pc, #4	; (adr r0, 8005994 <_printf_i+0x40>)
 8005990:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b0d 	.word	0x08005b0d
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005aef 	.word	0x08005aef
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b2f 	.word	0x08005b2f
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005af7 	.word	0x08005af7
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	600a      	str	r2, [r1, #0]
 80059f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0a3      	b.n	8005b48 <_printf_i+0x1f4>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	6808      	ldr	r0, [r1, #0]
 8005a04:	062e      	lsls	r6, r5, #24
 8005a06:	f100 0304 	add.w	r3, r0, #4
 8005a0a:	d50a      	bpl.n	8005a22 <_printf_i+0xce>
 8005a0c:	6805      	ldr	r5, [r0, #0]
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	da03      	bge.n	8005a1c <_printf_i+0xc8>
 8005a14:	232d      	movs	r3, #45	; 0x2d
 8005a16:	426d      	negs	r5, r5
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	485e      	ldr	r0, [pc, #376]	; (8005b98 <_printf_i+0x244>)
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e019      	b.n	8005a56 <_printf_i+0x102>
 8005a22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a26:	6805      	ldr	r5, [r0, #0]
 8005a28:	600b      	str	r3, [r1, #0]
 8005a2a:	bf18      	it	ne
 8005a2c:	b22d      	sxthne	r5, r5
 8005a2e:	e7ef      	b.n	8005a10 <_printf_i+0xbc>
 8005a30:	680b      	ldr	r3, [r1, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	1d18      	adds	r0, r3, #4
 8005a36:	6008      	str	r0, [r1, #0]
 8005a38:	0628      	lsls	r0, r5, #24
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0xec>
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <_printf_i+0xf2>
 8005a40:	0669      	lsls	r1, r5, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0xe8>
 8005a44:	881d      	ldrh	r5, [r3, #0]
 8005a46:	4854      	ldr	r0, [pc, #336]	; (8005b98 <_printf_i+0x244>)
 8005a48:	2f6f      	cmp	r7, #111	; 0x6f
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2308      	moveq	r3, #8
 8005a4e:	230a      	movne	r3, #10
 8005a50:	2100      	movs	r1, #0
 8005a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a56:	6866      	ldr	r6, [r4, #4]
 8005a58:	60a6      	str	r6, [r4, #8]
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	bfa2      	ittt	ge
 8005a5e:	6821      	ldrge	r1, [r4, #0]
 8005a60:	f021 0104 	bicge.w	r1, r1, #4
 8005a64:	6021      	strge	r1, [r4, #0]
 8005a66:	b90d      	cbnz	r5, 8005a6c <_printf_i+0x118>
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	d04d      	beq.n	8005b08 <_printf_i+0x1b4>
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a72:	fb03 5711 	mls	r7, r3, r1, r5
 8005a76:	5dc7      	ldrb	r7, [r0, r7]
 8005a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a7c:	462f      	mov	r7, r5
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	460d      	mov	r5, r1
 8005a82:	d9f4      	bls.n	8005a6e <_printf_i+0x11a>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10b      	bne.n	8005aa0 <_printf_i+0x14c>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07df      	lsls	r7, r3, #31
 8005a8c:	d508      	bpl.n	8005aa0 <_printf_i+0x14c>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	bfde      	ittt	le
 8005a96:	2330      	movle	r3, #48	; 0x30
 8005a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005aa0:	1b92      	subs	r2, r2, r6
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fee2 	bl	8005878 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d14c      	bne.n	8005b52 <_printf_i+0x1fe>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	4835      	ldr	r0, [pc, #212]	; (8005b98 <_printf_i+0x244>)
 8005ac4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	680e      	ldr	r6, [r1, #0]
 8005acc:	061f      	lsls	r7, r3, #24
 8005ace:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ad2:	600e      	str	r6, [r1, #0]
 8005ad4:	d514      	bpl.n	8005b00 <_printf_i+0x1ac>
 8005ad6:	07d9      	lsls	r1, r3, #31
 8005ad8:	bf44      	itt	mi
 8005ada:	f043 0320 	orrmi.w	r3, r3, #32
 8005ade:	6023      	strmi	r3, [r4, #0]
 8005ae0:	b91d      	cbnz	r5, 8005aea <_printf_i+0x196>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2310      	movs	r3, #16
 8005aec:	e7b0      	b.n	8005a50 <_printf_i+0xfc>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	2378      	movs	r3, #120	; 0x78
 8005af8:	4828      	ldr	r0, [pc, #160]	; (8005b9c <_printf_i+0x248>)
 8005afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afe:	e7e3      	b.n	8005ac8 <_printf_i+0x174>
 8005b00:	065e      	lsls	r6, r3, #25
 8005b02:	bf48      	it	mi
 8005b04:	b2ad      	uxthmi	r5, r5
 8005b06:	e7e6      	b.n	8005ad6 <_printf_i+0x182>
 8005b08:	4616      	mov	r6, r2
 8005b0a:	e7bb      	b.n	8005a84 <_printf_i+0x130>
 8005b0c:	680b      	ldr	r3, [r1, #0]
 8005b0e:	6826      	ldr	r6, [r4, #0]
 8005b10:	6960      	ldr	r0, [r4, #20]
 8005b12:	1d1d      	adds	r5, r3, #4
 8005b14:	600d      	str	r5, [r1, #0]
 8005b16:	0635      	lsls	r5, r6, #24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0x1cc>
 8005b1c:	6018      	str	r0, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0x1d2>
 8005b20:	0671      	lsls	r1, r6, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0x1c8>
 8005b24:	8018      	strh	r0, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	4616      	mov	r6, r2
 8005b2c:	e7ba      	b.n	8005aa4 <_printf_i+0x150>
 8005b2e:	680b      	ldr	r3, [r1, #0]
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	600a      	str	r2, [r1, #0]
 8005b34:	681e      	ldr	r6, [r3, #0]
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7fa fb70 	bl	8000220 <memchr>
 8005b40:	b108      	cbz	r0, 8005b46 <_printf_i+0x1f2>
 8005b42:	1b80      	subs	r0, r0, r6
 8005b44:	6060      	str	r0, [r4, #4]
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b50:	e7a8      	b.n	8005aa4 <_printf_i+0x150>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	4632      	mov	r2, r6
 8005b56:	4649      	mov	r1, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	47d0      	blx	sl
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0ab      	beq.n	8005ab8 <_printf_i+0x164>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	d413      	bmi.n	8005b8e <_printf_i+0x23a>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e7a4      	b.n	8005abc <_printf_i+0x168>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4632      	mov	r2, r6
 8005b76:	4649      	mov	r1, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	47d0      	blx	sl
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d09b      	beq.n	8005ab8 <_printf_i+0x164>
 8005b80:	3501      	adds	r5, #1
 8005b82:	68e3      	ldr	r3, [r4, #12]
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	1a5b      	subs	r3, r3, r1
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	dcf2      	bgt.n	8005b72 <_printf_i+0x21e>
 8005b8c:	e7eb      	b.n	8005b66 <_printf_i+0x212>
 8005b8e:	2500      	movs	r5, #0
 8005b90:	f104 0619 	add.w	r6, r4, #25
 8005b94:	e7f5      	b.n	8005b82 <_printf_i+0x22e>
 8005b96:	bf00      	nop
 8005b98:	08006be5 	.word	0x08006be5
 8005b9c:	08006bf6 	.word	0x08006bf6

08005ba0 <nan>:
 8005ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ba8 <nan+0x8>
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	7ff80000 	.word	0x7ff80000

08005bb0 <_sbrk_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <_sbrk_r+0x1c>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fb fd34 	bl	8001628 <_sbrk>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_sbrk_r+0x1a>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_sbrk_r+0x1a>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000678 	.word	0x20000678

08005bd0 <strncmp>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	b16a      	cbz	r2, 8005bf0 <strncmp+0x20>
 8005bd4:	3901      	subs	r1, #1
 8005bd6:	1884      	adds	r4, r0, r2
 8005bd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005bdc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <strncmp+0x1c>
 8005be4:	42a0      	cmp	r0, r4
 8005be6:	d001      	beq.n	8005bec <strncmp+0x1c>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f5      	bne.n	8005bd8 <strncmp+0x8>
 8005bec:	1a98      	subs	r0, r3, r2
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	e7fc      	b.n	8005bee <strncmp+0x1e>

08005bf4 <__ascii_wctomb>:
 8005bf4:	b149      	cbz	r1, 8005c0a <__ascii_wctomb+0x16>
 8005bf6:	2aff      	cmp	r2, #255	; 0xff
 8005bf8:	bf85      	ittet	hi
 8005bfa:	238a      	movhi	r3, #138	; 0x8a
 8005bfc:	6003      	strhi	r3, [r0, #0]
 8005bfe:	700a      	strbls	r2, [r1, #0]
 8005c00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005c04:	bf98      	it	ls
 8005c06:	2001      	movls	r0, #1
 8005c08:	4770      	bx	lr
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	4770      	bx	lr
	...

08005c10 <__assert_func>:
 8005c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c12:	4614      	mov	r4, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <__assert_func+0x2c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	68d8      	ldr	r0, [r3, #12]
 8005c1e:	b14c      	cbz	r4, 8005c34 <__assert_func+0x24>
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <__assert_func+0x30>)
 8005c22:	9100      	str	r1, [sp, #0]
 8005c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c28:	4906      	ldr	r1, [pc, #24]	; (8005c44 <__assert_func+0x34>)
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f000 f80e 	bl	8005c4c <fiprintf>
 8005c30:	f000 fadc 	bl	80061ec <abort>
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__assert_func+0x38>)
 8005c36:	461c      	mov	r4, r3
 8005c38:	e7f3      	b.n	8005c22 <__assert_func+0x12>
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	08006c07 	.word	0x08006c07
 8005c44:	08006c14 	.word	0x08006c14
 8005c48:	08006c42 	.word	0x08006c42

08005c4c <fiprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b503      	push	{r0, r1, lr}
 8005c50:	4601      	mov	r1, r0
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <fiprintf+0x20>)
 8005c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	f000 f8d5 	bl	8005e0c <_vfiprintf_r>
 8005c62:	b002      	add	sp, #8
 8005c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c68:	b003      	add	sp, #12
 8005c6a:	4770      	bx	lr
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <malloc>:
 8005c70:	4b02      	ldr	r3, [pc, #8]	; (8005c7c <malloc+0xc>)
 8005c72:	4601      	mov	r1, r0
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f7ff bc49 	b.w	800550c <_malloc_r>
 8005c7a:	bf00      	nop
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <memmove>:
 8005c80:	4288      	cmp	r0, r1
 8005c82:	b510      	push	{r4, lr}
 8005c84:	eb01 0402 	add.w	r4, r1, r2
 8005c88:	d902      	bls.n	8005c90 <memmove+0x10>
 8005c8a:	4284      	cmp	r4, r0
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	d807      	bhi.n	8005ca0 <memmove+0x20>
 8005c90:	1e43      	subs	r3, r0, #1
 8005c92:	42a1      	cmp	r1, r4
 8005c94:	d008      	beq.n	8005ca8 <memmove+0x28>
 8005c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9e:	e7f8      	b.n	8005c92 <memmove+0x12>
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	428a      	cmp	r2, r1
 8005ca6:	d100      	bne.n	8005caa <memmove+0x2a>
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cb2:	e7f7      	b.n	8005ca4 <memmove+0x24>

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f000 bc59 	b.w	800656c <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20000680 	.word	0x20000680

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f000 bc54 	b.w	800656e <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000680 	.word	0x20000680

08005ccc <_free_r>:
 8005ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	d048      	beq.n	8005d64 <_free_r+0x98>
 8005cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd6:	9001      	str	r0, [sp, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f1a1 0404 	sub.w	r4, r1, #4
 8005cde:	bfb8      	it	lt
 8005ce0:	18e4      	addlt	r4, r4, r3
 8005ce2:	f7ff ffe7 	bl	8005cb4 <__malloc_lock>
 8005ce6:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <_free_r+0x9c>)
 8005ce8:	9801      	ldr	r0, [sp, #4]
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	4615      	mov	r5, r2
 8005cee:	b933      	cbnz	r3, 8005cfe <_free_r+0x32>
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	6014      	str	r4, [r2, #0]
 8005cf4:	b003      	add	sp, #12
 8005cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cfa:	f7ff bfe1 	b.w	8005cc0 <__malloc_unlock>
 8005cfe:	42a3      	cmp	r3, r4
 8005d00:	d90b      	bls.n	8005d1a <_free_r+0x4e>
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	1862      	adds	r2, r4, r1
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bf04      	itt	eq
 8005d0a:	681a      	ldreq	r2, [r3, #0]
 8005d0c:	685b      	ldreq	r3, [r3, #4]
 8005d0e:	6063      	str	r3, [r4, #4]
 8005d10:	bf04      	itt	eq
 8005d12:	1852      	addeq	r2, r2, r1
 8005d14:	6022      	streq	r2, [r4, #0]
 8005d16:	602c      	str	r4, [r5, #0]
 8005d18:	e7ec      	b.n	8005cf4 <_free_r+0x28>
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b10b      	cbz	r3, 8005d24 <_free_r+0x58>
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d9fa      	bls.n	8005d1a <_free_r+0x4e>
 8005d24:	6811      	ldr	r1, [r2, #0]
 8005d26:	1855      	adds	r5, r2, r1
 8005d28:	42a5      	cmp	r5, r4
 8005d2a:	d10b      	bne.n	8005d44 <_free_r+0x78>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	4421      	add	r1, r4
 8005d30:	1854      	adds	r4, r2, r1
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	d1dd      	bne.n	8005cf4 <_free_r+0x28>
 8005d38:	681c      	ldr	r4, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	6053      	str	r3, [r2, #4]
 8005d3e:	4421      	add	r1, r4
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	e7d7      	b.n	8005cf4 <_free_r+0x28>
 8005d44:	d902      	bls.n	8005d4c <_free_r+0x80>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	e7d3      	b.n	8005cf4 <_free_r+0x28>
 8005d4c:	6825      	ldr	r5, [r4, #0]
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf04      	itt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	bf04      	itt	eq
 8005d5c:	1949      	addeq	r1, r1, r5
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	6054      	str	r4, [r2, #4]
 8005d62:	e7c7      	b.n	8005cf4 <_free_r+0x28>
 8005d64:	b003      	add	sp, #12
 8005d66:	bd30      	pop	{r4, r5, pc}
 8005d68:	20000208 	.word	0x20000208

08005d6c <_realloc_r>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	4607      	mov	r7, r0
 8005d70:	4614      	mov	r4, r2
 8005d72:	460e      	mov	r6, r1
 8005d74:	b921      	cbnz	r1, 8005d80 <_realloc_r+0x14>
 8005d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	f7ff bbc6 	b.w	800550c <_malloc_r>
 8005d80:	b922      	cbnz	r2, 8005d8c <_realloc_r+0x20>
 8005d82:	f7ff ffa3 	bl	8005ccc <_free_r>
 8005d86:	4625      	mov	r5, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	f000 fc54 	bl	8006638 <_malloc_usable_size_r>
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d20f      	bcs.n	8005db4 <_realloc_r+0x48>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7ff fbb8 	bl	800550c <_malloc_r>
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d0f2      	beq.n	8005d88 <_realloc_r+0x1c>
 8005da2:	4631      	mov	r1, r6
 8005da4:	4622      	mov	r2, r4
 8005da6:	f7fd fa67 	bl	8003278 <memcpy>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ff8d 	bl	8005ccc <_free_r>
 8005db2:	e7e9      	b.n	8005d88 <_realloc_r+0x1c>
 8005db4:	4635      	mov	r5, r6
 8005db6:	e7e7      	b.n	8005d88 <_realloc_r+0x1c>

08005db8 <__sfputc_r>:
 8005db8:	6893      	ldr	r3, [r2, #8]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	b410      	push	{r4}
 8005dc0:	6093      	str	r3, [r2, #8]
 8005dc2:	da08      	bge.n	8005dd6 <__sfputc_r+0x1e>
 8005dc4:	6994      	ldr	r4, [r2, #24]
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	db01      	blt.n	8005dce <__sfputc_r+0x16>
 8005dca:	290a      	cmp	r1, #10
 8005dcc:	d103      	bne.n	8005dd6 <__sfputc_r+0x1e>
 8005dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd2:	f000 b94b 	b.w	800606c <__swbuf_r>
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	1c58      	adds	r0, r3, #1
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	7019      	strb	r1, [r3, #0]
 8005dde:	4608      	mov	r0, r1
 8005de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <__sfputs_r>:
 8005de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de8:	4606      	mov	r6, r0
 8005dea:	460f      	mov	r7, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	18d5      	adds	r5, r2, r3
 8005df0:	42ac      	cmp	r4, r5
 8005df2:	d101      	bne.n	8005df8 <__sfputs_r+0x12>
 8005df4:	2000      	movs	r0, #0
 8005df6:	e007      	b.n	8005e08 <__sfputs_r+0x22>
 8005df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dfc:	463a      	mov	r2, r7
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ffda 	bl	8005db8 <__sfputc_r>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d1f3      	bne.n	8005df0 <__sfputs_r+0xa>
 8005e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e0c <_vfiprintf_r>:
 8005e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	460d      	mov	r5, r1
 8005e12:	b09d      	sub	sp, #116	; 0x74
 8005e14:	4614      	mov	r4, r2
 8005e16:	4698      	mov	r8, r3
 8005e18:	4606      	mov	r6, r0
 8005e1a:	b118      	cbz	r0, 8005e24 <_vfiprintf_r+0x18>
 8005e1c:	6983      	ldr	r3, [r0, #24]
 8005e1e:	b90b      	cbnz	r3, 8005e24 <_vfiprintf_r+0x18>
 8005e20:	f000 fb06 	bl	8006430 <__sinit>
 8005e24:	4b89      	ldr	r3, [pc, #548]	; (800604c <_vfiprintf_r+0x240>)
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d11b      	bne.n	8005e62 <_vfiprintf_r+0x56>
 8005e2a:	6875      	ldr	r5, [r6, #4]
 8005e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e2e:	07d9      	lsls	r1, r3, #31
 8005e30:	d405      	bmi.n	8005e3e <_vfiprintf_r+0x32>
 8005e32:	89ab      	ldrh	r3, [r5, #12]
 8005e34:	059a      	lsls	r2, r3, #22
 8005e36:	d402      	bmi.n	8005e3e <_vfiprintf_r+0x32>
 8005e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e3a:	f000 fb97 	bl	800656c <__retarget_lock_acquire_recursive>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	071b      	lsls	r3, r3, #28
 8005e42:	d501      	bpl.n	8005e48 <_vfiprintf_r+0x3c>
 8005e44:	692b      	ldr	r3, [r5, #16]
 8005e46:	b9eb      	cbnz	r3, 8005e84 <_vfiprintf_r+0x78>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 f960 	bl	8006110 <__swsetup_r>
 8005e50:	b1c0      	cbz	r0, 8005e84 <_vfiprintf_r+0x78>
 8005e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e54:	07dc      	lsls	r4, r3, #31
 8005e56:	d50e      	bpl.n	8005e76 <_vfiprintf_r+0x6a>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e5c:	b01d      	add	sp, #116	; 0x74
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e62:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <_vfiprintf_r+0x244>)
 8005e64:	429d      	cmp	r5, r3
 8005e66:	d101      	bne.n	8005e6c <_vfiprintf_r+0x60>
 8005e68:	68b5      	ldr	r5, [r6, #8]
 8005e6a:	e7df      	b.n	8005e2c <_vfiprintf_r+0x20>
 8005e6c:	4b79      	ldr	r3, [pc, #484]	; (8006054 <_vfiprintf_r+0x248>)
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	bf08      	it	eq
 8005e72:	68f5      	ldreq	r5, [r6, #12]
 8005e74:	e7da      	b.n	8005e2c <_vfiprintf_r+0x20>
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	0598      	lsls	r0, r3, #22
 8005e7a:	d4ed      	bmi.n	8005e58 <_vfiprintf_r+0x4c>
 8005e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e7e:	f000 fb76 	bl	800656e <__retarget_lock_release_recursive>
 8005e82:	e7e9      	b.n	8005e58 <_vfiprintf_r+0x4c>
 8005e84:	2300      	movs	r3, #0
 8005e86:	9309      	str	r3, [sp, #36]	; 0x24
 8005e88:	2320      	movs	r3, #32
 8005e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e92:	2330      	movs	r3, #48	; 0x30
 8005e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006058 <_vfiprintf_r+0x24c>
 8005e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e9c:	f04f 0901 	mov.w	r9, #1
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	469a      	mov	sl, r3
 8005ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ea8:	b10a      	cbz	r2, 8005eae <_vfiprintf_r+0xa2>
 8005eaa:	2a25      	cmp	r2, #37	; 0x25
 8005eac:	d1f9      	bne.n	8005ea2 <_vfiprintf_r+0x96>
 8005eae:	ebba 0b04 	subs.w	fp, sl, r4
 8005eb2:	d00b      	beq.n	8005ecc <_vfiprintf_r+0xc0>
 8005eb4:	465b      	mov	r3, fp
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff ff93 	bl	8005de6 <__sfputs_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f000 80aa 	beq.w	800601a <_vfiprintf_r+0x20e>
 8005ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec8:	445a      	add	r2, fp
 8005eca:	9209      	str	r2, [sp, #36]	; 0x24
 8005ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80a2 	beq.w	800601a <_vfiprintf_r+0x20e>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ee0:	f10a 0a01 	add.w	sl, sl, #1
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	9307      	str	r3, [sp, #28]
 8005ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eec:	931a      	str	r3, [sp, #104]	; 0x68
 8005eee:	4654      	mov	r4, sl
 8005ef0:	2205      	movs	r2, #5
 8005ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef6:	4858      	ldr	r0, [pc, #352]	; (8006058 <_vfiprintf_r+0x24c>)
 8005ef8:	f7fa f992 	bl	8000220 <memchr>
 8005efc:	9a04      	ldr	r2, [sp, #16]
 8005efe:	b9d8      	cbnz	r0, 8005f38 <_vfiprintf_r+0x12c>
 8005f00:	06d1      	lsls	r1, r2, #27
 8005f02:	bf44      	itt	mi
 8005f04:	2320      	movmi	r3, #32
 8005f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f0a:	0713      	lsls	r3, r2, #28
 8005f0c:	bf44      	itt	mi
 8005f0e:	232b      	movmi	r3, #43	; 0x2b
 8005f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f14:	f89a 3000 	ldrb.w	r3, [sl]
 8005f18:	2b2a      	cmp	r3, #42	; 0x2a
 8005f1a:	d015      	beq.n	8005f48 <_vfiprintf_r+0x13c>
 8005f1c:	9a07      	ldr	r2, [sp, #28]
 8005f1e:	4654      	mov	r4, sl
 8005f20:	2000      	movs	r0, #0
 8005f22:	f04f 0c0a 	mov.w	ip, #10
 8005f26:	4621      	mov	r1, r4
 8005f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f2c:	3b30      	subs	r3, #48	; 0x30
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d94e      	bls.n	8005fd0 <_vfiprintf_r+0x1c4>
 8005f32:	b1b0      	cbz	r0, 8005f62 <_vfiprintf_r+0x156>
 8005f34:	9207      	str	r2, [sp, #28]
 8005f36:	e014      	b.n	8005f62 <_vfiprintf_r+0x156>
 8005f38:	eba0 0308 	sub.w	r3, r0, r8
 8005f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f40:	4313      	orrs	r3, r2
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	46a2      	mov	sl, r4
 8005f46:	e7d2      	b.n	8005eee <_vfiprintf_r+0xe2>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	1d19      	adds	r1, r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	9103      	str	r1, [sp, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bfbb      	ittet	lt
 8005f54:	425b      	neglt	r3, r3
 8005f56:	f042 0202 	orrlt.w	r2, r2, #2
 8005f5a:	9307      	strge	r3, [sp, #28]
 8005f5c:	9307      	strlt	r3, [sp, #28]
 8005f5e:	bfb8      	it	lt
 8005f60:	9204      	strlt	r2, [sp, #16]
 8005f62:	7823      	ldrb	r3, [r4, #0]
 8005f64:	2b2e      	cmp	r3, #46	; 0x2e
 8005f66:	d10c      	bne.n	8005f82 <_vfiprintf_r+0x176>
 8005f68:	7863      	ldrb	r3, [r4, #1]
 8005f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6c:	d135      	bne.n	8005fda <_vfiprintf_r+0x1ce>
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	1d1a      	adds	r2, r3, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	9203      	str	r2, [sp, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f7e:	3402      	adds	r4, #2
 8005f80:	9305      	str	r3, [sp, #20]
 8005f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006068 <_vfiprintf_r+0x25c>
 8005f86:	7821      	ldrb	r1, [r4, #0]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	f7fa f948 	bl	8000220 <memchr>
 8005f90:	b140      	cbz	r0, 8005fa4 <_vfiprintf_r+0x198>
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	eba0 000a 	sub.w	r0, r0, sl
 8005f98:	fa03 f000 	lsl.w	r0, r3, r0
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	4303      	orrs	r3, r0
 8005fa0:	3401      	adds	r4, #1
 8005fa2:	9304      	str	r3, [sp, #16]
 8005fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa8:	482c      	ldr	r0, [pc, #176]	; (800605c <_vfiprintf_r+0x250>)
 8005faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fae:	2206      	movs	r2, #6
 8005fb0:	f7fa f936 	bl	8000220 <memchr>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d03f      	beq.n	8006038 <_vfiprintf_r+0x22c>
 8005fb8:	4b29      	ldr	r3, [pc, #164]	; (8006060 <_vfiprintf_r+0x254>)
 8005fba:	bb1b      	cbnz	r3, 8006004 <_vfiprintf_r+0x1f8>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	3307      	adds	r3, #7
 8005fc0:	f023 0307 	bic.w	r3, r3, #7
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fca:	443b      	add	r3, r7
 8005fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fce:	e767      	b.n	8005ea0 <_vfiprintf_r+0x94>
 8005fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	e7a5      	b.n	8005f26 <_vfiprintf_r+0x11a>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	3401      	adds	r4, #1
 8005fde:	9305      	str	r3, [sp, #20]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f04f 0c0a 	mov.w	ip, #10
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fec:	3a30      	subs	r2, #48	; 0x30
 8005fee:	2a09      	cmp	r2, #9
 8005ff0:	d903      	bls.n	8005ffa <_vfiprintf_r+0x1ee>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0c5      	beq.n	8005f82 <_vfiprintf_r+0x176>
 8005ff6:	9105      	str	r1, [sp, #20]
 8005ff8:	e7c3      	b.n	8005f82 <_vfiprintf_r+0x176>
 8005ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ffe:	4604      	mov	r4, r0
 8006000:	2301      	movs	r3, #1
 8006002:	e7f0      	b.n	8005fe6 <_vfiprintf_r+0x1da>
 8006004:	ab03      	add	r3, sp, #12
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	462a      	mov	r2, r5
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <_vfiprintf_r+0x258>)
 800600c:	a904      	add	r1, sp, #16
 800600e:	4630      	mov	r0, r6
 8006010:	f3af 8000 	nop.w
 8006014:	4607      	mov	r7, r0
 8006016:	1c78      	adds	r0, r7, #1
 8006018:	d1d6      	bne.n	8005fc8 <_vfiprintf_r+0x1bc>
 800601a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800601c:	07d9      	lsls	r1, r3, #31
 800601e:	d405      	bmi.n	800602c <_vfiprintf_r+0x220>
 8006020:	89ab      	ldrh	r3, [r5, #12]
 8006022:	059a      	lsls	r2, r3, #22
 8006024:	d402      	bmi.n	800602c <_vfiprintf_r+0x220>
 8006026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006028:	f000 faa1 	bl	800656e <__retarget_lock_release_recursive>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	065b      	lsls	r3, r3, #25
 8006030:	f53f af12 	bmi.w	8005e58 <_vfiprintf_r+0x4c>
 8006034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006036:	e711      	b.n	8005e5c <_vfiprintf_r+0x50>
 8006038:	ab03      	add	r3, sp, #12
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	462a      	mov	r2, r5
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <_vfiprintf_r+0x258>)
 8006040:	a904      	add	r1, sp, #16
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff fc86 	bl	8005954 <_printf_i>
 8006048:	e7e4      	b.n	8006014 <_vfiprintf_r+0x208>
 800604a:	bf00      	nop
 800604c:	08006c64 	.word	0x08006c64
 8006050:	08006c84 	.word	0x08006c84
 8006054:	08006c44 	.word	0x08006c44
 8006058:	08006bd4 	.word	0x08006bd4
 800605c:	08006bde 	.word	0x08006bde
 8006060:	00000000 	.word	0x00000000
 8006064:	08005de7 	.word	0x08005de7
 8006068:	08006bda 	.word	0x08006bda

0800606c <__swbuf_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	460e      	mov	r6, r1
 8006070:	4614      	mov	r4, r2
 8006072:	4605      	mov	r5, r0
 8006074:	b118      	cbz	r0, 800607e <__swbuf_r+0x12>
 8006076:	6983      	ldr	r3, [r0, #24]
 8006078:	b90b      	cbnz	r3, 800607e <__swbuf_r+0x12>
 800607a:	f000 f9d9 	bl	8006430 <__sinit>
 800607e:	4b21      	ldr	r3, [pc, #132]	; (8006104 <__swbuf_r+0x98>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d12b      	bne.n	80060dc <__swbuf_r+0x70>
 8006084:	686c      	ldr	r4, [r5, #4]
 8006086:	69a3      	ldr	r3, [r4, #24]
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	071a      	lsls	r2, r3, #28
 800608e:	d52f      	bpl.n	80060f0 <__swbuf_r+0x84>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	b36b      	cbz	r3, 80060f0 <__swbuf_r+0x84>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	1ac0      	subs	r0, r0, r3
 800609a:	6963      	ldr	r3, [r4, #20]
 800609c:	b2f6      	uxtb	r6, r6
 800609e:	4283      	cmp	r3, r0
 80060a0:	4637      	mov	r7, r6
 80060a2:	dc04      	bgt.n	80060ae <__swbuf_r+0x42>
 80060a4:	4621      	mov	r1, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f92e 	bl	8006308 <_fflush_r>
 80060ac:	bb30      	cbnz	r0, 80060fc <__swbuf_r+0x90>
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	60a3      	str	r3, [r4, #8]
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	6022      	str	r2, [r4, #0]
 80060ba:	701e      	strb	r6, [r3, #0]
 80060bc:	6963      	ldr	r3, [r4, #20]
 80060be:	3001      	adds	r0, #1
 80060c0:	4283      	cmp	r3, r0
 80060c2:	d004      	beq.n	80060ce <__swbuf_r+0x62>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d506      	bpl.n	80060d8 <__swbuf_r+0x6c>
 80060ca:	2e0a      	cmp	r6, #10
 80060cc:	d104      	bne.n	80060d8 <__swbuf_r+0x6c>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 f919 	bl	8006308 <_fflush_r>
 80060d6:	b988      	cbnz	r0, 80060fc <__swbuf_r+0x90>
 80060d8:	4638      	mov	r0, r7
 80060da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <__swbuf_r+0x9c>)
 80060de:	429c      	cmp	r4, r3
 80060e0:	d101      	bne.n	80060e6 <__swbuf_r+0x7a>
 80060e2:	68ac      	ldr	r4, [r5, #8]
 80060e4:	e7cf      	b.n	8006086 <__swbuf_r+0x1a>
 80060e6:	4b09      	ldr	r3, [pc, #36]	; (800610c <__swbuf_r+0xa0>)
 80060e8:	429c      	cmp	r4, r3
 80060ea:	bf08      	it	eq
 80060ec:	68ec      	ldreq	r4, [r5, #12]
 80060ee:	e7ca      	b.n	8006086 <__swbuf_r+0x1a>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 f80c 	bl	8006110 <__swsetup_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d0cb      	beq.n	8006094 <__swbuf_r+0x28>
 80060fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006100:	e7ea      	b.n	80060d8 <__swbuf_r+0x6c>
 8006102:	bf00      	nop
 8006104:	08006c64 	.word	0x08006c64
 8006108:	08006c84 	.word	0x08006c84
 800610c:	08006c44 	.word	0x08006c44

08006110 <__swsetup_r>:
 8006110:	4b32      	ldr	r3, [pc, #200]	; (80061dc <__swsetup_r+0xcc>)
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	681d      	ldr	r5, [r3, #0]
 8006116:	4606      	mov	r6, r0
 8006118:	460c      	mov	r4, r1
 800611a:	b125      	cbz	r5, 8006126 <__swsetup_r+0x16>
 800611c:	69ab      	ldr	r3, [r5, #24]
 800611e:	b913      	cbnz	r3, 8006126 <__swsetup_r+0x16>
 8006120:	4628      	mov	r0, r5
 8006122:	f000 f985 	bl	8006430 <__sinit>
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <__swsetup_r+0xd0>)
 8006128:	429c      	cmp	r4, r3
 800612a:	d10f      	bne.n	800614c <__swsetup_r+0x3c>
 800612c:	686c      	ldr	r4, [r5, #4]
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006134:	0719      	lsls	r1, r3, #28
 8006136:	d42c      	bmi.n	8006192 <__swsetup_r+0x82>
 8006138:	06dd      	lsls	r5, r3, #27
 800613a:	d411      	bmi.n	8006160 <__swsetup_r+0x50>
 800613c:	2309      	movs	r3, #9
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800614a:	e03e      	b.n	80061ca <__swsetup_r+0xba>
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <__swsetup_r+0xd4>)
 800614e:	429c      	cmp	r4, r3
 8006150:	d101      	bne.n	8006156 <__swsetup_r+0x46>
 8006152:	68ac      	ldr	r4, [r5, #8]
 8006154:	e7eb      	b.n	800612e <__swsetup_r+0x1e>
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <__swsetup_r+0xd8>)
 8006158:	429c      	cmp	r4, r3
 800615a:	bf08      	it	eq
 800615c:	68ec      	ldreq	r4, [r5, #12]
 800615e:	e7e6      	b.n	800612e <__swsetup_r+0x1e>
 8006160:	0758      	lsls	r0, r3, #29
 8006162:	d512      	bpl.n	800618a <__swsetup_r+0x7a>
 8006164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006166:	b141      	cbz	r1, 800617a <__swsetup_r+0x6a>
 8006168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <__swsetup_r+0x66>
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff fdab 	bl	8005ccc <_free_r>
 8006176:	2300      	movs	r3, #0
 8006178:	6363      	str	r3, [r4, #52]	; 0x34
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	2300      	movs	r3, #0
 8006184:	6063      	str	r3, [r4, #4]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	f043 0308 	orr.w	r3, r3, #8
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	b94b      	cbnz	r3, 80061aa <__swsetup_r+0x9a>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a0:	d003      	beq.n	80061aa <__swsetup_r+0x9a>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 fa07 	bl	80065b8 <__smakebuf_r>
 80061aa:	89a0      	ldrh	r0, [r4, #12]
 80061ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061b0:	f010 0301 	ands.w	r3, r0, #1
 80061b4:	d00a      	beq.n	80061cc <__swsetup_r+0xbc>
 80061b6:	2300      	movs	r3, #0
 80061b8:	60a3      	str	r3, [r4, #8]
 80061ba:	6963      	ldr	r3, [r4, #20]
 80061bc:	425b      	negs	r3, r3
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	b943      	cbnz	r3, 80061d6 <__swsetup_r+0xc6>
 80061c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061c8:	d1ba      	bne.n	8006140 <__swsetup_r+0x30>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	0781      	lsls	r1, r0, #30
 80061ce:	bf58      	it	pl
 80061d0:	6963      	ldrpl	r3, [r4, #20]
 80061d2:	60a3      	str	r3, [r4, #8]
 80061d4:	e7f4      	b.n	80061c0 <__swsetup_r+0xb0>
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7f7      	b.n	80061ca <__swsetup_r+0xba>
 80061da:	bf00      	nop
 80061dc:	2000000c 	.word	0x2000000c
 80061e0:	08006c64 	.word	0x08006c64
 80061e4:	08006c84 	.word	0x08006c84
 80061e8:	08006c44 	.word	0x08006c44

080061ec <abort>:
 80061ec:	b508      	push	{r3, lr}
 80061ee:	2006      	movs	r0, #6
 80061f0:	f000 fa52 	bl	8006698 <raise>
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fb f99f 	bl	8001538 <_exit>
	...

080061fc <__sflush_r>:
 80061fc:	898a      	ldrh	r2, [r1, #12]
 80061fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006202:	4605      	mov	r5, r0
 8006204:	0710      	lsls	r0, r2, #28
 8006206:	460c      	mov	r4, r1
 8006208:	d458      	bmi.n	80062bc <__sflush_r+0xc0>
 800620a:	684b      	ldr	r3, [r1, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dc05      	bgt.n	800621c <__sflush_r+0x20>
 8006210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	dc02      	bgt.n	800621c <__sflush_r+0x20>
 8006216:	2000      	movs	r0, #0
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800621e:	2e00      	cmp	r6, #0
 8006220:	d0f9      	beq.n	8006216 <__sflush_r+0x1a>
 8006222:	2300      	movs	r3, #0
 8006224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006228:	682f      	ldr	r7, [r5, #0]
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	d032      	beq.n	8006294 <__sflush_r+0x98>
 800622e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	075a      	lsls	r2, r3, #29
 8006234:	d505      	bpl.n	8006242 <__sflush_r+0x46>
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	1ac0      	subs	r0, r0, r3
 800623a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800623c:	b10b      	cbz	r3, 8006242 <__sflush_r+0x46>
 800623e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	2300      	movs	r3, #0
 8006244:	4602      	mov	r2, r0
 8006246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006248:	6a21      	ldr	r1, [r4, #32]
 800624a:	4628      	mov	r0, r5
 800624c:	47b0      	blx	r6
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	d106      	bne.n	8006262 <__sflush_r+0x66>
 8006254:	6829      	ldr	r1, [r5, #0]
 8006256:	291d      	cmp	r1, #29
 8006258:	d82c      	bhi.n	80062b4 <__sflush_r+0xb8>
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <__sflush_r+0x108>)
 800625c:	40ca      	lsrs	r2, r1
 800625e:	07d6      	lsls	r6, r2, #31
 8006260:	d528      	bpl.n	80062b4 <__sflush_r+0xb8>
 8006262:	2200      	movs	r2, #0
 8006264:	6062      	str	r2, [r4, #4]
 8006266:	04d9      	lsls	r1, r3, #19
 8006268:	6922      	ldr	r2, [r4, #16]
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	d504      	bpl.n	8006278 <__sflush_r+0x7c>
 800626e:	1c42      	adds	r2, r0, #1
 8006270:	d101      	bne.n	8006276 <__sflush_r+0x7a>
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	b903      	cbnz	r3, 8006278 <__sflush_r+0x7c>
 8006276:	6560      	str	r0, [r4, #84]	; 0x54
 8006278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800627a:	602f      	str	r7, [r5, #0]
 800627c:	2900      	cmp	r1, #0
 800627e:	d0ca      	beq.n	8006216 <__sflush_r+0x1a>
 8006280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006284:	4299      	cmp	r1, r3
 8006286:	d002      	beq.n	800628e <__sflush_r+0x92>
 8006288:	4628      	mov	r0, r5
 800628a:	f7ff fd1f 	bl	8005ccc <_free_r>
 800628e:	2000      	movs	r0, #0
 8006290:	6360      	str	r0, [r4, #52]	; 0x34
 8006292:	e7c1      	b.n	8006218 <__sflush_r+0x1c>
 8006294:	6a21      	ldr	r1, [r4, #32]
 8006296:	2301      	movs	r3, #1
 8006298:	4628      	mov	r0, r5
 800629a:	47b0      	blx	r6
 800629c:	1c41      	adds	r1, r0, #1
 800629e:	d1c7      	bne.n	8006230 <__sflush_r+0x34>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0c4      	beq.n	8006230 <__sflush_r+0x34>
 80062a6:	2b1d      	cmp	r3, #29
 80062a8:	d001      	beq.n	80062ae <__sflush_r+0xb2>
 80062aa:	2b16      	cmp	r3, #22
 80062ac:	d101      	bne.n	80062b2 <__sflush_r+0xb6>
 80062ae:	602f      	str	r7, [r5, #0]
 80062b0:	e7b1      	b.n	8006216 <__sflush_r+0x1a>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	e7ad      	b.n	8006218 <__sflush_r+0x1c>
 80062bc:	690f      	ldr	r7, [r1, #16]
 80062be:	2f00      	cmp	r7, #0
 80062c0:	d0a9      	beq.n	8006216 <__sflush_r+0x1a>
 80062c2:	0793      	lsls	r3, r2, #30
 80062c4:	680e      	ldr	r6, [r1, #0]
 80062c6:	bf08      	it	eq
 80062c8:	694b      	ldreq	r3, [r1, #20]
 80062ca:	600f      	str	r7, [r1, #0]
 80062cc:	bf18      	it	ne
 80062ce:	2300      	movne	r3, #0
 80062d0:	eba6 0807 	sub.w	r8, r6, r7
 80062d4:	608b      	str	r3, [r1, #8]
 80062d6:	f1b8 0f00 	cmp.w	r8, #0
 80062da:	dd9c      	ble.n	8006216 <__sflush_r+0x1a>
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062e0:	4643      	mov	r3, r8
 80062e2:	463a      	mov	r2, r7
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b0      	blx	r6
 80062e8:	2800      	cmp	r0, #0
 80062ea:	dc06      	bgt.n	80062fa <__sflush_r+0xfe>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f2:	81a3      	strh	r3, [r4, #12]
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f8:	e78e      	b.n	8006218 <__sflush_r+0x1c>
 80062fa:	4407      	add	r7, r0
 80062fc:	eba8 0800 	sub.w	r8, r8, r0
 8006300:	e7e9      	b.n	80062d6 <__sflush_r+0xda>
 8006302:	bf00      	nop
 8006304:	20400001 	.word	0x20400001

08006308 <_fflush_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	690b      	ldr	r3, [r1, #16]
 800630c:	4605      	mov	r5, r0
 800630e:	460c      	mov	r4, r1
 8006310:	b913      	cbnz	r3, 8006318 <_fflush_r+0x10>
 8006312:	2500      	movs	r5, #0
 8006314:	4628      	mov	r0, r5
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	b118      	cbz	r0, 8006322 <_fflush_r+0x1a>
 800631a:	6983      	ldr	r3, [r0, #24]
 800631c:	b90b      	cbnz	r3, 8006322 <_fflush_r+0x1a>
 800631e:	f000 f887 	bl	8006430 <__sinit>
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <_fflush_r+0x6c>)
 8006324:	429c      	cmp	r4, r3
 8006326:	d11b      	bne.n	8006360 <_fflush_r+0x58>
 8006328:	686c      	ldr	r4, [r5, #4]
 800632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0ef      	beq.n	8006312 <_fflush_r+0xa>
 8006332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006334:	07d0      	lsls	r0, r2, #31
 8006336:	d404      	bmi.n	8006342 <_fflush_r+0x3a>
 8006338:	0599      	lsls	r1, r3, #22
 800633a:	d402      	bmi.n	8006342 <_fflush_r+0x3a>
 800633c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633e:	f000 f915 	bl	800656c <__retarget_lock_acquire_recursive>
 8006342:	4628      	mov	r0, r5
 8006344:	4621      	mov	r1, r4
 8006346:	f7ff ff59 	bl	80061fc <__sflush_r>
 800634a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800634c:	07da      	lsls	r2, r3, #31
 800634e:	4605      	mov	r5, r0
 8006350:	d4e0      	bmi.n	8006314 <_fflush_r+0xc>
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	059b      	lsls	r3, r3, #22
 8006356:	d4dd      	bmi.n	8006314 <_fflush_r+0xc>
 8006358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800635a:	f000 f908 	bl	800656e <__retarget_lock_release_recursive>
 800635e:	e7d9      	b.n	8006314 <_fflush_r+0xc>
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_fflush_r+0x70>)
 8006362:	429c      	cmp	r4, r3
 8006364:	d101      	bne.n	800636a <_fflush_r+0x62>
 8006366:	68ac      	ldr	r4, [r5, #8]
 8006368:	e7df      	b.n	800632a <_fflush_r+0x22>
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <_fflush_r+0x74>)
 800636c:	429c      	cmp	r4, r3
 800636e:	bf08      	it	eq
 8006370:	68ec      	ldreq	r4, [r5, #12]
 8006372:	e7da      	b.n	800632a <_fflush_r+0x22>
 8006374:	08006c64 	.word	0x08006c64
 8006378:	08006c84 	.word	0x08006c84
 800637c:	08006c44 	.word	0x08006c44

08006380 <std>:
 8006380:	2300      	movs	r3, #0
 8006382:	b510      	push	{r4, lr}
 8006384:	4604      	mov	r4, r0
 8006386:	e9c0 3300 	strd	r3, r3, [r0]
 800638a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800638e:	6083      	str	r3, [r0, #8]
 8006390:	8181      	strh	r1, [r0, #12]
 8006392:	6643      	str	r3, [r0, #100]	; 0x64
 8006394:	81c2      	strh	r2, [r0, #14]
 8006396:	6183      	str	r3, [r0, #24]
 8006398:	4619      	mov	r1, r3
 800639a:	2208      	movs	r2, #8
 800639c:	305c      	adds	r0, #92	; 0x5c
 800639e:	f7fc ff79 	bl	8003294 <memset>
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <std+0x38>)
 80063a4:	6263      	str	r3, [r4, #36]	; 0x24
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <std+0x3c>)
 80063a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <std+0x40>)
 80063ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <std+0x44>)
 80063b0:	6224      	str	r4, [r4, #32]
 80063b2:	6323      	str	r3, [r4, #48]	; 0x30
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	bf00      	nop
 80063b8:	080066d1 	.word	0x080066d1
 80063bc:	080066f3 	.word	0x080066f3
 80063c0:	0800672b 	.word	0x0800672b
 80063c4:	0800674f 	.word	0x0800674f

080063c8 <_cleanup_r>:
 80063c8:	4901      	ldr	r1, [pc, #4]	; (80063d0 <_cleanup_r+0x8>)
 80063ca:	f000 b8af 	b.w	800652c <_fwalk_reent>
 80063ce:	bf00      	nop
 80063d0:	08006309 	.word	0x08006309

080063d4 <__sfmoreglue>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	1e4a      	subs	r2, r1, #1
 80063d8:	2568      	movs	r5, #104	; 0x68
 80063da:	4355      	muls	r5, r2
 80063dc:	460e      	mov	r6, r1
 80063de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063e2:	f7ff f893 	bl	800550c <_malloc_r>
 80063e6:	4604      	mov	r4, r0
 80063e8:	b140      	cbz	r0, 80063fc <__sfmoreglue+0x28>
 80063ea:	2100      	movs	r1, #0
 80063ec:	e9c0 1600 	strd	r1, r6, [r0]
 80063f0:	300c      	adds	r0, #12
 80063f2:	60a0      	str	r0, [r4, #8]
 80063f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063f8:	f7fc ff4c 	bl	8003294 <memset>
 80063fc:	4620      	mov	r0, r4
 80063fe:	bd70      	pop	{r4, r5, r6, pc}

08006400 <__sfp_lock_acquire>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__sfp_lock_acquire+0x8>)
 8006402:	f000 b8b3 	b.w	800656c <__retarget_lock_acquire_recursive>
 8006406:	bf00      	nop
 8006408:	20000684 	.word	0x20000684

0800640c <__sfp_lock_release>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sfp_lock_release+0x8>)
 800640e:	f000 b8ae 	b.w	800656e <__retarget_lock_release_recursive>
 8006412:	bf00      	nop
 8006414:	20000684 	.word	0x20000684

08006418 <__sinit_lock_acquire>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__sinit_lock_acquire+0x8>)
 800641a:	f000 b8a7 	b.w	800656c <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	2000067f 	.word	0x2000067f

08006424 <__sinit_lock_release>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__sinit_lock_release+0x8>)
 8006426:	f000 b8a2 	b.w	800656e <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	2000067f 	.word	0x2000067f

08006430 <__sinit>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4604      	mov	r4, r0
 8006434:	f7ff fff0 	bl	8006418 <__sinit_lock_acquire>
 8006438:	69a3      	ldr	r3, [r4, #24]
 800643a:	b11b      	cbz	r3, 8006444 <__sinit+0x14>
 800643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006440:	f7ff bff0 	b.w	8006424 <__sinit_lock_release>
 8006444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006448:	6523      	str	r3, [r4, #80]	; 0x50
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <__sinit+0x68>)
 800644c:	4a13      	ldr	r2, [pc, #76]	; (800649c <__sinit+0x6c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	62a2      	str	r2, [r4, #40]	; 0x28
 8006452:	42a3      	cmp	r3, r4
 8006454:	bf04      	itt	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	61a3      	streq	r3, [r4, #24]
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f820 	bl	80064a0 <__sfp>
 8006460:	6060      	str	r0, [r4, #4]
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f81c 	bl	80064a0 <__sfp>
 8006468:	60a0      	str	r0, [r4, #8]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f818 	bl	80064a0 <__sfp>
 8006470:	2200      	movs	r2, #0
 8006472:	60e0      	str	r0, [r4, #12]
 8006474:	2104      	movs	r1, #4
 8006476:	6860      	ldr	r0, [r4, #4]
 8006478:	f7ff ff82 	bl	8006380 <std>
 800647c:	68a0      	ldr	r0, [r4, #8]
 800647e:	2201      	movs	r2, #1
 8006480:	2109      	movs	r1, #9
 8006482:	f7ff ff7d 	bl	8006380 <std>
 8006486:	68e0      	ldr	r0, [r4, #12]
 8006488:	2202      	movs	r2, #2
 800648a:	2112      	movs	r1, #18
 800648c:	f7ff ff78 	bl	8006380 <std>
 8006490:	2301      	movs	r3, #1
 8006492:	61a3      	str	r3, [r4, #24]
 8006494:	e7d2      	b.n	800643c <__sinit+0xc>
 8006496:	bf00      	nop
 8006498:	08006868 	.word	0x08006868
 800649c:	080063c9 	.word	0x080063c9

080064a0 <__sfp>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	4607      	mov	r7, r0
 80064a4:	f7ff ffac 	bl	8006400 <__sfp_lock_acquire>
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <__sfp+0x84>)
 80064aa:	681e      	ldr	r6, [r3, #0]
 80064ac:	69b3      	ldr	r3, [r6, #24]
 80064ae:	b913      	cbnz	r3, 80064b6 <__sfp+0x16>
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7ff ffbd 	bl	8006430 <__sinit>
 80064b6:	3648      	adds	r6, #72	; 0x48
 80064b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064bc:	3b01      	subs	r3, #1
 80064be:	d503      	bpl.n	80064c8 <__sfp+0x28>
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	b30b      	cbz	r3, 8006508 <__sfp+0x68>
 80064c4:	6836      	ldr	r6, [r6, #0]
 80064c6:	e7f7      	b.n	80064b8 <__sfp+0x18>
 80064c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064cc:	b9d5      	cbnz	r5, 8006504 <__sfp+0x64>
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <__sfp+0x88>)
 80064d0:	60e3      	str	r3, [r4, #12]
 80064d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064d6:	6665      	str	r5, [r4, #100]	; 0x64
 80064d8:	f000 f847 	bl	800656a <__retarget_lock_init_recursive>
 80064dc:	f7ff ff96 	bl	800640c <__sfp_lock_release>
 80064e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064e8:	6025      	str	r5, [r4, #0]
 80064ea:	61a5      	str	r5, [r4, #24]
 80064ec:	2208      	movs	r2, #8
 80064ee:	4629      	mov	r1, r5
 80064f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064f4:	f7fc fece 	bl	8003294 <memset>
 80064f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006500:	4620      	mov	r0, r4
 8006502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006504:	3468      	adds	r4, #104	; 0x68
 8006506:	e7d9      	b.n	80064bc <__sfp+0x1c>
 8006508:	2104      	movs	r1, #4
 800650a:	4638      	mov	r0, r7
 800650c:	f7ff ff62 	bl	80063d4 <__sfmoreglue>
 8006510:	4604      	mov	r4, r0
 8006512:	6030      	str	r0, [r6, #0]
 8006514:	2800      	cmp	r0, #0
 8006516:	d1d5      	bne.n	80064c4 <__sfp+0x24>
 8006518:	f7ff ff78 	bl	800640c <__sfp_lock_release>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	e7ee      	b.n	8006500 <__sfp+0x60>
 8006522:	bf00      	nop
 8006524:	08006868 	.word	0x08006868
 8006528:	ffff0001 	.word	0xffff0001

0800652c <_fwalk_reent>:
 800652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006530:	4606      	mov	r6, r0
 8006532:	4688      	mov	r8, r1
 8006534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006538:	2700      	movs	r7, #0
 800653a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800653e:	f1b9 0901 	subs.w	r9, r9, #1
 8006542:	d505      	bpl.n	8006550 <_fwalk_reent+0x24>
 8006544:	6824      	ldr	r4, [r4, #0]
 8006546:	2c00      	cmp	r4, #0
 8006548:	d1f7      	bne.n	800653a <_fwalk_reent+0xe>
 800654a:	4638      	mov	r0, r7
 800654c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d907      	bls.n	8006566 <_fwalk_reent+0x3a>
 8006556:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800655a:	3301      	adds	r3, #1
 800655c:	d003      	beq.n	8006566 <_fwalk_reent+0x3a>
 800655e:	4629      	mov	r1, r5
 8006560:	4630      	mov	r0, r6
 8006562:	47c0      	blx	r8
 8006564:	4307      	orrs	r7, r0
 8006566:	3568      	adds	r5, #104	; 0x68
 8006568:	e7e9      	b.n	800653e <_fwalk_reent+0x12>

0800656a <__retarget_lock_init_recursive>:
 800656a:	4770      	bx	lr

0800656c <__retarget_lock_acquire_recursive>:
 800656c:	4770      	bx	lr

0800656e <__retarget_lock_release_recursive>:
 800656e:	4770      	bx	lr

08006570 <__swhatbuf_r>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	460e      	mov	r6, r1
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	2900      	cmp	r1, #0
 800657a:	b096      	sub	sp, #88	; 0x58
 800657c:	4614      	mov	r4, r2
 800657e:	461d      	mov	r5, r3
 8006580:	da07      	bge.n	8006592 <__swhatbuf_r+0x22>
 8006582:	2300      	movs	r3, #0
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	89b3      	ldrh	r3, [r6, #12]
 8006588:	061a      	lsls	r2, r3, #24
 800658a:	d410      	bmi.n	80065ae <__swhatbuf_r+0x3e>
 800658c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006590:	e00e      	b.n	80065b0 <__swhatbuf_r+0x40>
 8006592:	466a      	mov	r2, sp
 8006594:	f000 f902 	bl	800679c <_fstat_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	dbf2      	blt.n	8006582 <__swhatbuf_r+0x12>
 800659c:	9a01      	ldr	r2, [sp, #4]
 800659e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065a6:	425a      	negs	r2, r3
 80065a8:	415a      	adcs	r2, r3
 80065aa:	602a      	str	r2, [r5, #0]
 80065ac:	e7ee      	b.n	800658c <__swhatbuf_r+0x1c>
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2000      	movs	r0, #0
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	b016      	add	sp, #88	; 0x58
 80065b6:	bd70      	pop	{r4, r5, r6, pc}

080065b8 <__smakebuf_r>:
 80065b8:	898b      	ldrh	r3, [r1, #12]
 80065ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065bc:	079d      	lsls	r5, r3, #30
 80065be:	4606      	mov	r6, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	d507      	bpl.n	80065d4 <__smakebuf_r+0x1c>
 80065c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	2301      	movs	r3, #1
 80065ce:	6163      	str	r3, [r4, #20]
 80065d0:	b002      	add	sp, #8
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	ab01      	add	r3, sp, #4
 80065d6:	466a      	mov	r2, sp
 80065d8:	f7ff ffca 	bl	8006570 <__swhatbuf_r>
 80065dc:	9900      	ldr	r1, [sp, #0]
 80065de:	4605      	mov	r5, r0
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7fe ff93 	bl	800550c <_malloc_r>
 80065e6:	b948      	cbnz	r0, 80065fc <__smakebuf_r+0x44>
 80065e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ec:	059a      	lsls	r2, r3, #22
 80065ee:	d4ef      	bmi.n	80065d0 <__smakebuf_r+0x18>
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	f043 0302 	orr.w	r3, r3, #2
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	e7e3      	b.n	80065c4 <__smakebuf_r+0xc>
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <__smakebuf_r+0x7c>)
 80065fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	6020      	str	r0, [r4, #0]
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	6163      	str	r3, [r4, #20]
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	6120      	str	r0, [r4, #16]
 8006612:	b15b      	cbz	r3, 800662c <__smakebuf_r+0x74>
 8006614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006618:	4630      	mov	r0, r6
 800661a:	f000 f8d1 	bl	80067c0 <_isatty_r>
 800661e:	b128      	cbz	r0, 800662c <__smakebuf_r+0x74>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	89a0      	ldrh	r0, [r4, #12]
 800662e:	4305      	orrs	r5, r0
 8006630:	81a5      	strh	r5, [r4, #12]
 8006632:	e7cd      	b.n	80065d0 <__smakebuf_r+0x18>
 8006634:	080063c9 	.word	0x080063c9

08006638 <_malloc_usable_size_r>:
 8006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663c:	1f18      	subs	r0, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbc      	itt	lt
 8006642:	580b      	ldrlt	r3, [r1, r0]
 8006644:	18c0      	addlt	r0, r0, r3
 8006646:	4770      	bx	lr

08006648 <_raise_r>:
 8006648:	291f      	cmp	r1, #31
 800664a:	b538      	push	{r3, r4, r5, lr}
 800664c:	4604      	mov	r4, r0
 800664e:	460d      	mov	r5, r1
 8006650:	d904      	bls.n	800665c <_raise_r+0x14>
 8006652:	2316      	movs	r3, #22
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800665e:	b112      	cbz	r2, 8006666 <_raise_r+0x1e>
 8006660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006664:	b94b      	cbnz	r3, 800667a <_raise_r+0x32>
 8006666:	4620      	mov	r0, r4
 8006668:	f000 f830 	bl	80066cc <_getpid_r>
 800666c:	462a      	mov	r2, r5
 800666e:	4601      	mov	r1, r0
 8006670:	4620      	mov	r0, r4
 8006672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006676:	f000 b817 	b.w	80066a8 <_kill_r>
 800667a:	2b01      	cmp	r3, #1
 800667c:	d00a      	beq.n	8006694 <_raise_r+0x4c>
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	d103      	bne.n	800668a <_raise_r+0x42>
 8006682:	2316      	movs	r3, #22
 8006684:	6003      	str	r3, [r0, #0]
 8006686:	2001      	movs	r0, #1
 8006688:	e7e7      	b.n	800665a <_raise_r+0x12>
 800668a:	2400      	movs	r4, #0
 800668c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006690:	4628      	mov	r0, r5
 8006692:	4798      	blx	r3
 8006694:	2000      	movs	r0, #0
 8006696:	e7e0      	b.n	800665a <_raise_r+0x12>

08006698 <raise>:
 8006698:	4b02      	ldr	r3, [pc, #8]	; (80066a4 <raise+0xc>)
 800669a:	4601      	mov	r1, r0
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f7ff bfd3 	b.w	8006648 <_raise_r>
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c

080066a8 <_kill_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_kill_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fa ff2f 	bl	8001518 <_kill>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_kill_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_kill_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20000678 	.word	0x20000678

080066cc <_getpid_r>:
 80066cc:	f7fa bf1c 	b.w	8001508 <_getpid>

080066d0 <__sread>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f894 	bl	8006804 <_read_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfab      	itete	ge
 80066e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066e2:	89a3      	ldrhlt	r3, [r4, #12]
 80066e4:	181b      	addge	r3, r3, r0
 80066e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066ea:	bfac      	ite	ge
 80066ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ee:	81a3      	strhlt	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	05db      	lsls	r3, r3, #23
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f000 f868 	bl	80067e0 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b817 	b.w	8006758 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f855 	bl	80067e0 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	; 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b813 	b.w	800677c <_close_r>
	...

08006758 <_write_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	; (8006778 <_write_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fa ff0d 	bl	8001586 <_write>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_write_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_write_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000678 	.word	0x20000678

0800677c <_close_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_close_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f7fa ff19 	bl	80015be <_close>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_close_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_close_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20000678 	.word	0x20000678

0800679c <_fstat_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d07      	ldr	r5, [pc, #28]	; (80067bc <_fstat_r+0x20>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	f7fa ff14 	bl	80015d6 <_fstat>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d102      	bne.n	80067b8 <_fstat_r+0x1c>
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	b103      	cbz	r3, 80067b8 <_fstat_r+0x1c>
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	bf00      	nop
 80067bc:	20000678 	.word	0x20000678

080067c0 <_isatty_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d06      	ldr	r5, [pc, #24]	; (80067dc <_isatty_r+0x1c>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fa ff13 	bl	80015f6 <_isatty>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_isatty_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_isatty_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20000678 	.word	0x20000678

080067e0 <_lseek_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	; (8006800 <_lseek_r+0x20>)
 80067e4:	4604      	mov	r4, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fa ff0c 	bl	800160c <_lseek>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_lseek_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_lseek_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	20000678 	.word	0x20000678

08006804 <_read_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	; (8006824 <_read_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fa fe9a 	bl	800154c <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_read_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_read_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20000678 	.word	0x20000678

08006828 <_init>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr

08006834 <_fini>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr
