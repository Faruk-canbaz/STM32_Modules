
STM32F446RE_bmp180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08007ea8  08007ea8  00017ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008340  08008340  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008348  08008348  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800834c  0800834c  0001834c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001e4  08008534  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08008534  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f120  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  0002f334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e27  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d4  00000000  00000000  0005582f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccdf0  00000000  00000000  00064a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001317f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea4  00000000  00000000  00131848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e8c 	.word	0x08007e8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007e8c 	.word	0x08007e8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <BMP180_Init+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000224 	.word	0x20000224

08000fa0 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <BMP180_SetOversampling+0x1c>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	7013      	strb	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000222 	.word	0x20000222

08000fc0 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000fc0:	b598      	push	{r3, r4, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000fc4:	23aa      	movs	r3, #170	; 0xaa
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8dc 	bl	8001184 <BMP180_ReadReg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21c      	sxth	r4, r3
 8000fd2:	23ab      	movs	r3, #171	; 0xab
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f8d5 	bl	8001184 <BMP180_ReadReg>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b58      	ldr	r3, [pc, #352]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000fe6:	23ac      	movs	r3, #172	; 0xac
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f8cb 	bl	8001184 <BMP180_ReadReg>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21c      	sxth	r4, r3
 8000ff4:	23ad      	movs	r3, #173	; 0xad
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f8c4 	bl	8001184 <BMP180_ReadReg>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4323      	orrs	r3, r4
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 8001006:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8001008:	23ae      	movs	r3, #174	; 0xae
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f8ba 	bl	8001184 <BMP180_ReadReg>
 8001010:	4603      	mov	r3, r0
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21c      	sxth	r4, r3
 8001016:	23af      	movs	r3, #175	; 0xaf
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f8b3 	bl	8001184 <BMP180_ReadReg>
 800101e:	4603      	mov	r3, r0
 8001020:	b21b      	sxth	r3, r3
 8001022:	4323      	orrs	r3, r4
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 8001028:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 800102a:	23b0      	movs	r3, #176	; 0xb0
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8a9 	bl	8001184 <BMP180_ReadReg>
 8001032:	4603      	mov	r3, r0
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21c      	sxth	r4, r3
 8001038:	23b1      	movs	r3, #177	; 0xb1
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8a2 	bl	8001184 <BMP180_ReadReg>
 8001040:	4603      	mov	r3, r0
 8001042:	b21b      	sxth	r3, r3
 8001044:	4323      	orrs	r3, r4
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 800104c:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800104e:	23b2      	movs	r3, #178	; 0xb2
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f897 	bl	8001184 <BMP180_ReadReg>
 8001056:	4603      	mov	r3, r0
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21c      	sxth	r4, r3
 800105c:	23b3      	movs	r3, #179	; 0xb3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f890 	bl	8001184 <BMP180_ReadReg>
 8001064:	4603      	mov	r3, r0
 8001066:	b21b      	sxth	r3, r3
 8001068:	4323      	orrs	r3, r4
 800106a:	b21b      	sxth	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 8001070:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8001072:	23b4      	movs	r3, #180	; 0xb4
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f885 	bl	8001184 <BMP180_ReadReg>
 800107a:	4603      	mov	r3, r0
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21c      	sxth	r4, r3
 8001080:	23b5      	movs	r3, #181	; 0xb5
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f87e 	bl	8001184 <BMP180_ReadReg>
 8001088:	4603      	mov	r3, r0
 800108a:	b21b      	sxth	r3, r3
 800108c:	4323      	orrs	r3, r4
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 8001094:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8001096:	23b6      	movs	r3, #182	; 0xb6
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f873 	bl	8001184 <BMP180_ReadReg>
 800109e:	4603      	mov	r3, r0
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21c      	sxth	r4, r3
 80010a4:	23b7      	movs	r3, #183	; 0xb7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f86c 	bl	8001184 <BMP180_ReadReg>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4323      	orrs	r3, r4
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 80010b6:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80010b8:	23b8      	movs	r3, #184	; 0xb8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f862 	bl	8001184 <BMP180_ReadReg>
 80010c0:	4603      	mov	r3, r0
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21c      	sxth	r4, r3
 80010c6:	23b9      	movs	r3, #185	; 0xb9
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f85b 	bl	8001184 <BMP180_ReadReg>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4323      	orrs	r3, r4
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 80010d8:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80010da:	23ba      	movs	r3, #186	; 0xba
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f851 	bl	8001184 <BMP180_ReadReg>
 80010e2:	4603      	mov	r3, r0
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21c      	sxth	r4, r3
 80010e8:	23bb      	movs	r3, #187	; 0xbb
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f84a 	bl	8001184 <BMP180_ReadReg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4323      	orrs	r3, r4
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 80010fa:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80010fc:	23bc      	movs	r3, #188	; 0xbc
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f840 	bl	8001184 <BMP180_ReadReg>
 8001104:	4603      	mov	r3, r0
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21c      	sxth	r4, r3
 800110a:	23bd      	movs	r3, #189	; 0xbd
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f839 	bl	8001184 <BMP180_ReadReg>
 8001112:	4603      	mov	r3, r0
 8001114:	b21b      	sxth	r3, r3
 8001116:	4323      	orrs	r3, r4
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 800111c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800111e:	23be      	movs	r3, #190	; 0xbe
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f82f 	bl	8001184 <BMP180_ReadReg>
 8001126:	4603      	mov	r3, r0
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21c      	sxth	r4, r3
 800112c:	23bf      	movs	r3, #191	; 0xbf
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f828 	bl	8001184 <BMP180_ReadReg>
 8001134:	4603      	mov	r3, r0
 8001136:	b21b      	sxth	r3, r3
 8001138:	4323      	orrs	r3, r4
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <BMP180_UpdateCalibrationData+0x184>)
 800113e:	829a      	strh	r2, [r3, #20]
}
 8001140:	bf00      	nop
 8001142:	bd98      	pop	{r3, r4, r7, pc}
 8001144:	2000020c 	.word	0x2000020c

08001148 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <BMP180_WriteReg+0x38>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2302      	movs	r3, #2
 8001170:	21ee      	movs	r1, #238	; 0xee
 8001172:	f001 f993 	bl	800249c <HAL_I2C_Master_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000224 	.word	0x20000224

08001184 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <BMP180_ReadReg+0x40>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	1dfa      	adds	r2, r7, #7
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	21ee      	movs	r1, #238	; 0xee
 800119e:	f001 f97d 	bl	800249c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <BMP180_ReadReg+0x40>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f107 020f 	add.w	r2, r7, #15
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	21ee      	movs	r1, #238	; 0xee
 80011b4:	f001 fa70 	bl	8002698 <HAL_I2C_Master_Receive>
	return result;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000224 	.word	0x20000224

080011c8 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80011ce:	232e      	movs	r3, #46	; 0x2e
 80011d0:	4619      	mov	r1, r3
 80011d2:	20f4      	movs	r0, #244	; 0xf4
 80011d4:	f7ff ffb8 	bl	8001148 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80011d8:	2305      	movs	r3, #5
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd7c 	bl	8001cd8 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80011e0:	20f6      	movs	r0, #246	; 0xf6
 80011e2:	f7ff ffcf 	bl	8001184 <BMP180_ReadReg>
 80011e6:	4603      	mov	r3, r0
 80011e8:	021c      	lsls	r4, r3, #8
 80011ea:	20f7      	movs	r0, #247	; 0xf7
 80011ec:	f7ff ffca 	bl	8001184 <BMP180_ReadReg>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4323      	orrs	r3, r4
 80011f4:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <BMP180_GetRawTemperature+0x84>)
 80011f8:	895b      	ldrh	r3, [r3, #10]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <BMP180_GetRawTemperature+0x84>)
 8001202:	8912      	ldrh	r2, [r2, #8]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	da02      	bge.n	8001212 <BMP180_GetRawTemperature+0x4a>
 800120c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001210:	337f      	adds	r3, #127	; 0x7f
 8001212:	13db      	asrs	r3, r3, #15
 8001214:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <BMP180_GetRawTemperature+0x84>)
 8001218:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800121c:	02da      	lsls	r2, r3, #11
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <BMP180_GetRawTemperature+0x84>)
 8001220:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001224:	4619      	mov	r1, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	440b      	add	r3, r1
 800122a:	fb92 f3f3 	sdiv	r3, r2, r3
 800122e:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3308      	adds	r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <BMP180_GetRawTemperature+0x7a>
 8001240:	330f      	adds	r3, #15
 8001242:	111b      	asrs	r3, r3, #4
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	2000020c 	.word	0x2000020c

08001250 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8001256:	232e      	movs	r3, #46	; 0x2e
 8001258:	4619      	mov	r1, r3
 800125a:	20f4      	movs	r0, #244	; 0xf4
 800125c:	f7ff ff74 	bl	8001148 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001260:	2305      	movs	r3, #5
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fd38 	bl	8001cd8 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001268:	f000 f970 	bl	800154c <BMP180_GetUT>
 800126c:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 800126e:	4b7b      	ldr	r3, [pc, #492]	; (800145c <BMP180_GetPressure+0x20c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <BMP180_GetPressure+0x210>)
 8001276:	5c9b      	ldrb	r3, [r3, r2]
 8001278:	4619      	mov	r1, r3
 800127a:	20f4      	movs	r0, #244	; 0xf4
 800127c:	f7ff ff64 	bl	8001148 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001280:	4b76      	ldr	r3, [pc, #472]	; (800145c <BMP180_GetPressure+0x20c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <BMP180_GetPressure+0x214>)
 8001288:	5c9b      	ldrb	r3, [r3, r2]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fd24 	bl	8001cd8 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001290:	f000 f96a 	bl	8001568 <BMP180_GetUP>
 8001294:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <BMP180_GetPressure+0x218>)
 8001298:	895b      	ldrh	r3, [r3, #10]
 800129a:	461a      	mov	r2, r3
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	4a71      	ldr	r2, [pc, #452]	; (8001468 <BMP180_GetPressure+0x218>)
 80012a2:	8912      	ldrh	r2, [r2, #8]
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da02      	bge.n	80012b2 <BMP180_GetPressure+0x62>
 80012ac:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80012b0:	337f      	adds	r3, #127	; 0x7f
 80012b2:	13db      	asrs	r3, r3, #15
 80012b4:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <BMP180_GetPressure+0x218>)
 80012b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012bc:	02da      	lsls	r2, r3, #11
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <BMP180_GetPressure+0x218>)
 80012c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012c4:	4619      	mov	r1, r3
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	440b      	add	r3, r1
 80012ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ce:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80012d0:	6a3a      	ldr	r2, [r7, #32]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80012de:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <BMP180_GetPressure+0x218>)
 80012e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012e6:	461a      	mov	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fb03 f303 	mul.w	r3, r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da01      	bge.n	80012f6 <BMP180_GetPressure+0xa6>
 80012f2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80012f6:	131b      	asrs	r3, r3, #12
 80012f8:	fb03 f302 	mul.w	r3, r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da01      	bge.n	8001304 <BMP180_GetPressure+0xb4>
 8001300:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001304:	12db      	asrs	r3, r3, #11
 8001306:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8001308:	4b57      	ldr	r3, [pc, #348]	; (8001468 <BMP180_GetPressure+0x218>)
 800130a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800130e:	461a      	mov	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fb03 f302 	mul.w	r3, r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	da01      	bge.n	800131e <BMP180_GetPressure+0xce>
 800131a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800131e:	12db      	asrs	r3, r3, #11
 8001320:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001322:	6a3a      	ldr	r2, [r7, #32]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	4413      	add	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <BMP180_GetPressure+0x218>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4413      	add	r3, r2
 8001336:	4a49      	ldr	r2, [pc, #292]	; (800145c <BMP180_GetPressure+0x20c>)
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	4093      	lsls	r3, r2
 800133c:	3302      	adds	r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	da00      	bge.n	8001344 <BMP180_GetPressure+0xf4>
 8001342:	3303      	adds	r3, #3
 8001344:	109b      	asrs	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001348:	4b47      	ldr	r3, [pc, #284]	; (8001468 <BMP180_GetPressure+0x218>)
 800134a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fb03 f302 	mul.w	r3, r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	da02      	bge.n	8001360 <BMP180_GetPressure+0x110>
 800135a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800135e:	331f      	adds	r3, #31
 8001360:	135b      	asrs	r3, r3, #13
 8001362:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <BMP180_GetPressure+0x218>)
 8001366:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800136a:	461a      	mov	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fb03 f303 	mul.w	r3, r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	da01      	bge.n	800137a <BMP180_GetPressure+0x12a>
 8001376:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800137a:	131b      	asrs	r3, r3, #12
 800137c:	fb03 f302 	mul.w	r3, r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	da02      	bge.n	800138a <BMP180_GetPressure+0x13a>
 8001384:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001388:	33ff      	adds	r3, #255	; 0xff
 800138a:	141b      	asrs	r3, r3, #16
 800138c:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	3302      	adds	r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	da00      	bge.n	800139c <BMP180_GetPressure+0x14c>
 800139a:	3303      	adds	r3, #3
 800139c:	109b      	asrs	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <BMP180_GetPressure+0x218>)
 80013a2:	88db      	ldrh	r3, [r3, #6]
 80013a4:	461a      	mov	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013ac:	fb03 f302 	mul.w	r3, r3, r2
 80013b0:	0bdb      	lsrs	r3, r3, #15
 80013b2:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <BMP180_GetPressure+0x20c>)
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4611      	mov	r1, r2
 80013c0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013c4:	410a      	asrs	r2, r1
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db06      	blt.n	80013e0 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	005a      	lsls	r2, r3, #1
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013de:	e005      	b.n	80013ec <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da00      	bge.n	80013f4 <BMP180_GetPressure+0x1a4>
 80013f2:	33ff      	adds	r3, #255	; 0xff
 80013f4:	121b      	asrs	r3, r3, #8
 80013f6:	461a      	mov	r2, r3
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da00      	bge.n	8001400 <BMP180_GetPressure+0x1b0>
 80013fe:	33ff      	adds	r3, #255	; 0xff
 8001400:	121b      	asrs	r3, r3, #8
 8001402:	fb03 f302 	mul.w	r3, r3, r2
 8001406:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f640 32de 	movw	r2, #3038	; 0xbde
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	da02      	bge.n	800141c <BMP180_GetPressure+0x1cc>
 8001416:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800141a:	33ff      	adds	r3, #255	; 0xff
 800141c:	141b      	asrs	r3, r3, #16
 800141e:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <BMP180_GetPressure+0x21c>)
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da02      	bge.n	8001432 <BMP180_GetPressure+0x1e2>
 800142c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001430:	33ff      	adds	r3, #255	; 0xff
 8001432:	141b      	asrs	r3, r3, #16
 8001434:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8001436:	6a3a      	ldr	r2, [r7, #32]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <BMP180_GetPressure+0x1f6>
 8001444:	330f      	adds	r3, #15
 8001446:	111b      	asrs	r3, r3, #4
 8001448:	461a      	mov	r2, r3
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	4413      	add	r3, r2
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001452:	4618      	mov	r0, r3
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000222 	.word	0x20000222
 8001460:	08007ef8 	.word	0x08007ef8
 8001464:	08007efc 	.word	0x08007efc
 8001468:	2000020c 	.word	0x2000020c
 800146c:	ffffe343 	.word	0xffffe343

08001470 <irtifaHesapla>:

int32_t irtifaHesapla(int32_t pp, int32_t ppi) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]

	if (bmp_acik) {
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <irtifaHesapla+0xd0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d04e      	beq.n	8001520 <irtifaHesapla+0xb0>

		float p = pp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	edc7 7a05 	vstr	s15, [r7, #20]
		float pi = ppi;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	edc7 7a04 	vstr	s15, [r7, #16]

		p = p / 100.0;
 800149e:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001544 <irtifaHesapla+0xd4>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	edc7 7a05 	vstr	s15, [r7, #20]
		pi = pi / 100.0;
 80014ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80014b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001544 <irtifaHesapla+0xd4>
 80014b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ba:	edc7 7a04 	vstr	s15, [r7, #16]

		float alt = (44330.0*(1-pow(p / pi, 0.1903)));
 80014be:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014ca:	ee16 0a90 	vmov	r0, s13
 80014ce:	f7ff f85b 	bl	8000588 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001530 <irtifaHesapla+0xc0>
 80014da:	ec43 2b10 	vmov	d0, r2, r3
 80014de:	f005 fd21 	bl	8006f24 <pow>
 80014e2:	ec53 2b10 	vmov	r2, r3, d0
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	4917      	ldr	r1, [pc, #92]	; (8001548 <irtifaHesapla+0xd8>)
 80014ec:	f7fe feec 	bl	80002c8 <__aeabi_dsub>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	a30f      	add	r3, pc, #60	; (adr r3, 8001538 <irtifaHesapla+0xc8>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f89b 	bl	8000638 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb6d 	bl	8000be8 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	60fb      	str	r3, [r7, #12]

		return alt;
 8001512:	edd7 7a03 	vldr	s15, [r7, #12]
 8001516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151a:	ee17 3a90 	vmov	r3, s15
 800151e:	e001      	b.n	8001524 <irtifaHesapla+0xb4>
	}

	else
		return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	f3af 8000 	nop.w
 8001530:	1a36e2eb 	.word	0x1a36e2eb
 8001534:	3fc85bc0 	.word	0x3fc85bc0
 8001538:	00000000 	.word	0x00000000
 800153c:	40e5a540 	.word	0x40e5a540
 8001540:	20000000 	.word	0x20000000
 8001544:	42c80000 	.word	0x42c80000
 8001548:	3ff00000 	.word	0x3ff00000

0800154c <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 800154c:	b598      	push	{r3, r4, r7, lr}
 800154e:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8001550:	20f6      	movs	r0, #246	; 0xf6
 8001552:	f7ff fe17 	bl	8001184 <BMP180_ReadReg>
 8001556:	4603      	mov	r3, r0
 8001558:	021c      	lsls	r4, r3, #8
 800155a:	20f7      	movs	r0, #247	; 0xf7
 800155c:	f7ff fe12 	bl	8001184 <BMP180_ReadReg>
 8001560:	4603      	mov	r3, r0
 8001562:	4323      	orrs	r3, r4
}
 8001564:	4618      	mov	r0, r3
 8001566:	bd98      	pop	{r3, r4, r7, pc}

08001568 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001568:	b598      	push	{r3, r4, r7, lr}
 800156a:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 800156c:	20f6      	movs	r0, #246	; 0xf6
 800156e:	f7ff fe09 	bl	8001184 <BMP180_ReadReg>
 8001572:	4603      	mov	r3, r0
 8001574:	041c      	lsls	r4, r3, #16
 8001576:	20f7      	movs	r0, #247	; 0xf7
 8001578:	f7ff fe04 	bl	8001184 <BMP180_ReadReg>
 800157c:	4603      	mov	r3, r0
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	431c      	orrs	r4, r3
 8001582:	20f8      	movs	r0, #248	; 0xf8
 8001584:	f7ff fdfe 	bl	8001184 <BMP180_ReadReg>
 8001588:	4603      	mov	r3, r0
 800158a:	ea44 0203 	orr.w	r2, r4, r3
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <BMP180_GetUP+0x38>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	f1c3 0308 	rsb	r3, r3, #8
 8001596:	fa42 f303 	asr.w	r3, r2, r3
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd98      	pop	{r3, r4, r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000222 	.word	0x20000222

080015a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_GPIO_Init+0x4c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C1_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C1_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x50>)
 8001632:	f000 fdef 	bl	8002214 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 f90e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000228 	.word	0x20000228
 8001648:	40005400 	.word	0x40005400
 800164c:	000186a0 	.word	0x000186a0

08001650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_I2C_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800168e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a0:	2304      	movs	r3, #4
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_I2C_MspInit+0x8c>)
 80016ac:	f000 fc1e 	bl	8001eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b0a2      	sub	sp, #136	; 0x88
 80016e4:	af04      	add	r7, sp, #16

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

 HAL_Init();
 80016e6:	f000 fa85 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ea:	f000 f857 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ee:	f7ff ff59 	bl	80015a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f2:	f7ff ff7f 	bl	80015f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016f6:	f000 f9e1 	bl	8001abc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	/* Initializes BMP180 sensor and oversampling settings. */
	BMP180_Init(&hi2c1);
 80016fa:	4825      	ldr	r0, [pc, #148]	; (8001790 <main+0xb0>)
 80016fc:	f7ff fc40 	bl	8000f80 <BMP180_Init>
	BMP180_SetOversampling(BMP180_ULTRA);
 8001700:	2003      	movs	r0, #3
 8001702:	f7ff fc4d 	bl	8000fa0 <BMP180_SetOversampling>
	/* Update calibration data. Must be called once before entering main loop. */
	BMP180_UpdateCalibrationData();
 8001706:	f7ff fc5b 	bl	8000fc0 <BMP180_UpdateCalibrationData>

	int32_t basePressure = BMP180_GetPressure();
 800170a:	f7ff fda1 	bl	8001250 <BMP180_GetPressure>
 800170e:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		float temperature = BMP180_GetRawTemperature();
 8001710:	f7ff fd5a 	bl	80011c8 <BMP180_GetRawTemperature>
 8001714:	ee07 0a90 	vmov	s15, r0
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		int32_t pressure = BMP180_GetPressure();
 8001720:	f7ff fd96 	bl	8001250 <BMP180_GetPressure>
 8001724:	66f8      	str	r0, [r7, #108]	; 0x6c

		float alt = irtifaHesapla(pressure, basePressure);
 8001726:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001728:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800172a:	f7ff fea1 	bl	8001470 <irtifaHesapla>
 800172e:	ee07 0a90 	vmov	s15, r0
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

		char buffer[100];
		sprintf(buffer, "Temperature: %f deg C\nBase Pressure: %d m \nPressure: %d Pa\nAltitude: %.2f m\n", temperature / 10, basePressure, pressure, alt);
 800173a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800173e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001742:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001746:	ee16 0a90 	vmov	r0, s13
 800174a:	f7fe ff1d 	bl	8000588 <__aeabi_f2d>
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
 8001752:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001754:	f7fe ff18 	bl	8000588 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	1d38      	adds	r0, r7, #4
 800175e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4622      	mov	r2, r4
 800176c:	462b      	mov	r3, r5
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <main+0xb4>)
 8001770:	f003 f9ac 	bl	8004acc <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd4a 	bl	8000210 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	1d39      	adds	r1, r7, #4
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <main+0xb8>)
 8001788:	f002 fa3b 	bl	8003c02 <HAL_UART_Transmit>
  {
 800178c:	e7c0      	b.n	8001710 <main+0x30>
 800178e:	bf00      	nop
 8001790:	20000228 	.word	0x20000228
 8001794:	08007ea8 	.word	0x08007ea8
 8001798:	2000027c 	.word	0x2000027c

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	; 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2234      	movs	r2, #52	; 0x34
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd1c 	bl	80041e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <SystemClock_Config+0xb8>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <SystemClock_Config+0xb8>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <SystemClock_Config+0xb8>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <SystemClock_Config+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <SystemClock_Config+0xbc>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <SystemClock_Config+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2310      	movs	r3, #16
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4618      	mov	r0, r3
 8001812:	f001 ff0b 	bl	800362c <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800181c:	f000 f81e 	bl	800185c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fc80 	bl	8003140 <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001846:	f000 f809 	bl	800185c <Error_Handler>
  }
}
 800184a:	bf00      	nop
 800184c:	3750      	adds	r7, #80	; 0x50
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 f9c8 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_kill>:

int _kill(int pid, int sig)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001926:	f002 fc35 	bl	8004194 <__errno>
 800192a:	4603      	mov	r3, r0
 800192c:	2216      	movs	r2, #22
 800192e:	601a      	str	r2, [r3, #0]
	return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_exit>:

void _exit (int status)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ffe7 	bl	800191c <_kill>
	while (1) {}		/* Make sure we hang here */
 800194e:	e7fe      	b.n	800194e <_exit+0x12>

08001950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	4601      	mov	r1, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf0      	blt.n	8001962 <_read+0x12>
	}

return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e009      	b.n	80019b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbf1      	blt.n	800199c <_write+0x12>
	}
	return len;
 80019b8:	687b      	ldr	r3, [r7, #4]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_close>:

int _close(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ea:	605a      	str	r2, [r3, #4]
	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_isatty>:

int _isatty(int file)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
	return 1;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <_sbrk+0x5c>)
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <_sbrk+0x60>)
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <_sbrk+0x64>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <_sbrk+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d207      	bcs.n	8001a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a5c:	f002 fb9a 	bl	8004194 <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	220c      	movs	r2, #12
 8001a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	e009      	b.n	8001a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <_sbrk+0x64>)
 8001a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20020000 	.word	0x20020000
 8001a8c:	00000400 	.word	0x00000400
 8001a90:	20000200 	.word	0x20000200
 8001a94:	200002d8 	.word	0x200002d8

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <MX_USART2_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f002 f838 	bl	8003b68 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f7ff fead 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000027c 	.word	0x2000027c
 8001b0c:	40004400 	.word	0x40004400

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0x84>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12b      	bne.n	8001b8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_UART_MspInit+0x8c>)
 8001b86:	f000 f9b1 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40004400 	.word	0x40004400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ba6:	490e      	ldr	r1, [pc, #56]	; (8001be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bbc:	4c0b      	ldr	r4, [pc, #44]	; (8001bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bca:	f7ff ff65 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f002 fae7 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff fd85 	bl	80016e0 <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001be4:	08008350 	.word	0x08008350
  ldr r2, =_sbss
 8001be8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001bec:	200002d4 	.word	0x200002d4

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f931 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fe1e 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f93b 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f911 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	200002c0 	.word	0x200002c0

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200002c0 	.word	0x200002c0

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff47 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff5c 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffb0 	bl	8001e40 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e165      	b.n	80021d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8154 	bne.w	80021ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80ae 	beq.w	80021ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_GPIO_Init+0x300>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_GPIO_Init+0x300>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <HAL_GPIO_Init+0x300>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_GPIO_Init+0x304>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x308>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x30c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x310>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x314>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x318>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x20a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x31c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x206>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_GPIO_Init+0x320>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x202>
 80020ea:	2306      	movs	r3, #6
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x21c>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	; (80021f0 <HAL_GPIO_Init+0x304>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_GPIO_Init+0x324>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214a:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_GPIO_Init+0x324>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_GPIO_Init+0x324>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <HAL_GPIO_Init+0x324>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_GPIO_Init+0x324>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_GPIO_Init+0x324>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_GPIO_Init+0x324>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_GPIO_Init+0x324>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f ae96 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e12b      	b.n	800247e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fa08 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002278:	f001 f854 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800227c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a81      	ldr	r2, [pc, #516]	; (8002488 <HAL_I2C_Init+0x274>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d807      	bhi.n	8002298 <HAL_I2C_Init+0x84>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_I2C_Init+0x278>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e006      	b.n	80022a6 <HAL_I2C_Init+0x92>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a7d      	ldr	r2, [pc, #500]	; (8002490 <HAL_I2C_Init+0x27c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	bf94      	ite	ls
 80022a0:	2301      	movls	r3, #1
 80022a2:	2300      	movhi	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0e7      	b.n	800247e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a78      	ldr	r2, [pc, #480]	; (8002494 <HAL_I2C_Init+0x280>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_I2C_Init+0x274>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d802      	bhi.n	80022e8 <HAL_I2C_Init+0xd4>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	e009      	b.n	80022fc <HAL_I2C_Init+0xe8>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_I2C_Init+0x284>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	3301      	adds	r3, #1
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800230e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	495c      	ldr	r1, [pc, #368]	; (8002488 <HAL_I2C_Init+0x274>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d819      	bhi.n	8002350 <HAL_I2C_Init+0x13c>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e59      	subs	r1, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fbb1 f3f3 	udiv	r3, r1, r3
 800232a:	1c59      	adds	r1, r3, #1
 800232c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002330:	400b      	ands	r3, r1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_I2C_Init+0x138>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e59      	subs	r1, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fbb1 f3f3 	udiv	r3, r1, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	e051      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 800234c:	2304      	movs	r3, #4
 800234e:	e04f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d111      	bne.n	800237c <HAL_I2C_Init+0x168>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e012      	b.n	80023a2 <HAL_I2C_Init+0x18e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e58      	subs	r0, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	0099      	lsls	r1, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002392:	3301      	adds	r3, #1
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Init+0x196>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e022      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <HAL_I2C_Init+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e58      	subs	r0, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	440b      	add	r3, r1
 80023c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	e00f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	6809      	ldr	r1, [r1, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800241e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6911      	ldr	r1, [r2, #16]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	000186a0 	.word	0x000186a0
 800248c:	001e847f 	.word	0x001e847f
 8002490:	003d08ff 	.word	0x003d08ff
 8002494:	431bde83 	.word	0x431bde83
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	461a      	mov	r2, r3
 80024a8:	460b      	mov	r3, r1
 80024aa:	817b      	strh	r3, [r7, #10]
 80024ac:	4613      	mov	r3, r2
 80024ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff fc06 	bl	8001cc0 <HAL_GetTick>
 80024b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 80e0 	bne.w	8002684 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2319      	movs	r3, #25
 80024ca:	2201      	movs	r2, #1
 80024cc:	4970      	ldr	r1, [pc, #448]	; (8002690 <HAL_I2C_Master_Transmit+0x1f4>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fc58 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	e0d3      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2C_Master_Transmit+0x50>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0cc      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002520:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2221      	movs	r2, #33	; 0x21
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2210      	movs	r2, #16
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	893a      	ldrh	r2, [r7, #8]
 8002542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <HAL_I2C_Master_Transmit+0x1f8>)
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6a3a      	ldr	r2, [r7, #32]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fac2 	bl	8002ae4 <I2C_MasterRequestWrite>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e08d      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002580:	e066      	b.n	8002650 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	6a39      	ldr	r1, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fcd2 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x188>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6a39      	ldr	r1, [r7, #32]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fcc2 	bl	8002fb2 <I2C_WaitOnBTFFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e01a      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d194      	bne.n	8002582 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00100002 	.word	0x00100002
 8002694:	ffff0000 	.word	0xffff0000

08002698 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	461a      	mov	r2, r3
 80026a4:	460b      	mov	r3, r1
 80026a6:	817b      	strh	r3, [r7, #10]
 80026a8:	4613      	mov	r3, r2
 80026aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff fb08 	bl	8001cc0 <HAL_GetTick>
 80026b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	f040 820b 	bne.w	8002ad6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2319      	movs	r3, #25
 80026c6:	2201      	movs	r2, #1
 80026c8:	497c      	ldr	r1, [pc, #496]	; (80028bc <HAL_I2C_Master_Receive+0x224>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fb5a 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
 80026d8:	e1fe      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_I2C_Master_Receive+0x50>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e1f7      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d007      	beq.n	800270e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2222      	movs	r2, #34	; 0x22
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2210      	movs	r2, #16
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	893a      	ldrh	r2, [r7, #8]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a5c      	ldr	r2, [pc, #368]	; (80028c0 <HAL_I2C_Master_Receive+0x228>)
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa46 	bl	8002be8 <I2C_MasterRequestRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b8      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e18c      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e16c      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e14c      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800283c:	e138      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	2b03      	cmp	r3, #3
 8002844:	f200 80f1 	bhi.w	8002a2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b01      	cmp	r3, #1
 800284e:	d123      	bne.n	8002898 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fbed 	bl	8003034 <I2C_WaitOnRXNEFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e139      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002896:	e10b      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b02      	cmp	r3, #2
 800289e:	d14e      	bne.n	800293e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	2200      	movs	r2, #0
 80028a8:	4906      	ldr	r1, [pc, #24]	; (80028c4 <HAL_I2C_Master_Receive+0x22c>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa6a 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e10e      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
 80028ba:	bf00      	nop
 80028bc:	00100002 	.word	0x00100002
 80028c0:	ffff0000 	.word	0xffff0000
 80028c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800293c:	e0b8      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	2200      	movs	r2, #0
 8002946:	4966      	ldr	r1, [pc, #408]	; (8002ae0 <HAL_I2C_Master_Receive+0x448>)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fa1b 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0bf      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	2200      	movs	r2, #0
 80029a2:	494f      	ldr	r1, [pc, #316]	; (8002ae0 <HAL_I2C_Master_Receive+0x448>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f9ed 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e091      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a28:	e042      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fb00 	bl	8003034 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e04c      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d118      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f aec2 	bne.w	800283e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00010004 	.word	0x00010004

08002ae4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d006      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d003      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0c:	d108      	bne.n	8002b20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e00b      	b.n	8002b38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d107      	bne.n	8002b38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f91d 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d103      	bne.n	8002b68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e035      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e01b      	b.n	8002bc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	11db      	asrs	r3, r3, #7
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0306 	and.w	r3, r3, #6
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f063 030f 	orn	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <I2C_MasterRequestWrite+0xfc>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f943 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e010      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4907      	ldr	r1, [pc, #28]	; (8002be4 <I2C_MasterRequestWrite+0x100>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f933 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010008 	.word	0x00010008
 8002be4:	00010002 	.word	0x00010002

08002be8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d006      	beq.n	8002c22 <I2C_MasterRequestRead+0x3a>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d003      	beq.n	8002c22 <I2C_MasterRequestRead+0x3a>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c20:	d108      	bne.n	8002c34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e00b      	b.n	8002c4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d107      	bne.n	8002c4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f893 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d103      	bne.n	8002c7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e079      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e05f      	b.n	8002d5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c9c:	897b      	ldrh	r3, [r7, #10]
 8002c9e:	11db      	asrs	r3, r3, #7
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0306 	and.w	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f063 030f 	orn	r3, r3, #15
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4930      	ldr	r1, [pc, #192]	; (8002d7c <I2C_MasterRequestRead+0x194>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8b9 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e054      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4929      	ldr	r1, [pc, #164]	; (8002d80 <I2C_MasterRequestRead+0x198>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8a9 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e044      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f831 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d103      	bne.n	8002d40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e017      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	11db      	asrs	r3, r3, #7
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0306 	and.w	r3, r3, #6
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f063 030e 	orn	r3, r3, #14
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4907      	ldr	r1, [pc, #28]	; (8002d80 <I2C_MasterRequestRead+0x198>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f865 	bl	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00010008 	.word	0x00010008
 8002d80:	00010002 	.word	0x00010002

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e025      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d021      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe ff8f 	bl	8001cc0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e023      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10d      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	e00c      	b.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d0b6      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e40:	e051      	b.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d123      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e046      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d021      	beq.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fe ff0d 	bl	8001cc0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e020      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10c      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e00b      	b.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d18d      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	e02d      	b.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f8ce 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02d      	b.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d021      	beq.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe feb3 	bl	8001cc0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d116      	bne.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d1ca      	bne.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbe:	e02d      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f88d 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e02d      	b.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d021      	beq.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7fe fe72 	bl	8001cc0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e007      	b.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d1ca      	bne.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003040:	e042      	b.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b10      	cmp	r3, #16
 800304e:	d119      	bne.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0210 	mvn.w	r2, #16
 8003058:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e029      	b.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe fe1c 	bl	8001cc0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d1b5      	bne.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f6:	d11b      	bne.n	8003130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe fd46 	bl	8001cc0 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe fd42 	bl	8001cc0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f855 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fca6 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	08007f00 	.word	0x08007f00
 8003304:	20000004 	.word	0x20000004
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	08007f10 	.word	0x08007f10

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffdc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	08007f10 	.word	0x08007f10

08003374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003378:	b087      	sub	sp, #28
 800337a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800337c:	2600      	movs	r6, #0
 800337e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003380:	2600      	movs	r6, #0
 8003382:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003384:	2600      	movs	r6, #0
 8003386:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003388:	2600      	movs	r6, #0
 800338a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800338c:	2600      	movs	r6, #0
 800338e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4ea3      	ldr	r6, [pc, #652]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003392:	68b6      	ldr	r6, [r6, #8]
 8003394:	f006 060c 	and.w	r6, r6, #12
 8003398:	2e0c      	cmp	r6, #12
 800339a:	f200 8137 	bhi.w	800360c <HAL_RCC_GetSysClockFreq+0x298>
 800339e:	f20f 0c08 	addw	ip, pc, #8
 80033a2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	0800360d 	.word	0x0800360d
 80033b0:	0800360d 	.word	0x0800360d
 80033b4:	0800360d 	.word	0x0800360d
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	0800360d 	.word	0x0800360d
 80033c0:	0800360d 	.word	0x0800360d
 80033c4:	0800360d 	.word	0x0800360d
 80033c8:	080033e9 	.word	0x080033e9
 80033cc:	0800360d 	.word	0x0800360d
 80033d0:	0800360d 	.word	0x0800360d
 80033d4:	0800360d 	.word	0x0800360d
 80033d8:	080034ff 	.word	0x080034ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b91      	ldr	r3, [pc, #580]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80033de:	613b      	str	r3, [r7, #16]
       break;
 80033e0:	e117      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b91      	ldr	r3, [pc, #580]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80033e4:	613b      	str	r3, [r7, #16]
      break;
 80033e6:	e114      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d024      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	461a      	mov	r2, r3
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800340e:	f04f 0500 	mov.w	r5, #0
 8003412:	ea02 0004 	and.w	r0, r2, r4
 8003416:	ea03 0105 	and.w	r1, r3, r5
 800341a:	4b83      	ldr	r3, [pc, #524]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800341c:	fb03 f201 	mul.w	r2, r3, r1
 8003420:	2300      	movs	r3, #0
 8003422:	fb03 f300 	mul.w	r3, r3, r0
 8003426:	4413      	add	r3, r2
 8003428:	4a7f      	ldr	r2, [pc, #508]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800342a:	fba0 0102 	umull	r0, r1, r0, r2
 800342e:	440b      	add	r3, r1
 8003430:	4619      	mov	r1, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	461a      	mov	r2, r3
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	f7fd fc25 	bl	8000c88 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4613      	mov	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e04c      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003448:	4b75      	ldr	r3, [pc, #468]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	461a      	mov	r2, r3
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	ea02 0800 	and.w	r8, r2, r0
 8003460:	ea03 0901 	and.w	r9, r3, r1
 8003464:	4640      	mov	r0, r8
 8003466:	4649      	mov	r1, r9
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	014b      	lsls	r3, r1, #5
 8003472:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003476:	0142      	lsls	r2, r0, #5
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	ebb0 0008 	subs.w	r0, r0, r8
 8003480:	eb61 0109 	sbc.w	r1, r1, r9
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	018b      	lsls	r3, r1, #6
 800348e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003492:	0182      	lsls	r2, r0, #6
 8003494:	1a12      	subs	r2, r2, r0
 8003496:	eb63 0301 	sbc.w	r3, r3, r1
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	00d9      	lsls	r1, r3, #3
 80034a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a8:	00d0      	lsls	r0, r2, #3
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	eb12 0208 	adds.w	r2, r2, r8
 80034b2:	eb43 0309 	adc.w	r3, r3, r9
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0299      	lsls	r1, r3, #10
 80034c0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034c4:	0290      	lsls	r0, r2, #10
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	f7fd fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4613      	mov	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e2:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	3301      	adds	r3, #1
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
      break;
 80034fc:	e089      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034fe:	4948      	ldr	r1, [pc, #288]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003500:	6849      	ldr	r1, [r1, #4]
 8003502:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003506:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003508:	4945      	ldr	r1, [pc, #276]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800350a:	6849      	ldr	r1, [r1, #4]
 800350c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003510:	2900      	cmp	r1, #0
 8003512:	d024      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4942      	ldr	r1, [pc, #264]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003516:	6849      	ldr	r1, [r1, #4]
 8003518:	0989      	lsrs	r1, r1, #6
 800351a:	4608      	mov	r0, r1
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003524:	f04f 0500 	mov.w	r5, #0
 8003528:	ea00 0204 	and.w	r2, r0, r4
 800352c:	ea01 0305 	and.w	r3, r1, r5
 8003530:	493d      	ldr	r1, [pc, #244]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003532:	fb01 f003 	mul.w	r0, r1, r3
 8003536:	2100      	movs	r1, #0
 8003538:	fb01 f102 	mul.w	r1, r1, r2
 800353c:	1844      	adds	r4, r0, r1
 800353e:	493a      	ldr	r1, [pc, #232]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003540:	fba2 0101 	umull	r0, r1, r2, r1
 8003544:	1863      	adds	r3, r4, r1
 8003546:	4619      	mov	r1, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	f7fd fb9a 	bl	8000c88 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e04a      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355e:	4b30      	ldr	r3, [pc, #192]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	461a      	mov	r2, r3
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	ea02 0400 	and.w	r4, r2, r0
 8003576:	ea03 0501 	and.w	r5, r3, r1
 800357a:	4620      	mov	r0, r4
 800357c:	4629      	mov	r1, r5
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	014b      	lsls	r3, r1, #5
 8003588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800358c:	0142      	lsls	r2, r0, #5
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	1b00      	subs	r0, r0, r4
 8003594:	eb61 0105 	sbc.w	r1, r1, r5
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	018b      	lsls	r3, r1, #6
 80035a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035a6:	0182      	lsls	r2, r0, #6
 80035a8:	1a12      	subs	r2, r2, r0
 80035aa:	eb63 0301 	sbc.w	r3, r3, r1
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	00d9      	lsls	r1, r3, #3
 80035b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035bc:	00d0      	lsls	r0, r2, #3
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	1912      	adds	r2, r2, r4
 80035c4:	eb45 0303 	adc.w	r3, r5, r3
 80035c8:	f04f 0000 	mov.w	r0, #0
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	0299      	lsls	r1, r3, #10
 80035d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035d6:	0290      	lsls	r0, r2, #10
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f7fd fb4e 	bl	8000c88 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0f1b      	lsrs	r3, r3, #28
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	613b      	str	r3, [r7, #16]
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800360e:	613b      	str	r3, [r7, #16]
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	693b      	ldr	r3, [r7, #16]
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	00f42400 	.word	0x00f42400
 8003628:	017d7840 	.word	0x017d7840

0800362c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e28d      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8083 	beq.w	8003752 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800364c:	4b94      	ldr	r3, [pc, #592]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d019      	beq.n	800368c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003658:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003660:	2b08      	cmp	r3, #8
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003664:	4b8e      	ldr	r3, [pc, #568]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d00c      	beq.n	800368c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d112      	bne.n	80036a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368a:	d10b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d05b      	beq.n	8003750 <HAL_RCC_OscConfig+0x124>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d157      	bne.n	8003750 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e25a      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d106      	bne.n	80036bc <HAL_RCC_OscConfig+0x90>
 80036ae:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7b      	ldr	r2, [pc, #492]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xcc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xb4>
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a72      	ldr	r2, [pc, #456]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xcc>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fade 	bl	8001cc0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fada 	bl	8001cc0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e21f      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xdc>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe faca 	bl	8001cc0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fac6 	bl	8001cc0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e20b      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x104>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d06f      	beq.n	800383e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800375e:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800376a:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x186>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1d3      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e03a      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe fa73 	bl	8001cc0 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe fa6f 	bl	8001cc0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1b4      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4925      	ldr	r1, [pc, #148]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x278>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fa52 	bl	8001cc0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003820:	f7fe fa4e 	bl	8001cc0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e193      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d036      	beq.n	80038b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fa32 	bl	8001cc0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fe fa2e 	bl	8001cc0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e173      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x234>
 800387e:	e01b      	b.n	80038b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fe fa1b 	bl	8001cc0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	e00e      	b.n	80038ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fe fa17 	bl	8001cc0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d907      	bls.n	80038ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e15c      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470000 	.word	0x42470000
 80038a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ea      	bne.n	800388e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8097 	beq.w	80039f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b83      	ldr	r3, [pc, #524]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	4b7f      	ldr	r3, [pc, #508]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a7e      	ldr	r2, [pc, #504]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b7c      	ldr	r3, [pc, #496]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b79      	ldr	r3, [pc, #484]	; (8003adc <HAL_RCC_OscConfig+0x4b0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d118      	bne.n	8003934 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003902:	4b76      	ldr	r3, [pc, #472]	; (8003adc <HAL_RCC_OscConfig+0x4b0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a75      	ldr	r2, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x4b0>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390e:	f7fe f9d7 	bl	8001cc0 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003916:	f7fe f9d3 	bl	8001cc0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e118      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <HAL_RCC_OscConfig+0x4b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x31e>
 800393c:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a65      	ldr	r2, [pc, #404]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x358>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b05      	cmp	r3, #5
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0x340>
 8003952:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a60      	ldr	r2, [pc, #384]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a5d      	ldr	r2, [pc, #372]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0x358>
 800396c:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a59      	ldr	r2, [pc, #356]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 800397e:	f023 0304 	bic.w	r3, r3, #4
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d015      	beq.n	80039b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe f998 	bl	8001cc0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fe f994 	bl	8001cc0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0d7      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ee      	beq.n	8003994 <HAL_RCC_OscConfig+0x368>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe f982 	bl	8001cc0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fe f97e 	bl	8001cc0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0c1      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d6:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ee      	bne.n	80039c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e8:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	4a3a      	ldr	r2, [pc, #232]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80ad 	beq.w	8003b58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d060      	beq.n	8003acc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d145      	bne.n	8003a9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_OscConfig+0x4b4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe f952 	bl	8001cc0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe f94e 	bl	8001cc0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e093      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x4b4>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe f923 	bl	8001cc0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe f91f 	bl	8001cc0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e064      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x452>
 8003a9c:	e05c      	b.n	8003b58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_OscConfig+0x4b4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f90c 	bl	8001cc0 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe f908 	bl	8001cc0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04d      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x480>
 8003aca:	e045      	b.n	8003b58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e040      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_RCC_OscConfig+0x538>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d030      	beq.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d129      	bne.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d122      	bne.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d119      	bne.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d10f      	bne.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e03f      	b.n	8003bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd ffbe 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f929 	bl	8003e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d17c      	bne.n	8003d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Transmit+0x2c>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e075      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit+0x3e>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e06e      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2221      	movs	r2, #33	; 0x21
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c56:	f7fe f833 	bl	8001cc0 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d108      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c94:	e02a      	b.n	8003cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f840 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e007      	b.n	8003cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1cf      	bne.n	8003c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f810 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e006      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b090      	sub	sp, #64	; 0x40
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e050      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d04c      	beq.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d46:	f7fd ffbb 	bl	8001cc0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d241      	bcs.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d76:	637a      	str	r2, [r7, #52]	; 0x34
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003daa:	623a      	str	r2, [r7, #32]
 8003dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69f9      	ldr	r1, [r7, #28]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e00f      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d09f      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3740      	adds	r7, #64	; 0x40
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	b09f      	sub	sp, #124	; 0x7c
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	ea40 0301 	orr.w	r3, r0, r1
 8003e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e48:	f021 010c 	bic.w	r1, r1, #12
 8003e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e52:	430b      	orrs	r3, r1
 8003e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	6999      	ldr	r1, [r3, #24]
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	ea40 0301 	orr.w	r3, r0, r1
 8003e6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4bc5      	ldr	r3, [pc, #788]	; (8004188 <UART_SetConfig+0x384>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d004      	beq.n	8003e82 <UART_SetConfig+0x7e>
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4bc3      	ldr	r3, [pc, #780]	; (800418c <UART_SetConfig+0x388>)
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d103      	bne.n	8003e8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e82:	f7ff fa63 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003e86:	6778      	str	r0, [r7, #116]	; 0x74
 8003e88:	e002      	b.n	8003e90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8a:	f7ff fa4b 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8003e8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e98:	f040 80b6 	bne.w	8004008 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9e:	461c      	mov	r4, r3
 8003ea0:	f04f 0500 	mov.w	r5, #0
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	6439      	str	r1, [r7, #64]	; 0x40
 8003eac:	415b      	adcs	r3, r3
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eb4:	1912      	adds	r2, r2, r4
 8003eb6:	eb45 0303 	adc.w	r3, r5, r3
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	00d9      	lsls	r1, r3, #3
 8003ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ec8:	00d0      	lsls	r0, r2, #3
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	1911      	adds	r1, r2, r4
 8003ed0:	6639      	str	r1, [r7, #96]	; 0x60
 8003ed2:	416b      	adcs	r3, r5
 8003ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	1891      	adds	r1, r2, r2
 8003ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee4:	415b      	adcs	r3, r3
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ef0:	f7fc feca 	bl	8000c88 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4ba5      	ldr	r3, [pc, #660]	; (8004190 <UART_SetConfig+0x38c>)
 8003efa:	fba3 2302 	umull	r2, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	011e      	lsls	r6, r3, #4
 8003f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f04:	461c      	mov	r4, r3
 8003f06:	f04f 0500 	mov.w	r5, #0
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	1891      	adds	r1, r2, r2
 8003f10:	6339      	str	r1, [r7, #48]	; 0x30
 8003f12:	415b      	adcs	r3, r3
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
 8003f16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f1a:	1912      	adds	r2, r2, r4
 8003f1c:	eb45 0303 	adc.w	r3, r5, r3
 8003f20:	f04f 0000 	mov.w	r0, #0
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	00d9      	lsls	r1, r3, #3
 8003f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2e:	00d0      	lsls	r0, r2, #3
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	1911      	adds	r1, r2, r4
 8003f36:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f38:	416b      	adcs	r3, r5
 8003f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f56:	f7fc fe97 	bl	8000c88 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <UART_SetConfig+0x38c>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a87      	ldr	r2, [pc, #540]	; (8004190 <UART_SetConfig+0x38c>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f80:	441e      	add	r6, r3
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	4618      	mov	r0, r3
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	1894      	adds	r4, r2, r2
 8003f90:	623c      	str	r4, [r7, #32]
 8003f92:	415b      	adcs	r3, r3
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
 8003f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9a:	1812      	adds	r2, r2, r0
 8003f9c:	eb41 0303 	adc.w	r3, r1, r3
 8003fa0:	f04f 0400 	mov.w	r4, #0
 8003fa4:	f04f 0500 	mov.w	r5, #0
 8003fa8:	00dd      	lsls	r5, r3, #3
 8003faa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fae:	00d4      	lsls	r4, r2, #3
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	1814      	adds	r4, r2, r0
 8003fb6:	653c      	str	r4, [r7, #80]	; 0x50
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	1891      	adds	r1, r2, r2
 8003fc8:	61b9      	str	r1, [r7, #24]
 8003fca:	415b      	adcs	r3, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fd6:	f7fc fe57 	bl	8000c88 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <UART_SetConfig+0x38c>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <UART_SetConfig+0x38c>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 0207 	and.w	r2, r3, #7
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4432      	add	r2, r6
 8004004:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004006:	e0b9      	b.n	800417c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400a:	461c      	mov	r4, r3
 800400c:	f04f 0500 	mov.w	r5, #0
 8004010:	4622      	mov	r2, r4
 8004012:	462b      	mov	r3, r5
 8004014:	1891      	adds	r1, r2, r2
 8004016:	6139      	str	r1, [r7, #16]
 8004018:	415b      	adcs	r3, r3
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004020:	1912      	adds	r2, r2, r4
 8004022:	eb45 0303 	adc.w	r3, r5, r3
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	00d9      	lsls	r1, r3, #3
 8004030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004034:	00d0      	lsls	r0, r2, #3
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	eb12 0804 	adds.w	r8, r2, r4
 800403e:	eb43 0905 	adc.w	r9, r3, r5
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4618      	mov	r0, r3
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800405a:	0082      	lsls	r2, r0, #2
 800405c:	4640      	mov	r0, r8
 800405e:	4649      	mov	r1, r9
 8004060:	f7fc fe12 	bl	8000c88 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b49      	ldr	r3, [pc, #292]	; (8004190 <UART_SetConfig+0x38c>)
 800406a:	fba3 2302 	umull	r2, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011e      	lsls	r6, r3, #4
 8004072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004074:	4618      	mov	r0, r3
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	1894      	adds	r4, r2, r2
 8004080:	60bc      	str	r4, [r7, #8]
 8004082:	415b      	adcs	r3, r3
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800408a:	1812      	adds	r2, r2, r0
 800408c:	eb41 0303 	adc.w	r3, r1, r3
 8004090:	f04f 0400 	mov.w	r4, #0
 8004094:	f04f 0500 	mov.w	r5, #0
 8004098:	00dd      	lsls	r5, r3, #3
 800409a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800409e:	00d4      	lsls	r4, r2, #3
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	1814      	adds	r4, r2, r0
 80040a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80040a8:	414b      	adcs	r3, r1
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	008b      	lsls	r3, r1, #2
 80040c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040c4:	0082      	lsls	r2, r0, #2
 80040c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040ca:	f7fc fddd 	bl	8000c88 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <UART_SetConfig+0x38c>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	3332      	adds	r3, #50	; 0x32
 80040e6:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <UART_SetConfig+0x38c>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f2:	441e      	add	r6, r3
 80040f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f6:	4618      	mov	r0, r3
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	1894      	adds	r4, r2, r2
 8004102:	603c      	str	r4, [r7, #0]
 8004104:	415b      	adcs	r3, r3
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410c:	1812      	adds	r2, r2, r0
 800410e:	eb41 0303 	adc.w	r3, r1, r3
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	f04f 0500 	mov.w	r5, #0
 800411a:	00dd      	lsls	r5, r3, #3
 800411c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004120:	00d4      	lsls	r4, r2, #3
 8004122:	4622      	mov	r2, r4
 8004124:	462b      	mov	r3, r5
 8004126:	eb12 0a00 	adds.w	sl, r2, r0
 800412a:	eb43 0b01 	adc.w	fp, r3, r1
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	008b      	lsls	r3, r1, #2
 8004142:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004146:	0082      	lsls	r2, r0, #2
 8004148:	4650      	mov	r0, sl
 800414a:	4659      	mov	r1, fp
 800414c:	f7fc fd9c 	bl	8000c88 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <UART_SetConfig+0x38c>)
 8004156:	fba3 1302 	umull	r1, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <UART_SetConfig+0x38c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4432      	add	r2, r6
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	377c      	adds	r7, #124	; 0x7c
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40011000 	.word	0x40011000
 800418c:	40011400 	.word	0x40011400
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <__errno>:
 8004194:	4b01      	ldr	r3, [pc, #4]	; (800419c <__errno+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000010 	.word	0x20000010

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4d0d      	ldr	r5, [pc, #52]	; (80041d8 <__libc_init_array+0x38>)
 80041a4:	4c0d      	ldr	r4, [pc, #52]	; (80041dc <__libc_init_array+0x3c>)
 80041a6:	1b64      	subs	r4, r4, r5
 80041a8:	10a4      	asrs	r4, r4, #2
 80041aa:	2600      	movs	r6, #0
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	4d0b      	ldr	r5, [pc, #44]	; (80041e0 <__libc_init_array+0x40>)
 80041b2:	4c0c      	ldr	r4, [pc, #48]	; (80041e4 <__libc_init_array+0x44>)
 80041b4:	f003 fe6a 	bl	8007e8c <_init>
 80041b8:	1b64      	subs	r4, r4, r5
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	2600      	movs	r6, #0
 80041be:	42a6      	cmp	r6, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c8:	4798      	blx	r3
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d2:	4798      	blx	r3
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	08008348 	.word	0x08008348
 80041dc:	08008348 	.word	0x08008348
 80041e0:	08008348 	.word	0x08008348
 80041e4:	0800834c 	.word	0x0800834c

080041e8 <memset>:
 80041e8:	4402      	add	r2, r0
 80041ea:	4603      	mov	r3, r0
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d100      	bne.n	80041f2 <memset+0xa>
 80041f0:	4770      	bx	lr
 80041f2:	f803 1b01 	strb.w	r1, [r3], #1
 80041f6:	e7f9      	b.n	80041ec <memset+0x4>

080041f8 <__cvt>:
 80041f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	ec55 4b10 	vmov	r4, r5, d0
 8004200:	2d00      	cmp	r5, #0
 8004202:	460e      	mov	r6, r1
 8004204:	4619      	mov	r1, r3
 8004206:	462b      	mov	r3, r5
 8004208:	bfbb      	ittet	lt
 800420a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800420e:	461d      	movlt	r5, r3
 8004210:	2300      	movge	r3, #0
 8004212:	232d      	movlt	r3, #45	; 0x2d
 8004214:	700b      	strb	r3, [r1, #0]
 8004216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004218:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800421c:	4691      	mov	r9, r2
 800421e:	f023 0820 	bic.w	r8, r3, #32
 8004222:	bfbc      	itt	lt
 8004224:	4622      	movlt	r2, r4
 8004226:	4614      	movlt	r4, r2
 8004228:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800422c:	d005      	beq.n	800423a <__cvt+0x42>
 800422e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004232:	d100      	bne.n	8004236 <__cvt+0x3e>
 8004234:	3601      	adds	r6, #1
 8004236:	2102      	movs	r1, #2
 8004238:	e000      	b.n	800423c <__cvt+0x44>
 800423a:	2103      	movs	r1, #3
 800423c:	ab03      	add	r3, sp, #12
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	ab02      	add	r3, sp, #8
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	ec45 4b10 	vmov	d0, r4, r5
 8004248:	4653      	mov	r3, sl
 800424a:	4632      	mov	r2, r6
 800424c:	f000 fcec 	bl	8004c28 <_dtoa_r>
 8004250:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004254:	4607      	mov	r7, r0
 8004256:	d102      	bne.n	800425e <__cvt+0x66>
 8004258:	f019 0f01 	tst.w	r9, #1
 800425c:	d022      	beq.n	80042a4 <__cvt+0xac>
 800425e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004262:	eb07 0906 	add.w	r9, r7, r6
 8004266:	d110      	bne.n	800428a <__cvt+0x92>
 8004268:	783b      	ldrb	r3, [r7, #0]
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d10a      	bne.n	8004284 <__cvt+0x8c>
 800426e:	2200      	movs	r2, #0
 8004270:	2300      	movs	r3, #0
 8004272:	4620      	mov	r0, r4
 8004274:	4629      	mov	r1, r5
 8004276:	f7fc fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800427a:	b918      	cbnz	r0, 8004284 <__cvt+0x8c>
 800427c:	f1c6 0601 	rsb	r6, r6, #1
 8004280:	f8ca 6000 	str.w	r6, [sl]
 8004284:	f8da 3000 	ldr.w	r3, [sl]
 8004288:	4499      	add	r9, r3
 800428a:	2200      	movs	r2, #0
 800428c:	2300      	movs	r3, #0
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc fc39 	bl	8000b08 <__aeabi_dcmpeq>
 8004296:	b108      	cbz	r0, 800429c <__cvt+0xa4>
 8004298:	f8cd 900c 	str.w	r9, [sp, #12]
 800429c:	2230      	movs	r2, #48	; 0x30
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	454b      	cmp	r3, r9
 80042a2:	d307      	bcc.n	80042b4 <__cvt+0xbc>
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042a8:	1bdb      	subs	r3, r3, r7
 80042aa:	4638      	mov	r0, r7
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	b004      	add	sp, #16
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	1c59      	adds	r1, r3, #1
 80042b6:	9103      	str	r1, [sp, #12]
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e7f0      	b.n	800429e <__cvt+0xa6>

080042bc <__exponent>:
 80042bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042be:	4603      	mov	r3, r0
 80042c0:	2900      	cmp	r1, #0
 80042c2:	bfb8      	it	lt
 80042c4:	4249      	neglt	r1, r1
 80042c6:	f803 2b02 	strb.w	r2, [r3], #2
 80042ca:	bfb4      	ite	lt
 80042cc:	222d      	movlt	r2, #45	; 0x2d
 80042ce:	222b      	movge	r2, #43	; 0x2b
 80042d0:	2909      	cmp	r1, #9
 80042d2:	7042      	strb	r2, [r0, #1]
 80042d4:	dd2a      	ble.n	800432c <__exponent+0x70>
 80042d6:	f10d 0407 	add.w	r4, sp, #7
 80042da:	46a4      	mov	ip, r4
 80042dc:	270a      	movs	r7, #10
 80042de:	46a6      	mov	lr, r4
 80042e0:	460a      	mov	r2, r1
 80042e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80042e6:	fb07 1516 	mls	r5, r7, r6, r1
 80042ea:	3530      	adds	r5, #48	; 0x30
 80042ec:	2a63      	cmp	r2, #99	; 0x63
 80042ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80042f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80042f6:	4631      	mov	r1, r6
 80042f8:	dcf1      	bgt.n	80042de <__exponent+0x22>
 80042fa:	3130      	adds	r1, #48	; 0x30
 80042fc:	f1ae 0502 	sub.w	r5, lr, #2
 8004300:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004304:	1c44      	adds	r4, r0, #1
 8004306:	4629      	mov	r1, r5
 8004308:	4561      	cmp	r1, ip
 800430a:	d30a      	bcc.n	8004322 <__exponent+0x66>
 800430c:	f10d 0209 	add.w	r2, sp, #9
 8004310:	eba2 020e 	sub.w	r2, r2, lr
 8004314:	4565      	cmp	r5, ip
 8004316:	bf88      	it	hi
 8004318:	2200      	movhi	r2, #0
 800431a:	4413      	add	r3, r2
 800431c:	1a18      	subs	r0, r3, r0
 800431e:	b003      	add	sp, #12
 8004320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004326:	f804 2f01 	strb.w	r2, [r4, #1]!
 800432a:	e7ed      	b.n	8004308 <__exponent+0x4c>
 800432c:	2330      	movs	r3, #48	; 0x30
 800432e:	3130      	adds	r1, #48	; 0x30
 8004330:	7083      	strb	r3, [r0, #2]
 8004332:	70c1      	strb	r1, [r0, #3]
 8004334:	1d03      	adds	r3, r0, #4
 8004336:	e7f1      	b.n	800431c <__exponent+0x60>

08004338 <_printf_float>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	ed2d 8b02 	vpush	{d8}
 8004340:	b08d      	sub	sp, #52	; 0x34
 8004342:	460c      	mov	r4, r1
 8004344:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004348:	4616      	mov	r6, r2
 800434a:	461f      	mov	r7, r3
 800434c:	4605      	mov	r5, r0
 800434e:	f001 fa57 	bl	8005800 <_localeconv_r>
 8004352:	f8d0 a000 	ldr.w	sl, [r0]
 8004356:	4650      	mov	r0, sl
 8004358:	f7fb ff5a 	bl	8000210 <strlen>
 800435c:	2300      	movs	r3, #0
 800435e:	930a      	str	r3, [sp, #40]	; 0x28
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f8d8 3000 	ldr.w	r3, [r8]
 8004368:	f894 b018 	ldrb.w	fp, [r4, #24]
 800436c:	3307      	adds	r3, #7
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	f103 0208 	add.w	r2, r3, #8
 8004376:	f8c8 2000 	str.w	r2, [r8]
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004382:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800438a:	9307      	str	r3, [sp, #28]
 800438c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004390:	ee08 0a10 	vmov	s16, r0
 8004394:	4b9f      	ldr	r3, [pc, #636]	; (8004614 <_printf_float+0x2dc>)
 8004396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	f7fc fbe5 	bl	8000b6c <__aeabi_dcmpun>
 80043a2:	bb88      	cbnz	r0, 8004408 <_printf_float+0xd0>
 80043a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043a8:	4b9a      	ldr	r3, [pc, #616]	; (8004614 <_printf_float+0x2dc>)
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	f7fc fbbf 	bl	8000b30 <__aeabi_dcmple>
 80043b2:	bb48      	cbnz	r0, 8004408 <_printf_float+0xd0>
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4640      	mov	r0, r8
 80043ba:	4649      	mov	r1, r9
 80043bc:	f7fc fbae 	bl	8000b1c <__aeabi_dcmplt>
 80043c0:	b110      	cbz	r0, 80043c8 <_printf_float+0x90>
 80043c2:	232d      	movs	r3, #45	; 0x2d
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	4b93      	ldr	r3, [pc, #588]	; (8004618 <_printf_float+0x2e0>)
 80043ca:	4894      	ldr	r0, [pc, #592]	; (800461c <_printf_float+0x2e4>)
 80043cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043d0:	bf94      	ite	ls
 80043d2:	4698      	movls	r8, r3
 80043d4:	4680      	movhi	r8, r0
 80043d6:	2303      	movs	r3, #3
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	9b05      	ldr	r3, [sp, #20]
 80043dc:	f023 0204 	bic.w	r2, r3, #4
 80043e0:	6022      	str	r2, [r4, #0]
 80043e2:	f04f 0900 	mov.w	r9, #0
 80043e6:	9700      	str	r7, [sp, #0]
 80043e8:	4633      	mov	r3, r6
 80043ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80043ec:	4621      	mov	r1, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 f9d8 	bl	80047a4 <_printf_common>
 80043f4:	3001      	adds	r0, #1
 80043f6:	f040 8090 	bne.w	800451a <_printf_float+0x1e2>
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	b00d      	add	sp, #52	; 0x34
 8004400:	ecbd 8b02 	vpop	{d8}
 8004404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004408:	4642      	mov	r2, r8
 800440a:	464b      	mov	r3, r9
 800440c:	4640      	mov	r0, r8
 800440e:	4649      	mov	r1, r9
 8004410:	f7fc fbac 	bl	8000b6c <__aeabi_dcmpun>
 8004414:	b140      	cbz	r0, 8004428 <_printf_float+0xf0>
 8004416:	464b      	mov	r3, r9
 8004418:	2b00      	cmp	r3, #0
 800441a:	bfbc      	itt	lt
 800441c:	232d      	movlt	r3, #45	; 0x2d
 800441e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004422:	487f      	ldr	r0, [pc, #508]	; (8004620 <_printf_float+0x2e8>)
 8004424:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <_printf_float+0x2ec>)
 8004426:	e7d1      	b.n	80043cc <_printf_float+0x94>
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800442e:	9206      	str	r2, [sp, #24]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	d13f      	bne.n	80044b4 <_printf_float+0x17c>
 8004434:	2306      	movs	r3, #6
 8004436:	6063      	str	r3, [r4, #4]
 8004438:	9b05      	ldr	r3, [sp, #20]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004440:	2300      	movs	r3, #0
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	ab0a      	add	r3, sp, #40	; 0x28
 8004446:	e9cd b301 	strd	fp, r3, [sp, #4]
 800444a:	ab09      	add	r3, sp, #36	; 0x24
 800444c:	ec49 8b10 	vmov	d0, r8, r9
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff fecd 	bl	80041f8 <__cvt>
 800445e:	9b06      	ldr	r3, [sp, #24]
 8004460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004462:	2b47      	cmp	r3, #71	; 0x47
 8004464:	4680      	mov	r8, r0
 8004466:	d108      	bne.n	800447a <_printf_float+0x142>
 8004468:	1cc8      	adds	r0, r1, #3
 800446a:	db02      	blt.n	8004472 <_printf_float+0x13a>
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	4299      	cmp	r1, r3
 8004470:	dd41      	ble.n	80044f6 <_printf_float+0x1be>
 8004472:	f1ab 0b02 	sub.w	fp, fp, #2
 8004476:	fa5f fb8b 	uxtb.w	fp, fp
 800447a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800447e:	d820      	bhi.n	80044c2 <_printf_float+0x18a>
 8004480:	3901      	subs	r1, #1
 8004482:	465a      	mov	r2, fp
 8004484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004488:	9109      	str	r1, [sp, #36]	; 0x24
 800448a:	f7ff ff17 	bl	80042bc <__exponent>
 800448e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004490:	1813      	adds	r3, r2, r0
 8004492:	2a01      	cmp	r2, #1
 8004494:	4681      	mov	r9, r0
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	dc02      	bgt.n	80044a0 <_printf_float+0x168>
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	07d2      	lsls	r2, r2, #31
 800449e:	d501      	bpl.n	80044a4 <_printf_float+0x16c>
 80044a0:	3301      	adds	r3, #1
 80044a2:	6123      	str	r3, [r4, #16]
 80044a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d09c      	beq.n	80043e6 <_printf_float+0xae>
 80044ac:	232d      	movs	r3, #45	; 0x2d
 80044ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b2:	e798      	b.n	80043e6 <_printf_float+0xae>
 80044b4:	9a06      	ldr	r2, [sp, #24]
 80044b6:	2a47      	cmp	r2, #71	; 0x47
 80044b8:	d1be      	bne.n	8004438 <_printf_float+0x100>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1bc      	bne.n	8004438 <_printf_float+0x100>
 80044be:	2301      	movs	r3, #1
 80044c0:	e7b9      	b.n	8004436 <_printf_float+0xfe>
 80044c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044c6:	d118      	bne.n	80044fa <_printf_float+0x1c2>
 80044c8:	2900      	cmp	r1, #0
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	dd0b      	ble.n	80044e6 <_printf_float+0x1ae>
 80044ce:	6121      	str	r1, [r4, #16]
 80044d0:	b913      	cbnz	r3, 80044d8 <_printf_float+0x1a0>
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	07d0      	lsls	r0, r2, #31
 80044d6:	d502      	bpl.n	80044de <_printf_float+0x1a6>
 80044d8:	3301      	adds	r3, #1
 80044da:	440b      	add	r3, r1
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	65a1      	str	r1, [r4, #88]	; 0x58
 80044e0:	f04f 0900 	mov.w	r9, #0
 80044e4:	e7de      	b.n	80044a4 <_printf_float+0x16c>
 80044e6:	b913      	cbnz	r3, 80044ee <_printf_float+0x1b6>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	07d2      	lsls	r2, r2, #31
 80044ec:	d501      	bpl.n	80044f2 <_printf_float+0x1ba>
 80044ee:	3302      	adds	r3, #2
 80044f0:	e7f4      	b.n	80044dc <_printf_float+0x1a4>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7f2      	b.n	80044dc <_printf_float+0x1a4>
 80044f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044fc:	4299      	cmp	r1, r3
 80044fe:	db05      	blt.n	800450c <_printf_float+0x1d4>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	6121      	str	r1, [r4, #16]
 8004504:	07d8      	lsls	r0, r3, #31
 8004506:	d5ea      	bpl.n	80044de <_printf_float+0x1a6>
 8004508:	1c4b      	adds	r3, r1, #1
 800450a:	e7e7      	b.n	80044dc <_printf_float+0x1a4>
 800450c:	2900      	cmp	r1, #0
 800450e:	bfd4      	ite	le
 8004510:	f1c1 0202 	rsble	r2, r1, #2
 8004514:	2201      	movgt	r2, #1
 8004516:	4413      	add	r3, r2
 8004518:	e7e0      	b.n	80044dc <_printf_float+0x1a4>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	055a      	lsls	r2, r3, #21
 800451e:	d407      	bmi.n	8004530 <_printf_float+0x1f8>
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	4642      	mov	r2, r8
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	d12c      	bne.n	8004588 <_printf_float+0x250>
 800452e:	e764      	b.n	80043fa <_printf_float+0xc2>
 8004530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004534:	f240 80e0 	bls.w	80046f8 <_printf_float+0x3c0>
 8004538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	f7fc fae2 	bl	8000b08 <__aeabi_dcmpeq>
 8004544:	2800      	cmp	r0, #0
 8004546:	d034      	beq.n	80045b2 <_printf_float+0x27a>
 8004548:	4a37      	ldr	r2, [pc, #220]	; (8004628 <_printf_float+0x2f0>)
 800454a:	2301      	movs	r3, #1
 800454c:	4631      	mov	r1, r6
 800454e:	4628      	mov	r0, r5
 8004550:	47b8      	blx	r7
 8004552:	3001      	adds	r0, #1
 8004554:	f43f af51 	beq.w	80043fa <_printf_float+0xc2>
 8004558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800455c:	429a      	cmp	r2, r3
 800455e:	db02      	blt.n	8004566 <_printf_float+0x22e>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	07d8      	lsls	r0, r3, #31
 8004564:	d510      	bpl.n	8004588 <_printf_float+0x250>
 8004566:	ee18 3a10 	vmov	r3, s16
 800456a:	4652      	mov	r2, sl
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	f43f af41 	beq.w	80043fa <_printf_float+0xc2>
 8004578:	f04f 0800 	mov.w	r8, #0
 800457c:	f104 091a 	add.w	r9, r4, #26
 8004580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004582:	3b01      	subs	r3, #1
 8004584:	4543      	cmp	r3, r8
 8004586:	dc09      	bgt.n	800459c <_printf_float+0x264>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	079b      	lsls	r3, r3, #30
 800458c:	f100 8105 	bmi.w	800479a <_printf_float+0x462>
 8004590:	68e0      	ldr	r0, [r4, #12]
 8004592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004594:	4298      	cmp	r0, r3
 8004596:	bfb8      	it	lt
 8004598:	4618      	movlt	r0, r3
 800459a:	e730      	b.n	80043fe <_printf_float+0xc6>
 800459c:	2301      	movs	r3, #1
 800459e:	464a      	mov	r2, r9
 80045a0:	4631      	mov	r1, r6
 80045a2:	4628      	mov	r0, r5
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	f43f af27 	beq.w	80043fa <_printf_float+0xc2>
 80045ac:	f108 0801 	add.w	r8, r8, #1
 80045b0:	e7e6      	b.n	8004580 <_printf_float+0x248>
 80045b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	dc39      	bgt.n	800462c <_printf_float+0x2f4>
 80045b8:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <_printf_float+0x2f0>)
 80045ba:	2301      	movs	r3, #1
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f af19 	beq.w	80043fa <_printf_float+0xc2>
 80045c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d102      	bne.n	80045d6 <_printf_float+0x29e>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07d9      	lsls	r1, r3, #31
 80045d4:	d5d8      	bpl.n	8004588 <_printf_float+0x250>
 80045d6:	ee18 3a10 	vmov	r3, s16
 80045da:	4652      	mov	r2, sl
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	f43f af09 	beq.w	80043fa <_printf_float+0xc2>
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	f104 0a1a 	add.w	sl, r4, #26
 80045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f2:	425b      	negs	r3, r3
 80045f4:	454b      	cmp	r3, r9
 80045f6:	dc01      	bgt.n	80045fc <_printf_float+0x2c4>
 80045f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fa:	e792      	b.n	8004522 <_printf_float+0x1ea>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4652      	mov	r2, sl
 8004600:	4631      	mov	r1, r6
 8004602:	4628      	mov	r0, r5
 8004604:	47b8      	blx	r7
 8004606:	3001      	adds	r0, #1
 8004608:	f43f aef7 	beq.w	80043fa <_printf_float+0xc2>
 800460c:	f109 0901 	add.w	r9, r9, #1
 8004610:	e7ee      	b.n	80045f0 <_printf_float+0x2b8>
 8004612:	bf00      	nop
 8004614:	7fefffff 	.word	0x7fefffff
 8004618:	08007f1c 	.word	0x08007f1c
 800461c:	08007f20 	.word	0x08007f20
 8004620:	08007f28 	.word	0x08007f28
 8004624:	08007f24 	.word	0x08007f24
 8004628:	08007f2c 	.word	0x08007f2c
 800462c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004630:	429a      	cmp	r2, r3
 8004632:	bfa8      	it	ge
 8004634:	461a      	movge	r2, r3
 8004636:	2a00      	cmp	r2, #0
 8004638:	4691      	mov	r9, r2
 800463a:	dc37      	bgt.n	80046ac <_printf_float+0x374>
 800463c:	f04f 0b00 	mov.w	fp, #0
 8004640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004644:	f104 021a 	add.w	r2, r4, #26
 8004648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	eba3 0309 	sub.w	r3, r3, r9
 8004650:	455b      	cmp	r3, fp
 8004652:	dc33      	bgt.n	80046bc <_printf_float+0x384>
 8004654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004658:	429a      	cmp	r2, r3
 800465a:	db3b      	blt.n	80046d4 <_printf_float+0x39c>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	07da      	lsls	r2, r3, #31
 8004660:	d438      	bmi.n	80046d4 <_printf_float+0x39c>
 8004662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004664:	9b05      	ldr	r3, [sp, #20]
 8004666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	eba2 0901 	sub.w	r9, r2, r1
 800466e:	4599      	cmp	r9, r3
 8004670:	bfa8      	it	ge
 8004672:	4699      	movge	r9, r3
 8004674:	f1b9 0f00 	cmp.w	r9, #0
 8004678:	dc35      	bgt.n	80046e6 <_printf_float+0x3ae>
 800467a:	f04f 0800 	mov.w	r8, #0
 800467e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004682:	f104 0a1a 	add.w	sl, r4, #26
 8004686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	eba3 0309 	sub.w	r3, r3, r9
 8004690:	4543      	cmp	r3, r8
 8004692:	f77f af79 	ble.w	8004588 <_printf_float+0x250>
 8004696:	2301      	movs	r3, #1
 8004698:	4652      	mov	r2, sl
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f aeaa 	beq.w	80043fa <_printf_float+0xc2>
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	e7ec      	b.n	8004686 <_printf_float+0x34e>
 80046ac:	4613      	mov	r3, r2
 80046ae:	4631      	mov	r1, r6
 80046b0:	4642      	mov	r2, r8
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	d1c0      	bne.n	800463c <_printf_float+0x304>
 80046ba:	e69e      	b.n	80043fa <_printf_float+0xc2>
 80046bc:	2301      	movs	r3, #1
 80046be:	4631      	mov	r1, r6
 80046c0:	4628      	mov	r0, r5
 80046c2:	9205      	str	r2, [sp, #20]
 80046c4:	47b8      	blx	r7
 80046c6:	3001      	adds	r0, #1
 80046c8:	f43f ae97 	beq.w	80043fa <_printf_float+0xc2>
 80046cc:	9a05      	ldr	r2, [sp, #20]
 80046ce:	f10b 0b01 	add.w	fp, fp, #1
 80046d2:	e7b9      	b.n	8004648 <_printf_float+0x310>
 80046d4:	ee18 3a10 	vmov	r3, s16
 80046d8:	4652      	mov	r2, sl
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	d1be      	bne.n	8004662 <_printf_float+0x32a>
 80046e4:	e689      	b.n	80043fa <_printf_float+0xc2>
 80046e6:	9a05      	ldr	r2, [sp, #20]
 80046e8:	464b      	mov	r3, r9
 80046ea:	4442      	add	r2, r8
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b8      	blx	r7
 80046f2:	3001      	adds	r0, #1
 80046f4:	d1c1      	bne.n	800467a <_printf_float+0x342>
 80046f6:	e680      	b.n	80043fa <_printf_float+0xc2>
 80046f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fa:	2a01      	cmp	r2, #1
 80046fc:	dc01      	bgt.n	8004702 <_printf_float+0x3ca>
 80046fe:	07db      	lsls	r3, r3, #31
 8004700:	d538      	bpl.n	8004774 <_printf_float+0x43c>
 8004702:	2301      	movs	r3, #1
 8004704:	4642      	mov	r2, r8
 8004706:	4631      	mov	r1, r6
 8004708:	4628      	mov	r0, r5
 800470a:	47b8      	blx	r7
 800470c:	3001      	adds	r0, #1
 800470e:	f43f ae74 	beq.w	80043fa <_printf_float+0xc2>
 8004712:	ee18 3a10 	vmov	r3, s16
 8004716:	4652      	mov	r2, sl
 8004718:	4631      	mov	r1, r6
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f ae6b 	beq.w	80043fa <_printf_float+0xc2>
 8004724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004728:	2200      	movs	r2, #0
 800472a:	2300      	movs	r3, #0
 800472c:	f7fc f9ec 	bl	8000b08 <__aeabi_dcmpeq>
 8004730:	b9d8      	cbnz	r0, 800476a <_printf_float+0x432>
 8004732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004734:	f108 0201 	add.w	r2, r8, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d10e      	bne.n	8004762 <_printf_float+0x42a>
 8004744:	e659      	b.n	80043fa <_printf_float+0xc2>
 8004746:	2301      	movs	r3, #1
 8004748:	4652      	mov	r2, sl
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	f43f ae52 	beq.w	80043fa <_printf_float+0xc2>
 8004756:	f108 0801 	add.w	r8, r8, #1
 800475a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	4543      	cmp	r3, r8
 8004760:	dcf1      	bgt.n	8004746 <_printf_float+0x40e>
 8004762:	464b      	mov	r3, r9
 8004764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004768:	e6dc      	b.n	8004524 <_printf_float+0x1ec>
 800476a:	f04f 0800 	mov.w	r8, #0
 800476e:	f104 0a1a 	add.w	sl, r4, #26
 8004772:	e7f2      	b.n	800475a <_printf_float+0x422>
 8004774:	2301      	movs	r3, #1
 8004776:	4642      	mov	r2, r8
 8004778:	e7df      	b.n	800473a <_printf_float+0x402>
 800477a:	2301      	movs	r3, #1
 800477c:	464a      	mov	r2, r9
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	f43f ae38 	beq.w	80043fa <_printf_float+0xc2>
 800478a:	f108 0801 	add.w	r8, r8, #1
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004792:	1a5b      	subs	r3, r3, r1
 8004794:	4543      	cmp	r3, r8
 8004796:	dcf0      	bgt.n	800477a <_printf_float+0x442>
 8004798:	e6fa      	b.n	8004590 <_printf_float+0x258>
 800479a:	f04f 0800 	mov.w	r8, #0
 800479e:	f104 0919 	add.w	r9, r4, #25
 80047a2:	e7f4      	b.n	800478e <_printf_float+0x456>

080047a4 <_printf_common>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	4616      	mov	r6, r2
 80047aa:	4699      	mov	r9, r3
 80047ac:	688a      	ldr	r2, [r1, #8]
 80047ae:	690b      	ldr	r3, [r1, #16]
 80047b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bfb8      	it	lt
 80047b8:	4613      	movlt	r3, r2
 80047ba:	6033      	str	r3, [r6, #0]
 80047bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c0:	4607      	mov	r7, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	b10a      	cbz	r2, 80047ca <_printf_common+0x26>
 80047c6:	3301      	adds	r3, #1
 80047c8:	6033      	str	r3, [r6, #0]
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	0699      	lsls	r1, r3, #26
 80047ce:	bf42      	ittt	mi
 80047d0:	6833      	ldrmi	r3, [r6, #0]
 80047d2:	3302      	addmi	r3, #2
 80047d4:	6033      	strmi	r3, [r6, #0]
 80047d6:	6825      	ldr	r5, [r4, #0]
 80047d8:	f015 0506 	ands.w	r5, r5, #6
 80047dc:	d106      	bne.n	80047ec <_printf_common+0x48>
 80047de:	f104 0a19 	add.w	sl, r4, #25
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	6832      	ldr	r2, [r6, #0]
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	42ab      	cmp	r3, r5
 80047ea:	dc26      	bgt.n	800483a <_printf_common+0x96>
 80047ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f0:	1e13      	subs	r3, r2, #0
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	bf18      	it	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	0692      	lsls	r2, r2, #26
 80047fa:	d42b      	bmi.n	8004854 <_printf_common+0xb0>
 80047fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004800:	4649      	mov	r1, r9
 8004802:	4638      	mov	r0, r7
 8004804:	47c0      	blx	r8
 8004806:	3001      	adds	r0, #1
 8004808:	d01e      	beq.n	8004848 <_printf_common+0xa4>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	68e5      	ldr	r5, [r4, #12]
 800480e:	6832      	ldr	r2, [r6, #0]
 8004810:	f003 0306 	and.w	r3, r3, #6
 8004814:	2b04      	cmp	r3, #4
 8004816:	bf08      	it	eq
 8004818:	1aad      	subeq	r5, r5, r2
 800481a:	68a3      	ldr	r3, [r4, #8]
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	bf0c      	ite	eq
 8004820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004824:	2500      	movne	r5, #0
 8004826:	4293      	cmp	r3, r2
 8004828:	bfc4      	itt	gt
 800482a:	1a9b      	subgt	r3, r3, r2
 800482c:	18ed      	addgt	r5, r5, r3
 800482e:	2600      	movs	r6, #0
 8004830:	341a      	adds	r4, #26
 8004832:	42b5      	cmp	r5, r6
 8004834:	d11a      	bne.n	800486c <_printf_common+0xc8>
 8004836:	2000      	movs	r0, #0
 8004838:	e008      	b.n	800484c <_printf_common+0xa8>
 800483a:	2301      	movs	r3, #1
 800483c:	4652      	mov	r2, sl
 800483e:	4649      	mov	r1, r9
 8004840:	4638      	mov	r0, r7
 8004842:	47c0      	blx	r8
 8004844:	3001      	adds	r0, #1
 8004846:	d103      	bne.n	8004850 <_printf_common+0xac>
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004850:	3501      	adds	r5, #1
 8004852:	e7c6      	b.n	80047e2 <_printf_common+0x3e>
 8004854:	18e1      	adds	r1, r4, r3
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	2030      	movs	r0, #48	; 0x30
 800485a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485e:	4422      	add	r2, r4
 8004860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004868:	3302      	adds	r3, #2
 800486a:	e7c7      	b.n	80047fc <_printf_common+0x58>
 800486c:	2301      	movs	r3, #1
 800486e:	4622      	mov	r2, r4
 8004870:	4649      	mov	r1, r9
 8004872:	4638      	mov	r0, r7
 8004874:	47c0      	blx	r8
 8004876:	3001      	adds	r0, #1
 8004878:	d0e6      	beq.n	8004848 <_printf_common+0xa4>
 800487a:	3601      	adds	r6, #1
 800487c:	e7d9      	b.n	8004832 <_printf_common+0x8e>
	...

08004880 <_printf_i>:
 8004880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	460c      	mov	r4, r1
 8004886:	4691      	mov	r9, r2
 8004888:	7e27      	ldrb	r7, [r4, #24]
 800488a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800488c:	2f78      	cmp	r7, #120	; 0x78
 800488e:	4680      	mov	r8, r0
 8004890:	469a      	mov	sl, r3
 8004892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004896:	d807      	bhi.n	80048a8 <_printf_i+0x28>
 8004898:	2f62      	cmp	r7, #98	; 0x62
 800489a:	d80a      	bhi.n	80048b2 <_printf_i+0x32>
 800489c:	2f00      	cmp	r7, #0
 800489e:	f000 80d8 	beq.w	8004a52 <_printf_i+0x1d2>
 80048a2:	2f58      	cmp	r7, #88	; 0x58
 80048a4:	f000 80a3 	beq.w	80049ee <_printf_i+0x16e>
 80048a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b0:	e03a      	b.n	8004928 <_printf_i+0xa8>
 80048b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048b6:	2b15      	cmp	r3, #21
 80048b8:	d8f6      	bhi.n	80048a8 <_printf_i+0x28>
 80048ba:	a001      	add	r0, pc, #4	; (adr r0, 80048c0 <_printf_i+0x40>)
 80048bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048c0:	08004919 	.word	0x08004919
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080048a9 	.word	0x080048a9
 80048cc:	080048a9 	.word	0x080048a9
 80048d0:	080048a9 	.word	0x080048a9
 80048d4:	080048a9 	.word	0x080048a9
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	080048a9 	.word	0x080048a9
 80048e0:	080048a9 	.word	0x080048a9
 80048e4:	080048a9 	.word	0x080048a9
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	08004a39 	.word	0x08004a39
 80048f0:	0800495d 	.word	0x0800495d
 80048f4:	08004a1b 	.word	0x08004a1b
 80048f8:	080048a9 	.word	0x080048a9
 80048fc:	080048a9 	.word	0x080048a9
 8004900:	08004a5b 	.word	0x08004a5b
 8004904:	080048a9 	.word	0x080048a9
 8004908:	0800495d 	.word	0x0800495d
 800490c:	080048a9 	.word	0x080048a9
 8004910:	080048a9 	.word	0x080048a9
 8004914:	08004a23 	.word	0x08004a23
 8004918:	680b      	ldr	r3, [r1, #0]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	600a      	str	r2, [r1, #0]
 8004920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004928:	2301      	movs	r3, #1
 800492a:	e0a3      	b.n	8004a74 <_printf_i+0x1f4>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	6808      	ldr	r0, [r1, #0]
 8004930:	062e      	lsls	r6, r5, #24
 8004932:	f100 0304 	add.w	r3, r0, #4
 8004936:	d50a      	bpl.n	800494e <_printf_i+0xce>
 8004938:	6805      	ldr	r5, [r0, #0]
 800493a:	600b      	str	r3, [r1, #0]
 800493c:	2d00      	cmp	r5, #0
 800493e:	da03      	bge.n	8004948 <_printf_i+0xc8>
 8004940:	232d      	movs	r3, #45	; 0x2d
 8004942:	426d      	negs	r5, r5
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	485e      	ldr	r0, [pc, #376]	; (8004ac4 <_printf_i+0x244>)
 800494a:	230a      	movs	r3, #10
 800494c:	e019      	b.n	8004982 <_printf_i+0x102>
 800494e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004952:	6805      	ldr	r5, [r0, #0]
 8004954:	600b      	str	r3, [r1, #0]
 8004956:	bf18      	it	ne
 8004958:	b22d      	sxthne	r5, r5
 800495a:	e7ef      	b.n	800493c <_printf_i+0xbc>
 800495c:	680b      	ldr	r3, [r1, #0]
 800495e:	6825      	ldr	r5, [r4, #0]
 8004960:	1d18      	adds	r0, r3, #4
 8004962:	6008      	str	r0, [r1, #0]
 8004964:	0628      	lsls	r0, r5, #24
 8004966:	d501      	bpl.n	800496c <_printf_i+0xec>
 8004968:	681d      	ldr	r5, [r3, #0]
 800496a:	e002      	b.n	8004972 <_printf_i+0xf2>
 800496c:	0669      	lsls	r1, r5, #25
 800496e:	d5fb      	bpl.n	8004968 <_printf_i+0xe8>
 8004970:	881d      	ldrh	r5, [r3, #0]
 8004972:	4854      	ldr	r0, [pc, #336]	; (8004ac4 <_printf_i+0x244>)
 8004974:	2f6f      	cmp	r7, #111	; 0x6f
 8004976:	bf0c      	ite	eq
 8004978:	2308      	moveq	r3, #8
 800497a:	230a      	movne	r3, #10
 800497c:	2100      	movs	r1, #0
 800497e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004982:	6866      	ldr	r6, [r4, #4]
 8004984:	60a6      	str	r6, [r4, #8]
 8004986:	2e00      	cmp	r6, #0
 8004988:	bfa2      	ittt	ge
 800498a:	6821      	ldrge	r1, [r4, #0]
 800498c:	f021 0104 	bicge.w	r1, r1, #4
 8004990:	6021      	strge	r1, [r4, #0]
 8004992:	b90d      	cbnz	r5, 8004998 <_printf_i+0x118>
 8004994:	2e00      	cmp	r6, #0
 8004996:	d04d      	beq.n	8004a34 <_printf_i+0x1b4>
 8004998:	4616      	mov	r6, r2
 800499a:	fbb5 f1f3 	udiv	r1, r5, r3
 800499e:	fb03 5711 	mls	r7, r3, r1, r5
 80049a2:	5dc7      	ldrb	r7, [r0, r7]
 80049a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049a8:	462f      	mov	r7, r5
 80049aa:	42bb      	cmp	r3, r7
 80049ac:	460d      	mov	r5, r1
 80049ae:	d9f4      	bls.n	800499a <_printf_i+0x11a>
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d10b      	bne.n	80049cc <_printf_i+0x14c>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	07df      	lsls	r7, r3, #31
 80049b8:	d508      	bpl.n	80049cc <_printf_i+0x14c>
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	6861      	ldr	r1, [r4, #4]
 80049be:	4299      	cmp	r1, r3
 80049c0:	bfde      	ittt	le
 80049c2:	2330      	movle	r3, #48	; 0x30
 80049c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049cc:	1b92      	subs	r2, r2, r6
 80049ce:	6122      	str	r2, [r4, #16]
 80049d0:	f8cd a000 	str.w	sl, [sp]
 80049d4:	464b      	mov	r3, r9
 80049d6:	aa03      	add	r2, sp, #12
 80049d8:	4621      	mov	r1, r4
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fee2 	bl	80047a4 <_printf_common>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d14c      	bne.n	8004a7e <_printf_i+0x1fe>
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	b004      	add	sp, #16
 80049ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ee:	4835      	ldr	r0, [pc, #212]	; (8004ac4 <_printf_i+0x244>)
 80049f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	061f      	lsls	r7, r3, #24
 80049fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80049fe:	600e      	str	r6, [r1, #0]
 8004a00:	d514      	bpl.n	8004a2c <_printf_i+0x1ac>
 8004a02:	07d9      	lsls	r1, r3, #31
 8004a04:	bf44      	itt	mi
 8004a06:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0a:	6023      	strmi	r3, [r4, #0]
 8004a0c:	b91d      	cbnz	r5, 8004a16 <_printf_i+0x196>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f023 0320 	bic.w	r3, r3, #32
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	2310      	movs	r3, #16
 8004a18:	e7b0      	b.n	800497c <_printf_i+0xfc>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	f043 0320 	orr.w	r3, r3, #32
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	2378      	movs	r3, #120	; 0x78
 8004a24:	4828      	ldr	r0, [pc, #160]	; (8004ac8 <_printf_i+0x248>)
 8004a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a2a:	e7e3      	b.n	80049f4 <_printf_i+0x174>
 8004a2c:	065e      	lsls	r6, r3, #25
 8004a2e:	bf48      	it	mi
 8004a30:	b2ad      	uxthmi	r5, r5
 8004a32:	e7e6      	b.n	8004a02 <_printf_i+0x182>
 8004a34:	4616      	mov	r6, r2
 8004a36:	e7bb      	b.n	80049b0 <_printf_i+0x130>
 8004a38:	680b      	ldr	r3, [r1, #0]
 8004a3a:	6826      	ldr	r6, [r4, #0]
 8004a3c:	6960      	ldr	r0, [r4, #20]
 8004a3e:	1d1d      	adds	r5, r3, #4
 8004a40:	600d      	str	r5, [r1, #0]
 8004a42:	0635      	lsls	r5, r6, #24
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0x1cc>
 8004a48:	6018      	str	r0, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0x1d2>
 8004a4c:	0671      	lsls	r1, r6, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0x1c8>
 8004a50:	8018      	strh	r0, [r3, #0]
 8004a52:	2300      	movs	r3, #0
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	4616      	mov	r6, r2
 8004a58:	e7ba      	b.n	80049d0 <_printf_i+0x150>
 8004a5a:	680b      	ldr	r3, [r1, #0]
 8004a5c:	1d1a      	adds	r2, r3, #4
 8004a5e:	600a      	str	r2, [r1, #0]
 8004a60:	681e      	ldr	r6, [r3, #0]
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	2100      	movs	r1, #0
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7fb fbda 	bl	8000220 <memchr>
 8004a6c:	b108      	cbz	r0, 8004a72 <_printf_i+0x1f2>
 8004a6e:	1b80      	subs	r0, r0, r6
 8004a70:	6060      	str	r0, [r4, #4]
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	2300      	movs	r3, #0
 8004a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a7c:	e7a8      	b.n	80049d0 <_printf_i+0x150>
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	4632      	mov	r2, r6
 8004a82:	4649      	mov	r1, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	47d0      	blx	sl
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d0ab      	beq.n	80049e4 <_printf_i+0x164>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	079b      	lsls	r3, r3, #30
 8004a90:	d413      	bmi.n	8004aba <_printf_i+0x23a>
 8004a92:	68e0      	ldr	r0, [r4, #12]
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	4298      	cmp	r0, r3
 8004a98:	bfb8      	it	lt
 8004a9a:	4618      	movlt	r0, r3
 8004a9c:	e7a4      	b.n	80049e8 <_printf_i+0x168>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	47d0      	blx	sl
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d09b      	beq.n	80049e4 <_printf_i+0x164>
 8004aac:	3501      	adds	r5, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	9903      	ldr	r1, [sp, #12]
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	42ab      	cmp	r3, r5
 8004ab6:	dcf2      	bgt.n	8004a9e <_printf_i+0x21e>
 8004ab8:	e7eb      	b.n	8004a92 <_printf_i+0x212>
 8004aba:	2500      	movs	r5, #0
 8004abc:	f104 0619 	add.w	r6, r4, #25
 8004ac0:	e7f5      	b.n	8004aae <_printf_i+0x22e>
 8004ac2:	bf00      	nop
 8004ac4:	08007f2e 	.word	0x08007f2e
 8004ac8:	08007f3f 	.word	0x08007f3f

08004acc <siprintf>:
 8004acc:	b40e      	push	{r1, r2, r3}
 8004ace:	b500      	push	{lr}
 8004ad0:	b09c      	sub	sp, #112	; 0x70
 8004ad2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ad4:	9002      	str	r0, [sp, #8]
 8004ad6:	9006      	str	r0, [sp, #24]
 8004ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004adc:	4809      	ldr	r0, [pc, #36]	; (8004b04 <siprintf+0x38>)
 8004ade:	9107      	str	r1, [sp, #28]
 8004ae0:	9104      	str	r1, [sp, #16]
 8004ae2:	4909      	ldr	r1, [pc, #36]	; (8004b08 <siprintf+0x3c>)
 8004ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae8:	9105      	str	r1, [sp, #20]
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	a902      	add	r1, sp, #8
 8004af0:	f001 fb34 	bl	800615c <_svfiprintf_r>
 8004af4:	9b02      	ldr	r3, [sp, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	b01c      	add	sp, #112	; 0x70
 8004afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b00:	b003      	add	sp, #12
 8004b02:	4770      	bx	lr
 8004b04:	20000010 	.word	0x20000010
 8004b08:	ffff0208 	.word	0xffff0208

08004b0c <quorem>:
 8004b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	6903      	ldr	r3, [r0, #16]
 8004b12:	690c      	ldr	r4, [r1, #16]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	4607      	mov	r7, r0
 8004b18:	f2c0 8081 	blt.w	8004c1e <quorem+0x112>
 8004b1c:	3c01      	subs	r4, #1
 8004b1e:	f101 0814 	add.w	r8, r1, #20
 8004b22:	f100 0514 	add.w	r5, r0, #20
 8004b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b34:	3301      	adds	r3, #1
 8004b36:	429a      	cmp	r2, r3
 8004b38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b40:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b44:	d331      	bcc.n	8004baa <quorem+0x9e>
 8004b46:	f04f 0e00 	mov.w	lr, #0
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	46ac      	mov	ip, r5
 8004b4e:	46f2      	mov	sl, lr
 8004b50:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b54:	b293      	uxth	r3, r2
 8004b56:	fb06 e303 	mla	r3, r6, r3, lr
 8004b5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	ebaa 0303 	sub.w	r3, sl, r3
 8004b64:	0c12      	lsrs	r2, r2, #16
 8004b66:	f8dc a000 	ldr.w	sl, [ip]
 8004b6a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b6e:	fa13 f38a 	uxtah	r3, r3, sl
 8004b72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b76:	fa1f fa82 	uxth.w	sl, r2
 8004b7a:	f8dc 2000 	ldr.w	r2, [ip]
 8004b7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004b82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b8c:	4581      	cmp	r9, r0
 8004b8e:	f84c 3b04 	str.w	r3, [ip], #4
 8004b92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b96:	d2db      	bcs.n	8004b50 <quorem+0x44>
 8004b98:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b9c:	b92b      	cbnz	r3, 8004baa <quorem+0x9e>
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	429d      	cmp	r5, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	d32e      	bcc.n	8004c06 <quorem+0xfa>
 8004ba8:	613c      	str	r4, [r7, #16]
 8004baa:	4638      	mov	r0, r7
 8004bac:	f001 f8c0 	bl	8005d30 <__mcmp>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	db24      	blt.n	8004bfe <quorem+0xf2>
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f04f 0c00 	mov.w	ip, #0
 8004bbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bc0:	f8d0 e000 	ldr.w	lr, [r0]
 8004bc4:	b293      	uxth	r3, r2
 8004bc6:	ebac 0303 	sub.w	r3, ip, r3
 8004bca:	0c12      	lsrs	r2, r2, #16
 8004bcc:	fa13 f38e 	uxtah	r3, r3, lr
 8004bd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bde:	45c1      	cmp	r9, r8
 8004be0:	f840 3b04 	str.w	r3, [r0], #4
 8004be4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004be8:	d2e8      	bcs.n	8004bbc <quorem+0xb0>
 8004bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bf2:	b922      	cbnz	r2, 8004bfe <quorem+0xf2>
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	d30a      	bcc.n	8004c12 <quorem+0x106>
 8004bfc:	613c      	str	r4, [r7, #16]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	b003      	add	sp, #12
 8004c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d1cc      	bne.n	8004ba8 <quorem+0x9c>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	e7c7      	b.n	8004ba2 <quorem+0x96>
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	3b04      	subs	r3, #4
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d1f0      	bne.n	8004bfc <quorem+0xf0>
 8004c1a:	3c01      	subs	r4, #1
 8004c1c:	e7eb      	b.n	8004bf6 <quorem+0xea>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e7ee      	b.n	8004c00 <quorem+0xf4>
 8004c22:	0000      	movs	r0, r0
 8004c24:	0000      	movs	r0, r0
	...

08004c28 <_dtoa_r>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	ed2d 8b02 	vpush	{d8}
 8004c30:	ec57 6b10 	vmov	r6, r7, d0
 8004c34:	b095      	sub	sp, #84	; 0x54
 8004c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c42:	4604      	mov	r4, r0
 8004c44:	9209      	str	r2, [sp, #36]	; 0x24
 8004c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c48:	b975      	cbnz	r5, 8004c68 <_dtoa_r+0x40>
 8004c4a:	2010      	movs	r0, #16
 8004c4c:	f000 fddc 	bl	8005808 <malloc>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6260      	str	r0, [r4, #36]	; 0x24
 8004c54:	b920      	cbnz	r0, 8004c60 <_dtoa_r+0x38>
 8004c56:	4bb2      	ldr	r3, [pc, #712]	; (8004f20 <_dtoa_r+0x2f8>)
 8004c58:	21ea      	movs	r1, #234	; 0xea
 8004c5a:	48b2      	ldr	r0, [pc, #712]	; (8004f24 <_dtoa_r+0x2fc>)
 8004c5c:	f001 fb8e 	bl	800637c <__assert_func>
 8004c60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c64:	6005      	str	r5, [r0, #0]
 8004c66:	60c5      	str	r5, [r0, #12]
 8004c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	b151      	cbz	r1, 8004c84 <_dtoa_r+0x5c>
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	604a      	str	r2, [r1, #4]
 8004c72:	2301      	movs	r3, #1
 8004c74:	4093      	lsls	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 fe1b 	bl	80058b4 <_Bfree>
 8004c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	1e3b      	subs	r3, r7, #0
 8004c86:	bfb9      	ittee	lt
 8004c88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	9303      	strlt	r3, [sp, #12]
 8004c8e:	2300      	movge	r3, #0
 8004c90:	f8c8 3000 	strge.w	r3, [r8]
 8004c94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004c98:	4ba3      	ldr	r3, [pc, #652]	; (8004f28 <_dtoa_r+0x300>)
 8004c9a:	bfbc      	itt	lt
 8004c9c:	2201      	movlt	r2, #1
 8004c9e:	f8c8 2000 	strlt.w	r2, [r8]
 8004ca2:	ea33 0309 	bics.w	r3, r3, r9
 8004ca6:	d11b      	bne.n	8004ce0 <_dtoa_r+0xb8>
 8004ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004caa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cb4:	4333      	orrs	r3, r6
 8004cb6:	f000 857a 	beq.w	80057ae <_dtoa_r+0xb86>
 8004cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cbc:	b963      	cbnz	r3, 8004cd8 <_dtoa_r+0xb0>
 8004cbe:	4b9b      	ldr	r3, [pc, #620]	; (8004f2c <_dtoa_r+0x304>)
 8004cc0:	e024      	b.n	8004d0c <_dtoa_r+0xe4>
 8004cc2:	4b9b      	ldr	r3, [pc, #620]	; (8004f30 <_dtoa_r+0x308>)
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	9800      	ldr	r0, [sp, #0]
 8004cce:	b015      	add	sp, #84	; 0x54
 8004cd0:	ecbd 8b02 	vpop	{d8}
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd8:	4b94      	ldr	r3, [pc, #592]	; (8004f2c <_dtoa_r+0x304>)
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	e7f3      	b.n	8004cc8 <_dtoa_r+0xa0>
 8004ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	ec51 0b17 	vmov	r0, r1, d7
 8004cea:	2300      	movs	r3, #0
 8004cec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004cf0:	f7fb ff0a 	bl	8000b08 <__aeabi_dcmpeq>
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	b158      	cbz	r0, 8004d10 <_dtoa_r+0xe8>
 8004cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8551 	beq.w	80057a8 <_dtoa_r+0xb80>
 8004d06:	488b      	ldr	r0, [pc, #556]	; (8004f34 <_dtoa_r+0x30c>)
 8004d08:	6018      	str	r0, [r3, #0]
 8004d0a:	1e43      	subs	r3, r0, #1
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	e7dd      	b.n	8004ccc <_dtoa_r+0xa4>
 8004d10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d14:	aa12      	add	r2, sp, #72	; 0x48
 8004d16:	a913      	add	r1, sp, #76	; 0x4c
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f001 f8ad 	bl	8005e78 <__d2b>
 8004d1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d22:	4683      	mov	fp, r0
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	d07c      	beq.n	8004e22 <_dtoa_r+0x1fa>
 8004d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d42:	4b7d      	ldr	r3, [pc, #500]	; (8004f38 <_dtoa_r+0x310>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fabd 	bl	80002c8 <__aeabi_dsub>
 8004d4e:	a36e      	add	r3, pc, #440	; (adr r3, 8004f08 <_dtoa_r+0x2e0>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fc70 	bl	8000638 <__aeabi_dmul>
 8004d58:	a36d      	add	r3, pc, #436	; (adr r3, 8004f10 <_dtoa_r+0x2e8>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fab5 	bl	80002cc <__adddf3>
 8004d62:	4606      	mov	r6, r0
 8004d64:	4628      	mov	r0, r5
 8004d66:	460f      	mov	r7, r1
 8004d68:	f7fb fbfc 	bl	8000564 <__aeabi_i2d>
 8004d6c:	a36a      	add	r3, pc, #424	; (adr r3, 8004f18 <_dtoa_r+0x2f0>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fc61 	bl	8000638 <__aeabi_dmul>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	f7fb faa5 	bl	80002cc <__adddf3>
 8004d82:	4606      	mov	r6, r0
 8004d84:	460f      	mov	r7, r1
 8004d86:	f7fb ff07 	bl	8000b98 <__aeabi_d2iz>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fec2 	bl	8000b1c <__aeabi_dcmplt>
 8004d98:	b148      	cbz	r0, 8004dae <_dtoa_r+0x186>
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	f7fb fbe2 	bl	8000564 <__aeabi_i2d>
 8004da0:	4632      	mov	r2, r6
 8004da2:	463b      	mov	r3, r7
 8004da4:	f7fb feb0 	bl	8000b08 <__aeabi_dcmpeq>
 8004da8:	b908      	cbnz	r0, 8004dae <_dtoa_r+0x186>
 8004daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dae:	f1ba 0f16 	cmp.w	sl, #22
 8004db2:	d854      	bhi.n	8004e5e <_dtoa_r+0x236>
 8004db4:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <_dtoa_r+0x314>)
 8004db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dc2:	f7fb feab 	bl	8000b1c <__aeabi_dcmplt>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d04b      	beq.n	8004e62 <_dtoa_r+0x23a>
 8004dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dce:	2300      	movs	r3, #0
 8004dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8004dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dd4:	1b5d      	subs	r5, r3, r5
 8004dd6:	1e6b      	subs	r3, r5, #1
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	bf43      	ittte	mi
 8004ddc:	2300      	movmi	r3, #0
 8004dde:	f1c5 0801 	rsbmi	r8, r5, #1
 8004de2:	9304      	strmi	r3, [sp, #16]
 8004de4:	f04f 0800 	movpl.w	r8, #0
 8004de8:	f1ba 0f00 	cmp.w	sl, #0
 8004dec:	db3b      	blt.n	8004e66 <_dtoa_r+0x23e>
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004df4:	4453      	add	r3, sl
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9306      	str	r3, [sp, #24]
 8004dfc:	9b05      	ldr	r3, [sp, #20]
 8004dfe:	2b09      	cmp	r3, #9
 8004e00:	d869      	bhi.n	8004ed6 <_dtoa_r+0x2ae>
 8004e02:	2b05      	cmp	r3, #5
 8004e04:	bfc4      	itt	gt
 8004e06:	3b04      	subgt	r3, #4
 8004e08:	9305      	strgt	r3, [sp, #20]
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e10:	bfcc      	ite	gt
 8004e12:	2500      	movgt	r5, #0
 8004e14:	2501      	movle	r5, #1
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d869      	bhi.n	8004eee <_dtoa_r+0x2c6>
 8004e1a:	e8df f003 	tbb	[pc, r3]
 8004e1e:	4e2c      	.short	0x4e2c
 8004e20:	5a4c      	.short	0x5a4c
 8004e22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e26:	441d      	add	r5, r3
 8004e28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	bfc1      	itttt	gt
 8004e30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e38:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e40:	bfda      	itte	le
 8004e42:	f1c3 0320 	rsble	r3, r3, #32
 8004e46:	fa06 f003 	lslle.w	r0, r6, r3
 8004e4a:	4318      	orrgt	r0, r3
 8004e4c:	f7fb fb7a 	bl	8000544 <__aeabi_ui2d>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4606      	mov	r6, r0
 8004e54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e58:	3d01      	subs	r5, #1
 8004e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e5c:	e771      	b.n	8004d42 <_dtoa_r+0x11a>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e7b6      	b.n	8004dd0 <_dtoa_r+0x1a8>
 8004e62:	900e      	str	r0, [sp, #56]	; 0x38
 8004e64:	e7b5      	b.n	8004dd2 <_dtoa_r+0x1aa>
 8004e66:	f1ca 0300 	rsb	r3, sl, #0
 8004e6a:	9306      	str	r3, [sp, #24]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	eba8 080a 	sub.w	r8, r8, sl
 8004e72:	930d      	str	r3, [sp, #52]	; 0x34
 8004e74:	e7c2      	b.n	8004dfc <_dtoa_r+0x1d4>
 8004e76:	2300      	movs	r3, #0
 8004e78:	9308      	str	r3, [sp, #32]
 8004e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dc39      	bgt.n	8004ef4 <_dtoa_r+0x2cc>
 8004e80:	f04f 0901 	mov.w	r9, #1
 8004e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e88:	464b      	mov	r3, r9
 8004e8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e90:	2200      	movs	r2, #0
 8004e92:	6042      	str	r2, [r0, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	f102 0614 	add.w	r6, r2, #20
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	6841      	ldr	r1, [r0, #4]
 8004e9e:	d92f      	bls.n	8004f00 <_dtoa_r+0x2d8>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 fcc7 	bl	8005834 <_Balloc>
 8004ea6:	9000      	str	r0, [sp, #0]
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d14b      	bne.n	8004f44 <_dtoa_r+0x31c>
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <_dtoa_r+0x318>)
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004eb4:	e6d1      	b.n	8004c5a <_dtoa_r+0x32>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7de      	b.n	8004e78 <_dtoa_r+0x250>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9308      	str	r3, [sp, #32]
 8004ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec0:	eb0a 0903 	add.w	r9, sl, r3
 8004ec4:	f109 0301 	add.w	r3, r9, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	bfb8      	it	lt
 8004ece:	2301      	movlt	r3, #1
 8004ed0:	e7dd      	b.n	8004e8e <_dtoa_r+0x266>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7f2      	b.n	8004ebc <_dtoa_r+0x294>
 8004ed6:	2501      	movs	r5, #1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	9508      	str	r5, [sp, #32]
 8004ede:	f04f 39ff 	mov.w	r9, #4294967295
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ee8:	2312      	movs	r3, #18
 8004eea:	9209      	str	r2, [sp, #36]	; 0x24
 8004eec:	e7cf      	b.n	8004e8e <_dtoa_r+0x266>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	9308      	str	r3, [sp, #32]
 8004ef2:	e7f4      	b.n	8004ede <_dtoa_r+0x2b6>
 8004ef4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ef8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004efc:	464b      	mov	r3, r9
 8004efe:	e7c6      	b.n	8004e8e <_dtoa_r+0x266>
 8004f00:	3101      	adds	r1, #1
 8004f02:	6041      	str	r1, [r0, #4]
 8004f04:	0052      	lsls	r2, r2, #1
 8004f06:	e7c6      	b.n	8004e96 <_dtoa_r+0x26e>
 8004f08:	636f4361 	.word	0x636f4361
 8004f0c:	3fd287a7 	.word	0x3fd287a7
 8004f10:	8b60c8b3 	.word	0x8b60c8b3
 8004f14:	3fc68a28 	.word	0x3fc68a28
 8004f18:	509f79fb 	.word	0x509f79fb
 8004f1c:	3fd34413 	.word	0x3fd34413
 8004f20:	08007f5d 	.word	0x08007f5d
 8004f24:	08007f74 	.word	0x08007f74
 8004f28:	7ff00000 	.word	0x7ff00000
 8004f2c:	08007f59 	.word	0x08007f59
 8004f30:	08007f50 	.word	0x08007f50
 8004f34:	08007f2d 	.word	0x08007f2d
 8004f38:	3ff80000 	.word	0x3ff80000
 8004f3c:	08008070 	.word	0x08008070
 8004f40:	08007fd3 	.word	0x08007fd3
 8004f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f46:	9a00      	ldr	r2, [sp, #0]
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	2b0e      	cmp	r3, #14
 8004f4e:	f200 80ad 	bhi.w	80050ac <_dtoa_r+0x484>
 8004f52:	2d00      	cmp	r5, #0
 8004f54:	f000 80aa 	beq.w	80050ac <_dtoa_r+0x484>
 8004f58:	f1ba 0f00 	cmp.w	sl, #0
 8004f5c:	dd36      	ble.n	8004fcc <_dtoa_r+0x3a4>
 8004f5e:	4ac3      	ldr	r2, [pc, #780]	; (800526c <_dtoa_r+0x644>)
 8004f60:	f00a 030f 	and.w	r3, sl, #15
 8004f64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f68:	ed93 7b00 	vldr	d7, [r3]
 8004f6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004f74:	eeb0 8a47 	vmov.f32	s16, s14
 8004f78:	eef0 8a67 	vmov.f32	s17, s15
 8004f7c:	d016      	beq.n	8004fac <_dtoa_r+0x384>
 8004f7e:	4bbc      	ldr	r3, [pc, #752]	; (8005270 <_dtoa_r+0x648>)
 8004f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f88:	f7fb fc80 	bl	800088c <__aeabi_ddiv>
 8004f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f90:	f007 070f 	and.w	r7, r7, #15
 8004f94:	2503      	movs	r5, #3
 8004f96:	4eb6      	ldr	r6, [pc, #728]	; (8005270 <_dtoa_r+0x648>)
 8004f98:	b957      	cbnz	r7, 8004fb0 <_dtoa_r+0x388>
 8004f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f9e:	ec53 2b18 	vmov	r2, r3, d8
 8004fa2:	f7fb fc73 	bl	800088c <__aeabi_ddiv>
 8004fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004faa:	e029      	b.n	8005000 <_dtoa_r+0x3d8>
 8004fac:	2502      	movs	r5, #2
 8004fae:	e7f2      	b.n	8004f96 <_dtoa_r+0x36e>
 8004fb0:	07f9      	lsls	r1, r7, #31
 8004fb2:	d508      	bpl.n	8004fc6 <_dtoa_r+0x39e>
 8004fb4:	ec51 0b18 	vmov	r0, r1, d8
 8004fb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fbc:	f7fb fb3c 	bl	8000638 <__aeabi_dmul>
 8004fc0:	ec41 0b18 	vmov	d8, r0, r1
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	107f      	asrs	r7, r7, #1
 8004fc8:	3608      	adds	r6, #8
 8004fca:	e7e5      	b.n	8004f98 <_dtoa_r+0x370>
 8004fcc:	f000 80a6 	beq.w	800511c <_dtoa_r+0x4f4>
 8004fd0:	f1ca 0600 	rsb	r6, sl, #0
 8004fd4:	4ba5      	ldr	r3, [pc, #660]	; (800526c <_dtoa_r+0x644>)
 8004fd6:	4fa6      	ldr	r7, [pc, #664]	; (8005270 <_dtoa_r+0x648>)
 8004fd8:	f006 020f 	and.w	r2, r6, #15
 8004fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fe8:	f7fb fb26 	bl	8000638 <__aeabi_dmul>
 8004fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff0:	1136      	asrs	r6, r6, #4
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2502      	movs	r5, #2
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	f040 8085 	bne.w	8005106 <_dtoa_r+0x4de>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1d2      	bne.n	8004fa6 <_dtoa_r+0x37e>
 8005000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 808c 	beq.w	8005120 <_dtoa_r+0x4f8>
 8005008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800500c:	4b99      	ldr	r3, [pc, #612]	; (8005274 <_dtoa_r+0x64c>)
 800500e:	2200      	movs	r2, #0
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	f7fb fd82 	bl	8000b1c <__aeabi_dcmplt>
 8005018:	2800      	cmp	r0, #0
 800501a:	f000 8081 	beq.w	8005120 <_dtoa_r+0x4f8>
 800501e:	9b01      	ldr	r3, [sp, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d07d      	beq.n	8005120 <_dtoa_r+0x4f8>
 8005024:	f1b9 0f00 	cmp.w	r9, #0
 8005028:	dd3c      	ble.n	80050a4 <_dtoa_r+0x47c>
 800502a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800502e:	9307      	str	r3, [sp, #28]
 8005030:	2200      	movs	r2, #0
 8005032:	4b91      	ldr	r3, [pc, #580]	; (8005278 <_dtoa_r+0x650>)
 8005034:	4630      	mov	r0, r6
 8005036:	4639      	mov	r1, r7
 8005038:	f7fb fafe 	bl	8000638 <__aeabi_dmul>
 800503c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005040:	3501      	adds	r5, #1
 8005042:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005046:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800504a:	4628      	mov	r0, r5
 800504c:	f7fb fa8a 	bl	8000564 <__aeabi_i2d>
 8005050:	4632      	mov	r2, r6
 8005052:	463b      	mov	r3, r7
 8005054:	f7fb faf0 	bl	8000638 <__aeabi_dmul>
 8005058:	4b88      	ldr	r3, [pc, #544]	; (800527c <_dtoa_r+0x654>)
 800505a:	2200      	movs	r2, #0
 800505c:	f7fb f936 	bl	80002cc <__adddf3>
 8005060:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005068:	9303      	str	r3, [sp, #12]
 800506a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d15c      	bne.n	800512a <_dtoa_r+0x502>
 8005070:	4b83      	ldr	r3, [pc, #524]	; (8005280 <_dtoa_r+0x658>)
 8005072:	2200      	movs	r2, #0
 8005074:	4630      	mov	r0, r6
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb f926 	bl	80002c8 <__aeabi_dsub>
 800507c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	f7fb fd68 	bl	8000b58 <__aeabi_dcmpgt>
 8005088:	2800      	cmp	r0, #0
 800508a:	f040 8296 	bne.w	80055ba <_dtoa_r+0x992>
 800508e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005092:	4630      	mov	r0, r6
 8005094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005098:	4639      	mov	r1, r7
 800509a:	f7fb fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f040 8288 	bne.w	80055b4 <_dtoa_r+0x98c>
 80050a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f2c0 8158 	blt.w	8005364 <_dtoa_r+0x73c>
 80050b4:	f1ba 0f0e 	cmp.w	sl, #14
 80050b8:	f300 8154 	bgt.w	8005364 <_dtoa_r+0x73c>
 80050bc:	4b6b      	ldr	r3, [pc, #428]	; (800526c <_dtoa_r+0x644>)
 80050be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f280 80e3 	bge.w	8005294 <_dtoa_r+0x66c>
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f300 80df 	bgt.w	8005294 <_dtoa_r+0x66c>
 80050d6:	f040 826d 	bne.w	80055b4 <_dtoa_r+0x98c>
 80050da:	4b69      	ldr	r3, [pc, #420]	; (8005280 <_dtoa_r+0x658>)
 80050dc:	2200      	movs	r2, #0
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	f7fb faa9 	bl	8000638 <__aeabi_dmul>
 80050e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ea:	f7fb fd2b 	bl	8000b44 <__aeabi_dcmpge>
 80050ee:	9e01      	ldr	r6, [sp, #4]
 80050f0:	4637      	mov	r7, r6
 80050f2:	2800      	cmp	r0, #0
 80050f4:	f040 8243 	bne.w	800557e <_dtoa_r+0x956>
 80050f8:	9d00      	ldr	r5, [sp, #0]
 80050fa:	2331      	movs	r3, #49	; 0x31
 80050fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005100:	f10a 0a01 	add.w	sl, sl, #1
 8005104:	e23f      	b.n	8005586 <_dtoa_r+0x95e>
 8005106:	07f2      	lsls	r2, r6, #31
 8005108:	d505      	bpl.n	8005116 <_dtoa_r+0x4ee>
 800510a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510e:	f7fb fa93 	bl	8000638 <__aeabi_dmul>
 8005112:	3501      	adds	r5, #1
 8005114:	2301      	movs	r3, #1
 8005116:	1076      	asrs	r6, r6, #1
 8005118:	3708      	adds	r7, #8
 800511a:	e76c      	b.n	8004ff6 <_dtoa_r+0x3ce>
 800511c:	2502      	movs	r5, #2
 800511e:	e76f      	b.n	8005000 <_dtoa_r+0x3d8>
 8005120:	9b01      	ldr	r3, [sp, #4]
 8005122:	f8cd a01c 	str.w	sl, [sp, #28]
 8005126:	930c      	str	r3, [sp, #48]	; 0x30
 8005128:	e78d      	b.n	8005046 <_dtoa_r+0x41e>
 800512a:	9900      	ldr	r1, [sp, #0]
 800512c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800512e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005130:	4b4e      	ldr	r3, [pc, #312]	; (800526c <_dtoa_r+0x644>)
 8005132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005136:	4401      	add	r1, r0
 8005138:	9102      	str	r1, [sp, #8]
 800513a:	9908      	ldr	r1, [sp, #32]
 800513c:	eeb0 8a47 	vmov.f32	s16, s14
 8005140:	eef0 8a67 	vmov.f32	s17, s15
 8005144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800514c:	2900      	cmp	r1, #0
 800514e:	d045      	beq.n	80051dc <_dtoa_r+0x5b4>
 8005150:	494c      	ldr	r1, [pc, #304]	; (8005284 <_dtoa_r+0x65c>)
 8005152:	2000      	movs	r0, #0
 8005154:	f7fb fb9a 	bl	800088c <__aeabi_ddiv>
 8005158:	ec53 2b18 	vmov	r2, r3, d8
 800515c:	f7fb f8b4 	bl	80002c8 <__aeabi_dsub>
 8005160:	9d00      	ldr	r5, [sp, #0]
 8005162:	ec41 0b18 	vmov	d8, r0, r1
 8005166:	4639      	mov	r1, r7
 8005168:	4630      	mov	r0, r6
 800516a:	f7fb fd15 	bl	8000b98 <__aeabi_d2iz>
 800516e:	900c      	str	r0, [sp, #48]	; 0x30
 8005170:	f7fb f9f8 	bl	8000564 <__aeabi_i2d>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb f8a4 	bl	80002c8 <__aeabi_dsub>
 8005180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005182:	3330      	adds	r3, #48	; 0x30
 8005184:	f805 3b01 	strb.w	r3, [r5], #1
 8005188:	ec53 2b18 	vmov	r2, r3, d8
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	f7fb fcc4 	bl	8000b1c <__aeabi_dcmplt>
 8005194:	2800      	cmp	r0, #0
 8005196:	d165      	bne.n	8005264 <_dtoa_r+0x63c>
 8005198:	4632      	mov	r2, r6
 800519a:	463b      	mov	r3, r7
 800519c:	4935      	ldr	r1, [pc, #212]	; (8005274 <_dtoa_r+0x64c>)
 800519e:	2000      	movs	r0, #0
 80051a0:	f7fb f892 	bl	80002c8 <__aeabi_dsub>
 80051a4:	ec53 2b18 	vmov	r2, r3, d8
 80051a8:	f7fb fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f040 80b9 	bne.w	8005324 <_dtoa_r+0x6fc>
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	429d      	cmp	r5, r3
 80051b6:	f43f af75 	beq.w	80050a4 <_dtoa_r+0x47c>
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <_dtoa_r+0x650>)
 80051bc:	ec51 0b18 	vmov	r0, r1, d8
 80051c0:	2200      	movs	r2, #0
 80051c2:	f7fb fa39 	bl	8000638 <__aeabi_dmul>
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <_dtoa_r+0x650>)
 80051c8:	ec41 0b18 	vmov	d8, r0, r1
 80051cc:	2200      	movs	r2, #0
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb fa31 	bl	8000638 <__aeabi_dmul>
 80051d6:	4606      	mov	r6, r0
 80051d8:	460f      	mov	r7, r1
 80051da:	e7c4      	b.n	8005166 <_dtoa_r+0x53e>
 80051dc:	ec51 0b17 	vmov	r0, r1, d7
 80051e0:	f7fb fa2a 	bl	8000638 <__aeabi_dmul>
 80051e4:	9b02      	ldr	r3, [sp, #8]
 80051e6:	9d00      	ldr	r5, [sp, #0]
 80051e8:	930c      	str	r3, [sp, #48]	; 0x30
 80051ea:	ec41 0b18 	vmov	d8, r0, r1
 80051ee:	4639      	mov	r1, r7
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7fb fcd1 	bl	8000b98 <__aeabi_d2iz>
 80051f6:	9011      	str	r0, [sp, #68]	; 0x44
 80051f8:	f7fb f9b4 	bl	8000564 <__aeabi_i2d>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4630      	mov	r0, r6
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb f860 	bl	80002c8 <__aeabi_dsub>
 8005208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800520a:	3330      	adds	r3, #48	; 0x30
 800520c:	f805 3b01 	strb.w	r3, [r5], #1
 8005210:	9b02      	ldr	r3, [sp, #8]
 8005212:	429d      	cmp	r5, r3
 8005214:	4606      	mov	r6, r0
 8005216:	460f      	mov	r7, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	d134      	bne.n	8005288 <_dtoa_r+0x660>
 800521e:	4b19      	ldr	r3, [pc, #100]	; (8005284 <_dtoa_r+0x65c>)
 8005220:	ec51 0b18 	vmov	r0, r1, d8
 8005224:	f7fb f852 	bl	80002cc <__adddf3>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4630      	mov	r0, r6
 800522e:	4639      	mov	r1, r7
 8005230:	f7fb fc92 	bl	8000b58 <__aeabi_dcmpgt>
 8005234:	2800      	cmp	r0, #0
 8005236:	d175      	bne.n	8005324 <_dtoa_r+0x6fc>
 8005238:	ec53 2b18 	vmov	r2, r3, d8
 800523c:	4911      	ldr	r1, [pc, #68]	; (8005284 <_dtoa_r+0x65c>)
 800523e:	2000      	movs	r0, #0
 8005240:	f7fb f842 	bl	80002c8 <__aeabi_dsub>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb fc66 	bl	8000b1c <__aeabi_dcmplt>
 8005250:	2800      	cmp	r0, #0
 8005252:	f43f af27 	beq.w	80050a4 <_dtoa_r+0x47c>
 8005256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005258:	1e6b      	subs	r3, r5, #1
 800525a:	930c      	str	r3, [sp, #48]	; 0x30
 800525c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005260:	2b30      	cmp	r3, #48	; 0x30
 8005262:	d0f8      	beq.n	8005256 <_dtoa_r+0x62e>
 8005264:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005268:	e04a      	b.n	8005300 <_dtoa_r+0x6d8>
 800526a:	bf00      	nop
 800526c:	08008070 	.word	0x08008070
 8005270:	08008048 	.word	0x08008048
 8005274:	3ff00000 	.word	0x3ff00000
 8005278:	40240000 	.word	0x40240000
 800527c:	401c0000 	.word	0x401c0000
 8005280:	40140000 	.word	0x40140000
 8005284:	3fe00000 	.word	0x3fe00000
 8005288:	4baf      	ldr	r3, [pc, #700]	; (8005548 <_dtoa_r+0x920>)
 800528a:	f7fb f9d5 	bl	8000638 <__aeabi_dmul>
 800528e:	4606      	mov	r6, r0
 8005290:	460f      	mov	r7, r1
 8005292:	e7ac      	b.n	80051ee <_dtoa_r+0x5c6>
 8005294:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005298:	9d00      	ldr	r5, [sp, #0]
 800529a:	4642      	mov	r2, r8
 800529c:	464b      	mov	r3, r9
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fb faf3 	bl	800088c <__aeabi_ddiv>
 80052a6:	f7fb fc77 	bl	8000b98 <__aeabi_d2iz>
 80052aa:	9002      	str	r0, [sp, #8]
 80052ac:	f7fb f95a 	bl	8000564 <__aeabi_i2d>
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	f7fb f9c0 	bl	8000638 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb f802 	bl	80002c8 <__aeabi_dsub>
 80052c4:	9e02      	ldr	r6, [sp, #8]
 80052c6:	9f01      	ldr	r7, [sp, #4]
 80052c8:	3630      	adds	r6, #48	; 0x30
 80052ca:	f805 6b01 	strb.w	r6, [r5], #1
 80052ce:	9e00      	ldr	r6, [sp, #0]
 80052d0:	1bae      	subs	r6, r5, r6
 80052d2:	42b7      	cmp	r7, r6
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	d137      	bne.n	800534a <_dtoa_r+0x722>
 80052da:	f7fa fff7 	bl	80002cc <__adddf3>
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	4606      	mov	r6, r0
 80052e4:	460f      	mov	r7, r1
 80052e6:	f7fb fc37 	bl	8000b58 <__aeabi_dcmpgt>
 80052ea:	b9c8      	cbnz	r0, 8005320 <_dtoa_r+0x6f8>
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	4630      	mov	r0, r6
 80052f2:	4639      	mov	r1, r7
 80052f4:	f7fb fc08 	bl	8000b08 <__aeabi_dcmpeq>
 80052f8:	b110      	cbz	r0, 8005300 <_dtoa_r+0x6d8>
 80052fa:	9b02      	ldr	r3, [sp, #8]
 80052fc:	07d9      	lsls	r1, r3, #31
 80052fe:	d40f      	bmi.n	8005320 <_dtoa_r+0x6f8>
 8005300:	4620      	mov	r0, r4
 8005302:	4659      	mov	r1, fp
 8005304:	f000 fad6 	bl	80058b4 <_Bfree>
 8005308:	2300      	movs	r3, #0
 800530a:	702b      	strb	r3, [r5, #0]
 800530c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800530e:	f10a 0001 	add.w	r0, sl, #1
 8005312:	6018      	str	r0, [r3, #0]
 8005314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005316:	2b00      	cmp	r3, #0
 8005318:	f43f acd8 	beq.w	8004ccc <_dtoa_r+0xa4>
 800531c:	601d      	str	r5, [r3, #0]
 800531e:	e4d5      	b.n	8004ccc <_dtoa_r+0xa4>
 8005320:	f8cd a01c 	str.w	sl, [sp, #28]
 8005324:	462b      	mov	r3, r5
 8005326:	461d      	mov	r5, r3
 8005328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800532c:	2a39      	cmp	r2, #57	; 0x39
 800532e:	d108      	bne.n	8005342 <_dtoa_r+0x71a>
 8005330:	9a00      	ldr	r2, [sp, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d1f7      	bne.n	8005326 <_dtoa_r+0x6fe>
 8005336:	9a07      	ldr	r2, [sp, #28]
 8005338:	9900      	ldr	r1, [sp, #0]
 800533a:	3201      	adds	r2, #1
 800533c:	9207      	str	r2, [sp, #28]
 800533e:	2230      	movs	r2, #48	; 0x30
 8005340:	700a      	strb	r2, [r1, #0]
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	3201      	adds	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e78c      	b.n	8005264 <_dtoa_r+0x63c>
 800534a:	4b7f      	ldr	r3, [pc, #508]	; (8005548 <_dtoa_r+0x920>)
 800534c:	2200      	movs	r2, #0
 800534e:	f7fb f973 	bl	8000638 <__aeabi_dmul>
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	f7fb fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800535e:	2800      	cmp	r0, #0
 8005360:	d09b      	beq.n	800529a <_dtoa_r+0x672>
 8005362:	e7cd      	b.n	8005300 <_dtoa_r+0x6d8>
 8005364:	9a08      	ldr	r2, [sp, #32]
 8005366:	2a00      	cmp	r2, #0
 8005368:	f000 80c4 	beq.w	80054f4 <_dtoa_r+0x8cc>
 800536c:	9a05      	ldr	r2, [sp, #20]
 800536e:	2a01      	cmp	r2, #1
 8005370:	f300 80a8 	bgt.w	80054c4 <_dtoa_r+0x89c>
 8005374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005376:	2a00      	cmp	r2, #0
 8005378:	f000 80a0 	beq.w	80054bc <_dtoa_r+0x894>
 800537c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005380:	9e06      	ldr	r6, [sp, #24]
 8005382:	4645      	mov	r5, r8
 8005384:	9a04      	ldr	r2, [sp, #16]
 8005386:	2101      	movs	r1, #1
 8005388:	441a      	add	r2, r3
 800538a:	4620      	mov	r0, r4
 800538c:	4498      	add	r8, r3
 800538e:	9204      	str	r2, [sp, #16]
 8005390:	f000 fb4c 	bl	8005a2c <__i2b>
 8005394:	4607      	mov	r7, r0
 8005396:	2d00      	cmp	r5, #0
 8005398:	dd0b      	ble.n	80053b2 <_dtoa_r+0x78a>
 800539a:	9b04      	ldr	r3, [sp, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd08      	ble.n	80053b2 <_dtoa_r+0x78a>
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	9a04      	ldr	r2, [sp, #16]
 80053a4:	bfa8      	it	ge
 80053a6:	462b      	movge	r3, r5
 80053a8:	eba8 0803 	sub.w	r8, r8, r3
 80053ac:	1aed      	subs	r5, r5, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	9b06      	ldr	r3, [sp, #24]
 80053b4:	b1fb      	cbz	r3, 80053f6 <_dtoa_r+0x7ce>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 809f 	beq.w	80054fc <_dtoa_r+0x8d4>
 80053be:	2e00      	cmp	r6, #0
 80053c0:	dd11      	ble.n	80053e6 <_dtoa_r+0x7be>
 80053c2:	4639      	mov	r1, r7
 80053c4:	4632      	mov	r2, r6
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fbec 	bl	8005ba4 <__pow5mult>
 80053cc:	465a      	mov	r2, fp
 80053ce:	4601      	mov	r1, r0
 80053d0:	4607      	mov	r7, r0
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 fb40 	bl	8005a58 <__multiply>
 80053d8:	4659      	mov	r1, fp
 80053da:	9007      	str	r0, [sp, #28]
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 fa69 	bl	80058b4 <_Bfree>
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	469b      	mov	fp, r3
 80053e6:	9b06      	ldr	r3, [sp, #24]
 80053e8:	1b9a      	subs	r2, r3, r6
 80053ea:	d004      	beq.n	80053f6 <_dtoa_r+0x7ce>
 80053ec:	4659      	mov	r1, fp
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fbd8 	bl	8005ba4 <__pow5mult>
 80053f4:	4683      	mov	fp, r0
 80053f6:	2101      	movs	r1, #1
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fb17 	bl	8005a2c <__i2b>
 80053fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005400:	2b00      	cmp	r3, #0
 8005402:	4606      	mov	r6, r0
 8005404:	dd7c      	ble.n	8005500 <_dtoa_r+0x8d8>
 8005406:	461a      	mov	r2, r3
 8005408:	4601      	mov	r1, r0
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fbca 	bl	8005ba4 <__pow5mult>
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	2b01      	cmp	r3, #1
 8005414:	4606      	mov	r6, r0
 8005416:	dd76      	ble.n	8005506 <_dtoa_r+0x8de>
 8005418:	2300      	movs	r3, #0
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	6933      	ldr	r3, [r6, #16]
 800541e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005422:	6918      	ldr	r0, [r3, #16]
 8005424:	f000 fab2 	bl	800598c <__hi0bits>
 8005428:	f1c0 0020 	rsb	r0, r0, #32
 800542c:	9b04      	ldr	r3, [sp, #16]
 800542e:	4418      	add	r0, r3
 8005430:	f010 001f 	ands.w	r0, r0, #31
 8005434:	f000 8086 	beq.w	8005544 <_dtoa_r+0x91c>
 8005438:	f1c0 0320 	rsb	r3, r0, #32
 800543c:	2b04      	cmp	r3, #4
 800543e:	dd7f      	ble.n	8005540 <_dtoa_r+0x918>
 8005440:	f1c0 001c 	rsb	r0, r0, #28
 8005444:	9b04      	ldr	r3, [sp, #16]
 8005446:	4403      	add	r3, r0
 8005448:	4480      	add	r8, r0
 800544a:	4405      	add	r5, r0
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	f1b8 0f00 	cmp.w	r8, #0
 8005452:	dd05      	ble.n	8005460 <_dtoa_r+0x838>
 8005454:	4659      	mov	r1, fp
 8005456:	4642      	mov	r2, r8
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fbfd 	bl	8005c58 <__lshift>
 800545e:	4683      	mov	fp, r0
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dd05      	ble.n	8005472 <_dtoa_r+0x84a>
 8005466:	4631      	mov	r1, r6
 8005468:	461a      	mov	r2, r3
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fbf4 	bl	8005c58 <__lshift>
 8005470:	4606      	mov	r6, r0
 8005472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d069      	beq.n	800554c <_dtoa_r+0x924>
 8005478:	4631      	mov	r1, r6
 800547a:	4658      	mov	r0, fp
 800547c:	f000 fc58 	bl	8005d30 <__mcmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	da63      	bge.n	800554c <_dtoa_r+0x924>
 8005484:	2300      	movs	r3, #0
 8005486:	4659      	mov	r1, fp
 8005488:	220a      	movs	r2, #10
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fa34 	bl	80058f8 <__multadd>
 8005490:	9b08      	ldr	r3, [sp, #32]
 8005492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005496:	4683      	mov	fp, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 818f 	beq.w	80057bc <_dtoa_r+0xb94>
 800549e:	4639      	mov	r1, r7
 80054a0:	2300      	movs	r3, #0
 80054a2:	220a      	movs	r2, #10
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa27 	bl	80058f8 <__multadd>
 80054aa:	f1b9 0f00 	cmp.w	r9, #0
 80054ae:	4607      	mov	r7, r0
 80054b0:	f300 808e 	bgt.w	80055d0 <_dtoa_r+0x9a8>
 80054b4:	9b05      	ldr	r3, [sp, #20]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dc50      	bgt.n	800555c <_dtoa_r+0x934>
 80054ba:	e089      	b.n	80055d0 <_dtoa_r+0x9a8>
 80054bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054c2:	e75d      	b.n	8005380 <_dtoa_r+0x758>
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	1e5e      	subs	r6, r3, #1
 80054c8:	9b06      	ldr	r3, [sp, #24]
 80054ca:	42b3      	cmp	r3, r6
 80054cc:	bfbf      	itttt	lt
 80054ce:	9b06      	ldrlt	r3, [sp, #24]
 80054d0:	9606      	strlt	r6, [sp, #24]
 80054d2:	1af2      	sublt	r2, r6, r3
 80054d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80054d6:	bfb6      	itet	lt
 80054d8:	189b      	addlt	r3, r3, r2
 80054da:	1b9e      	subge	r6, r3, r6
 80054dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80054de:	9b01      	ldr	r3, [sp, #4]
 80054e0:	bfb8      	it	lt
 80054e2:	2600      	movlt	r6, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfb5      	itete	lt
 80054e8:	eba8 0503 	sublt.w	r5, r8, r3
 80054ec:	9b01      	ldrge	r3, [sp, #4]
 80054ee:	2300      	movlt	r3, #0
 80054f0:	4645      	movge	r5, r8
 80054f2:	e747      	b.n	8005384 <_dtoa_r+0x75c>
 80054f4:	9e06      	ldr	r6, [sp, #24]
 80054f6:	9f08      	ldr	r7, [sp, #32]
 80054f8:	4645      	mov	r5, r8
 80054fa:	e74c      	b.n	8005396 <_dtoa_r+0x76e>
 80054fc:	9a06      	ldr	r2, [sp, #24]
 80054fe:	e775      	b.n	80053ec <_dtoa_r+0x7c4>
 8005500:	9b05      	ldr	r3, [sp, #20]
 8005502:	2b01      	cmp	r3, #1
 8005504:	dc18      	bgt.n	8005538 <_dtoa_r+0x910>
 8005506:	9b02      	ldr	r3, [sp, #8]
 8005508:	b9b3      	cbnz	r3, 8005538 <_dtoa_r+0x910>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	b9a3      	cbnz	r3, 800553c <_dtoa_r+0x914>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005518:	0d1b      	lsrs	r3, r3, #20
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	b12b      	cbz	r3, 800552a <_dtoa_r+0x902>
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	f108 0801 	add.w	r8, r8, #1
 8005528:	2301      	movs	r3, #1
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	f47f af74 	bne.w	800541c <_dtoa_r+0x7f4>
 8005534:	2001      	movs	r0, #1
 8005536:	e779      	b.n	800542c <_dtoa_r+0x804>
 8005538:	2300      	movs	r3, #0
 800553a:	e7f6      	b.n	800552a <_dtoa_r+0x902>
 800553c:	9b02      	ldr	r3, [sp, #8]
 800553e:	e7f4      	b.n	800552a <_dtoa_r+0x902>
 8005540:	d085      	beq.n	800544e <_dtoa_r+0x826>
 8005542:	4618      	mov	r0, r3
 8005544:	301c      	adds	r0, #28
 8005546:	e77d      	b.n	8005444 <_dtoa_r+0x81c>
 8005548:	40240000 	.word	0x40240000
 800554c:	9b01      	ldr	r3, [sp, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	dc38      	bgt.n	80055c4 <_dtoa_r+0x99c>
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	2b02      	cmp	r3, #2
 8005556:	dd35      	ble.n	80055c4 <_dtoa_r+0x99c>
 8005558:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800555c:	f1b9 0f00 	cmp.w	r9, #0
 8005560:	d10d      	bne.n	800557e <_dtoa_r+0x956>
 8005562:	4631      	mov	r1, r6
 8005564:	464b      	mov	r3, r9
 8005566:	2205      	movs	r2, #5
 8005568:	4620      	mov	r0, r4
 800556a:	f000 f9c5 	bl	80058f8 <__multadd>
 800556e:	4601      	mov	r1, r0
 8005570:	4606      	mov	r6, r0
 8005572:	4658      	mov	r0, fp
 8005574:	f000 fbdc 	bl	8005d30 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	f73f adbd 	bgt.w	80050f8 <_dtoa_r+0x4d0>
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	9d00      	ldr	r5, [sp, #0]
 8005582:	ea6f 0a03 	mvn.w	sl, r3
 8005586:	f04f 0800 	mov.w	r8, #0
 800558a:	4631      	mov	r1, r6
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f991 	bl	80058b4 <_Bfree>
 8005592:	2f00      	cmp	r7, #0
 8005594:	f43f aeb4 	beq.w	8005300 <_dtoa_r+0x6d8>
 8005598:	f1b8 0f00 	cmp.w	r8, #0
 800559c:	d005      	beq.n	80055aa <_dtoa_r+0x982>
 800559e:	45b8      	cmp	r8, r7
 80055a0:	d003      	beq.n	80055aa <_dtoa_r+0x982>
 80055a2:	4641      	mov	r1, r8
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f985 	bl	80058b4 <_Bfree>
 80055aa:	4639      	mov	r1, r7
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f981 	bl	80058b4 <_Bfree>
 80055b2:	e6a5      	b.n	8005300 <_dtoa_r+0x6d8>
 80055b4:	2600      	movs	r6, #0
 80055b6:	4637      	mov	r7, r6
 80055b8:	e7e1      	b.n	800557e <_dtoa_r+0x956>
 80055ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80055c0:	4637      	mov	r7, r6
 80055c2:	e599      	b.n	80050f8 <_dtoa_r+0x4d0>
 80055c4:	9b08      	ldr	r3, [sp, #32]
 80055c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80fd 	beq.w	80057ca <_dtoa_r+0xba2>
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x9b8>
 80055d4:	4639      	mov	r1, r7
 80055d6:	462a      	mov	r2, r5
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fb3d 	bl	8005c58 <__lshift>
 80055de:	4607      	mov	r7, r0
 80055e0:	9b06      	ldr	r3, [sp, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d05c      	beq.n	80056a0 <_dtoa_r+0xa78>
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f923 	bl	8005834 <_Balloc>
 80055ee:	4605      	mov	r5, r0
 80055f0:	b928      	cbnz	r0, 80055fe <_dtoa_r+0x9d6>
 80055f2:	4b80      	ldr	r3, [pc, #512]	; (80057f4 <_dtoa_r+0xbcc>)
 80055f4:	4602      	mov	r2, r0
 80055f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055fa:	f7ff bb2e 	b.w	8004c5a <_dtoa_r+0x32>
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	3202      	adds	r2, #2
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	300c      	adds	r0, #12
 800560a:	f000 f905 	bl	8005818 <memcpy>
 800560e:	2201      	movs	r2, #1
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb20 	bl	8005c58 <__lshift>
 8005618:	9b00      	ldr	r3, [sp, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	9b00      	ldr	r3, [sp, #0]
 8005620:	444b      	add	r3, r9
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	46b8      	mov	r8, r7
 800562c:	9306      	str	r3, [sp, #24]
 800562e:	4607      	mov	r7, r0
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	4631      	mov	r1, r6
 8005634:	3b01      	subs	r3, #1
 8005636:	4658      	mov	r0, fp
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	f7ff fa67 	bl	8004b0c <quorem>
 800563e:	4603      	mov	r3, r0
 8005640:	3330      	adds	r3, #48	; 0x30
 8005642:	9004      	str	r0, [sp, #16]
 8005644:	4641      	mov	r1, r8
 8005646:	4658      	mov	r0, fp
 8005648:	9308      	str	r3, [sp, #32]
 800564a:	f000 fb71 	bl	8005d30 <__mcmp>
 800564e:	463a      	mov	r2, r7
 8005650:	4681      	mov	r9, r0
 8005652:	4631      	mov	r1, r6
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fb87 	bl	8005d68 <__mdiff>
 800565a:	68c2      	ldr	r2, [r0, #12]
 800565c:	9b08      	ldr	r3, [sp, #32]
 800565e:	4605      	mov	r5, r0
 8005660:	bb02      	cbnz	r2, 80056a4 <_dtoa_r+0xa7c>
 8005662:	4601      	mov	r1, r0
 8005664:	4658      	mov	r0, fp
 8005666:	f000 fb63 	bl	8005d30 <__mcmp>
 800566a:	9b08      	ldr	r3, [sp, #32]
 800566c:	4602      	mov	r2, r0
 800566e:	4629      	mov	r1, r5
 8005670:	4620      	mov	r0, r4
 8005672:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005676:	f000 f91d 	bl	80058b4 <_Bfree>
 800567a:	9b05      	ldr	r3, [sp, #20]
 800567c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800567e:	9d01      	ldr	r5, [sp, #4]
 8005680:	ea43 0102 	orr.w	r1, r3, r2
 8005684:	9b06      	ldr	r3, [sp, #24]
 8005686:	430b      	orrs	r3, r1
 8005688:	9b08      	ldr	r3, [sp, #32]
 800568a:	d10d      	bne.n	80056a8 <_dtoa_r+0xa80>
 800568c:	2b39      	cmp	r3, #57	; 0x39
 800568e:	d029      	beq.n	80056e4 <_dtoa_r+0xabc>
 8005690:	f1b9 0f00 	cmp.w	r9, #0
 8005694:	dd01      	ble.n	800569a <_dtoa_r+0xa72>
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	3331      	adds	r3, #49	; 0x31
 800569a:	9a02      	ldr	r2, [sp, #8]
 800569c:	7013      	strb	r3, [r2, #0]
 800569e:	e774      	b.n	800558a <_dtoa_r+0x962>
 80056a0:	4638      	mov	r0, r7
 80056a2:	e7b9      	b.n	8005618 <_dtoa_r+0x9f0>
 80056a4:	2201      	movs	r2, #1
 80056a6:	e7e2      	b.n	800566e <_dtoa_r+0xa46>
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	db06      	blt.n	80056bc <_dtoa_r+0xa94>
 80056ae:	9905      	ldr	r1, [sp, #20]
 80056b0:	ea41 0909 	orr.w	r9, r1, r9
 80056b4:	9906      	ldr	r1, [sp, #24]
 80056b6:	ea59 0101 	orrs.w	r1, r9, r1
 80056ba:	d120      	bne.n	80056fe <_dtoa_r+0xad6>
 80056bc:	2a00      	cmp	r2, #0
 80056be:	ddec      	ble.n	800569a <_dtoa_r+0xa72>
 80056c0:	4659      	mov	r1, fp
 80056c2:	2201      	movs	r2, #1
 80056c4:	4620      	mov	r0, r4
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	f000 fac6 	bl	8005c58 <__lshift>
 80056cc:	4631      	mov	r1, r6
 80056ce:	4683      	mov	fp, r0
 80056d0:	f000 fb2e 	bl	8005d30 <__mcmp>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	dc02      	bgt.n	80056e0 <_dtoa_r+0xab8>
 80056da:	d1de      	bne.n	800569a <_dtoa_r+0xa72>
 80056dc:	07da      	lsls	r2, r3, #31
 80056de:	d5dc      	bpl.n	800569a <_dtoa_r+0xa72>
 80056e0:	2b39      	cmp	r3, #57	; 0x39
 80056e2:	d1d8      	bne.n	8005696 <_dtoa_r+0xa6e>
 80056e4:	9a02      	ldr	r2, [sp, #8]
 80056e6:	2339      	movs	r3, #57	; 0x39
 80056e8:	7013      	strb	r3, [r2, #0]
 80056ea:	462b      	mov	r3, r5
 80056ec:	461d      	mov	r5, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056f4:	2a39      	cmp	r2, #57	; 0x39
 80056f6:	d050      	beq.n	800579a <_dtoa_r+0xb72>
 80056f8:	3201      	adds	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e745      	b.n	800558a <_dtoa_r+0x962>
 80056fe:	2a00      	cmp	r2, #0
 8005700:	dd03      	ble.n	800570a <_dtoa_r+0xae2>
 8005702:	2b39      	cmp	r3, #57	; 0x39
 8005704:	d0ee      	beq.n	80056e4 <_dtoa_r+0xabc>
 8005706:	3301      	adds	r3, #1
 8005708:	e7c7      	b.n	800569a <_dtoa_r+0xa72>
 800570a:	9a01      	ldr	r2, [sp, #4]
 800570c:	9907      	ldr	r1, [sp, #28]
 800570e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005712:	428a      	cmp	r2, r1
 8005714:	d02a      	beq.n	800576c <_dtoa_r+0xb44>
 8005716:	4659      	mov	r1, fp
 8005718:	2300      	movs	r3, #0
 800571a:	220a      	movs	r2, #10
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f8eb 	bl	80058f8 <__multadd>
 8005722:	45b8      	cmp	r8, r7
 8005724:	4683      	mov	fp, r0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	f04f 020a 	mov.w	r2, #10
 800572e:	4641      	mov	r1, r8
 8005730:	4620      	mov	r0, r4
 8005732:	d107      	bne.n	8005744 <_dtoa_r+0xb1c>
 8005734:	f000 f8e0 	bl	80058f8 <__multadd>
 8005738:	4680      	mov	r8, r0
 800573a:	4607      	mov	r7, r0
 800573c:	9b01      	ldr	r3, [sp, #4]
 800573e:	3301      	adds	r3, #1
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	e775      	b.n	8005630 <_dtoa_r+0xa08>
 8005744:	f000 f8d8 	bl	80058f8 <__multadd>
 8005748:	4639      	mov	r1, r7
 800574a:	4680      	mov	r8, r0
 800574c:	2300      	movs	r3, #0
 800574e:	220a      	movs	r2, #10
 8005750:	4620      	mov	r0, r4
 8005752:	f000 f8d1 	bl	80058f8 <__multadd>
 8005756:	4607      	mov	r7, r0
 8005758:	e7f0      	b.n	800573c <_dtoa_r+0xb14>
 800575a:	f1b9 0f00 	cmp.w	r9, #0
 800575e:	9a00      	ldr	r2, [sp, #0]
 8005760:	bfcc      	ite	gt
 8005762:	464d      	movgt	r5, r9
 8005764:	2501      	movle	r5, #1
 8005766:	4415      	add	r5, r2
 8005768:	f04f 0800 	mov.w	r8, #0
 800576c:	4659      	mov	r1, fp
 800576e:	2201      	movs	r2, #1
 8005770:	4620      	mov	r0, r4
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	f000 fa70 	bl	8005c58 <__lshift>
 8005778:	4631      	mov	r1, r6
 800577a:	4683      	mov	fp, r0
 800577c:	f000 fad8 	bl	8005d30 <__mcmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	dcb2      	bgt.n	80056ea <_dtoa_r+0xac2>
 8005784:	d102      	bne.n	800578c <_dtoa_r+0xb64>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	07db      	lsls	r3, r3, #31
 800578a:	d4ae      	bmi.n	80056ea <_dtoa_r+0xac2>
 800578c:	462b      	mov	r3, r5
 800578e:	461d      	mov	r5, r3
 8005790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005794:	2a30      	cmp	r2, #48	; 0x30
 8005796:	d0fa      	beq.n	800578e <_dtoa_r+0xb66>
 8005798:	e6f7      	b.n	800558a <_dtoa_r+0x962>
 800579a:	9a00      	ldr	r2, [sp, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d1a5      	bne.n	80056ec <_dtoa_r+0xac4>
 80057a0:	f10a 0a01 	add.w	sl, sl, #1
 80057a4:	2331      	movs	r3, #49	; 0x31
 80057a6:	e779      	b.n	800569c <_dtoa_r+0xa74>
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <_dtoa_r+0xbd0>)
 80057aa:	f7ff baaf 	b.w	8004d0c <_dtoa_r+0xe4>
 80057ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f aa86 	bne.w	8004cc2 <_dtoa_r+0x9a>
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <_dtoa_r+0xbd4>)
 80057b8:	f7ff baa8 	b.w	8004d0c <_dtoa_r+0xe4>
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	dc03      	bgt.n	80057ca <_dtoa_r+0xba2>
 80057c2:	9b05      	ldr	r3, [sp, #20]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f73f aec9 	bgt.w	800555c <_dtoa_r+0x934>
 80057ca:	9d00      	ldr	r5, [sp, #0]
 80057cc:	4631      	mov	r1, r6
 80057ce:	4658      	mov	r0, fp
 80057d0:	f7ff f99c 	bl	8004b0c <quorem>
 80057d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057d8:	f805 3b01 	strb.w	r3, [r5], #1
 80057dc:	9a00      	ldr	r2, [sp, #0]
 80057de:	1aaa      	subs	r2, r5, r2
 80057e0:	4591      	cmp	r9, r2
 80057e2:	ddba      	ble.n	800575a <_dtoa_r+0xb32>
 80057e4:	4659      	mov	r1, fp
 80057e6:	2300      	movs	r3, #0
 80057e8:	220a      	movs	r2, #10
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 f884 	bl	80058f8 <__multadd>
 80057f0:	4683      	mov	fp, r0
 80057f2:	e7eb      	b.n	80057cc <_dtoa_r+0xba4>
 80057f4:	08007fd3 	.word	0x08007fd3
 80057f8:	08007f2c 	.word	0x08007f2c
 80057fc:	08007f50 	.word	0x08007f50

08005800 <_localeconv_r>:
 8005800:	4800      	ldr	r0, [pc, #0]	; (8005804 <_localeconv_r+0x4>)
 8005802:	4770      	bx	lr
 8005804:	20000164 	.word	0x20000164

08005808 <malloc>:
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <malloc+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f000 bbef 	b.w	8005ff0 <_malloc_r>
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010

08005818 <memcpy>:
 8005818:	440a      	add	r2, r1
 800581a:	4291      	cmp	r1, r2
 800581c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005820:	d100      	bne.n	8005824 <memcpy+0xc>
 8005822:	4770      	bx	lr
 8005824:	b510      	push	{r4, lr}
 8005826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800582e:	4291      	cmp	r1, r2
 8005830:	d1f9      	bne.n	8005826 <memcpy+0xe>
 8005832:	bd10      	pop	{r4, pc}

08005834 <_Balloc>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	b976      	cbnz	r6, 800585c <_Balloc+0x28>
 800583e:	2010      	movs	r0, #16
 8005840:	f7ff ffe2 	bl	8005808 <malloc>
 8005844:	4602      	mov	r2, r0
 8005846:	6260      	str	r0, [r4, #36]	; 0x24
 8005848:	b920      	cbnz	r0, 8005854 <_Balloc+0x20>
 800584a:	4b18      	ldr	r3, [pc, #96]	; (80058ac <_Balloc+0x78>)
 800584c:	4818      	ldr	r0, [pc, #96]	; (80058b0 <_Balloc+0x7c>)
 800584e:	2166      	movs	r1, #102	; 0x66
 8005850:	f000 fd94 	bl	800637c <__assert_func>
 8005854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005858:	6006      	str	r6, [r0, #0]
 800585a:	60c6      	str	r6, [r0, #12]
 800585c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800585e:	68f3      	ldr	r3, [r6, #12]
 8005860:	b183      	cbz	r3, 8005884 <_Balloc+0x50>
 8005862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800586a:	b9b8      	cbnz	r0, 800589c <_Balloc+0x68>
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f605 	lsl.w	r6, r1, r5
 8005872:	1d72      	adds	r2, r6, #5
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fb5a 	bl	8005f30 <_calloc_r>
 800587c:	b160      	cbz	r0, 8005898 <_Balloc+0x64>
 800587e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005882:	e00e      	b.n	80058a2 <_Balloc+0x6e>
 8005884:	2221      	movs	r2, #33	; 0x21
 8005886:	2104      	movs	r1, #4
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fb51 	bl	8005f30 <_calloc_r>
 800588e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005890:	60f0      	str	r0, [r6, #12]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e4      	bne.n	8005862 <_Balloc+0x2e>
 8005898:	2000      	movs	r0, #0
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	6802      	ldr	r2, [r0, #0]
 800589e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058a2:	2300      	movs	r3, #0
 80058a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058a8:	e7f7      	b.n	800589a <_Balloc+0x66>
 80058aa:	bf00      	nop
 80058ac:	08007f5d 	.word	0x08007f5d
 80058b0:	08007fe4 	.word	0x08007fe4

080058b4 <_Bfree>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	b976      	cbnz	r6, 80058dc <_Bfree+0x28>
 80058be:	2010      	movs	r0, #16
 80058c0:	f7ff ffa2 	bl	8005808 <malloc>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6268      	str	r0, [r5, #36]	; 0x24
 80058c8:	b920      	cbnz	r0, 80058d4 <_Bfree+0x20>
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <_Bfree+0x3c>)
 80058cc:	4809      	ldr	r0, [pc, #36]	; (80058f4 <_Bfree+0x40>)
 80058ce:	218a      	movs	r1, #138	; 0x8a
 80058d0:	f000 fd54 	bl	800637c <__assert_func>
 80058d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058d8:	6006      	str	r6, [r0, #0]
 80058da:	60c6      	str	r6, [r0, #12]
 80058dc:	b13c      	cbz	r4, 80058ee <_Bfree+0x3a>
 80058de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058e0:	6862      	ldr	r2, [r4, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058e8:	6021      	str	r1, [r4, #0]
 80058ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	08007f5d 	.word	0x08007f5d
 80058f4:	08007fe4 	.word	0x08007fe4

080058f8 <__multadd>:
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	690e      	ldr	r6, [r1, #16]
 80058fe:	4607      	mov	r7, r0
 8005900:	4698      	mov	r8, r3
 8005902:	460c      	mov	r4, r1
 8005904:	f101 0014 	add.w	r0, r1, #20
 8005908:	2300      	movs	r3, #0
 800590a:	6805      	ldr	r5, [r0, #0]
 800590c:	b2a9      	uxth	r1, r5
 800590e:	fb02 8101 	mla	r1, r2, r1, r8
 8005912:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005916:	0c2d      	lsrs	r5, r5, #16
 8005918:	fb02 c505 	mla	r5, r2, r5, ip
 800591c:	b289      	uxth	r1, r1
 800591e:	3301      	adds	r3, #1
 8005920:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005924:	429e      	cmp	r6, r3
 8005926:	f840 1b04 	str.w	r1, [r0], #4
 800592a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800592e:	dcec      	bgt.n	800590a <__multadd+0x12>
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	d022      	beq.n	800597c <__multadd+0x84>
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	42b3      	cmp	r3, r6
 800593a:	dc19      	bgt.n	8005970 <__multadd+0x78>
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	4638      	mov	r0, r7
 8005940:	3101      	adds	r1, #1
 8005942:	f7ff ff77 	bl	8005834 <_Balloc>
 8005946:	4605      	mov	r5, r0
 8005948:	b928      	cbnz	r0, 8005956 <__multadd+0x5e>
 800594a:	4602      	mov	r2, r0
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <__multadd+0x8c>)
 800594e:	480e      	ldr	r0, [pc, #56]	; (8005988 <__multadd+0x90>)
 8005950:	21b5      	movs	r1, #181	; 0xb5
 8005952:	f000 fd13 	bl	800637c <__assert_func>
 8005956:	6922      	ldr	r2, [r4, #16]
 8005958:	3202      	adds	r2, #2
 800595a:	f104 010c 	add.w	r1, r4, #12
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	300c      	adds	r0, #12
 8005962:	f7ff ff59 	bl	8005818 <memcpy>
 8005966:	4621      	mov	r1, r4
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ffa3 	bl	80058b4 <_Bfree>
 800596e:	462c      	mov	r4, r5
 8005970:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005974:	3601      	adds	r6, #1
 8005976:	f8c3 8014 	str.w	r8, [r3, #20]
 800597a:	6126      	str	r6, [r4, #16]
 800597c:	4620      	mov	r0, r4
 800597e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005982:	bf00      	nop
 8005984:	08007fd3 	.word	0x08007fd3
 8005988:	08007fe4 	.word	0x08007fe4

0800598c <__hi0bits>:
 800598c:	0c03      	lsrs	r3, r0, #16
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	b9d3      	cbnz	r3, 80059c8 <__hi0bits+0x3c>
 8005992:	0400      	lsls	r0, r0, #16
 8005994:	2310      	movs	r3, #16
 8005996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800599a:	bf04      	itt	eq
 800599c:	0200      	lsleq	r0, r0, #8
 800599e:	3308      	addeq	r3, #8
 80059a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059a4:	bf04      	itt	eq
 80059a6:	0100      	lsleq	r0, r0, #4
 80059a8:	3304      	addeq	r3, #4
 80059aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059ae:	bf04      	itt	eq
 80059b0:	0080      	lsleq	r0, r0, #2
 80059b2:	3302      	addeq	r3, #2
 80059b4:	2800      	cmp	r0, #0
 80059b6:	db05      	blt.n	80059c4 <__hi0bits+0x38>
 80059b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059bc:	f103 0301 	add.w	r3, r3, #1
 80059c0:	bf08      	it	eq
 80059c2:	2320      	moveq	r3, #32
 80059c4:	4618      	mov	r0, r3
 80059c6:	4770      	bx	lr
 80059c8:	2300      	movs	r3, #0
 80059ca:	e7e4      	b.n	8005996 <__hi0bits+0xa>

080059cc <__lo0bits>:
 80059cc:	6803      	ldr	r3, [r0, #0]
 80059ce:	f013 0207 	ands.w	r2, r3, #7
 80059d2:	4601      	mov	r1, r0
 80059d4:	d00b      	beq.n	80059ee <__lo0bits+0x22>
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d424      	bmi.n	8005a24 <__lo0bits+0x58>
 80059da:	0798      	lsls	r0, r3, #30
 80059dc:	bf49      	itett	mi
 80059de:	085b      	lsrmi	r3, r3, #1
 80059e0:	089b      	lsrpl	r3, r3, #2
 80059e2:	2001      	movmi	r0, #1
 80059e4:	600b      	strmi	r3, [r1, #0]
 80059e6:	bf5c      	itt	pl
 80059e8:	600b      	strpl	r3, [r1, #0]
 80059ea:	2002      	movpl	r0, #2
 80059ec:	4770      	bx	lr
 80059ee:	b298      	uxth	r0, r3
 80059f0:	b9b0      	cbnz	r0, 8005a20 <__lo0bits+0x54>
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	2010      	movs	r0, #16
 80059f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80059fa:	bf04      	itt	eq
 80059fc:	0a1b      	lsreq	r3, r3, #8
 80059fe:	3008      	addeq	r0, #8
 8005a00:	071a      	lsls	r2, r3, #28
 8005a02:	bf04      	itt	eq
 8005a04:	091b      	lsreq	r3, r3, #4
 8005a06:	3004      	addeq	r0, #4
 8005a08:	079a      	lsls	r2, r3, #30
 8005a0a:	bf04      	itt	eq
 8005a0c:	089b      	lsreq	r3, r3, #2
 8005a0e:	3002      	addeq	r0, #2
 8005a10:	07da      	lsls	r2, r3, #31
 8005a12:	d403      	bmi.n	8005a1c <__lo0bits+0x50>
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	f100 0001 	add.w	r0, r0, #1
 8005a1a:	d005      	beq.n	8005a28 <__lo0bits+0x5c>
 8005a1c:	600b      	str	r3, [r1, #0]
 8005a1e:	4770      	bx	lr
 8005a20:	4610      	mov	r0, r2
 8005a22:	e7e8      	b.n	80059f6 <__lo0bits+0x2a>
 8005a24:	2000      	movs	r0, #0
 8005a26:	4770      	bx	lr
 8005a28:	2020      	movs	r0, #32
 8005a2a:	4770      	bx	lr

08005a2c <__i2b>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	2101      	movs	r1, #1
 8005a32:	f7ff feff 	bl	8005834 <_Balloc>
 8005a36:	4602      	mov	r2, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <__i2b+0x1a>
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <__i2b+0x24>)
 8005a3c:	4805      	ldr	r0, [pc, #20]	; (8005a54 <__i2b+0x28>)
 8005a3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a42:	f000 fc9b 	bl	800637c <__assert_func>
 8005a46:	2301      	movs	r3, #1
 8005a48:	6144      	str	r4, [r0, #20]
 8005a4a:	6103      	str	r3, [r0, #16]
 8005a4c:	bd10      	pop	{r4, pc}
 8005a4e:	bf00      	nop
 8005a50:	08007fd3 	.word	0x08007fd3
 8005a54:	08007fe4 	.word	0x08007fe4

08005a58 <__multiply>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	690a      	ldr	r2, [r1, #16]
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bfb8      	it	lt
 8005a66:	460b      	movlt	r3, r1
 8005a68:	460d      	mov	r5, r1
 8005a6a:	bfbc      	itt	lt
 8005a6c:	4625      	movlt	r5, r4
 8005a6e:	461c      	movlt	r4, r3
 8005a70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005a74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a78:	68ab      	ldr	r3, [r5, #8]
 8005a7a:	6869      	ldr	r1, [r5, #4]
 8005a7c:	eb0a 0709 	add.w	r7, sl, r9
 8005a80:	42bb      	cmp	r3, r7
 8005a82:	b085      	sub	sp, #20
 8005a84:	bfb8      	it	lt
 8005a86:	3101      	addlt	r1, #1
 8005a88:	f7ff fed4 	bl	8005834 <_Balloc>
 8005a8c:	b930      	cbnz	r0, 8005a9c <__multiply+0x44>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <__multiply+0x144>)
 8005a92:	4843      	ldr	r0, [pc, #268]	; (8005ba0 <__multiply+0x148>)
 8005a94:	f240 115d 	movw	r1, #349	; 0x15d
 8005a98:	f000 fc70 	bl	800637c <__assert_func>
 8005a9c:	f100 0614 	add.w	r6, r0, #20
 8005aa0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005aa4:	4633      	mov	r3, r6
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4543      	cmp	r3, r8
 8005aaa:	d31e      	bcc.n	8005aea <__multiply+0x92>
 8005aac:	f105 0c14 	add.w	ip, r5, #20
 8005ab0:	f104 0314 	add.w	r3, r4, #20
 8005ab4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ab8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	ebac 0205 	sub.w	r2, ip, r5
 8005ac2:	3a15      	subs	r2, #21
 8005ac4:	f022 0203 	bic.w	r2, r2, #3
 8005ac8:	3204      	adds	r2, #4
 8005aca:	f105 0115 	add.w	r1, r5, #21
 8005ace:	458c      	cmp	ip, r1
 8005ad0:	bf38      	it	cc
 8005ad2:	2204      	movcc	r2, #4
 8005ad4:	9201      	str	r2, [sp, #4]
 8005ad6:	9a02      	ldr	r2, [sp, #8]
 8005ad8:	9303      	str	r3, [sp, #12]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d808      	bhi.n	8005af0 <__multiply+0x98>
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	dc55      	bgt.n	8005b8e <__multiply+0x136>
 8005ae2:	6107      	str	r7, [r0, #16]
 8005ae4:	b005      	add	sp, #20
 8005ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	f843 2b04 	str.w	r2, [r3], #4
 8005aee:	e7db      	b.n	8005aa8 <__multiply+0x50>
 8005af0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005af4:	f1ba 0f00 	cmp.w	sl, #0
 8005af8:	d020      	beq.n	8005b3c <__multiply+0xe4>
 8005afa:	f105 0e14 	add.w	lr, r5, #20
 8005afe:	46b1      	mov	r9, r6
 8005b00:	2200      	movs	r2, #0
 8005b02:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b06:	f8d9 b000 	ldr.w	fp, [r9]
 8005b0a:	b2a1      	uxth	r1, r4
 8005b0c:	fa1f fb8b 	uxth.w	fp, fp
 8005b10:	fb0a b101 	mla	r1, sl, r1, fp
 8005b14:	4411      	add	r1, r2
 8005b16:	f8d9 2000 	ldr.w	r2, [r9]
 8005b1a:	0c24      	lsrs	r4, r4, #16
 8005b1c:	0c12      	lsrs	r2, r2, #16
 8005b1e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b26:	b289      	uxth	r1, r1
 8005b28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b2c:	45f4      	cmp	ip, lr
 8005b2e:	f849 1b04 	str.w	r1, [r9], #4
 8005b32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b36:	d8e4      	bhi.n	8005b02 <__multiply+0xaa>
 8005b38:	9901      	ldr	r1, [sp, #4]
 8005b3a:	5072      	str	r2, [r6, r1]
 8005b3c:	9a03      	ldr	r2, [sp, #12]
 8005b3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b42:	3304      	adds	r3, #4
 8005b44:	f1b9 0f00 	cmp.w	r9, #0
 8005b48:	d01f      	beq.n	8005b8a <__multiply+0x132>
 8005b4a:	6834      	ldr	r4, [r6, #0]
 8005b4c:	f105 0114 	add.w	r1, r5, #20
 8005b50:	46b6      	mov	lr, r6
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	880a      	ldrh	r2, [r1, #0]
 8005b58:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005b5c:	fb09 b202 	mla	r2, r9, r2, fp
 8005b60:	4492      	add	sl, r2
 8005b62:	b2a4      	uxth	r4, r4
 8005b64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005b68:	f84e 4b04 	str.w	r4, [lr], #4
 8005b6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005b70:	f8be 2000 	ldrh.w	r2, [lr]
 8005b74:	0c24      	lsrs	r4, r4, #16
 8005b76:	fb09 2404 	mla	r4, r9, r4, r2
 8005b7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005b7e:	458c      	cmp	ip, r1
 8005b80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b84:	d8e7      	bhi.n	8005b56 <__multiply+0xfe>
 8005b86:	9a01      	ldr	r2, [sp, #4]
 8005b88:	50b4      	str	r4, [r6, r2]
 8005b8a:	3604      	adds	r6, #4
 8005b8c:	e7a3      	b.n	8005ad6 <__multiply+0x7e>
 8005b8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1a5      	bne.n	8005ae2 <__multiply+0x8a>
 8005b96:	3f01      	subs	r7, #1
 8005b98:	e7a1      	b.n	8005ade <__multiply+0x86>
 8005b9a:	bf00      	nop
 8005b9c:	08007fd3 	.word	0x08007fd3
 8005ba0:	08007fe4 	.word	0x08007fe4

08005ba4 <__pow5mult>:
 8005ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	4615      	mov	r5, r2
 8005baa:	f012 0203 	ands.w	r2, r2, #3
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	d007      	beq.n	8005bc4 <__pow5mult+0x20>
 8005bb4:	4c25      	ldr	r4, [pc, #148]	; (8005c4c <__pow5mult+0xa8>)
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bbe:	f7ff fe9b 	bl	80058f8 <__multadd>
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	10ad      	asrs	r5, r5, #2
 8005bc6:	d03d      	beq.n	8005c44 <__pow5mult+0xa0>
 8005bc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bca:	b97c      	cbnz	r4, 8005bec <__pow5mult+0x48>
 8005bcc:	2010      	movs	r0, #16
 8005bce:	f7ff fe1b 	bl	8005808 <malloc>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005bd6:	b928      	cbnz	r0, 8005be4 <__pow5mult+0x40>
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <__pow5mult+0xac>)
 8005bda:	481e      	ldr	r0, [pc, #120]	; (8005c54 <__pow5mult+0xb0>)
 8005bdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005be0:	f000 fbcc 	bl	800637c <__assert_func>
 8005be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005be8:	6004      	str	r4, [r0, #0]
 8005bea:	60c4      	str	r4, [r0, #12]
 8005bec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bf4:	b94c      	cbnz	r4, 8005c0a <__pow5mult+0x66>
 8005bf6:	f240 2171 	movw	r1, #625	; 0x271
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7ff ff16 	bl	8005a2c <__i2b>
 8005c00:	2300      	movs	r3, #0
 8005c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c06:	4604      	mov	r4, r0
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	f04f 0900 	mov.w	r9, #0
 8005c0e:	07eb      	lsls	r3, r5, #31
 8005c10:	d50a      	bpl.n	8005c28 <__pow5mult+0x84>
 8005c12:	4639      	mov	r1, r7
 8005c14:	4622      	mov	r2, r4
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ff1e 	bl	8005a58 <__multiply>
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4680      	mov	r8, r0
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7ff fe47 	bl	80058b4 <_Bfree>
 8005c26:	4647      	mov	r7, r8
 8005c28:	106d      	asrs	r5, r5, #1
 8005c2a:	d00b      	beq.n	8005c44 <__pow5mult+0xa0>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	b938      	cbnz	r0, 8005c40 <__pow5mult+0x9c>
 8005c30:	4622      	mov	r2, r4
 8005c32:	4621      	mov	r1, r4
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff ff0f 	bl	8005a58 <__multiply>
 8005c3a:	6020      	str	r0, [r4, #0]
 8005c3c:	f8c0 9000 	str.w	r9, [r0]
 8005c40:	4604      	mov	r4, r0
 8005c42:	e7e4      	b.n	8005c0e <__pow5mult+0x6a>
 8005c44:	4638      	mov	r0, r7
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08008138 	.word	0x08008138
 8005c50:	08007f5d 	.word	0x08007f5d
 8005c54:	08007fe4 	.word	0x08007fe4

08005c58 <__lshift>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6849      	ldr	r1, [r1, #4]
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	4607      	mov	r7, r0
 8005c6a:	4691      	mov	r9, r2
 8005c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c70:	f108 0601 	add.w	r6, r8, #1
 8005c74:	42b3      	cmp	r3, r6
 8005c76:	db0b      	blt.n	8005c90 <__lshift+0x38>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff fddb 	bl	8005834 <_Balloc>
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b948      	cbnz	r0, 8005c96 <__lshift+0x3e>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <__lshift+0xd0>)
 8005c86:	4829      	ldr	r0, [pc, #164]	; (8005d2c <__lshift+0xd4>)
 8005c88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c8c:	f000 fb76 	bl	800637c <__assert_func>
 8005c90:	3101      	adds	r1, #1
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	e7ee      	b.n	8005c74 <__lshift+0x1c>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f100 0114 	add.w	r1, r0, #20
 8005c9c:	f100 0210 	add.w	r2, r0, #16
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	4553      	cmp	r3, sl
 8005ca4:	db33      	blt.n	8005d0e <__lshift+0xb6>
 8005ca6:	6920      	ldr	r0, [r4, #16]
 8005ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cac:	f104 0314 	add.w	r3, r4, #20
 8005cb0:	f019 091f 	ands.w	r9, r9, #31
 8005cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cbc:	d02b      	beq.n	8005d16 <__lshift+0xbe>
 8005cbe:	f1c9 0e20 	rsb	lr, r9, #32
 8005cc2:	468a      	mov	sl, r1
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ccc:	4302      	orrs	r2, r0
 8005cce:	f84a 2b04 	str.w	r2, [sl], #4
 8005cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd6:	459c      	cmp	ip, r3
 8005cd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005cdc:	d8f3      	bhi.n	8005cc6 <__lshift+0x6e>
 8005cde:	ebac 0304 	sub.w	r3, ip, r4
 8005ce2:	3b15      	subs	r3, #21
 8005ce4:	f023 0303 	bic.w	r3, r3, #3
 8005ce8:	3304      	adds	r3, #4
 8005cea:	f104 0015 	add.w	r0, r4, #21
 8005cee:	4584      	cmp	ip, r0
 8005cf0:	bf38      	it	cc
 8005cf2:	2304      	movcc	r3, #4
 8005cf4:	50ca      	str	r2, [r1, r3]
 8005cf6:	b10a      	cbz	r2, 8005cfc <__lshift+0xa4>
 8005cf8:	f108 0602 	add.w	r6, r8, #2
 8005cfc:	3e01      	subs	r6, #1
 8005cfe:	4638      	mov	r0, r7
 8005d00:	612e      	str	r6, [r5, #16]
 8005d02:	4621      	mov	r1, r4
 8005d04:	f7ff fdd6 	bl	80058b4 <_Bfree>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d12:	3301      	adds	r3, #1
 8005d14:	e7c5      	b.n	8005ca2 <__lshift+0x4a>
 8005d16:	3904      	subs	r1, #4
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d20:	459c      	cmp	ip, r3
 8005d22:	d8f9      	bhi.n	8005d18 <__lshift+0xc0>
 8005d24:	e7ea      	b.n	8005cfc <__lshift+0xa4>
 8005d26:	bf00      	nop
 8005d28:	08007fd3 	.word	0x08007fd3
 8005d2c:	08007fe4 	.word	0x08007fe4

08005d30 <__mcmp>:
 8005d30:	b530      	push	{r4, r5, lr}
 8005d32:	6902      	ldr	r2, [r0, #16]
 8005d34:	690c      	ldr	r4, [r1, #16]
 8005d36:	1b12      	subs	r2, r2, r4
 8005d38:	d10e      	bne.n	8005d58 <__mcmp+0x28>
 8005d3a:	f100 0314 	add.w	r3, r0, #20
 8005d3e:	3114      	adds	r1, #20
 8005d40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	d003      	beq.n	8005d5c <__mcmp+0x2c>
 8005d54:	d305      	bcc.n	8005d62 <__mcmp+0x32>
 8005d56:	2201      	movs	r2, #1
 8005d58:	4610      	mov	r0, r2
 8005d5a:	bd30      	pop	{r4, r5, pc}
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	d3f3      	bcc.n	8005d48 <__mcmp+0x18>
 8005d60:	e7fa      	b.n	8005d58 <__mcmp+0x28>
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	e7f7      	b.n	8005d58 <__mcmp+0x28>

08005d68 <__mdiff>:
 8005d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	4606      	mov	r6, r0
 8005d70:	4611      	mov	r1, r2
 8005d72:	4620      	mov	r0, r4
 8005d74:	4617      	mov	r7, r2
 8005d76:	f7ff ffdb 	bl	8005d30 <__mcmp>
 8005d7a:	1e05      	subs	r5, r0, #0
 8005d7c:	d110      	bne.n	8005da0 <__mdiff+0x38>
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7ff fd57 	bl	8005834 <_Balloc>
 8005d86:	b930      	cbnz	r0, 8005d96 <__mdiff+0x2e>
 8005d88:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <__mdiff+0x108>)
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f240 2132 	movw	r1, #562	; 0x232
 8005d90:	4838      	ldr	r0, [pc, #224]	; (8005e74 <__mdiff+0x10c>)
 8005d92:	f000 faf3 	bl	800637c <__assert_func>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	bfa4      	itt	ge
 8005da2:	463b      	movge	r3, r7
 8005da4:	4627      	movge	r7, r4
 8005da6:	4630      	mov	r0, r6
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	bfa6      	itte	ge
 8005dac:	461c      	movge	r4, r3
 8005dae:	2500      	movge	r5, #0
 8005db0:	2501      	movlt	r5, #1
 8005db2:	f7ff fd3f 	bl	8005834 <_Balloc>
 8005db6:	b920      	cbnz	r0, 8005dc2 <__mdiff+0x5a>
 8005db8:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <__mdiff+0x108>)
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005dc0:	e7e6      	b.n	8005d90 <__mdiff+0x28>
 8005dc2:	693e      	ldr	r6, [r7, #16]
 8005dc4:	60c5      	str	r5, [r0, #12]
 8005dc6:	6925      	ldr	r5, [r4, #16]
 8005dc8:	f107 0114 	add.w	r1, r7, #20
 8005dcc:	f104 0914 	add.w	r9, r4, #20
 8005dd0:	f100 0e14 	add.w	lr, r0, #20
 8005dd4:	f107 0210 	add.w	r2, r7, #16
 8005dd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005ddc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005de0:	46f2      	mov	sl, lr
 8005de2:	2700      	movs	r7, #0
 8005de4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005de8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005dec:	fa1f f883 	uxth.w	r8, r3
 8005df0:	fa17 f78b 	uxtah	r7, r7, fp
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	eba7 0808 	sub.w	r8, r7, r8
 8005dfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005dfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e02:	fa1f f888 	uxth.w	r8, r8
 8005e06:	141f      	asrs	r7, r3, #16
 8005e08:	454d      	cmp	r5, r9
 8005e0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e0e:	f84a 3b04 	str.w	r3, [sl], #4
 8005e12:	d8e7      	bhi.n	8005de4 <__mdiff+0x7c>
 8005e14:	1b2b      	subs	r3, r5, r4
 8005e16:	3b15      	subs	r3, #21
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	3415      	adds	r4, #21
 8005e20:	42a5      	cmp	r5, r4
 8005e22:	bf38      	it	cc
 8005e24:	2304      	movcc	r3, #4
 8005e26:	4419      	add	r1, r3
 8005e28:	4473      	add	r3, lr
 8005e2a:	469e      	mov	lr, r3
 8005e2c:	460d      	mov	r5, r1
 8005e2e:	4565      	cmp	r5, ip
 8005e30:	d30e      	bcc.n	8005e50 <__mdiff+0xe8>
 8005e32:	f10c 0203 	add.w	r2, ip, #3
 8005e36:	1a52      	subs	r2, r2, r1
 8005e38:	f022 0203 	bic.w	r2, r2, #3
 8005e3c:	3903      	subs	r1, #3
 8005e3e:	458c      	cmp	ip, r1
 8005e40:	bf38      	it	cc
 8005e42:	2200      	movcc	r2, #0
 8005e44:	441a      	add	r2, r3
 8005e46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e4a:	b17b      	cbz	r3, 8005e6c <__mdiff+0x104>
 8005e4c:	6106      	str	r6, [r0, #16]
 8005e4e:	e7a5      	b.n	8005d9c <__mdiff+0x34>
 8005e50:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e54:	fa17 f488 	uxtah	r4, r7, r8
 8005e58:	1422      	asrs	r2, r4, #16
 8005e5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005e5e:	b2a4      	uxth	r4, r4
 8005e60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005e64:	f84e 4b04 	str.w	r4, [lr], #4
 8005e68:	1417      	asrs	r7, r2, #16
 8005e6a:	e7e0      	b.n	8005e2e <__mdiff+0xc6>
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	e7ea      	b.n	8005e46 <__mdiff+0xde>
 8005e70:	08007fd3 	.word	0x08007fd3
 8005e74:	08007fe4 	.word	0x08007fe4

08005e78 <__d2b>:
 8005e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	4689      	mov	r9, r1
 8005e7e:	2101      	movs	r1, #1
 8005e80:	ec57 6b10 	vmov	r6, r7, d0
 8005e84:	4690      	mov	r8, r2
 8005e86:	f7ff fcd5 	bl	8005834 <_Balloc>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	b930      	cbnz	r0, 8005e9c <__d2b+0x24>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <__d2b+0xb0>)
 8005e92:	4826      	ldr	r0, [pc, #152]	; (8005f2c <__d2b+0xb4>)
 8005e94:	f240 310a 	movw	r1, #778	; 0x30a
 8005e98:	f000 fa70 	bl	800637c <__assert_func>
 8005e9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ea4:	bb35      	cbnz	r5, 8005ef4 <__d2b+0x7c>
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	d028      	beq.n	8005efe <__d2b+0x86>
 8005eac:	4668      	mov	r0, sp
 8005eae:	9600      	str	r6, [sp, #0]
 8005eb0:	f7ff fd8c 	bl	80059cc <__lo0bits>
 8005eb4:	9900      	ldr	r1, [sp, #0]
 8005eb6:	b300      	cbz	r0, 8005efa <__d2b+0x82>
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	f1c0 0320 	rsb	r3, r0, #32
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	40c2      	lsrs	r2, r0
 8005ec6:	6163      	str	r3, [r4, #20]
 8005ec8:	9201      	str	r2, [sp, #4]
 8005eca:	9b01      	ldr	r3, [sp, #4]
 8005ecc:	61a3      	str	r3, [r4, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf14      	ite	ne
 8005ed2:	2202      	movne	r2, #2
 8005ed4:	2201      	moveq	r2, #1
 8005ed6:	6122      	str	r2, [r4, #16]
 8005ed8:	b1d5      	cbz	r5, 8005f10 <__d2b+0x98>
 8005eda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ede:	4405      	add	r5, r0
 8005ee0:	f8c9 5000 	str.w	r5, [r9]
 8005ee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ee8:	f8c8 0000 	str.w	r0, [r8]
 8005eec:	4620      	mov	r0, r4
 8005eee:	b003      	add	sp, #12
 8005ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef8:	e7d5      	b.n	8005ea6 <__d2b+0x2e>
 8005efa:	6161      	str	r1, [r4, #20]
 8005efc:	e7e5      	b.n	8005eca <__d2b+0x52>
 8005efe:	a801      	add	r0, sp, #4
 8005f00:	f7ff fd64 	bl	80059cc <__lo0bits>
 8005f04:	9b01      	ldr	r3, [sp, #4]
 8005f06:	6163      	str	r3, [r4, #20]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	6122      	str	r2, [r4, #16]
 8005f0c:	3020      	adds	r0, #32
 8005f0e:	e7e3      	b.n	8005ed8 <__d2b+0x60>
 8005f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f18:	f8c9 0000 	str.w	r0, [r9]
 8005f1c:	6918      	ldr	r0, [r3, #16]
 8005f1e:	f7ff fd35 	bl	800598c <__hi0bits>
 8005f22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f26:	e7df      	b.n	8005ee8 <__d2b+0x70>
 8005f28:	08007fd3 	.word	0x08007fd3
 8005f2c:	08007fe4 	.word	0x08007fe4

08005f30 <_calloc_r>:
 8005f30:	b513      	push	{r0, r1, r4, lr}
 8005f32:	434a      	muls	r2, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	9201      	str	r2, [sp, #4]
 8005f38:	f000 f85a 	bl	8005ff0 <_malloc_r>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	b118      	cbz	r0, 8005f48 <_calloc_r+0x18>
 8005f40:	9a01      	ldr	r2, [sp, #4]
 8005f42:	2100      	movs	r1, #0
 8005f44:	f7fe f950 	bl	80041e8 <memset>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	b002      	add	sp, #8
 8005f4c:	bd10      	pop	{r4, pc}
	...

08005f50 <_free_r>:
 8005f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f52:	2900      	cmp	r1, #0
 8005f54:	d048      	beq.n	8005fe8 <_free_r+0x98>
 8005f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f5a:	9001      	str	r0, [sp, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f62:	bfb8      	it	lt
 8005f64:	18e4      	addlt	r4, r4, r3
 8005f66:	f000 fa65 	bl	8006434 <__malloc_lock>
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <_free_r+0x9c>)
 8005f6c:	9801      	ldr	r0, [sp, #4]
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	4615      	mov	r5, r2
 8005f72:	b933      	cbnz	r3, 8005f82 <_free_r+0x32>
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6014      	str	r4, [r2, #0]
 8005f78:	b003      	add	sp, #12
 8005f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f7e:	f000 ba5f 	b.w	8006440 <__malloc_unlock>
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	d90b      	bls.n	8005f9e <_free_r+0x4e>
 8005f86:	6821      	ldr	r1, [r4, #0]
 8005f88:	1862      	adds	r2, r4, r1
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf04      	itt	eq
 8005f8e:	681a      	ldreq	r2, [r3, #0]
 8005f90:	685b      	ldreq	r3, [r3, #4]
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	bf04      	itt	eq
 8005f96:	1852      	addeq	r2, r2, r1
 8005f98:	6022      	streq	r2, [r4, #0]
 8005f9a:	602c      	str	r4, [r5, #0]
 8005f9c:	e7ec      	b.n	8005f78 <_free_r+0x28>
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	b10b      	cbz	r3, 8005fa8 <_free_r+0x58>
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d9fa      	bls.n	8005f9e <_free_r+0x4e>
 8005fa8:	6811      	ldr	r1, [r2, #0]
 8005faa:	1855      	adds	r5, r2, r1
 8005fac:	42a5      	cmp	r5, r4
 8005fae:	d10b      	bne.n	8005fc8 <_free_r+0x78>
 8005fb0:	6824      	ldr	r4, [r4, #0]
 8005fb2:	4421      	add	r1, r4
 8005fb4:	1854      	adds	r4, r2, r1
 8005fb6:	42a3      	cmp	r3, r4
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	d1dd      	bne.n	8005f78 <_free_r+0x28>
 8005fbc:	681c      	ldr	r4, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	6053      	str	r3, [r2, #4]
 8005fc2:	4421      	add	r1, r4
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	e7d7      	b.n	8005f78 <_free_r+0x28>
 8005fc8:	d902      	bls.n	8005fd0 <_free_r+0x80>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	6003      	str	r3, [r0, #0]
 8005fce:	e7d3      	b.n	8005f78 <_free_r+0x28>
 8005fd0:	6825      	ldr	r5, [r4, #0]
 8005fd2:	1961      	adds	r1, r4, r5
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf04      	itt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	bf04      	itt	eq
 8005fe0:	1949      	addeq	r1, r1, r5
 8005fe2:	6021      	streq	r1, [r4, #0]
 8005fe4:	6054      	str	r4, [r2, #4]
 8005fe6:	e7c7      	b.n	8005f78 <_free_r+0x28>
 8005fe8:	b003      	add	sp, #12
 8005fea:	bd30      	pop	{r4, r5, pc}
 8005fec:	20000204 	.word	0x20000204

08005ff0 <_malloc_r>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	1ccd      	adds	r5, r1, #3
 8005ff4:	f025 0503 	bic.w	r5, r5, #3
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	2d0c      	cmp	r5, #12
 8005ffc:	bf38      	it	cc
 8005ffe:	250c      	movcc	r5, #12
 8006000:	2d00      	cmp	r5, #0
 8006002:	4606      	mov	r6, r0
 8006004:	db01      	blt.n	800600a <_malloc_r+0x1a>
 8006006:	42a9      	cmp	r1, r5
 8006008:	d903      	bls.n	8006012 <_malloc_r+0x22>
 800600a:	230c      	movs	r3, #12
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	2000      	movs	r0, #0
 8006010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006012:	f000 fa0f 	bl	8006434 <__malloc_lock>
 8006016:	4921      	ldr	r1, [pc, #132]	; (800609c <_malloc_r+0xac>)
 8006018:	680a      	ldr	r2, [r1, #0]
 800601a:	4614      	mov	r4, r2
 800601c:	b99c      	cbnz	r4, 8006046 <_malloc_r+0x56>
 800601e:	4f20      	ldr	r7, [pc, #128]	; (80060a0 <_malloc_r+0xb0>)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	b923      	cbnz	r3, 800602e <_malloc_r+0x3e>
 8006024:	4621      	mov	r1, r4
 8006026:	4630      	mov	r0, r6
 8006028:	f000 f998 	bl	800635c <_sbrk_r>
 800602c:	6038      	str	r0, [r7, #0]
 800602e:	4629      	mov	r1, r5
 8006030:	4630      	mov	r0, r6
 8006032:	f000 f993 	bl	800635c <_sbrk_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d123      	bne.n	8006082 <_malloc_r+0x92>
 800603a:	230c      	movs	r3, #12
 800603c:	6033      	str	r3, [r6, #0]
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f9fe 	bl	8006440 <__malloc_unlock>
 8006044:	e7e3      	b.n	800600e <_malloc_r+0x1e>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	1b5b      	subs	r3, r3, r5
 800604a:	d417      	bmi.n	800607c <_malloc_r+0x8c>
 800604c:	2b0b      	cmp	r3, #11
 800604e:	d903      	bls.n	8006058 <_malloc_r+0x68>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	441c      	add	r4, r3
 8006054:	6025      	str	r5, [r4, #0]
 8006056:	e004      	b.n	8006062 <_malloc_r+0x72>
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	42a2      	cmp	r2, r4
 800605c:	bf0c      	ite	eq
 800605e:	600b      	streq	r3, [r1, #0]
 8006060:	6053      	strne	r3, [r2, #4]
 8006062:	4630      	mov	r0, r6
 8006064:	f000 f9ec 	bl	8006440 <__malloc_unlock>
 8006068:	f104 000b 	add.w	r0, r4, #11
 800606c:	1d23      	adds	r3, r4, #4
 800606e:	f020 0007 	bic.w	r0, r0, #7
 8006072:	1ac2      	subs	r2, r0, r3
 8006074:	d0cc      	beq.n	8006010 <_malloc_r+0x20>
 8006076:	1a1b      	subs	r3, r3, r0
 8006078:	50a3      	str	r3, [r4, r2]
 800607a:	e7c9      	b.n	8006010 <_malloc_r+0x20>
 800607c:	4622      	mov	r2, r4
 800607e:	6864      	ldr	r4, [r4, #4]
 8006080:	e7cc      	b.n	800601c <_malloc_r+0x2c>
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d0e3      	beq.n	8006054 <_malloc_r+0x64>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f964 	bl	800635c <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d1dd      	bne.n	8006054 <_malloc_r+0x64>
 8006098:	e7cf      	b.n	800603a <_malloc_r+0x4a>
 800609a:	bf00      	nop
 800609c:	20000204 	.word	0x20000204
 80060a0:	20000208 	.word	0x20000208

080060a4 <__ssputs_r>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	688e      	ldr	r6, [r1, #8]
 80060aa:	429e      	cmp	r6, r3
 80060ac:	4682      	mov	sl, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	4690      	mov	r8, r2
 80060b2:	461f      	mov	r7, r3
 80060b4:	d838      	bhi.n	8006128 <__ssputs_r+0x84>
 80060b6:	898a      	ldrh	r2, [r1, #12]
 80060b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060bc:	d032      	beq.n	8006124 <__ssputs_r+0x80>
 80060be:	6825      	ldr	r5, [r4, #0]
 80060c0:	6909      	ldr	r1, [r1, #16]
 80060c2:	eba5 0901 	sub.w	r9, r5, r1
 80060c6:	6965      	ldr	r5, [r4, #20]
 80060c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d0:	3301      	adds	r3, #1
 80060d2:	444b      	add	r3, r9
 80060d4:	106d      	asrs	r5, r5, #1
 80060d6:	429d      	cmp	r5, r3
 80060d8:	bf38      	it	cc
 80060da:	461d      	movcc	r5, r3
 80060dc:	0553      	lsls	r3, r2, #21
 80060de:	d531      	bpl.n	8006144 <__ssputs_r+0xa0>
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7ff ff85 	bl	8005ff0 <_malloc_r>
 80060e6:	4606      	mov	r6, r0
 80060e8:	b950      	cbnz	r0, 8006100 <__ssputs_r+0x5c>
 80060ea:	230c      	movs	r3, #12
 80060ec:	f8ca 3000 	str.w	r3, [sl]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	464a      	mov	r2, r9
 8006104:	f7ff fb88 	bl	8005818 <memcpy>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	6126      	str	r6, [r4, #16]
 8006116:	6165      	str	r5, [r4, #20]
 8006118:	444e      	add	r6, r9
 800611a:	eba5 0509 	sub.w	r5, r5, r9
 800611e:	6026      	str	r6, [r4, #0]
 8006120:	60a5      	str	r5, [r4, #8]
 8006122:	463e      	mov	r6, r7
 8006124:	42be      	cmp	r6, r7
 8006126:	d900      	bls.n	800612a <__ssputs_r+0x86>
 8006128:	463e      	mov	r6, r7
 800612a:	4632      	mov	r2, r6
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	4641      	mov	r1, r8
 8006130:	f000 f966 	bl	8006400 <memmove>
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	1b9b      	subs	r3, r3, r6
 800613a:	4432      	add	r2, r6
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e7db      	b.n	80060fc <__ssputs_r+0x58>
 8006144:	462a      	mov	r2, r5
 8006146:	f000 f981 	bl	800644c <_realloc_r>
 800614a:	4606      	mov	r6, r0
 800614c:	2800      	cmp	r0, #0
 800614e:	d1e1      	bne.n	8006114 <__ssputs_r+0x70>
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	4650      	mov	r0, sl
 8006154:	f7ff fefc 	bl	8005f50 <_free_r>
 8006158:	e7c7      	b.n	80060ea <__ssputs_r+0x46>
	...

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4698      	mov	r8, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4607      	mov	r7, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4614      	mov	r4, r2
 800616e:	d50e      	bpl.n	800618e <_svfiprintf_r+0x32>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b963      	cbnz	r3, 800618e <_svfiprintf_r+0x32>
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f7ff ff3b 	bl	8005ff0 <_malloc_r>
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	6128      	str	r0, [r5, #16]
 800617e:	b920      	cbnz	r0, 800618a <_svfiprintf_r+0x2e>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e0d1      	b.n	800632e <_svfiprintf_r+0x1d2>
 800618a:	2340      	movs	r3, #64	; 0x40
 800618c:	616b      	str	r3, [r5, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	2320      	movs	r3, #32
 8006194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	2330      	movs	r3, #48	; 0x30
 800619e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006348 <_svfiprintf_r+0x1ec>
 80061a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a6:	f04f 0901 	mov.w	r9, #1
 80061aa:	4623      	mov	r3, r4
 80061ac:	469a      	mov	sl, r3
 80061ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b2:	b10a      	cbz	r2, 80061b8 <_svfiprintf_r+0x5c>
 80061b4:	2a25      	cmp	r2, #37	; 0x25
 80061b6:	d1f9      	bne.n	80061ac <_svfiprintf_r+0x50>
 80061b8:	ebba 0b04 	subs.w	fp, sl, r4
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x7a>
 80061be:	465b      	mov	r3, fp
 80061c0:	4622      	mov	r2, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff6d 	bl	80060a4 <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80aa 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	445a      	add	r2, fp
 80061d4:	9209      	str	r2, [sp, #36]	; 0x24
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a2 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ea:	f10a 0a01 	add.w	sl, sl, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f6:	931a      	str	r3, [sp, #104]	; 0x68
 80061f8:	4654      	mov	r4, sl
 80061fa:	2205      	movs	r2, #5
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	4851      	ldr	r0, [pc, #324]	; (8006348 <_svfiprintf_r+0x1ec>)
 8006202:	f7fa f80d 	bl	8000220 <memchr>
 8006206:	9a04      	ldr	r2, [sp, #16]
 8006208:	b9d8      	cbnz	r0, 8006242 <_svfiprintf_r+0xe6>
 800620a:	06d0      	lsls	r0, r2, #27
 800620c:	bf44      	itt	mi
 800620e:	2320      	movmi	r3, #32
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006214:	0711      	lsls	r1, r2, #28
 8006216:	bf44      	itt	mi
 8006218:	232b      	movmi	r3, #43	; 0x2b
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xf6>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4621      	mov	r1, r4
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d94e      	bls.n	80062da <_svfiprintf_r+0x17e>
 800623c:	b1b0      	cbz	r0, 800626c <_svfiprintf_r+0x110>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e014      	b.n	800626c <_svfiprintf_r+0x110>
 8006242:	eba0 0308 	sub.w	r3, r0, r8
 8006246:	fa09 f303 	lsl.w	r3, r9, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	46a2      	mov	sl, r4
 8006250:	e7d2      	b.n	80061f8 <_svfiprintf_r+0x9c>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfbb      	ittet	lt
 800625e:	425b      	neglt	r3, r3
 8006260:	f042 0202 	orrlt.w	r2, r2, #2
 8006264:	9307      	strge	r3, [sp, #28]
 8006266:	9307      	strlt	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	9204      	strlt	r2, [sp, #16]
 800626c:	7823      	ldrb	r3, [r4, #0]
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x130>
 8006272:	7863      	ldrb	r3, [r4, #1]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d135      	bne.n	80062e4 <_svfiprintf_r+0x188>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfb8      	it	lt
 8006284:	f04f 33ff 	movlt.w	r3, #4294967295
 8006288:	3402      	adds	r4, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006358 <_svfiprintf_r+0x1fc>
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	4650      	mov	r0, sl
 8006296:	f7f9 ffc3 	bl	8000220 <memchr>
 800629a:	b140      	cbz	r0, 80062ae <_svfiprintf_r+0x152>
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	fa03 f000 	lsl.w	r0, r3, r0
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	4303      	orrs	r3, r0
 80062aa:	3401      	adds	r4, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b2:	4826      	ldr	r0, [pc, #152]	; (800634c <_svfiprintf_r+0x1f0>)
 80062b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b8:	2206      	movs	r2, #6
 80062ba:	f7f9 ffb1 	bl	8000220 <memchr>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d038      	beq.n	8006334 <_svfiprintf_r+0x1d8>
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <_svfiprintf_r+0x1f4>)
 80062c4:	bb1b      	cbnz	r3, 800630e <_svfiprintf_r+0x1b2>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	3308      	adds	r3, #8
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	4433      	add	r3, r6
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	e767      	b.n	80061aa <_svfiprintf_r+0x4e>
 80062da:	fb0c 3202 	mla	r2, ip, r2, r3
 80062de:	460c      	mov	r4, r1
 80062e0:	2001      	movs	r0, #1
 80062e2:	e7a5      	b.n	8006230 <_svfiprintf_r+0xd4>
 80062e4:	2300      	movs	r3, #0
 80062e6:	3401      	adds	r4, #1
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	4619      	mov	r1, r3
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	4620      	mov	r0, r4
 80062f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f6:	3a30      	subs	r2, #48	; 0x30
 80062f8:	2a09      	cmp	r2, #9
 80062fa:	d903      	bls.n	8006304 <_svfiprintf_r+0x1a8>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0c5      	beq.n	800628c <_svfiprintf_r+0x130>
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	e7c3      	b.n	800628c <_svfiprintf_r+0x130>
 8006304:	fb0c 2101 	mla	r1, ip, r1, r2
 8006308:	4604      	mov	r4, r0
 800630a:	2301      	movs	r3, #1
 800630c:	e7f0      	b.n	80062f0 <_svfiprintf_r+0x194>
 800630e:	ab03      	add	r3, sp, #12
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	462a      	mov	r2, r5
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <_svfiprintf_r+0x1f8>)
 8006316:	a904      	add	r1, sp, #16
 8006318:	4638      	mov	r0, r7
 800631a:	f7fe f80d 	bl	8004338 <_printf_float>
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	4606      	mov	r6, r0
 8006322:	d1d6      	bne.n	80062d2 <_svfiprintf_r+0x176>
 8006324:	89ab      	ldrh	r3, [r5, #12]
 8006326:	065b      	lsls	r3, r3, #25
 8006328:	f53f af2c 	bmi.w	8006184 <_svfiprintf_r+0x28>
 800632c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632e:	b01d      	add	sp, #116	; 0x74
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	462a      	mov	r2, r5
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <_svfiprintf_r+0x1f8>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4638      	mov	r0, r7
 8006340:	f7fe fa9e 	bl	8004880 <_printf_i>
 8006344:	e7eb      	b.n	800631e <_svfiprintf_r+0x1c2>
 8006346:	bf00      	nop
 8006348:	08008144 	.word	0x08008144
 800634c:	0800814e 	.word	0x0800814e
 8006350:	08004339 	.word	0x08004339
 8006354:	080060a5 	.word	0x080060a5
 8006358:	0800814a 	.word	0x0800814a

0800635c <_sbrk_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d06      	ldr	r5, [pc, #24]	; (8006378 <_sbrk_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	f7fb fb60 	bl	8001a2c <_sbrk>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_sbrk_r+0x1a>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_sbrk_r+0x1a>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	200002c4 	.word	0x200002c4

0800637c <__assert_func>:
 800637c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800637e:	4614      	mov	r4, r2
 8006380:	461a      	mov	r2, r3
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <__assert_func+0x2c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4605      	mov	r5, r0
 8006388:	68d8      	ldr	r0, [r3, #12]
 800638a:	b14c      	cbz	r4, 80063a0 <__assert_func+0x24>
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <__assert_func+0x30>)
 800638e:	9100      	str	r1, [sp, #0]
 8006390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006394:	4906      	ldr	r1, [pc, #24]	; (80063b0 <__assert_func+0x34>)
 8006396:	462b      	mov	r3, r5
 8006398:	f000 f80e 	bl	80063b8 <fiprintf>
 800639c:	f000 faa4 	bl	80068e8 <abort>
 80063a0:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <__assert_func+0x38>)
 80063a2:	461c      	mov	r4, r3
 80063a4:	e7f3      	b.n	800638e <__assert_func+0x12>
 80063a6:	bf00      	nop
 80063a8:	20000010 	.word	0x20000010
 80063ac:	08008155 	.word	0x08008155
 80063b0:	08008162 	.word	0x08008162
 80063b4:	08008190 	.word	0x08008190

080063b8 <fiprintf>:
 80063b8:	b40e      	push	{r1, r2, r3}
 80063ba:	b503      	push	{r0, r1, lr}
 80063bc:	4601      	mov	r1, r0
 80063be:	ab03      	add	r3, sp, #12
 80063c0:	4805      	ldr	r0, [pc, #20]	; (80063d8 <fiprintf+0x20>)
 80063c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c6:	6800      	ldr	r0, [r0, #0]
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	f000 f88f 	bl	80064ec <_vfiprintf_r>
 80063ce:	b002      	add	sp, #8
 80063d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d4:	b003      	add	sp, #12
 80063d6:	4770      	bx	lr
 80063d8:	20000010 	.word	0x20000010

080063dc <__ascii_mbtowc>:
 80063dc:	b082      	sub	sp, #8
 80063de:	b901      	cbnz	r1, 80063e2 <__ascii_mbtowc+0x6>
 80063e0:	a901      	add	r1, sp, #4
 80063e2:	b142      	cbz	r2, 80063f6 <__ascii_mbtowc+0x1a>
 80063e4:	b14b      	cbz	r3, 80063fa <__ascii_mbtowc+0x1e>
 80063e6:	7813      	ldrb	r3, [r2, #0]
 80063e8:	600b      	str	r3, [r1, #0]
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	1e10      	subs	r0, r2, #0
 80063ee:	bf18      	it	ne
 80063f0:	2001      	movne	r0, #1
 80063f2:	b002      	add	sp, #8
 80063f4:	4770      	bx	lr
 80063f6:	4610      	mov	r0, r2
 80063f8:	e7fb      	b.n	80063f2 <__ascii_mbtowc+0x16>
 80063fa:	f06f 0001 	mvn.w	r0, #1
 80063fe:	e7f8      	b.n	80063f2 <__ascii_mbtowc+0x16>

08006400 <memmove>:
 8006400:	4288      	cmp	r0, r1
 8006402:	b510      	push	{r4, lr}
 8006404:	eb01 0402 	add.w	r4, r1, r2
 8006408:	d902      	bls.n	8006410 <memmove+0x10>
 800640a:	4284      	cmp	r4, r0
 800640c:	4623      	mov	r3, r4
 800640e:	d807      	bhi.n	8006420 <memmove+0x20>
 8006410:	1e43      	subs	r3, r0, #1
 8006412:	42a1      	cmp	r1, r4
 8006414:	d008      	beq.n	8006428 <memmove+0x28>
 8006416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800641e:	e7f8      	b.n	8006412 <memmove+0x12>
 8006420:	4402      	add	r2, r0
 8006422:	4601      	mov	r1, r0
 8006424:	428a      	cmp	r2, r1
 8006426:	d100      	bne.n	800642a <memmove+0x2a>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800642e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006432:	e7f7      	b.n	8006424 <memmove+0x24>

08006434 <__malloc_lock>:
 8006434:	4801      	ldr	r0, [pc, #4]	; (800643c <__malloc_lock+0x8>)
 8006436:	f000 bc17 	b.w	8006c68 <__retarget_lock_acquire_recursive>
 800643a:	bf00      	nop
 800643c:	200002cc 	.word	0x200002cc

08006440 <__malloc_unlock>:
 8006440:	4801      	ldr	r0, [pc, #4]	; (8006448 <__malloc_unlock+0x8>)
 8006442:	f000 bc12 	b.w	8006c6a <__retarget_lock_release_recursive>
 8006446:	bf00      	nop
 8006448:	200002cc 	.word	0x200002cc

0800644c <_realloc_r>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	4607      	mov	r7, r0
 8006450:	4614      	mov	r4, r2
 8006452:	460e      	mov	r6, r1
 8006454:	b921      	cbnz	r1, 8006460 <_realloc_r+0x14>
 8006456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800645a:	4611      	mov	r1, r2
 800645c:	f7ff bdc8 	b.w	8005ff0 <_malloc_r>
 8006460:	b922      	cbnz	r2, 800646c <_realloc_r+0x20>
 8006462:	f7ff fd75 	bl	8005f50 <_free_r>
 8006466:	4625      	mov	r5, r4
 8006468:	4628      	mov	r0, r5
 800646a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646c:	f000 fc62 	bl	8006d34 <_malloc_usable_size_r>
 8006470:	42a0      	cmp	r0, r4
 8006472:	d20f      	bcs.n	8006494 <_realloc_r+0x48>
 8006474:	4621      	mov	r1, r4
 8006476:	4638      	mov	r0, r7
 8006478:	f7ff fdba 	bl	8005ff0 <_malloc_r>
 800647c:	4605      	mov	r5, r0
 800647e:	2800      	cmp	r0, #0
 8006480:	d0f2      	beq.n	8006468 <_realloc_r+0x1c>
 8006482:	4631      	mov	r1, r6
 8006484:	4622      	mov	r2, r4
 8006486:	f7ff f9c7 	bl	8005818 <memcpy>
 800648a:	4631      	mov	r1, r6
 800648c:	4638      	mov	r0, r7
 800648e:	f7ff fd5f 	bl	8005f50 <_free_r>
 8006492:	e7e9      	b.n	8006468 <_realloc_r+0x1c>
 8006494:	4635      	mov	r5, r6
 8006496:	e7e7      	b.n	8006468 <_realloc_r+0x1c>

08006498 <__sfputc_r>:
 8006498:	6893      	ldr	r3, [r2, #8]
 800649a:	3b01      	subs	r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	b410      	push	{r4}
 80064a0:	6093      	str	r3, [r2, #8]
 80064a2:	da08      	bge.n	80064b6 <__sfputc_r+0x1e>
 80064a4:	6994      	ldr	r4, [r2, #24]
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	db01      	blt.n	80064ae <__sfputc_r+0x16>
 80064aa:	290a      	cmp	r1, #10
 80064ac:	d103      	bne.n	80064b6 <__sfputc_r+0x1e>
 80064ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064b2:	f000 b94b 	b.w	800674c <__swbuf_r>
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	1c58      	adds	r0, r3, #1
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	7019      	strb	r1, [r3, #0]
 80064be:	4608      	mov	r0, r1
 80064c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <__sfputs_r>:
 80064c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	18d5      	adds	r5, r2, r3
 80064d0:	42ac      	cmp	r4, r5
 80064d2:	d101      	bne.n	80064d8 <__sfputs_r+0x12>
 80064d4:	2000      	movs	r0, #0
 80064d6:	e007      	b.n	80064e8 <__sfputs_r+0x22>
 80064d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064dc:	463a      	mov	r2, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffda 	bl	8006498 <__sfputc_r>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d1f3      	bne.n	80064d0 <__sfputs_r+0xa>
 80064e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064ec <_vfiprintf_r>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	460d      	mov	r5, r1
 80064f2:	b09d      	sub	sp, #116	; 0x74
 80064f4:	4614      	mov	r4, r2
 80064f6:	4698      	mov	r8, r3
 80064f8:	4606      	mov	r6, r0
 80064fa:	b118      	cbz	r0, 8006504 <_vfiprintf_r+0x18>
 80064fc:	6983      	ldr	r3, [r0, #24]
 80064fe:	b90b      	cbnz	r3, 8006504 <_vfiprintf_r+0x18>
 8006500:	f000 fb14 	bl	8006b2c <__sinit>
 8006504:	4b89      	ldr	r3, [pc, #548]	; (800672c <_vfiprintf_r+0x240>)
 8006506:	429d      	cmp	r5, r3
 8006508:	d11b      	bne.n	8006542 <_vfiprintf_r+0x56>
 800650a:	6875      	ldr	r5, [r6, #4]
 800650c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650e:	07d9      	lsls	r1, r3, #31
 8006510:	d405      	bmi.n	800651e <_vfiprintf_r+0x32>
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	059a      	lsls	r2, r3, #22
 8006516:	d402      	bmi.n	800651e <_vfiprintf_r+0x32>
 8006518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800651a:	f000 fba5 	bl	8006c68 <__retarget_lock_acquire_recursive>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	071b      	lsls	r3, r3, #28
 8006522:	d501      	bpl.n	8006528 <_vfiprintf_r+0x3c>
 8006524:	692b      	ldr	r3, [r5, #16]
 8006526:	b9eb      	cbnz	r3, 8006564 <_vfiprintf_r+0x78>
 8006528:	4629      	mov	r1, r5
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f96e 	bl	800680c <__swsetup_r>
 8006530:	b1c0      	cbz	r0, 8006564 <_vfiprintf_r+0x78>
 8006532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006534:	07dc      	lsls	r4, r3, #31
 8006536:	d50e      	bpl.n	8006556 <_vfiprintf_r+0x6a>
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	b01d      	add	sp, #116	; 0x74
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	4b7b      	ldr	r3, [pc, #492]	; (8006730 <_vfiprintf_r+0x244>)
 8006544:	429d      	cmp	r5, r3
 8006546:	d101      	bne.n	800654c <_vfiprintf_r+0x60>
 8006548:	68b5      	ldr	r5, [r6, #8]
 800654a:	e7df      	b.n	800650c <_vfiprintf_r+0x20>
 800654c:	4b79      	ldr	r3, [pc, #484]	; (8006734 <_vfiprintf_r+0x248>)
 800654e:	429d      	cmp	r5, r3
 8006550:	bf08      	it	eq
 8006552:	68f5      	ldreq	r5, [r6, #12]
 8006554:	e7da      	b.n	800650c <_vfiprintf_r+0x20>
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	0598      	lsls	r0, r3, #22
 800655a:	d4ed      	bmi.n	8006538 <_vfiprintf_r+0x4c>
 800655c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800655e:	f000 fb84 	bl	8006c6a <__retarget_lock_release_recursive>
 8006562:	e7e9      	b.n	8006538 <_vfiprintf_r+0x4c>
 8006564:	2300      	movs	r3, #0
 8006566:	9309      	str	r3, [sp, #36]	; 0x24
 8006568:	2320      	movs	r3, #32
 800656a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800656e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006572:	2330      	movs	r3, #48	; 0x30
 8006574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006738 <_vfiprintf_r+0x24c>
 8006578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657c:	f04f 0901 	mov.w	r9, #1
 8006580:	4623      	mov	r3, r4
 8006582:	469a      	mov	sl, r3
 8006584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006588:	b10a      	cbz	r2, 800658e <_vfiprintf_r+0xa2>
 800658a:	2a25      	cmp	r2, #37	; 0x25
 800658c:	d1f9      	bne.n	8006582 <_vfiprintf_r+0x96>
 800658e:	ebba 0b04 	subs.w	fp, sl, r4
 8006592:	d00b      	beq.n	80065ac <_vfiprintf_r+0xc0>
 8006594:	465b      	mov	r3, fp
 8006596:	4622      	mov	r2, r4
 8006598:	4629      	mov	r1, r5
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ff93 	bl	80064c6 <__sfputs_r>
 80065a0:	3001      	adds	r0, #1
 80065a2:	f000 80aa 	beq.w	80066fa <_vfiprintf_r+0x20e>
 80065a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a8:	445a      	add	r2, fp
 80065aa:	9209      	str	r2, [sp, #36]	; 0x24
 80065ac:	f89a 3000 	ldrb.w	r3, [sl]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80a2 	beq.w	80066fa <_vfiprintf_r+0x20e>
 80065b6:	2300      	movs	r3, #0
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c0:	f10a 0a01 	add.w	sl, sl, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	9307      	str	r3, [sp, #28]
 80065c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065cc:	931a      	str	r3, [sp, #104]	; 0x68
 80065ce:	4654      	mov	r4, sl
 80065d0:	2205      	movs	r2, #5
 80065d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d6:	4858      	ldr	r0, [pc, #352]	; (8006738 <_vfiprintf_r+0x24c>)
 80065d8:	f7f9 fe22 	bl	8000220 <memchr>
 80065dc:	9a04      	ldr	r2, [sp, #16]
 80065de:	b9d8      	cbnz	r0, 8006618 <_vfiprintf_r+0x12c>
 80065e0:	06d1      	lsls	r1, r2, #27
 80065e2:	bf44      	itt	mi
 80065e4:	2320      	movmi	r3, #32
 80065e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ea:	0713      	lsls	r3, r2, #28
 80065ec:	bf44      	itt	mi
 80065ee:	232b      	movmi	r3, #43	; 0x2b
 80065f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f4:	f89a 3000 	ldrb.w	r3, [sl]
 80065f8:	2b2a      	cmp	r3, #42	; 0x2a
 80065fa:	d015      	beq.n	8006628 <_vfiprintf_r+0x13c>
 80065fc:	9a07      	ldr	r2, [sp, #28]
 80065fe:	4654      	mov	r4, sl
 8006600:	2000      	movs	r0, #0
 8006602:	f04f 0c0a 	mov.w	ip, #10
 8006606:	4621      	mov	r1, r4
 8006608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660c:	3b30      	subs	r3, #48	; 0x30
 800660e:	2b09      	cmp	r3, #9
 8006610:	d94e      	bls.n	80066b0 <_vfiprintf_r+0x1c4>
 8006612:	b1b0      	cbz	r0, 8006642 <_vfiprintf_r+0x156>
 8006614:	9207      	str	r2, [sp, #28]
 8006616:	e014      	b.n	8006642 <_vfiprintf_r+0x156>
 8006618:	eba0 0308 	sub.w	r3, r0, r8
 800661c:	fa09 f303 	lsl.w	r3, r9, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	46a2      	mov	sl, r4
 8006626:	e7d2      	b.n	80065ce <_vfiprintf_r+0xe2>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	1d19      	adds	r1, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bfbb      	ittet	lt
 8006634:	425b      	neglt	r3, r3
 8006636:	f042 0202 	orrlt.w	r2, r2, #2
 800663a:	9307      	strge	r3, [sp, #28]
 800663c:	9307      	strlt	r3, [sp, #28]
 800663e:	bfb8      	it	lt
 8006640:	9204      	strlt	r2, [sp, #16]
 8006642:	7823      	ldrb	r3, [r4, #0]
 8006644:	2b2e      	cmp	r3, #46	; 0x2e
 8006646:	d10c      	bne.n	8006662 <_vfiprintf_r+0x176>
 8006648:	7863      	ldrb	r3, [r4, #1]
 800664a:	2b2a      	cmp	r3, #42	; 0x2a
 800664c:	d135      	bne.n	80066ba <_vfiprintf_r+0x1ce>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9203      	str	r2, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfb8      	it	lt
 800665a:	f04f 33ff 	movlt.w	r3, #4294967295
 800665e:	3402      	adds	r4, #2
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006748 <_vfiprintf_r+0x25c>
 8006666:	7821      	ldrb	r1, [r4, #0]
 8006668:	2203      	movs	r2, #3
 800666a:	4650      	mov	r0, sl
 800666c:	f7f9 fdd8 	bl	8000220 <memchr>
 8006670:	b140      	cbz	r0, 8006684 <_vfiprintf_r+0x198>
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	eba0 000a 	sub.w	r0, r0, sl
 8006678:	fa03 f000 	lsl.w	r0, r3, r0
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	4303      	orrs	r3, r0
 8006680:	3401      	adds	r4, #1
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006688:	482c      	ldr	r0, [pc, #176]	; (800673c <_vfiprintf_r+0x250>)
 800668a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800668e:	2206      	movs	r2, #6
 8006690:	f7f9 fdc6 	bl	8000220 <memchr>
 8006694:	2800      	cmp	r0, #0
 8006696:	d03f      	beq.n	8006718 <_vfiprintf_r+0x22c>
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <_vfiprintf_r+0x254>)
 800669a:	bb1b      	cbnz	r3, 80066e4 <_vfiprintf_r+0x1f8>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	3307      	adds	r3, #7
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	3308      	adds	r3, #8
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	443b      	add	r3, r7
 80066ac:	9309      	str	r3, [sp, #36]	; 0x24
 80066ae:	e767      	b.n	8006580 <_vfiprintf_r+0x94>
 80066b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b4:	460c      	mov	r4, r1
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7a5      	b.n	8006606 <_vfiprintf_r+0x11a>
 80066ba:	2300      	movs	r3, #0
 80066bc:	3401      	adds	r4, #1
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f04f 0c0a 	mov.w	ip, #10
 80066c6:	4620      	mov	r0, r4
 80066c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066cc:	3a30      	subs	r2, #48	; 0x30
 80066ce:	2a09      	cmp	r2, #9
 80066d0:	d903      	bls.n	80066da <_vfiprintf_r+0x1ee>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c5      	beq.n	8006662 <_vfiprintf_r+0x176>
 80066d6:	9105      	str	r1, [sp, #20]
 80066d8:	e7c3      	b.n	8006662 <_vfiprintf_r+0x176>
 80066da:	fb0c 2101 	mla	r1, ip, r1, r2
 80066de:	4604      	mov	r4, r0
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f0      	b.n	80066c6 <_vfiprintf_r+0x1da>
 80066e4:	ab03      	add	r3, sp, #12
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	462a      	mov	r2, r5
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <_vfiprintf_r+0x258>)
 80066ec:	a904      	add	r1, sp, #16
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7fd fe22 	bl	8004338 <_printf_float>
 80066f4:	4607      	mov	r7, r0
 80066f6:	1c78      	adds	r0, r7, #1
 80066f8:	d1d6      	bne.n	80066a8 <_vfiprintf_r+0x1bc>
 80066fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d405      	bmi.n	800670c <_vfiprintf_r+0x220>
 8006700:	89ab      	ldrh	r3, [r5, #12]
 8006702:	059a      	lsls	r2, r3, #22
 8006704:	d402      	bmi.n	800670c <_vfiprintf_r+0x220>
 8006706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006708:	f000 faaf 	bl	8006c6a <__retarget_lock_release_recursive>
 800670c:	89ab      	ldrh	r3, [r5, #12]
 800670e:	065b      	lsls	r3, r3, #25
 8006710:	f53f af12 	bmi.w	8006538 <_vfiprintf_r+0x4c>
 8006714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006716:	e711      	b.n	800653c <_vfiprintf_r+0x50>
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <_vfiprintf_r+0x258>)
 8006720:	a904      	add	r1, sp, #16
 8006722:	4630      	mov	r0, r6
 8006724:	f7fe f8ac 	bl	8004880 <_printf_i>
 8006728:	e7e4      	b.n	80066f4 <_vfiprintf_r+0x208>
 800672a:	bf00      	nop
 800672c:	080082bc 	.word	0x080082bc
 8006730:	080082dc 	.word	0x080082dc
 8006734:	0800829c 	.word	0x0800829c
 8006738:	08008144 	.word	0x08008144
 800673c:	0800814e 	.word	0x0800814e
 8006740:	08004339 	.word	0x08004339
 8006744:	080064c7 	.word	0x080064c7
 8006748:	0800814a 	.word	0x0800814a

0800674c <__swbuf_r>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	460e      	mov	r6, r1
 8006750:	4614      	mov	r4, r2
 8006752:	4605      	mov	r5, r0
 8006754:	b118      	cbz	r0, 800675e <__swbuf_r+0x12>
 8006756:	6983      	ldr	r3, [r0, #24]
 8006758:	b90b      	cbnz	r3, 800675e <__swbuf_r+0x12>
 800675a:	f000 f9e7 	bl	8006b2c <__sinit>
 800675e:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <__swbuf_r+0x98>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d12b      	bne.n	80067bc <__swbuf_r+0x70>
 8006764:	686c      	ldr	r4, [r5, #4]
 8006766:	69a3      	ldr	r3, [r4, #24]
 8006768:	60a3      	str	r3, [r4, #8]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	071a      	lsls	r2, r3, #28
 800676e:	d52f      	bpl.n	80067d0 <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	b36b      	cbz	r3, 80067d0 <__swbuf_r+0x84>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	1ac0      	subs	r0, r0, r3
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	b2f6      	uxtb	r6, r6
 800677e:	4283      	cmp	r3, r0
 8006780:	4637      	mov	r7, r6
 8006782:	dc04      	bgt.n	800678e <__swbuf_r+0x42>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f93c 	bl	8006a04 <_fflush_r>
 800678c:	bb30      	cbnz	r0, 80067dc <__swbuf_r+0x90>
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	701e      	strb	r6, [r3, #0]
 800679c:	6963      	ldr	r3, [r4, #20]
 800679e:	3001      	adds	r0, #1
 80067a0:	4283      	cmp	r3, r0
 80067a2:	d004      	beq.n	80067ae <__swbuf_r+0x62>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d506      	bpl.n	80067b8 <__swbuf_r+0x6c>
 80067aa:	2e0a      	cmp	r6, #10
 80067ac:	d104      	bne.n	80067b8 <__swbuf_r+0x6c>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 f927 	bl	8006a04 <_fflush_r>
 80067b6:	b988      	cbnz	r0, 80067dc <__swbuf_r+0x90>
 80067b8:	4638      	mov	r0, r7
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <__swbuf_r+0x9c>)
 80067be:	429c      	cmp	r4, r3
 80067c0:	d101      	bne.n	80067c6 <__swbuf_r+0x7a>
 80067c2:	68ac      	ldr	r4, [r5, #8]
 80067c4:	e7cf      	b.n	8006766 <__swbuf_r+0x1a>
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <__swbuf_r+0xa0>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	bf08      	it	eq
 80067cc:	68ec      	ldreq	r4, [r5, #12]
 80067ce:	e7ca      	b.n	8006766 <__swbuf_r+0x1a>
 80067d0:	4621      	mov	r1, r4
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f81a 	bl	800680c <__swsetup_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d0cb      	beq.n	8006774 <__swbuf_r+0x28>
 80067dc:	f04f 37ff 	mov.w	r7, #4294967295
 80067e0:	e7ea      	b.n	80067b8 <__swbuf_r+0x6c>
 80067e2:	bf00      	nop
 80067e4:	080082bc 	.word	0x080082bc
 80067e8:	080082dc 	.word	0x080082dc
 80067ec:	0800829c 	.word	0x0800829c

080067f0 <__ascii_wctomb>:
 80067f0:	b149      	cbz	r1, 8006806 <__ascii_wctomb+0x16>
 80067f2:	2aff      	cmp	r2, #255	; 0xff
 80067f4:	bf85      	ittet	hi
 80067f6:	238a      	movhi	r3, #138	; 0x8a
 80067f8:	6003      	strhi	r3, [r0, #0]
 80067fa:	700a      	strbls	r2, [r1, #0]
 80067fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006800:	bf98      	it	ls
 8006802:	2001      	movls	r0, #1
 8006804:	4770      	bx	lr
 8006806:	4608      	mov	r0, r1
 8006808:	4770      	bx	lr
	...

0800680c <__swsetup_r>:
 800680c:	4b32      	ldr	r3, [pc, #200]	; (80068d8 <__swsetup_r+0xcc>)
 800680e:	b570      	push	{r4, r5, r6, lr}
 8006810:	681d      	ldr	r5, [r3, #0]
 8006812:	4606      	mov	r6, r0
 8006814:	460c      	mov	r4, r1
 8006816:	b125      	cbz	r5, 8006822 <__swsetup_r+0x16>
 8006818:	69ab      	ldr	r3, [r5, #24]
 800681a:	b913      	cbnz	r3, 8006822 <__swsetup_r+0x16>
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f985 	bl	8006b2c <__sinit>
 8006822:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <__swsetup_r+0xd0>)
 8006824:	429c      	cmp	r4, r3
 8006826:	d10f      	bne.n	8006848 <__swsetup_r+0x3c>
 8006828:	686c      	ldr	r4, [r5, #4]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006830:	0719      	lsls	r1, r3, #28
 8006832:	d42c      	bmi.n	800688e <__swsetup_r+0x82>
 8006834:	06dd      	lsls	r5, r3, #27
 8006836:	d411      	bmi.n	800685c <__swsetup_r+0x50>
 8006838:	2309      	movs	r3, #9
 800683a:	6033      	str	r3, [r6, #0]
 800683c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	f04f 30ff 	mov.w	r0, #4294967295
 8006846:	e03e      	b.n	80068c6 <__swsetup_r+0xba>
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <__swsetup_r+0xd4>)
 800684a:	429c      	cmp	r4, r3
 800684c:	d101      	bne.n	8006852 <__swsetup_r+0x46>
 800684e:	68ac      	ldr	r4, [r5, #8]
 8006850:	e7eb      	b.n	800682a <__swsetup_r+0x1e>
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <__swsetup_r+0xd8>)
 8006854:	429c      	cmp	r4, r3
 8006856:	bf08      	it	eq
 8006858:	68ec      	ldreq	r4, [r5, #12]
 800685a:	e7e6      	b.n	800682a <__swsetup_r+0x1e>
 800685c:	0758      	lsls	r0, r3, #29
 800685e:	d512      	bpl.n	8006886 <__swsetup_r+0x7a>
 8006860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006862:	b141      	cbz	r1, 8006876 <__swsetup_r+0x6a>
 8006864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006868:	4299      	cmp	r1, r3
 800686a:	d002      	beq.n	8006872 <__swsetup_r+0x66>
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff fb6f 	bl	8005f50 <_free_r>
 8006872:	2300      	movs	r3, #0
 8006874:	6363      	str	r3, [r4, #52]	; 0x34
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	2300      	movs	r3, #0
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f043 0308 	orr.w	r3, r3, #8
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	b94b      	cbnz	r3, 80068a6 <__swsetup_r+0x9a>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d003      	beq.n	80068a6 <__swsetup_r+0x9a>
 800689e:	4621      	mov	r1, r4
 80068a0:	4630      	mov	r0, r6
 80068a2:	f000 fa07 	bl	8006cb4 <__smakebuf_r>
 80068a6:	89a0      	ldrh	r0, [r4, #12]
 80068a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ac:	f010 0301 	ands.w	r3, r0, #1
 80068b0:	d00a      	beq.n	80068c8 <__swsetup_r+0xbc>
 80068b2:	2300      	movs	r3, #0
 80068b4:	60a3      	str	r3, [r4, #8]
 80068b6:	6963      	ldr	r3, [r4, #20]
 80068b8:	425b      	negs	r3, r3
 80068ba:	61a3      	str	r3, [r4, #24]
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	b943      	cbnz	r3, 80068d2 <__swsetup_r+0xc6>
 80068c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068c4:	d1ba      	bne.n	800683c <__swsetup_r+0x30>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	0781      	lsls	r1, r0, #30
 80068ca:	bf58      	it	pl
 80068cc:	6963      	ldrpl	r3, [r4, #20]
 80068ce:	60a3      	str	r3, [r4, #8]
 80068d0:	e7f4      	b.n	80068bc <__swsetup_r+0xb0>
 80068d2:	2000      	movs	r0, #0
 80068d4:	e7f7      	b.n	80068c6 <__swsetup_r+0xba>
 80068d6:	bf00      	nop
 80068d8:	20000010 	.word	0x20000010
 80068dc:	080082bc 	.word	0x080082bc
 80068e0:	080082dc 	.word	0x080082dc
 80068e4:	0800829c 	.word	0x0800829c

080068e8 <abort>:
 80068e8:	b508      	push	{r3, lr}
 80068ea:	2006      	movs	r0, #6
 80068ec:	f000 fa52 	bl	8006d94 <raise>
 80068f0:	2001      	movs	r0, #1
 80068f2:	f7fb f823 	bl	800193c <_exit>
	...

080068f8 <__sflush_r>:
 80068f8:	898a      	ldrh	r2, [r1, #12]
 80068fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fe:	4605      	mov	r5, r0
 8006900:	0710      	lsls	r0, r2, #28
 8006902:	460c      	mov	r4, r1
 8006904:	d458      	bmi.n	80069b8 <__sflush_r+0xc0>
 8006906:	684b      	ldr	r3, [r1, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	dc05      	bgt.n	8006918 <__sflush_r+0x20>
 800690c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	dc02      	bgt.n	8006918 <__sflush_r+0x20>
 8006912:	2000      	movs	r0, #0
 8006914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800691a:	2e00      	cmp	r6, #0
 800691c:	d0f9      	beq.n	8006912 <__sflush_r+0x1a>
 800691e:	2300      	movs	r3, #0
 8006920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006924:	682f      	ldr	r7, [r5, #0]
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	d032      	beq.n	8006990 <__sflush_r+0x98>
 800692a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	075a      	lsls	r2, r3, #29
 8006930:	d505      	bpl.n	800693e <__sflush_r+0x46>
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	1ac0      	subs	r0, r0, r3
 8006936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006938:	b10b      	cbz	r3, 800693e <__sflush_r+0x46>
 800693a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800693c:	1ac0      	subs	r0, r0, r3
 800693e:	2300      	movs	r3, #0
 8006940:	4602      	mov	r2, r0
 8006942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006944:	6a21      	ldr	r1, [r4, #32]
 8006946:	4628      	mov	r0, r5
 8006948:	47b0      	blx	r6
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	d106      	bne.n	800695e <__sflush_r+0x66>
 8006950:	6829      	ldr	r1, [r5, #0]
 8006952:	291d      	cmp	r1, #29
 8006954:	d82c      	bhi.n	80069b0 <__sflush_r+0xb8>
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <__sflush_r+0x108>)
 8006958:	40ca      	lsrs	r2, r1
 800695a:	07d6      	lsls	r6, r2, #31
 800695c:	d528      	bpl.n	80069b0 <__sflush_r+0xb8>
 800695e:	2200      	movs	r2, #0
 8006960:	6062      	str	r2, [r4, #4]
 8006962:	04d9      	lsls	r1, r3, #19
 8006964:	6922      	ldr	r2, [r4, #16]
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	d504      	bpl.n	8006974 <__sflush_r+0x7c>
 800696a:	1c42      	adds	r2, r0, #1
 800696c:	d101      	bne.n	8006972 <__sflush_r+0x7a>
 800696e:	682b      	ldr	r3, [r5, #0]
 8006970:	b903      	cbnz	r3, 8006974 <__sflush_r+0x7c>
 8006972:	6560      	str	r0, [r4, #84]	; 0x54
 8006974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006976:	602f      	str	r7, [r5, #0]
 8006978:	2900      	cmp	r1, #0
 800697a:	d0ca      	beq.n	8006912 <__sflush_r+0x1a>
 800697c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006980:	4299      	cmp	r1, r3
 8006982:	d002      	beq.n	800698a <__sflush_r+0x92>
 8006984:	4628      	mov	r0, r5
 8006986:	f7ff fae3 	bl	8005f50 <_free_r>
 800698a:	2000      	movs	r0, #0
 800698c:	6360      	str	r0, [r4, #52]	; 0x34
 800698e:	e7c1      	b.n	8006914 <__sflush_r+0x1c>
 8006990:	6a21      	ldr	r1, [r4, #32]
 8006992:	2301      	movs	r3, #1
 8006994:	4628      	mov	r0, r5
 8006996:	47b0      	blx	r6
 8006998:	1c41      	adds	r1, r0, #1
 800699a:	d1c7      	bne.n	800692c <__sflush_r+0x34>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0c4      	beq.n	800692c <__sflush_r+0x34>
 80069a2:	2b1d      	cmp	r3, #29
 80069a4:	d001      	beq.n	80069aa <__sflush_r+0xb2>
 80069a6:	2b16      	cmp	r3, #22
 80069a8:	d101      	bne.n	80069ae <__sflush_r+0xb6>
 80069aa:	602f      	str	r7, [r5, #0]
 80069ac:	e7b1      	b.n	8006912 <__sflush_r+0x1a>
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	e7ad      	b.n	8006914 <__sflush_r+0x1c>
 80069b8:	690f      	ldr	r7, [r1, #16]
 80069ba:	2f00      	cmp	r7, #0
 80069bc:	d0a9      	beq.n	8006912 <__sflush_r+0x1a>
 80069be:	0793      	lsls	r3, r2, #30
 80069c0:	680e      	ldr	r6, [r1, #0]
 80069c2:	bf08      	it	eq
 80069c4:	694b      	ldreq	r3, [r1, #20]
 80069c6:	600f      	str	r7, [r1, #0]
 80069c8:	bf18      	it	ne
 80069ca:	2300      	movne	r3, #0
 80069cc:	eba6 0807 	sub.w	r8, r6, r7
 80069d0:	608b      	str	r3, [r1, #8]
 80069d2:	f1b8 0f00 	cmp.w	r8, #0
 80069d6:	dd9c      	ble.n	8006912 <__sflush_r+0x1a>
 80069d8:	6a21      	ldr	r1, [r4, #32]
 80069da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069dc:	4643      	mov	r3, r8
 80069de:	463a      	mov	r2, r7
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b0      	blx	r6
 80069e4:	2800      	cmp	r0, #0
 80069e6:	dc06      	bgt.n	80069f6 <__sflush_r+0xfe>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e78e      	b.n	8006914 <__sflush_r+0x1c>
 80069f6:	4407      	add	r7, r0
 80069f8:	eba8 0800 	sub.w	r8, r8, r0
 80069fc:	e7e9      	b.n	80069d2 <__sflush_r+0xda>
 80069fe:	bf00      	nop
 8006a00:	20400001 	.word	0x20400001

08006a04 <_fflush_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	690b      	ldr	r3, [r1, #16]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	b913      	cbnz	r3, 8006a14 <_fflush_r+0x10>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	4628      	mov	r0, r5
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	b118      	cbz	r0, 8006a1e <_fflush_r+0x1a>
 8006a16:	6983      	ldr	r3, [r0, #24]
 8006a18:	b90b      	cbnz	r3, 8006a1e <_fflush_r+0x1a>
 8006a1a:	f000 f887 	bl	8006b2c <__sinit>
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <_fflush_r+0x6c>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d11b      	bne.n	8006a5c <_fflush_r+0x58>
 8006a24:	686c      	ldr	r4, [r5, #4]
 8006a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0ef      	beq.n	8006a0e <_fflush_r+0xa>
 8006a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a30:	07d0      	lsls	r0, r2, #31
 8006a32:	d404      	bmi.n	8006a3e <_fflush_r+0x3a>
 8006a34:	0599      	lsls	r1, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_fflush_r+0x3a>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f000 f915 	bl	8006c68 <__retarget_lock_acquire_recursive>
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4621      	mov	r1, r4
 8006a42:	f7ff ff59 	bl	80068f8 <__sflush_r>
 8006a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a48:	07da      	lsls	r2, r3, #31
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	d4e0      	bmi.n	8006a10 <_fflush_r+0xc>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	059b      	lsls	r3, r3, #22
 8006a52:	d4dd      	bmi.n	8006a10 <_fflush_r+0xc>
 8006a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a56:	f000 f908 	bl	8006c6a <__retarget_lock_release_recursive>
 8006a5a:	e7d9      	b.n	8006a10 <_fflush_r+0xc>
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <_fflush_r+0x70>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d101      	bne.n	8006a66 <_fflush_r+0x62>
 8006a62:	68ac      	ldr	r4, [r5, #8]
 8006a64:	e7df      	b.n	8006a26 <_fflush_r+0x22>
 8006a66:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <_fflush_r+0x74>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	bf08      	it	eq
 8006a6c:	68ec      	ldreq	r4, [r5, #12]
 8006a6e:	e7da      	b.n	8006a26 <_fflush_r+0x22>
 8006a70:	080082bc 	.word	0x080082bc
 8006a74:	080082dc 	.word	0x080082dc
 8006a78:	0800829c 	.word	0x0800829c

08006a7c <std>:
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	4604      	mov	r4, r0
 8006a82:	e9c0 3300 	strd	r3, r3, [r0]
 8006a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a8a:	6083      	str	r3, [r0, #8]
 8006a8c:	8181      	strh	r1, [r0, #12]
 8006a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a90:	81c2      	strh	r2, [r0, #14]
 8006a92:	6183      	str	r3, [r0, #24]
 8006a94:	4619      	mov	r1, r3
 8006a96:	2208      	movs	r2, #8
 8006a98:	305c      	adds	r0, #92	; 0x5c
 8006a9a:	f7fd fba5 	bl	80041e8 <memset>
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <std+0x38>)
 8006aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <std+0x3c>)
 8006aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <std+0x40>)
 8006aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <std+0x44>)
 8006aac:	6224      	str	r4, [r4, #32]
 8006aae:	6323      	str	r3, [r4, #48]	; 0x30
 8006ab0:	bd10      	pop	{r4, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08006dcd 	.word	0x08006dcd
 8006ab8:	08006def 	.word	0x08006def
 8006abc:	08006e27 	.word	0x08006e27
 8006ac0:	08006e4b 	.word	0x08006e4b

08006ac4 <_cleanup_r>:
 8006ac4:	4901      	ldr	r1, [pc, #4]	; (8006acc <_cleanup_r+0x8>)
 8006ac6:	f000 b8af 	b.w	8006c28 <_fwalk_reent>
 8006aca:	bf00      	nop
 8006acc:	08006a05 	.word	0x08006a05

08006ad0 <__sfmoreglue>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	1e4a      	subs	r2, r1, #1
 8006ad4:	2568      	movs	r5, #104	; 0x68
 8006ad6:	4355      	muls	r5, r2
 8006ad8:	460e      	mov	r6, r1
 8006ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ade:	f7ff fa87 	bl	8005ff0 <_malloc_r>
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	b140      	cbz	r0, 8006af8 <__sfmoreglue+0x28>
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8006aec:	300c      	adds	r0, #12
 8006aee:	60a0      	str	r0, [r4, #8]
 8006af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006af4:	f7fd fb78 	bl	80041e8 <memset>
 8006af8:	4620      	mov	r0, r4
 8006afa:	bd70      	pop	{r4, r5, r6, pc}

08006afc <__sfp_lock_acquire>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__sfp_lock_acquire+0x8>)
 8006afe:	f000 b8b3 	b.w	8006c68 <__retarget_lock_acquire_recursive>
 8006b02:	bf00      	nop
 8006b04:	200002d0 	.word	0x200002d0

08006b08 <__sfp_lock_release>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sfp_lock_release+0x8>)
 8006b0a:	f000 b8ae 	b.w	8006c6a <__retarget_lock_release_recursive>
 8006b0e:	bf00      	nop
 8006b10:	200002d0 	.word	0x200002d0

08006b14 <__sinit_lock_acquire>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sinit_lock_acquire+0x8>)
 8006b16:	f000 b8a7 	b.w	8006c68 <__retarget_lock_acquire_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	200002cb 	.word	0x200002cb

08006b20 <__sinit_lock_release>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sinit_lock_release+0x8>)
 8006b22:	f000 b8a2 	b.w	8006c6a <__retarget_lock_release_recursive>
 8006b26:	bf00      	nop
 8006b28:	200002cb 	.word	0x200002cb

08006b2c <__sinit>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7ff fff0 	bl	8006b14 <__sinit_lock_acquire>
 8006b34:	69a3      	ldr	r3, [r4, #24]
 8006b36:	b11b      	cbz	r3, 8006b40 <__sinit+0x14>
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f7ff bff0 	b.w	8006b20 <__sinit_lock_release>
 8006b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b44:	6523      	str	r3, [r4, #80]	; 0x50
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <__sinit+0x68>)
 8006b48:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <__sinit+0x6c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	bf04      	itt	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	61a3      	streq	r3, [r4, #24]
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 f820 	bl	8006b9c <__sfp>
 8006b5c:	6060      	str	r0, [r4, #4]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 f81c 	bl	8006b9c <__sfp>
 8006b64:	60a0      	str	r0, [r4, #8]
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 f818 	bl	8006b9c <__sfp>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	60e0      	str	r0, [r4, #12]
 8006b70:	2104      	movs	r1, #4
 8006b72:	6860      	ldr	r0, [r4, #4]
 8006b74:	f7ff ff82 	bl	8006a7c <std>
 8006b78:	68a0      	ldr	r0, [r4, #8]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2109      	movs	r1, #9
 8006b7e:	f7ff ff7d 	bl	8006a7c <std>
 8006b82:	68e0      	ldr	r0, [r4, #12]
 8006b84:	2202      	movs	r2, #2
 8006b86:	2112      	movs	r1, #18
 8006b88:	f7ff ff78 	bl	8006a7c <std>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61a3      	str	r3, [r4, #24]
 8006b90:	e7d2      	b.n	8006b38 <__sinit+0xc>
 8006b92:	bf00      	nop
 8006b94:	08007f18 	.word	0x08007f18
 8006b98:	08006ac5 	.word	0x08006ac5

08006b9c <__sfp>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	f7ff ffac 	bl	8006afc <__sfp_lock_acquire>
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <__sfp+0x84>)
 8006ba6:	681e      	ldr	r6, [r3, #0]
 8006ba8:	69b3      	ldr	r3, [r6, #24]
 8006baa:	b913      	cbnz	r3, 8006bb2 <__sfp+0x16>
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff ffbd 	bl	8006b2c <__sinit>
 8006bb2:	3648      	adds	r6, #72	; 0x48
 8006bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	d503      	bpl.n	8006bc4 <__sfp+0x28>
 8006bbc:	6833      	ldr	r3, [r6, #0]
 8006bbe:	b30b      	cbz	r3, 8006c04 <__sfp+0x68>
 8006bc0:	6836      	ldr	r6, [r6, #0]
 8006bc2:	e7f7      	b.n	8006bb4 <__sfp+0x18>
 8006bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bc8:	b9d5      	cbnz	r5, 8006c00 <__sfp+0x64>
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <__sfp+0x88>)
 8006bcc:	60e3      	str	r3, [r4, #12]
 8006bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006bd4:	f000 f847 	bl	8006c66 <__retarget_lock_init_recursive>
 8006bd8:	f7ff ff96 	bl	8006b08 <__sfp_lock_release>
 8006bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006be4:	6025      	str	r5, [r4, #0]
 8006be6:	61a5      	str	r5, [r4, #24]
 8006be8:	2208      	movs	r2, #8
 8006bea:	4629      	mov	r1, r5
 8006bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bf0:	f7fd fafa 	bl	80041e8 <memset>
 8006bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	3468      	adds	r4, #104	; 0x68
 8006c02:	e7d9      	b.n	8006bb8 <__sfp+0x1c>
 8006c04:	2104      	movs	r1, #4
 8006c06:	4638      	mov	r0, r7
 8006c08:	f7ff ff62 	bl	8006ad0 <__sfmoreglue>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	6030      	str	r0, [r6, #0]
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1d5      	bne.n	8006bc0 <__sfp+0x24>
 8006c14:	f7ff ff78 	bl	8006b08 <__sfp_lock_release>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	e7ee      	b.n	8006bfc <__sfp+0x60>
 8006c1e:	bf00      	nop
 8006c20:	08007f18 	.word	0x08007f18
 8006c24:	ffff0001 	.word	0xffff0001

08006c28 <_fwalk_reent>:
 8006c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	4688      	mov	r8, r1
 8006c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c34:	2700      	movs	r7, #0
 8006c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c3e:	d505      	bpl.n	8006c4c <_fwalk_reent+0x24>
 8006c40:	6824      	ldr	r4, [r4, #0]
 8006c42:	2c00      	cmp	r4, #0
 8006c44:	d1f7      	bne.n	8006c36 <_fwalk_reent+0xe>
 8006c46:	4638      	mov	r0, r7
 8006c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4c:	89ab      	ldrh	r3, [r5, #12]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d907      	bls.n	8006c62 <_fwalk_reent+0x3a>
 8006c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c56:	3301      	adds	r3, #1
 8006c58:	d003      	beq.n	8006c62 <_fwalk_reent+0x3a>
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	47c0      	blx	r8
 8006c60:	4307      	orrs	r7, r0
 8006c62:	3568      	adds	r5, #104	; 0x68
 8006c64:	e7e9      	b.n	8006c3a <_fwalk_reent+0x12>

08006c66 <__retarget_lock_init_recursive>:
 8006c66:	4770      	bx	lr

08006c68 <__retarget_lock_acquire_recursive>:
 8006c68:	4770      	bx	lr

08006c6a <__retarget_lock_release_recursive>:
 8006c6a:	4770      	bx	lr

08006c6c <__swhatbuf_r>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	460e      	mov	r6, r1
 8006c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c74:	2900      	cmp	r1, #0
 8006c76:	b096      	sub	sp, #88	; 0x58
 8006c78:	4614      	mov	r4, r2
 8006c7a:	461d      	mov	r5, r3
 8006c7c:	da07      	bge.n	8006c8e <__swhatbuf_r+0x22>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	89b3      	ldrh	r3, [r6, #12]
 8006c84:	061a      	lsls	r2, r3, #24
 8006c86:	d410      	bmi.n	8006caa <__swhatbuf_r+0x3e>
 8006c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c8c:	e00e      	b.n	8006cac <__swhatbuf_r+0x40>
 8006c8e:	466a      	mov	r2, sp
 8006c90:	f000 f902 	bl	8006e98 <_fstat_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dbf2      	blt.n	8006c7e <__swhatbuf_r+0x12>
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ca2:	425a      	negs	r2, r3
 8006ca4:	415a      	adcs	r2, r3
 8006ca6:	602a      	str	r2, [r5, #0]
 8006ca8:	e7ee      	b.n	8006c88 <__swhatbuf_r+0x1c>
 8006caa:	2340      	movs	r3, #64	; 0x40
 8006cac:	2000      	movs	r0, #0
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	b016      	add	sp, #88	; 0x58
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}

08006cb4 <__smakebuf_r>:
 8006cb4:	898b      	ldrh	r3, [r1, #12]
 8006cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cb8:	079d      	lsls	r5, r3, #30
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	d507      	bpl.n	8006cd0 <__smakebuf_r+0x1c>
 8006cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	6163      	str	r3, [r4, #20]
 8006ccc:	b002      	add	sp, #8
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	ab01      	add	r3, sp, #4
 8006cd2:	466a      	mov	r2, sp
 8006cd4:	f7ff ffca 	bl	8006c6c <__swhatbuf_r>
 8006cd8:	9900      	ldr	r1, [sp, #0]
 8006cda:	4605      	mov	r5, r0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff f987 	bl	8005ff0 <_malloc_r>
 8006ce2:	b948      	cbnz	r0, 8006cf8 <__smakebuf_r+0x44>
 8006ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d4ef      	bmi.n	8006ccc <__smakebuf_r+0x18>
 8006cec:	f023 0303 	bic.w	r3, r3, #3
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	e7e3      	b.n	8006cc0 <__smakebuf_r+0xc>
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <__smakebuf_r+0x7c>)
 8006cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	6020      	str	r0, [r4, #0]
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	6163      	str	r3, [r4, #20]
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	6120      	str	r0, [r4, #16]
 8006d0e:	b15b      	cbz	r3, 8006d28 <__smakebuf_r+0x74>
 8006d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d14:	4630      	mov	r0, r6
 8006d16:	f000 f8d1 	bl	8006ebc <_isatty_r>
 8006d1a:	b128      	cbz	r0, 8006d28 <__smakebuf_r+0x74>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	89a0      	ldrh	r0, [r4, #12]
 8006d2a:	4305      	orrs	r5, r0
 8006d2c:	81a5      	strh	r5, [r4, #12]
 8006d2e:	e7cd      	b.n	8006ccc <__smakebuf_r+0x18>
 8006d30:	08006ac5 	.word	0x08006ac5

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_raise_r>:
 8006d44:	291f      	cmp	r1, #31
 8006d46:	b538      	push	{r3, r4, r5, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	d904      	bls.n	8006d58 <_raise_r+0x14>
 8006d4e:	2316      	movs	r3, #22
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d5a:	b112      	cbz	r2, 8006d62 <_raise_r+0x1e>
 8006d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d60:	b94b      	cbnz	r3, 8006d76 <_raise_r+0x32>
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f830 	bl	8006dc8 <_getpid_r>
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d72:	f000 b817 	b.w	8006da4 <_kill_r>
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d00a      	beq.n	8006d90 <_raise_r+0x4c>
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	d103      	bne.n	8006d86 <_raise_r+0x42>
 8006d7e:	2316      	movs	r3, #22
 8006d80:	6003      	str	r3, [r0, #0]
 8006d82:	2001      	movs	r0, #1
 8006d84:	e7e7      	b.n	8006d56 <_raise_r+0x12>
 8006d86:	2400      	movs	r4, #0
 8006d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	4798      	blx	r3
 8006d90:	2000      	movs	r0, #0
 8006d92:	e7e0      	b.n	8006d56 <_raise_r+0x12>

08006d94 <raise>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <raise+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f7ff bfd3 	b.w	8006d44 <_raise_r>
 8006d9e:	bf00      	nop
 8006da0:	20000010 	.word	0x20000010

08006da4 <_kill_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	; (8006dc4 <_kill_r+0x20>)
 8006da8:	2300      	movs	r3, #0
 8006daa:	4604      	mov	r4, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	f7fa fdb3 	bl	800191c <_kill>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d102      	bne.n	8006dc0 <_kill_r+0x1c>
 8006dba:	682b      	ldr	r3, [r5, #0]
 8006dbc:	b103      	cbz	r3, 8006dc0 <_kill_r+0x1c>
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	bd38      	pop	{r3, r4, r5, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200002c4 	.word	0x200002c4

08006dc8 <_getpid_r>:
 8006dc8:	f7fa bda0 	b.w	800190c <_getpid>

08006dcc <__sread>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	460c      	mov	r4, r1
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	f000 f894 	bl	8006f00 <_read_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	bfab      	itete	ge
 8006ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dde:	89a3      	ldrhlt	r3, [r4, #12]
 8006de0:	181b      	addge	r3, r3, r0
 8006de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006de6:	bfac      	ite	ge
 8006de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dea:	81a3      	strhlt	r3, [r4, #12]
 8006dec:	bd10      	pop	{r4, pc}

08006dee <__swrite>:
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	461f      	mov	r7, r3
 8006df4:	898b      	ldrh	r3, [r1, #12]
 8006df6:	05db      	lsls	r3, r3, #23
 8006df8:	4605      	mov	r5, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	d505      	bpl.n	8006e0c <__swrite+0x1e>
 8006e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e04:	2302      	movs	r3, #2
 8006e06:	2200      	movs	r2, #0
 8006e08:	f000 f868 	bl	8006edc <_lseek_r>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	4632      	mov	r2, r6
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	f000 b817 	b.w	8006e54 <_write_r>

08006e26 <__sseek>:
 8006e26:	b510      	push	{r4, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 f855 	bl	8006edc <_lseek_r>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	bf15      	itete	ne
 8006e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e42:	81a3      	strheq	r3, [r4, #12]
 8006e44:	bf18      	it	ne
 8006e46:	81a3      	strhne	r3, [r4, #12]
 8006e48:	bd10      	pop	{r4, pc}

08006e4a <__sclose>:
 8006e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4e:	f000 b813 	b.w	8006e78 <_close_r>
	...

08006e54 <_write_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d07      	ldr	r5, [pc, #28]	; (8006e74 <_write_r+0x20>)
 8006e58:	4604      	mov	r4, r0
 8006e5a:	4608      	mov	r0, r1
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f7fa fd91 	bl	800198a <_write>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_write_r+0x1e>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_write_r+0x1e>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	200002c4 	.word	0x200002c4

08006e78 <_close_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d06      	ldr	r5, [pc, #24]	; (8006e94 <_close_r+0x1c>)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	f7fa fd9d 	bl	80019c2 <_close>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_close_r+0x1a>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_close_r+0x1a>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	200002c4 	.word	0x200002c4

08006e98 <_fstat_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d07      	ldr	r5, [pc, #28]	; (8006eb8 <_fstat_r+0x20>)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f7fa fd98 	bl	80019da <_fstat>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	d102      	bne.n	8006eb4 <_fstat_r+0x1c>
 8006eae:	682b      	ldr	r3, [r5, #0]
 8006eb0:	b103      	cbz	r3, 8006eb4 <_fstat_r+0x1c>
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200002c4 	.word	0x200002c4

08006ebc <_isatty_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d06      	ldr	r5, [pc, #24]	; (8006ed8 <_isatty_r+0x1c>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	f7fa fd97 	bl	80019fa <_isatty>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_isatty_r+0x1a>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_isatty_r+0x1a>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	200002c4 	.word	0x200002c4

08006edc <_lseek_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d07      	ldr	r5, [pc, #28]	; (8006efc <_lseek_r+0x20>)
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7fa fd90 	bl	8001a10 <_lseek>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_lseek_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_lseek_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	200002c4 	.word	0x200002c4

08006f00 <_read_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_read_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7fa fd1e 	bl	8001950 <_read>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_read_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_read_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	200002c4 	.word	0x200002c4

08006f24 <pow>:
 8006f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	ec59 8b10 	vmov	r8, r9, d0
 8006f2c:	ec57 6b11 	vmov	r6, r7, d1
 8006f30:	f000 f8a6 	bl	8007080 <__ieee754_pow>
 8006f34:	4b4e      	ldr	r3, [pc, #312]	; (8007070 <pow+0x14c>)
 8006f36:	f993 3000 	ldrsb.w	r3, [r3]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	ec55 4b10 	vmov	r4, r5, d0
 8006f40:	d015      	beq.n	8006f6e <pow+0x4a>
 8006f42:	4632      	mov	r2, r6
 8006f44:	463b      	mov	r3, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fe0f 	bl	8000b6c <__aeabi_dcmpun>
 8006f4e:	b970      	cbnz	r0, 8006f6e <pow+0x4a>
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	4649      	mov	r1, r9
 8006f58:	f7f9 fe08 	bl	8000b6c <__aeabi_dcmpun>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	b148      	cbz	r0, 8006f76 <pow+0x52>
 8006f62:	4630      	mov	r0, r6
 8006f64:	4639      	mov	r1, r7
 8006f66:	f7f9 fdcf 	bl	8000b08 <__aeabi_dcmpeq>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d17d      	bne.n	800706a <pow+0x146>
 8006f6e:	ec45 4b10 	vmov	d0, r4, r5
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f7e:	b1e0      	cbz	r0, 8006fba <pow+0x96>
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d16c      	bne.n	800706a <pow+0x146>
 8006f90:	ec47 6b10 	vmov	d0, r6, r7
 8006f94:	f000 fe53 	bl	8007c3e <finite>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0e8      	beq.n	8006f6e <pow+0x4a>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 fdba 	bl	8000b1c <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d0e0      	beq.n	8006f6e <pow+0x4a>
 8006fac:	f7fd f8f2 	bl	8004194 <__errno>
 8006fb0:	2321      	movs	r3, #33	; 0x21
 8006fb2:	6003      	str	r3, [r0, #0]
 8006fb4:	2400      	movs	r4, #0
 8006fb6:	4d2f      	ldr	r5, [pc, #188]	; (8007074 <pow+0x150>)
 8006fb8:	e7d9      	b.n	8006f6e <pow+0x4a>
 8006fba:	ec45 4b10 	vmov	d0, r4, r5
 8006fbe:	f000 fe3e 	bl	8007c3e <finite>
 8006fc2:	bbb8      	cbnz	r0, 8007034 <pow+0x110>
 8006fc4:	ec49 8b10 	vmov	d0, r8, r9
 8006fc8:	f000 fe39 	bl	8007c3e <finite>
 8006fcc:	b390      	cbz	r0, 8007034 <pow+0x110>
 8006fce:	ec47 6b10 	vmov	d0, r6, r7
 8006fd2:	f000 fe34 	bl	8007c3e <finite>
 8006fd6:	b368      	cbz	r0, 8007034 <pow+0x110>
 8006fd8:	4622      	mov	r2, r4
 8006fda:	462b      	mov	r3, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 fdc4 	bl	8000b6c <__aeabi_dcmpun>
 8006fe4:	b160      	cbz	r0, 8007000 <pow+0xdc>
 8006fe6:	f7fd f8d5 	bl	8004194 <__errno>
 8006fea:	2321      	movs	r3, #33	; 0x21
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7f9 fc49 	bl	800088c <__aeabi_ddiv>
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	e7b6      	b.n	8006f6e <pow+0x4a>
 8007000:	f7fd f8c8 	bl	8004194 <__errno>
 8007004:	2322      	movs	r3, #34	; 0x22
 8007006:	6003      	str	r3, [r0, #0]
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fd84 	bl	8000b1c <__aeabi_dcmplt>
 8007014:	2400      	movs	r4, #0
 8007016:	b158      	cbz	r0, 8007030 <pow+0x10c>
 8007018:	ec47 6b10 	vmov	d0, r6, r7
 800701c:	f000 fe24 	bl	8007c68 <rint>
 8007020:	4632      	mov	r2, r6
 8007022:	ec51 0b10 	vmov	r0, r1, d0
 8007026:	463b      	mov	r3, r7
 8007028:	f7f9 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d0c2      	beq.n	8006fb6 <pow+0x92>
 8007030:	4d11      	ldr	r5, [pc, #68]	; (8007078 <pow+0x154>)
 8007032:	e79c      	b.n	8006f6e <pow+0x4a>
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 fd64 	bl	8000b08 <__aeabi_dcmpeq>
 8007040:	2800      	cmp	r0, #0
 8007042:	d094      	beq.n	8006f6e <pow+0x4a>
 8007044:	ec49 8b10 	vmov	d0, r8, r9
 8007048:	f000 fdf9 	bl	8007c3e <finite>
 800704c:	2800      	cmp	r0, #0
 800704e:	d08e      	beq.n	8006f6e <pow+0x4a>
 8007050:	ec47 6b10 	vmov	d0, r6, r7
 8007054:	f000 fdf3 	bl	8007c3e <finite>
 8007058:	2800      	cmp	r0, #0
 800705a:	d088      	beq.n	8006f6e <pow+0x4a>
 800705c:	f7fd f89a 	bl	8004194 <__errno>
 8007060:	2322      	movs	r3, #34	; 0x22
 8007062:	6003      	str	r3, [r0, #0]
 8007064:	2400      	movs	r4, #0
 8007066:	2500      	movs	r5, #0
 8007068:	e781      	b.n	8006f6e <pow+0x4a>
 800706a:	4d04      	ldr	r5, [pc, #16]	; (800707c <pow+0x158>)
 800706c:	2400      	movs	r4, #0
 800706e:	e77e      	b.n	8006f6e <pow+0x4a>
 8007070:	200001e0 	.word	0x200001e0
 8007074:	fff00000 	.word	0xfff00000
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	3ff00000 	.word	0x3ff00000

08007080 <__ieee754_pow>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b06 	vpush	{d8-d10}
 8007088:	b08d      	sub	sp, #52	; 0x34
 800708a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800708e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007092:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007096:	ea56 0100 	orrs.w	r1, r6, r0
 800709a:	ec53 2b10 	vmov	r2, r3, d0
 800709e:	f000 84d1 	beq.w	8007a44 <__ieee754_pow+0x9c4>
 80070a2:	497f      	ldr	r1, [pc, #508]	; (80072a0 <__ieee754_pow+0x220>)
 80070a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80070a8:	428c      	cmp	r4, r1
 80070aa:	ee10 8a10 	vmov	r8, s0
 80070ae:	4699      	mov	r9, r3
 80070b0:	dc09      	bgt.n	80070c6 <__ieee754_pow+0x46>
 80070b2:	d103      	bne.n	80070bc <__ieee754_pow+0x3c>
 80070b4:	b97a      	cbnz	r2, 80070d6 <__ieee754_pow+0x56>
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	dd02      	ble.n	80070c0 <__ieee754_pow+0x40>
 80070ba:	e00c      	b.n	80070d6 <__ieee754_pow+0x56>
 80070bc:	428e      	cmp	r6, r1
 80070be:	dc02      	bgt.n	80070c6 <__ieee754_pow+0x46>
 80070c0:	428e      	cmp	r6, r1
 80070c2:	d110      	bne.n	80070e6 <__ieee754_pow+0x66>
 80070c4:	b178      	cbz	r0, 80070e6 <__ieee754_pow+0x66>
 80070c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80070ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070ce:	ea54 0308 	orrs.w	r3, r4, r8
 80070d2:	f000 84b7 	beq.w	8007a44 <__ieee754_pow+0x9c4>
 80070d6:	4873      	ldr	r0, [pc, #460]	; (80072a4 <__ieee754_pow+0x224>)
 80070d8:	b00d      	add	sp, #52	; 0x34
 80070da:	ecbd 8b06 	vpop	{d8-d10}
 80070de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e2:	f000 bdb9 	b.w	8007c58 <nan>
 80070e6:	f1b9 0f00 	cmp.w	r9, #0
 80070ea:	da36      	bge.n	800715a <__ieee754_pow+0xda>
 80070ec:	496e      	ldr	r1, [pc, #440]	; (80072a8 <__ieee754_pow+0x228>)
 80070ee:	428e      	cmp	r6, r1
 80070f0:	dc51      	bgt.n	8007196 <__ieee754_pow+0x116>
 80070f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80070f6:	428e      	cmp	r6, r1
 80070f8:	f340 84af 	ble.w	8007a5a <__ieee754_pow+0x9da>
 80070fc:	1531      	asrs	r1, r6, #20
 80070fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007102:	2914      	cmp	r1, #20
 8007104:	dd0f      	ble.n	8007126 <__ieee754_pow+0xa6>
 8007106:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800710a:	fa20 fc01 	lsr.w	ip, r0, r1
 800710e:	fa0c f101 	lsl.w	r1, ip, r1
 8007112:	4281      	cmp	r1, r0
 8007114:	f040 84a1 	bne.w	8007a5a <__ieee754_pow+0x9da>
 8007118:	f00c 0c01 	and.w	ip, ip, #1
 800711c:	f1cc 0102 	rsb	r1, ip, #2
 8007120:	9100      	str	r1, [sp, #0]
 8007122:	b180      	cbz	r0, 8007146 <__ieee754_pow+0xc6>
 8007124:	e059      	b.n	80071da <__ieee754_pow+0x15a>
 8007126:	2800      	cmp	r0, #0
 8007128:	d155      	bne.n	80071d6 <__ieee754_pow+0x156>
 800712a:	f1c1 0114 	rsb	r1, r1, #20
 800712e:	fa46 fc01 	asr.w	ip, r6, r1
 8007132:	fa0c f101 	lsl.w	r1, ip, r1
 8007136:	42b1      	cmp	r1, r6
 8007138:	f040 848c 	bne.w	8007a54 <__ieee754_pow+0x9d4>
 800713c:	f00c 0c01 	and.w	ip, ip, #1
 8007140:	f1cc 0102 	rsb	r1, ip, #2
 8007144:	9100      	str	r1, [sp, #0]
 8007146:	4959      	ldr	r1, [pc, #356]	; (80072ac <__ieee754_pow+0x22c>)
 8007148:	428e      	cmp	r6, r1
 800714a:	d12d      	bne.n	80071a8 <__ieee754_pow+0x128>
 800714c:	2f00      	cmp	r7, #0
 800714e:	da79      	bge.n	8007244 <__ieee754_pow+0x1c4>
 8007150:	4956      	ldr	r1, [pc, #344]	; (80072ac <__ieee754_pow+0x22c>)
 8007152:	2000      	movs	r0, #0
 8007154:	f7f9 fb9a 	bl	800088c <__aeabi_ddiv>
 8007158:	e016      	b.n	8007188 <__ieee754_pow+0x108>
 800715a:	2100      	movs	r1, #0
 800715c:	9100      	str	r1, [sp, #0]
 800715e:	2800      	cmp	r0, #0
 8007160:	d13b      	bne.n	80071da <__ieee754_pow+0x15a>
 8007162:	494f      	ldr	r1, [pc, #316]	; (80072a0 <__ieee754_pow+0x220>)
 8007164:	428e      	cmp	r6, r1
 8007166:	d1ee      	bne.n	8007146 <__ieee754_pow+0xc6>
 8007168:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800716c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007170:	ea53 0308 	orrs.w	r3, r3, r8
 8007174:	f000 8466 	beq.w	8007a44 <__ieee754_pow+0x9c4>
 8007178:	4b4d      	ldr	r3, [pc, #308]	; (80072b0 <__ieee754_pow+0x230>)
 800717a:	429c      	cmp	r4, r3
 800717c:	dd0d      	ble.n	800719a <__ieee754_pow+0x11a>
 800717e:	2f00      	cmp	r7, #0
 8007180:	f280 8464 	bge.w	8007a4c <__ieee754_pow+0x9cc>
 8007184:	2000      	movs	r0, #0
 8007186:	2100      	movs	r1, #0
 8007188:	ec41 0b10 	vmov	d0, r0, r1
 800718c:	b00d      	add	sp, #52	; 0x34
 800718e:	ecbd 8b06 	vpop	{d8-d10}
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	2102      	movs	r1, #2
 8007198:	e7e0      	b.n	800715c <__ieee754_pow+0xdc>
 800719a:	2f00      	cmp	r7, #0
 800719c:	daf2      	bge.n	8007184 <__ieee754_pow+0x104>
 800719e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80071a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80071a6:	e7ef      	b.n	8007188 <__ieee754_pow+0x108>
 80071a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80071ac:	d104      	bne.n	80071b8 <__ieee754_pow+0x138>
 80071ae:	4610      	mov	r0, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	f7f9 fa41 	bl	8000638 <__aeabi_dmul>
 80071b6:	e7e7      	b.n	8007188 <__ieee754_pow+0x108>
 80071b8:	493e      	ldr	r1, [pc, #248]	; (80072b4 <__ieee754_pow+0x234>)
 80071ba:	428f      	cmp	r7, r1
 80071bc:	d10d      	bne.n	80071da <__ieee754_pow+0x15a>
 80071be:	f1b9 0f00 	cmp.w	r9, #0
 80071c2:	db0a      	blt.n	80071da <__ieee754_pow+0x15a>
 80071c4:	ec43 2b10 	vmov	d0, r2, r3
 80071c8:	b00d      	add	sp, #52	; 0x34
 80071ca:	ecbd 8b06 	vpop	{d8-d10}
 80071ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d2:	f000 bc77 	b.w	8007ac4 <__ieee754_sqrt>
 80071d6:	2100      	movs	r1, #0
 80071d8:	9100      	str	r1, [sp, #0]
 80071da:	ec43 2b10 	vmov	d0, r2, r3
 80071de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071e2:	f000 fd23 	bl	8007c2c <fabs>
 80071e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ea:	ec51 0b10 	vmov	r0, r1, d0
 80071ee:	f1b8 0f00 	cmp.w	r8, #0
 80071f2:	d12a      	bne.n	800724a <__ieee754_pow+0x1ca>
 80071f4:	b12c      	cbz	r4, 8007202 <__ieee754_pow+0x182>
 80071f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80072ac <__ieee754_pow+0x22c>
 80071fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80071fe:	45e6      	cmp	lr, ip
 8007200:	d123      	bne.n	800724a <__ieee754_pow+0x1ca>
 8007202:	2f00      	cmp	r7, #0
 8007204:	da05      	bge.n	8007212 <__ieee754_pow+0x192>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	2000      	movs	r0, #0
 800720c:	4927      	ldr	r1, [pc, #156]	; (80072ac <__ieee754_pow+0x22c>)
 800720e:	f7f9 fb3d 	bl	800088c <__aeabi_ddiv>
 8007212:	f1b9 0f00 	cmp.w	r9, #0
 8007216:	dab7      	bge.n	8007188 <__ieee754_pow+0x108>
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800721e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007222:	4323      	orrs	r3, r4
 8007224:	d108      	bne.n	8007238 <__ieee754_pow+0x1b8>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4610      	mov	r0, r2
 800722c:	4619      	mov	r1, r3
 800722e:	f7f9 f84b 	bl	80002c8 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e78d      	b.n	8007154 <__ieee754_pow+0xd4>
 8007238:	9b00      	ldr	r3, [sp, #0]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d1a4      	bne.n	8007188 <__ieee754_pow+0x108>
 800723e:	4602      	mov	r2, r0
 8007240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007244:	4610      	mov	r0, r2
 8007246:	4619      	mov	r1, r3
 8007248:	e79e      	b.n	8007188 <__ieee754_pow+0x108>
 800724a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800724e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007252:	950a      	str	r5, [sp, #40]	; 0x28
 8007254:	9d00      	ldr	r5, [sp, #0]
 8007256:	46ac      	mov	ip, r5
 8007258:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800725a:	ea5c 0505 	orrs.w	r5, ip, r5
 800725e:	d0e4      	beq.n	800722a <__ieee754_pow+0x1aa>
 8007260:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <__ieee754_pow+0x238>)
 8007262:	429e      	cmp	r6, r3
 8007264:	f340 80fc 	ble.w	8007460 <__ieee754_pow+0x3e0>
 8007268:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800726c:	429e      	cmp	r6, r3
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <__ieee754_pow+0x230>)
 8007270:	dd07      	ble.n	8007282 <__ieee754_pow+0x202>
 8007272:	429c      	cmp	r4, r3
 8007274:	dc0a      	bgt.n	800728c <__ieee754_pow+0x20c>
 8007276:	2f00      	cmp	r7, #0
 8007278:	da84      	bge.n	8007184 <__ieee754_pow+0x104>
 800727a:	a307      	add	r3, pc, #28	; (adr r3, 8007298 <__ieee754_pow+0x218>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	e795      	b.n	80071ae <__ieee754_pow+0x12e>
 8007282:	429c      	cmp	r4, r3
 8007284:	dbf7      	blt.n	8007276 <__ieee754_pow+0x1f6>
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <__ieee754_pow+0x22c>)
 8007288:	429c      	cmp	r4, r3
 800728a:	dd17      	ble.n	80072bc <__ieee754_pow+0x23c>
 800728c:	2f00      	cmp	r7, #0
 800728e:	dcf4      	bgt.n	800727a <__ieee754_pow+0x1fa>
 8007290:	e778      	b.n	8007184 <__ieee754_pow+0x104>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	8800759c 	.word	0x8800759c
 800729c:	7e37e43c 	.word	0x7e37e43c
 80072a0:	7ff00000 	.word	0x7ff00000
 80072a4:	08008190 	.word	0x08008190
 80072a8:	433fffff 	.word	0x433fffff
 80072ac:	3ff00000 	.word	0x3ff00000
 80072b0:	3fefffff 	.word	0x3fefffff
 80072b4:	3fe00000 	.word	0x3fe00000
 80072b8:	41e00000 	.word	0x41e00000
 80072bc:	4b64      	ldr	r3, [pc, #400]	; (8007450 <__ieee754_pow+0x3d0>)
 80072be:	2200      	movs	r2, #0
 80072c0:	f7f9 f802 	bl	80002c8 <__aeabi_dsub>
 80072c4:	a356      	add	r3, pc, #344	; (adr r3, 8007420 <__ieee754_pow+0x3a0>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	f7f9 f9b3 	bl	8000638 <__aeabi_dmul>
 80072d2:	a355      	add	r3, pc, #340	; (adr r3, 8007428 <__ieee754_pow+0x3a8>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	4606      	mov	r6, r0
 80072da:	460f      	mov	r7, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 f9aa 	bl	8000638 <__aeabi_dmul>
 80072e4:	4b5b      	ldr	r3, [pc, #364]	; (8007454 <__ieee754_pow+0x3d4>)
 80072e6:	4682      	mov	sl, r0
 80072e8:	468b      	mov	fp, r1
 80072ea:	2200      	movs	r2, #0
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7f9 f9a2 	bl	8000638 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	a14d      	add	r1, pc, #308	; (adr r1, 8007430 <__ieee754_pow+0x3b0>)
 80072fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072fe:	f7f8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8007302:	4622      	mov	r2, r4
 8007304:	462b      	mov	r3, r5
 8007306:	f7f9 f997 	bl	8000638 <__aeabi_dmul>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	2000      	movs	r0, #0
 8007310:	4951      	ldr	r1, [pc, #324]	; (8007458 <__ieee754_pow+0x3d8>)
 8007312:	f7f8 ffd9 	bl	80002c8 <__aeabi_dsub>
 8007316:	4622      	mov	r2, r4
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	462b      	mov	r3, r5
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f9 f989 	bl	8000638 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4640      	mov	r0, r8
 800732c:	4649      	mov	r1, r9
 800732e:	f7f9 f983 	bl	8000638 <__aeabi_dmul>
 8007332:	a341      	add	r3, pc, #260	; (adr r3, 8007438 <__ieee754_pow+0x3b8>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f7f9 f97e 	bl	8000638 <__aeabi_dmul>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f8 ffc0 	bl	80002c8 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4680      	mov	r8, r0
 800734e:	4689      	mov	r9, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f8 ffba 	bl	80002cc <__adddf3>
 8007358:	2400      	movs	r4, #0
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	4620      	mov	r0, r4
 8007360:	460d      	mov	r5, r1
 8007362:	f7f8 ffb1 	bl	80002c8 <__aeabi_dsub>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f8 ffab 	bl	80002c8 <__aeabi_dsub>
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007376:	3b01      	subs	r3, #1
 8007378:	4313      	orrs	r3, r2
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	f040 81f1 	bne.w	8007764 <__ieee754_pow+0x6e4>
 8007382:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007440 <__ieee754_pow+0x3c0>
 8007386:	eeb0 8a47 	vmov.f32	s16, s14
 800738a:	eef0 8a67 	vmov.f32	s17, s15
 800738e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007392:	2600      	movs	r6, #0
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800739c:	f7f8 ff94 	bl	80002c8 <__aeabi_dsub>
 80073a0:	4622      	mov	r2, r4
 80073a2:	462b      	mov	r3, r5
 80073a4:	f7f9 f948 	bl	8000638 <__aeabi_dmul>
 80073a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	4650      	mov	r0, sl
 80073b2:	4659      	mov	r1, fp
 80073b4:	f7f9 f940 	bl	8000638 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f8 ff84 	bl	80002cc <__adddf3>
 80073c4:	4632      	mov	r2, r6
 80073c6:	463b      	mov	r3, r7
 80073c8:	4680      	mov	r8, r0
 80073ca:	4689      	mov	r9, r1
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f9 f932 	bl	8000638 <__aeabi_dmul>
 80073d4:	460b      	mov	r3, r1
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	4602      	mov	r2, r0
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	f7f8 ff74 	bl	80002cc <__adddf3>
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <__ieee754_pow+0x3dc>)
 80073e6:	4299      	cmp	r1, r3
 80073e8:	ec45 4b19 	vmov	d9, r4, r5
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	468b      	mov	fp, r1
 80073f2:	f340 82fe 	ble.w	80079f2 <__ieee754_pow+0x972>
 80073f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80073fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80073fe:	4303      	orrs	r3, r0
 8007400:	f000 81f0 	beq.w	80077e4 <__ieee754_pow+0x764>
 8007404:	a310      	add	r3, pc, #64	; (adr r3, 8007448 <__ieee754_pow+0x3c8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	ec51 0b18 	vmov	r0, r1, d8
 800740e:	f7f9 f913 	bl	8000638 <__aeabi_dmul>
 8007412:	a30d      	add	r3, pc, #52	; (adr r3, 8007448 <__ieee754_pow+0x3c8>)
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	e6cb      	b.n	80071b2 <__ieee754_pow+0x132>
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	60000000 	.word	0x60000000
 8007424:	3ff71547 	.word	0x3ff71547
 8007428:	f85ddf44 	.word	0xf85ddf44
 800742c:	3e54ae0b 	.word	0x3e54ae0b
 8007430:	55555555 	.word	0x55555555
 8007434:	3fd55555 	.word	0x3fd55555
 8007438:	652b82fe 	.word	0x652b82fe
 800743c:	3ff71547 	.word	0x3ff71547
 8007440:	00000000 	.word	0x00000000
 8007444:	bff00000 	.word	0xbff00000
 8007448:	8800759c 	.word	0x8800759c
 800744c:	7e37e43c 	.word	0x7e37e43c
 8007450:	3ff00000 	.word	0x3ff00000
 8007454:	3fd00000 	.word	0x3fd00000
 8007458:	3fe00000 	.word	0x3fe00000
 800745c:	408fffff 	.word	0x408fffff
 8007460:	4bd7      	ldr	r3, [pc, #860]	; (80077c0 <__ieee754_pow+0x740>)
 8007462:	ea03 0309 	and.w	r3, r3, r9
 8007466:	2200      	movs	r2, #0
 8007468:	b92b      	cbnz	r3, 8007476 <__ieee754_pow+0x3f6>
 800746a:	4bd6      	ldr	r3, [pc, #856]	; (80077c4 <__ieee754_pow+0x744>)
 800746c:	f7f9 f8e4 	bl	8000638 <__aeabi_dmul>
 8007470:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007474:	460c      	mov	r4, r1
 8007476:	1523      	asrs	r3, r4, #20
 8007478:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800747c:	4413      	add	r3, r2
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	4bd1      	ldr	r3, [pc, #836]	; (80077c8 <__ieee754_pow+0x748>)
 8007482:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007486:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800748a:	429c      	cmp	r4, r3
 800748c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007490:	dd08      	ble.n	80074a4 <__ieee754_pow+0x424>
 8007492:	4bce      	ldr	r3, [pc, #824]	; (80077cc <__ieee754_pow+0x74c>)
 8007494:	429c      	cmp	r4, r3
 8007496:	f340 8163 	ble.w	8007760 <__ieee754_pow+0x6e0>
 800749a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749c:	3301      	adds	r3, #1
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80074a4:	2400      	movs	r4, #0
 80074a6:	00e3      	lsls	r3, r4, #3
 80074a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074aa:	4bc9      	ldr	r3, [pc, #804]	; (80077d0 <__ieee754_pow+0x750>)
 80074ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074b0:	ed93 7b00 	vldr	d7, [r3]
 80074b4:	4629      	mov	r1, r5
 80074b6:	ec53 2b17 	vmov	r2, r3, d7
 80074ba:	eeb0 8a47 	vmov.f32	s16, s14
 80074be:	eef0 8a67 	vmov.f32	s17, s15
 80074c2:	4682      	mov	sl, r0
 80074c4:	f7f8 ff00 	bl	80002c8 <__aeabi_dsub>
 80074c8:	4652      	mov	r2, sl
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	462b      	mov	r3, r5
 80074d0:	ec51 0b18 	vmov	r0, r1, d8
 80074d4:	f7f8 fefa 	bl	80002cc <__adddf3>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	2000      	movs	r0, #0
 80074de:	49bd      	ldr	r1, [pc, #756]	; (80077d4 <__ieee754_pow+0x754>)
 80074e0:	f7f9 f9d4 	bl	800088c <__aeabi_ddiv>
 80074e4:	ec41 0b19 	vmov	d9, r0, r1
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 f8a2 	bl	8000638 <__aeabi_dmul>
 80074f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007500:	2300      	movs	r3, #0
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007508:	46ab      	mov	fp, r5
 800750a:	106d      	asrs	r5, r5, #1
 800750c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007510:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007514:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007518:	2200      	movs	r2, #0
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	4614      	mov	r4, r2
 8007520:	461d      	mov	r5, r3
 8007522:	f7f9 f889 	bl	8000638 <__aeabi_dmul>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f8 fecb 	bl	80002c8 <__aeabi_dsub>
 8007532:	ec53 2b18 	vmov	r2, r3, d8
 8007536:	4606      	mov	r6, r0
 8007538:	460f      	mov	r7, r1
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f8 fec3 	bl	80002c8 <__aeabi_dsub>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4650      	mov	r0, sl
 8007548:	4659      	mov	r1, fp
 800754a:	f7f8 febd 	bl	80002c8 <__aeabi_dsub>
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	f7f9 f871 	bl	8000638 <__aeabi_dmul>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4630      	mov	r0, r6
 800755c:	4639      	mov	r1, r7
 800755e:	f7f8 feb3 	bl	80002c8 <__aeabi_dsub>
 8007562:	ec53 2b19 	vmov	r2, r3, d9
 8007566:	f7f9 f867 	bl	8000638 <__aeabi_dmul>
 800756a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800756e:	ec41 0b18 	vmov	d8, r0, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f7f9 f85f 	bl	8000638 <__aeabi_dmul>
 800757a:	a37d      	add	r3, pc, #500	; (adr r3, 8007770 <__ieee754_pow+0x6f0>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	f7f9 f858 	bl	8000638 <__aeabi_dmul>
 8007588:	a37b      	add	r3, pc, #492	; (adr r3, 8007778 <__ieee754_pow+0x6f8>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 fe9d 	bl	80002cc <__adddf3>
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f7f9 f84f 	bl	8000638 <__aeabi_dmul>
 800759a:	a379      	add	r3, pc, #484	; (adr r3, 8007780 <__ieee754_pow+0x700>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fe94 	bl	80002cc <__adddf3>
 80075a4:	4622      	mov	r2, r4
 80075a6:	462b      	mov	r3, r5
 80075a8:	f7f9 f846 	bl	8000638 <__aeabi_dmul>
 80075ac:	a376      	add	r3, pc, #472	; (adr r3, 8007788 <__ieee754_pow+0x708>)
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 fe8b 	bl	80002cc <__adddf3>
 80075b6:	4622      	mov	r2, r4
 80075b8:	462b      	mov	r3, r5
 80075ba:	f7f9 f83d 	bl	8000638 <__aeabi_dmul>
 80075be:	a374      	add	r3, pc, #464	; (adr r3, 8007790 <__ieee754_pow+0x710>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f8 fe82 	bl	80002cc <__adddf3>
 80075c8:	4622      	mov	r2, r4
 80075ca:	462b      	mov	r3, r5
 80075cc:	f7f9 f834 	bl	8000638 <__aeabi_dmul>
 80075d0:	a371      	add	r3, pc, #452	; (adr r3, 8007798 <__ieee754_pow+0x718>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fe79 	bl	80002cc <__adddf3>
 80075da:	4622      	mov	r2, r4
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	462b      	mov	r3, r5
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7f9 f827 	bl	8000638 <__aeabi_dmul>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4630      	mov	r0, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	f7f9 f821 	bl	8000638 <__aeabi_dmul>
 80075f6:	4642      	mov	r2, r8
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	464b      	mov	r3, r9
 80075fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007602:	f7f8 fe63 	bl	80002cc <__adddf3>
 8007606:	ec53 2b18 	vmov	r2, r3, d8
 800760a:	f7f9 f815 	bl	8000638 <__aeabi_dmul>
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 fe5b 	bl	80002cc <__adddf3>
 8007616:	4642      	mov	r2, r8
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	464b      	mov	r3, r9
 800761e:	4640      	mov	r0, r8
 8007620:	4649      	mov	r1, r9
 8007622:	f7f9 f809 	bl	8000638 <__aeabi_dmul>
 8007626:	4b6c      	ldr	r3, [pc, #432]	; (80077d8 <__ieee754_pow+0x758>)
 8007628:	2200      	movs	r2, #0
 800762a:	4606      	mov	r6, r0
 800762c:	460f      	mov	r7, r1
 800762e:	f7f8 fe4d 	bl	80002cc <__adddf3>
 8007632:	4652      	mov	r2, sl
 8007634:	465b      	mov	r3, fp
 8007636:	f7f8 fe49 	bl	80002cc <__adddf3>
 800763a:	9c04      	ldr	r4, [sp, #16]
 800763c:	460d      	mov	r5, r1
 800763e:	4622      	mov	r2, r4
 8007640:	460b      	mov	r3, r1
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fff7 	bl	8000638 <__aeabi_dmul>
 800764a:	4b63      	ldr	r3, [pc, #396]	; (80077d8 <__ieee754_pow+0x758>)
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	2200      	movs	r2, #0
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f7f8 fe37 	bl	80002c8 <__aeabi_dsub>
 800765a:	4632      	mov	r2, r6
 800765c:	463b      	mov	r3, r7
 800765e:	f7f8 fe33 	bl	80002c8 <__aeabi_dsub>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4650      	mov	r0, sl
 8007668:	4659      	mov	r1, fp
 800766a:	f7f8 fe2d 	bl	80002c8 <__aeabi_dsub>
 800766e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007672:	f7f8 ffe1 	bl	8000638 <__aeabi_dmul>
 8007676:	4622      	mov	r2, r4
 8007678:	4606      	mov	r6, r0
 800767a:	460f      	mov	r7, r1
 800767c:	462b      	mov	r3, r5
 800767e:	ec51 0b18 	vmov	r0, r1, d8
 8007682:	f7f8 ffd9 	bl	8000638 <__aeabi_dmul>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f8 fe1d 	bl	80002cc <__adddf3>
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 fe15 	bl	80002cc <__adddf3>
 80076a2:	9c04      	ldr	r4, [sp, #16]
 80076a4:	a33e      	add	r3, pc, #248	; (adr r3, 80077a0 <__ieee754_pow+0x720>)
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	4620      	mov	r0, r4
 80076ac:	460d      	mov	r5, r1
 80076ae:	f7f8 ffc3 	bl	8000638 <__aeabi_dmul>
 80076b2:	4642      	mov	r2, r8
 80076b4:	ec41 0b18 	vmov	d8, r0, r1
 80076b8:	464b      	mov	r3, r9
 80076ba:	4620      	mov	r0, r4
 80076bc:	4629      	mov	r1, r5
 80076be:	f7f8 fe03 	bl	80002c8 <__aeabi_dsub>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	f7f8 fdfd 	bl	80002c8 <__aeabi_dsub>
 80076ce:	a336      	add	r3, pc, #216	; (adr r3, 80077a8 <__ieee754_pow+0x728>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 ffb0 	bl	8000638 <__aeabi_dmul>
 80076d8:	a335      	add	r3, pc, #212	; (adr r3, 80077b0 <__ieee754_pow+0x730>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	4606      	mov	r6, r0
 80076e0:	460f      	mov	r7, r1
 80076e2:	4620      	mov	r0, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7f8 ffa7 	bl	8000638 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f8 fdeb 	bl	80002cc <__adddf3>
 80076f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076f8:	4b38      	ldr	r3, [pc, #224]	; (80077dc <__ieee754_pow+0x75c>)
 80076fa:	4413      	add	r3, r2
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f8 fde4 	bl	80002cc <__adddf3>
 8007704:	4682      	mov	sl, r0
 8007706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007708:	468b      	mov	fp, r1
 800770a:	f7f8 ff2b 	bl	8000564 <__aeabi_i2d>
 800770e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007710:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <__ieee754_pow+0x760>)
 8007712:	4413      	add	r3, r2
 8007714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	4652      	mov	r2, sl
 800771e:	465b      	mov	r3, fp
 8007720:	ec51 0b18 	vmov	r0, r1, d8
 8007724:	f7f8 fdd2 	bl	80002cc <__adddf3>
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	f7f8 fdce 	bl	80002cc <__adddf3>
 8007730:	4632      	mov	r2, r6
 8007732:	463b      	mov	r3, r7
 8007734:	f7f8 fdca 	bl	80002cc <__adddf3>
 8007738:	9c04      	ldr	r4, [sp, #16]
 800773a:	4632      	mov	r2, r6
 800773c:	463b      	mov	r3, r7
 800773e:	4620      	mov	r0, r4
 8007740:	460d      	mov	r5, r1
 8007742:	f7f8 fdc1 	bl	80002c8 <__aeabi_dsub>
 8007746:	4642      	mov	r2, r8
 8007748:	464b      	mov	r3, r9
 800774a:	f7f8 fdbd 	bl	80002c8 <__aeabi_dsub>
 800774e:	ec53 2b18 	vmov	r2, r3, d8
 8007752:	f7f8 fdb9 	bl	80002c8 <__aeabi_dsub>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4650      	mov	r0, sl
 800775c:	4659      	mov	r1, fp
 800775e:	e606      	b.n	800736e <__ieee754_pow+0x2ee>
 8007760:	2401      	movs	r4, #1
 8007762:	e6a0      	b.n	80074a6 <__ieee754_pow+0x426>
 8007764:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80077b8 <__ieee754_pow+0x738>
 8007768:	e60d      	b.n	8007386 <__ieee754_pow+0x306>
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w
 8007770:	4a454eef 	.word	0x4a454eef
 8007774:	3fca7e28 	.word	0x3fca7e28
 8007778:	93c9db65 	.word	0x93c9db65
 800777c:	3fcd864a 	.word	0x3fcd864a
 8007780:	a91d4101 	.word	0xa91d4101
 8007784:	3fd17460 	.word	0x3fd17460
 8007788:	518f264d 	.word	0x518f264d
 800778c:	3fd55555 	.word	0x3fd55555
 8007790:	db6fabff 	.word	0xdb6fabff
 8007794:	3fdb6db6 	.word	0x3fdb6db6
 8007798:	33333303 	.word	0x33333303
 800779c:	3fe33333 	.word	0x3fe33333
 80077a0:	e0000000 	.word	0xe0000000
 80077a4:	3feec709 	.word	0x3feec709
 80077a8:	dc3a03fd 	.word	0xdc3a03fd
 80077ac:	3feec709 	.word	0x3feec709
 80077b0:	145b01f5 	.word	0x145b01f5
 80077b4:	be3e2fe0 	.word	0xbe3e2fe0
 80077b8:	00000000 	.word	0x00000000
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	43400000 	.word	0x43400000
 80077c8:	0003988e 	.word	0x0003988e
 80077cc:	000bb679 	.word	0x000bb679
 80077d0:	08008300 	.word	0x08008300
 80077d4:	3ff00000 	.word	0x3ff00000
 80077d8:	40080000 	.word	0x40080000
 80077dc:	08008320 	.word	0x08008320
 80077e0:	08008310 	.word	0x08008310
 80077e4:	a3b5      	add	r3, pc, #724	; (adr r3, 8007abc <__ieee754_pow+0xa3c>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 fd6d 	bl	80002cc <__adddf3>
 80077f2:	4622      	mov	r2, r4
 80077f4:	ec41 0b1a 	vmov	d10, r0, r1
 80077f8:	462b      	mov	r3, r5
 80077fa:	4630      	mov	r0, r6
 80077fc:	4639      	mov	r1, r7
 80077fe:	f7f8 fd63 	bl	80002c8 <__aeabi_dsub>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	ec51 0b1a 	vmov	r0, r1, d10
 800780a:	f7f9 f9a5 	bl	8000b58 <__aeabi_dcmpgt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f47f adf8 	bne.w	8007404 <__ieee754_pow+0x384>
 8007814:	4aa4      	ldr	r2, [pc, #656]	; (8007aa8 <__ieee754_pow+0xa28>)
 8007816:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800781a:	4293      	cmp	r3, r2
 800781c:	f340 810b 	ble.w	8007a36 <__ieee754_pow+0x9b6>
 8007820:	151b      	asrs	r3, r3, #20
 8007822:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007826:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800782a:	fa4a f303 	asr.w	r3, sl, r3
 800782e:	445b      	add	r3, fp
 8007830:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007834:	4e9d      	ldr	r6, [pc, #628]	; (8007aac <__ieee754_pow+0xa2c>)
 8007836:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800783a:	4116      	asrs	r6, r2
 800783c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007840:	2000      	movs	r0, #0
 8007842:	ea23 0106 	bic.w	r1, r3, r6
 8007846:	f1c2 0214 	rsb	r2, r2, #20
 800784a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800784e:	fa4a fa02 	asr.w	sl, sl, r2
 8007852:	f1bb 0f00 	cmp.w	fp, #0
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	bfb8      	it	lt
 8007860:	f1ca 0a00 	rsblt	sl, sl, #0
 8007864:	f7f8 fd30 	bl	80002c8 <__aeabi_dsub>
 8007868:	ec41 0b19 	vmov	d9, r0, r1
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	ec51 0b19 	vmov	r0, r1, d9
 8007874:	f7f8 fd2a 	bl	80002cc <__adddf3>
 8007878:	2400      	movs	r4, #0
 800787a:	a379      	add	r3, pc, #484	; (adr r3, 8007a60 <__ieee754_pow+0x9e0>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4620      	mov	r0, r4
 8007882:	460d      	mov	r5, r1
 8007884:	f7f8 fed8 	bl	8000638 <__aeabi_dmul>
 8007888:	ec53 2b19 	vmov	r2, r3, d9
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fd18 	bl	80002c8 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f8 fd12 	bl	80002c8 <__aeabi_dsub>
 80078a4:	a370      	add	r3, pc, #448	; (adr r3, 8007a68 <__ieee754_pow+0x9e8>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fec5 	bl	8000638 <__aeabi_dmul>
 80078ae:	a370      	add	r3, pc, #448	; (adr r3, 8007a70 <__ieee754_pow+0x9f0>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	4680      	mov	r8, r0
 80078b6:	4689      	mov	r9, r1
 80078b8:	4620      	mov	r0, r4
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7f8 febc 	bl	8000638 <__aeabi_dmul>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7f8 fd00 	bl	80002cc <__adddf3>
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 fcf8 	bl	80002cc <__adddf3>
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	4680      	mov	r8, r0
 80078e2:	4689      	mov	r9, r1
 80078e4:	f7f8 fcf0 	bl	80002c8 <__aeabi_dsub>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fcea 	bl	80002c8 <__aeabi_dsub>
 80078f4:	4642      	mov	r2, r8
 80078f6:	4606      	mov	r6, r0
 80078f8:	460f      	mov	r7, r1
 80078fa:	464b      	mov	r3, r9
 80078fc:	4640      	mov	r0, r8
 80078fe:	4649      	mov	r1, r9
 8007900:	f7f8 fe9a 	bl	8000638 <__aeabi_dmul>
 8007904:	a35c      	add	r3, pc, #368	; (adr r3, 8007a78 <__ieee754_pow+0x9f8>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	4604      	mov	r4, r0
 800790c:	460d      	mov	r5, r1
 800790e:	f7f8 fe93 	bl	8000638 <__aeabi_dmul>
 8007912:	a35b      	add	r3, pc, #364	; (adr r3, 8007a80 <__ieee754_pow+0xa00>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fcd6 	bl	80002c8 <__aeabi_dsub>
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	f7f8 fe8a 	bl	8000638 <__aeabi_dmul>
 8007924:	a358      	add	r3, pc, #352	; (adr r3, 8007a88 <__ieee754_pow+0xa08>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fccf 	bl	80002cc <__adddf3>
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	f7f8 fe81 	bl	8000638 <__aeabi_dmul>
 8007936:	a356      	add	r3, pc, #344	; (adr r3, 8007a90 <__ieee754_pow+0xa10>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f7f8 fcc4 	bl	80002c8 <__aeabi_dsub>
 8007940:	4622      	mov	r2, r4
 8007942:	462b      	mov	r3, r5
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	a353      	add	r3, pc, #332	; (adr r3, 8007a98 <__ieee754_pow+0xa18>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f7f8 fcbd 	bl	80002cc <__adddf3>
 8007952:	4622      	mov	r2, r4
 8007954:	462b      	mov	r3, r5
 8007956:	f7f8 fe6f 	bl	8000638 <__aeabi_dmul>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f8 fcb1 	bl	80002c8 <__aeabi_dsub>
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	f7f8 fe61 	bl	8000638 <__aeabi_dmul>
 8007976:	2200      	movs	r2, #0
 8007978:	ec41 0b19 	vmov	d9, r0, r1
 800797c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007980:	4620      	mov	r0, r4
 8007982:	4629      	mov	r1, r5
 8007984:	f7f8 fca0 	bl	80002c8 <__aeabi_dsub>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	ec51 0b19 	vmov	r0, r1, d9
 8007990:	f7f8 ff7c 	bl	800088c <__aeabi_ddiv>
 8007994:	4632      	mov	r2, r6
 8007996:	4604      	mov	r4, r0
 8007998:	460d      	mov	r5, r1
 800799a:	463b      	mov	r3, r7
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f7f8 fe4a 	bl	8000638 <__aeabi_dmul>
 80079a4:	4632      	mov	r2, r6
 80079a6:	463b      	mov	r3, r7
 80079a8:	f7f8 fc90 	bl	80002cc <__adddf3>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fc88 	bl	80002c8 <__aeabi_dsub>
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	f7f8 fc84 	bl	80002c8 <__aeabi_dsub>
 80079c0:	460b      	mov	r3, r1
 80079c2:	4602      	mov	r2, r0
 80079c4:	493a      	ldr	r1, [pc, #232]	; (8007ab0 <__ieee754_pow+0xa30>)
 80079c6:	2000      	movs	r0, #0
 80079c8:	f7f8 fc7e 	bl	80002c8 <__aeabi_dsub>
 80079cc:	e9cd 0100 	strd	r0, r1, [sp]
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079da:	da2f      	bge.n	8007a3c <__ieee754_pow+0x9bc>
 80079dc:	4650      	mov	r0, sl
 80079de:	ed9d 0b00 	vldr	d0, [sp]
 80079e2:	f000 f9cd 	bl	8007d80 <scalbn>
 80079e6:	ec51 0b10 	vmov	r0, r1, d0
 80079ea:	ec53 2b18 	vmov	r2, r3, d8
 80079ee:	f7ff bbe0 	b.w	80071b2 <__ieee754_pow+0x132>
 80079f2:	4b30      	ldr	r3, [pc, #192]	; (8007ab4 <__ieee754_pow+0xa34>)
 80079f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80079f8:	429e      	cmp	r6, r3
 80079fa:	f77f af0b 	ble.w	8007814 <__ieee754_pow+0x794>
 80079fe:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <__ieee754_pow+0xa38>)
 8007a00:	440b      	add	r3, r1
 8007a02:	4303      	orrs	r3, r0
 8007a04:	d00b      	beq.n	8007a1e <__ieee754_pow+0x99e>
 8007a06:	a326      	add	r3, pc, #152	; (adr r3, 8007aa0 <__ieee754_pow+0xa20>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	ec51 0b18 	vmov	r0, r1, d8
 8007a10:	f7f8 fe12 	bl	8000638 <__aeabi_dmul>
 8007a14:	a322      	add	r3, pc, #136	; (adr r3, 8007aa0 <__ieee754_pow+0xa20>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f7ff bbca 	b.w	80071b2 <__ieee754_pow+0x132>
 8007a1e:	4622      	mov	r2, r4
 8007a20:	462b      	mov	r3, r5
 8007a22:	f7f8 fc51 	bl	80002c8 <__aeabi_dsub>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	f7f9 f88b 	bl	8000b44 <__aeabi_dcmpge>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aef0 	beq.w	8007814 <__ieee754_pow+0x794>
 8007a34:	e7e7      	b.n	8007a06 <__ieee754_pow+0x986>
 8007a36:	f04f 0a00 	mov.w	sl, #0
 8007a3a:	e717      	b.n	800786c <__ieee754_pow+0x7ec>
 8007a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a40:	4619      	mov	r1, r3
 8007a42:	e7d2      	b.n	80079ea <__ieee754_pow+0x96a>
 8007a44:	491a      	ldr	r1, [pc, #104]	; (8007ab0 <__ieee754_pow+0xa30>)
 8007a46:	2000      	movs	r0, #0
 8007a48:	f7ff bb9e 	b.w	8007188 <__ieee754_pow+0x108>
 8007a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a50:	f7ff bb9a 	b.w	8007188 <__ieee754_pow+0x108>
 8007a54:	9000      	str	r0, [sp, #0]
 8007a56:	f7ff bb76 	b.w	8007146 <__ieee754_pow+0xc6>
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	f7ff bb60 	b.w	8007120 <__ieee754_pow+0xa0>
 8007a60:	00000000 	.word	0x00000000
 8007a64:	3fe62e43 	.word	0x3fe62e43
 8007a68:	fefa39ef 	.word	0xfefa39ef
 8007a6c:	3fe62e42 	.word	0x3fe62e42
 8007a70:	0ca86c39 	.word	0x0ca86c39
 8007a74:	be205c61 	.word	0xbe205c61
 8007a78:	72bea4d0 	.word	0x72bea4d0
 8007a7c:	3e663769 	.word	0x3e663769
 8007a80:	c5d26bf1 	.word	0xc5d26bf1
 8007a84:	3ebbbd41 	.word	0x3ebbbd41
 8007a88:	af25de2c 	.word	0xaf25de2c
 8007a8c:	3f11566a 	.word	0x3f11566a
 8007a90:	16bebd93 	.word	0x16bebd93
 8007a94:	3f66c16c 	.word	0x3f66c16c
 8007a98:	5555553e 	.word	0x5555553e
 8007a9c:	3fc55555 	.word	0x3fc55555
 8007aa0:	c2f8f359 	.word	0xc2f8f359
 8007aa4:	01a56e1f 	.word	0x01a56e1f
 8007aa8:	3fe00000 	.word	0x3fe00000
 8007aac:	000fffff 	.word	0x000fffff
 8007ab0:	3ff00000 	.word	0x3ff00000
 8007ab4:	4090cbff 	.word	0x4090cbff
 8007ab8:	3f6f3400 	.word	0x3f6f3400
 8007abc:	652b82fe 	.word	0x652b82fe
 8007ac0:	3c971547 	.word	0x3c971547

08007ac4 <__ieee754_sqrt>:
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	ec55 4b10 	vmov	r4, r5, d0
 8007acc:	4e56      	ldr	r6, [pc, #344]	; (8007c28 <__ieee754_sqrt+0x164>)
 8007ace:	43ae      	bics	r6, r5
 8007ad0:	ee10 0a10 	vmov	r0, s0
 8007ad4:	ee10 3a10 	vmov	r3, s0
 8007ad8:	4629      	mov	r1, r5
 8007ada:	462a      	mov	r2, r5
 8007adc:	d110      	bne.n	8007b00 <__ieee754_sqrt+0x3c>
 8007ade:	ee10 2a10 	vmov	r2, s0
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	f7f8 fda8 	bl	8000638 <__aeabi_dmul>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4620      	mov	r0, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	f7f8 fbec 	bl	80002cc <__adddf3>
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	ec45 4b10 	vmov	d0, r4, r5
 8007afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dc10      	bgt.n	8007b26 <__ieee754_sqrt+0x62>
 8007b04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b08:	4330      	orrs	r0, r6
 8007b0a:	d0f5      	beq.n	8007af8 <__ieee754_sqrt+0x34>
 8007b0c:	b15d      	cbz	r5, 8007b26 <__ieee754_sqrt+0x62>
 8007b0e:	ee10 2a10 	vmov	r2, s0
 8007b12:	462b      	mov	r3, r5
 8007b14:	ee10 0a10 	vmov	r0, s0
 8007b18:	f7f8 fbd6 	bl	80002c8 <__aeabi_dsub>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	f7f8 feb4 	bl	800088c <__aeabi_ddiv>
 8007b24:	e7e6      	b.n	8007af4 <__ieee754_sqrt+0x30>
 8007b26:	1509      	asrs	r1, r1, #20
 8007b28:	d076      	beq.n	8007c18 <__ieee754_sqrt+0x154>
 8007b2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b2e:	07ce      	lsls	r6, r1, #31
 8007b30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007b34:	bf5e      	ittt	pl
 8007b36:	0fda      	lsrpl	r2, r3, #31
 8007b38:	005b      	lslpl	r3, r3, #1
 8007b3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007b3e:	0fda      	lsrs	r2, r3, #31
 8007b40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007b44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007b48:	2000      	movs	r0, #0
 8007b4a:	106d      	asrs	r5, r5, #1
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	f04f 0e16 	mov.w	lr, #22
 8007b52:	4684      	mov	ip, r0
 8007b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b58:	eb0c 0401 	add.w	r4, ip, r1
 8007b5c:	4294      	cmp	r4, r2
 8007b5e:	bfde      	ittt	le
 8007b60:	1b12      	suble	r2, r2, r4
 8007b62:	eb04 0c01 	addle.w	ip, r4, r1
 8007b66:	1840      	addle	r0, r0, r1
 8007b68:	0052      	lsls	r2, r2, #1
 8007b6a:	f1be 0e01 	subs.w	lr, lr, #1
 8007b6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007b72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007b76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b7a:	d1ed      	bne.n	8007b58 <__ieee754_sqrt+0x94>
 8007b7c:	4671      	mov	r1, lr
 8007b7e:	2720      	movs	r7, #32
 8007b80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007b84:	4562      	cmp	r2, ip
 8007b86:	eb04 060e 	add.w	r6, r4, lr
 8007b8a:	dc02      	bgt.n	8007b92 <__ieee754_sqrt+0xce>
 8007b8c:	d113      	bne.n	8007bb6 <__ieee754_sqrt+0xf2>
 8007b8e:	429e      	cmp	r6, r3
 8007b90:	d811      	bhi.n	8007bb6 <__ieee754_sqrt+0xf2>
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	eb06 0e04 	add.w	lr, r6, r4
 8007b98:	da43      	bge.n	8007c22 <__ieee754_sqrt+0x15e>
 8007b9a:	f1be 0f00 	cmp.w	lr, #0
 8007b9e:	db40      	blt.n	8007c22 <__ieee754_sqrt+0x15e>
 8007ba0:	f10c 0801 	add.w	r8, ip, #1
 8007ba4:	eba2 020c 	sub.w	r2, r2, ip
 8007ba8:	429e      	cmp	r6, r3
 8007baa:	bf88      	it	hi
 8007bac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007bb0:	1b9b      	subs	r3, r3, r6
 8007bb2:	4421      	add	r1, r4
 8007bb4:	46c4      	mov	ip, r8
 8007bb6:	0052      	lsls	r2, r2, #1
 8007bb8:	3f01      	subs	r7, #1
 8007bba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007bc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bc6:	d1dd      	bne.n	8007b84 <__ieee754_sqrt+0xc0>
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d006      	beq.n	8007bda <__ieee754_sqrt+0x116>
 8007bcc:	1c4c      	adds	r4, r1, #1
 8007bce:	bf13      	iteet	ne
 8007bd0:	3101      	addne	r1, #1
 8007bd2:	3001      	addeq	r0, #1
 8007bd4:	4639      	moveq	r1, r7
 8007bd6:	f021 0101 	bicne.w	r1, r1, #1
 8007bda:	1043      	asrs	r3, r0, #1
 8007bdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007be0:	0849      	lsrs	r1, r1, #1
 8007be2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007be6:	07c2      	lsls	r2, r0, #31
 8007be8:	bf48      	it	mi
 8007bea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007bee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	463d      	mov	r5, r7
 8007bf6:	e77f      	b.n	8007af8 <__ieee754_sqrt+0x34>
 8007bf8:	0ada      	lsrs	r2, r3, #11
 8007bfa:	3815      	subs	r0, #21
 8007bfc:	055b      	lsls	r3, r3, #21
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d0fa      	beq.n	8007bf8 <__ieee754_sqrt+0x134>
 8007c02:	02d7      	lsls	r7, r2, #11
 8007c04:	d50a      	bpl.n	8007c1c <__ieee754_sqrt+0x158>
 8007c06:	f1c1 0420 	rsb	r4, r1, #32
 8007c0a:	fa23 f404 	lsr.w	r4, r3, r4
 8007c0e:	1e4d      	subs	r5, r1, #1
 8007c10:	408b      	lsls	r3, r1
 8007c12:	4322      	orrs	r2, r4
 8007c14:	1b41      	subs	r1, r0, r5
 8007c16:	e788      	b.n	8007b2a <__ieee754_sqrt+0x66>
 8007c18:	4608      	mov	r0, r1
 8007c1a:	e7f0      	b.n	8007bfe <__ieee754_sqrt+0x13a>
 8007c1c:	0052      	lsls	r2, r2, #1
 8007c1e:	3101      	adds	r1, #1
 8007c20:	e7ef      	b.n	8007c02 <__ieee754_sqrt+0x13e>
 8007c22:	46e0      	mov	r8, ip
 8007c24:	e7be      	b.n	8007ba4 <__ieee754_sqrt+0xe0>
 8007c26:	bf00      	nop
 8007c28:	7ff00000 	.word	0x7ff00000

08007c2c <fabs>:
 8007c2c:	ec51 0b10 	vmov	r0, r1, d0
 8007c30:	ee10 2a10 	vmov	r2, s0
 8007c34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c38:	ec43 2b10 	vmov	d0, r2, r3
 8007c3c:	4770      	bx	lr

08007c3e <finite>:
 8007c3e:	b082      	sub	sp, #8
 8007c40:	ed8d 0b00 	vstr	d0, [sp]
 8007c44:	9801      	ldr	r0, [sp, #4]
 8007c46:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007c4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007c4e:	0fc0      	lsrs	r0, r0, #31
 8007c50:	b002      	add	sp, #8
 8007c52:	4770      	bx	lr
 8007c54:	0000      	movs	r0, r0
	...

08007c58 <nan>:
 8007c58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c60 <nan+0x8>
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	00000000 	.word	0x00000000
 8007c64:	7ff80000 	.word	0x7ff80000

08007c68 <rint>:
 8007c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c6a:	ec51 0b10 	vmov	r0, r1, d0
 8007c6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007c76:	2e13      	cmp	r6, #19
 8007c78:	ee10 4a10 	vmov	r4, s0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007c82:	dc58      	bgt.n	8007d36 <rint+0xce>
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	da2b      	bge.n	8007ce0 <rint+0x78>
 8007c88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007c8c:	4302      	orrs	r2, r0
 8007c8e:	d023      	beq.n	8007cd8 <rint+0x70>
 8007c90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007c94:	4302      	orrs	r2, r0
 8007c96:	4254      	negs	r4, r2
 8007c98:	4314      	orrs	r4, r2
 8007c9a:	0c4b      	lsrs	r3, r1, #17
 8007c9c:	0b24      	lsrs	r4, r4, #12
 8007c9e:	045b      	lsls	r3, r3, #17
 8007ca0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ca4:	ea44 0103 	orr.w	r1, r4, r3
 8007ca8:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <rint+0x10c>)
 8007caa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007cae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 fb07 	bl	80002cc <__adddf3>
 8007cbe:	e9cd 0100 	strd	r0, r1, [sp]
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cc8:	4632      	mov	r2, r6
 8007cca:	f7f8 fafd 	bl	80002c8 <__aeabi_dsub>
 8007cce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cd2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	ec41 0b10 	vmov	d0, r0, r1
 8007cdc:	b003      	add	sp, #12
 8007cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce0:	4a25      	ldr	r2, [pc, #148]	; (8007d78 <rint+0x110>)
 8007ce2:	4132      	asrs	r2, r6
 8007ce4:	ea01 0702 	and.w	r7, r1, r2
 8007ce8:	4307      	orrs	r7, r0
 8007cea:	d0f5      	beq.n	8007cd8 <rint+0x70>
 8007cec:	0851      	lsrs	r1, r2, #1
 8007cee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007cf2:	4314      	orrs	r4, r2
 8007cf4:	d00c      	beq.n	8007d10 <rint+0xa8>
 8007cf6:	ea23 0201 	bic.w	r2, r3, r1
 8007cfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cfe:	2e13      	cmp	r6, #19
 8007d00:	fa43 f606 	asr.w	r6, r3, r6
 8007d04:	bf0c      	ite	eq
 8007d06:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007d0a:	2400      	movne	r4, #0
 8007d0c:	ea42 0306 	orr.w	r3, r2, r6
 8007d10:	4918      	ldr	r1, [pc, #96]	; (8007d74 <rint+0x10c>)
 8007d12:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007d16:	4622      	mov	r2, r4
 8007d18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fad4 	bl	80002cc <__adddf3>
 8007d24:	e9cd 0100 	strd	r0, r1, [sp]
 8007d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f7f8 faca 	bl	80002c8 <__aeabi_dsub>
 8007d34:	e7d0      	b.n	8007cd8 <rint+0x70>
 8007d36:	2e33      	cmp	r6, #51	; 0x33
 8007d38:	dd07      	ble.n	8007d4a <rint+0xe2>
 8007d3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d3e:	d1cb      	bne.n	8007cd8 <rint+0x70>
 8007d40:	ee10 2a10 	vmov	r2, s0
 8007d44:	f7f8 fac2 	bl	80002cc <__adddf3>
 8007d48:	e7c6      	b.n	8007cd8 <rint+0x70>
 8007d4a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007d4e:	f04f 36ff 	mov.w	r6, #4294967295
 8007d52:	40d6      	lsrs	r6, r2
 8007d54:	4230      	tst	r0, r6
 8007d56:	d0bf      	beq.n	8007cd8 <rint+0x70>
 8007d58:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007d5c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007d60:	bf1f      	itttt	ne
 8007d62:	ea24 0101 	bicne.w	r1, r4, r1
 8007d66:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007d6a:	fa44 f202 	asrne.w	r2, r4, r2
 8007d6e:	ea41 0402 	orrne.w	r4, r1, r2
 8007d72:	e7cd      	b.n	8007d10 <rint+0xa8>
 8007d74:	08008330 	.word	0x08008330
 8007d78:	000fffff 	.word	0x000fffff
 8007d7c:	00000000 	.word	0x00000000

08007d80 <scalbn>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	ec55 4b10 	vmov	r4, r5, d0
 8007d86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	b99a      	cbnz	r2, 8007db8 <scalbn+0x38>
 8007d90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d94:	4323      	orrs	r3, r4
 8007d96:	d036      	beq.n	8007e06 <scalbn+0x86>
 8007d98:	4b39      	ldr	r3, [pc, #228]	; (8007e80 <scalbn+0x100>)
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	ee10 0a10 	vmov	r0, s0
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc49 	bl	8000638 <__aeabi_dmul>
 8007da6:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <scalbn+0x104>)
 8007da8:	429e      	cmp	r6, r3
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	da10      	bge.n	8007dd2 <scalbn+0x52>
 8007db0:	a32b      	add	r3, pc, #172	; (adr r3, 8007e60 <scalbn+0xe0>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	e03a      	b.n	8007e2e <scalbn+0xae>
 8007db8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007dbc:	428a      	cmp	r2, r1
 8007dbe:	d10c      	bne.n	8007dda <scalbn+0x5a>
 8007dc0:	ee10 2a10 	vmov	r2, s0
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa80 	bl	80002cc <__adddf3>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	e019      	b.n	8007e06 <scalbn+0x86>
 8007dd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	3a36      	subs	r2, #54	; 0x36
 8007dda:	4432      	add	r2, r6
 8007ddc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007de0:	428a      	cmp	r2, r1
 8007de2:	dd08      	ble.n	8007df6 <scalbn+0x76>
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	a120      	add	r1, pc, #128	; (adr r1, 8007e68 <scalbn+0xe8>)
 8007de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dec:	da1c      	bge.n	8007e28 <scalbn+0xa8>
 8007dee:	a120      	add	r1, pc, #128	; (adr r1, 8007e70 <scalbn+0xf0>)
 8007df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df4:	e018      	b.n	8007e28 <scalbn+0xa8>
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	dd08      	ble.n	8007e0c <scalbn+0x8c>
 8007dfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e06:	ec45 4b10 	vmov	d0, r4, r5
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e10:	da19      	bge.n	8007e46 <scalbn+0xc6>
 8007e12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e16:	429e      	cmp	r6, r3
 8007e18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007e1c:	dd0a      	ble.n	8007e34 <scalbn+0xb4>
 8007e1e:	a112      	add	r1, pc, #72	; (adr r1, 8007e68 <scalbn+0xe8>)
 8007e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e2      	bne.n	8007dee <scalbn+0x6e>
 8007e28:	a30f      	add	r3, pc, #60	; (adr r3, 8007e68 <scalbn+0xe8>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fc03 	bl	8000638 <__aeabi_dmul>
 8007e32:	e7cb      	b.n	8007dcc <scalbn+0x4c>
 8007e34:	a10a      	add	r1, pc, #40	; (adr r1, 8007e60 <scalbn+0xe0>)
 8007e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0b8      	beq.n	8007db0 <scalbn+0x30>
 8007e3e:	a10e      	add	r1, pc, #56	; (adr r1, 8007e78 <scalbn+0xf8>)
 8007e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e44:	e7b4      	b.n	8007db0 <scalbn+0x30>
 8007e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e4a:	3236      	adds	r2, #54	; 0x36
 8007e4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e54:	4620      	mov	r0, r4
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <scalbn+0x108>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	e7e8      	b.n	8007e2e <scalbn+0xae>
 8007e5c:	f3af 8000 	nop.w
 8007e60:	c2f8f359 	.word	0xc2f8f359
 8007e64:	01a56e1f 	.word	0x01a56e1f
 8007e68:	8800759c 	.word	0x8800759c
 8007e6c:	7e37e43c 	.word	0x7e37e43c
 8007e70:	8800759c 	.word	0x8800759c
 8007e74:	fe37e43c 	.word	0xfe37e43c
 8007e78:	c2f8f359 	.word	0xc2f8f359
 8007e7c:	81a56e1f 	.word	0x81a56e1f
 8007e80:	43500000 	.word	0x43500000
 8007e84:	ffff3cb0 	.word	0xffff3cb0
 8007e88:	3c900000 	.word	0x3c900000

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
